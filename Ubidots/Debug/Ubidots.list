
Ubidots.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bbc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08009d4c  08009d4c  00019d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f18  08009f18  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009f18  08009f18  00019f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f20  08009f20  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f20  08009f20  00019f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f24  08009f24  00019f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009f28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008f8  20000090  08009fb8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000988  08009fb8  00020988  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002297a  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004424  00000000  00000000  00042a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a8  00000000  00000000  00046e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001638  00000000  00000000  00048608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002590f  00000000  00000000  00049c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f096  00000000  00000000  0006f54f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d65d4  00000000  00000000  0008e5e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00164bb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006880  00000000  00000000  00164c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009d34 	.word	0x08009d34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08009d34 	.word	0x08009d34

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <set_gpio_output>:
#include "dht22.h"
uint8_t check = 0;
GPIO_InitTypeDef GPIO_InitStruct;

void set_gpio_output(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	/*Configure GPIO pin output: PE0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <set_gpio_output+0x24>)
 800057e:	2201      	movs	r2, #1
 8000580:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <set_gpio_output+0x24>)
 8000584:	2201      	movs	r2, #1
 8000586:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000588:	4b04      	ldr	r3, [pc, #16]	; (800059c <set_gpio_output+0x24>)
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800058e:	4903      	ldr	r1, [pc, #12]	; (800059c <set_gpio_output+0x24>)
 8000590:	4803      	ldr	r0, [pc, #12]	; (80005a0 <set_gpio_output+0x28>)
 8000592:	f001 fbc3 	bl	8001d1c <HAL_GPIO_Init>
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	200000c0 	.word	0x200000c0
 80005a0:	40021000 	.word	0x40021000

080005a4 <set_gpio_input>:
void set_gpio_input(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	/*Configure GPIO pin input: PE0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005a8:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <set_gpio_input+0x24>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <set_gpio_input+0x24>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <set_gpio_input+0x24>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005ba:	4903      	ldr	r1, [pc, #12]	; (80005c8 <set_gpio_input+0x24>)
 80005bc:	4803      	ldr	r0, [pc, #12]	; (80005cc <set_gpio_input+0x28>)
 80005be:	f001 fbad 	bl	8001d1c <HAL_GPIO_Init>
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200000c0 	.word	0x200000c0
 80005cc:	40021000 	.word	0x40021000

080005d0 <DHT22_start>:
void DHT22_start(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	set_gpio_output();   // set the pin as output
 80005d4:	f7ff ffd0 	bl	8000578 <set_gpio_output>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, 0);    // pull the pin low
 80005d8:	2200      	movs	r2, #0
 80005da:	2101      	movs	r1, #1
 80005dc:	4809      	ldr	r0, [pc, #36]	; (8000604 <DHT22_start+0x34>)
 80005de:	f001 fd51 	bl	8002084 <HAL_GPIO_WritePin>
	Delay_us(500);    // wait for 500us
 80005e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005e6:	f000 f897 	bl	8000718 <Delay_us>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, 1);    // pull the pin high
 80005ea:	2201      	movs	r2, #1
 80005ec:	2101      	movs	r1, #1
 80005ee:	4805      	ldr	r0, [pc, #20]	; (8000604 <DHT22_start+0x34>)
 80005f0:	f001 fd48 	bl	8002084 <HAL_GPIO_WritePin>
	Delay_us(30);    // wait for 30us
 80005f4:	201e      	movs	r0, #30
 80005f6:	f000 f88f 	bl	8000718 <Delay_us>
	set_gpio_input();    // set as input
 80005fa:	f7ff ffd3 	bl	80005a4 <set_gpio_input>
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40021000 	.word	0x40021000

08000608 <check_response>:
void check_response(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	Delay_us(40);
 800060c:	2028      	movs	r0, #40	; 0x28
 800060e:	f000 f883 	bl	8000718 <Delay_us>
	if (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0)))
 8000612:	2101      	movs	r1, #1
 8000614:	480e      	ldr	r0, [pc, #56]	; (8000650 <check_response+0x48>)
 8000616:	f001 fd1d 	bl	8002054 <HAL_GPIO_ReadPin>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d10c      	bne.n	800063a <check_response+0x32>
	{
		Delay_us(80);
 8000620:	2050      	movs	r0, #80	; 0x50
 8000622:	f000 f879 	bl	8000718 <Delay_us>
		if ((HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0))) check = 1;
 8000626:	2101      	movs	r1, #1
 8000628:	4809      	ldr	r0, [pc, #36]	; (8000650 <check_response+0x48>)
 800062a:	f001 fd13 	bl	8002054 <HAL_GPIO_ReadPin>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d002      	beq.n	800063a <check_response+0x32>
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <check_response+0x4c>)
 8000636:	2201      	movs	r2, #1
 8000638:	701a      	strb	r2, [r3, #0]
	}
	while ((HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0))) ;   // wait for the pin to go low
 800063a:	bf00      	nop
 800063c:	2101      	movs	r1, #1
 800063e:	4804      	ldr	r0, [pc, #16]	; (8000650 <check_response+0x48>)
 8000640:	f001 fd08 	bl	8002054 <HAL_GPIO_ReadPin>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d1f8      	bne.n	800063c <check_response+0x34>
}
 800064a:	bf00      	nop
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40021000 	.word	0x40021000
 8000654:	200000ac 	.word	0x200000ac

08000658 <read_data>:
uint8_t read_data(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++)
 800065e:	2300      	movs	r3, #0
 8000660:	71bb      	strb	r3, [r7, #6]
 8000662:	e037      	b.n	80006d4 <read_data+0x7c>
	{
		while (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0))) ;   // wait for the pin to go high
 8000664:	bf00      	nop
 8000666:	2101      	movs	r1, #1
 8000668:	481e      	ldr	r0, [pc, #120]	; (80006e4 <read_data+0x8c>)
 800066a:	f001 fcf3 	bl	8002054 <HAL_GPIO_ReadPin>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d0f8      	beq.n	8000666 <read_data+0xe>
		Delay_us(40);    // wait for 40 us
 8000674:	2028      	movs	r0, #40	; 0x28
 8000676:	f000 f84f 	bl	8000718 <Delay_us>
		if((HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0)) == 0)   // if the pin is low 
 800067a:	2101      	movs	r1, #1
 800067c:	4819      	ldr	r0, [pc, #100]	; (80006e4 <read_data+0x8c>)
 800067e:	f001 fce9 	bl	8002054 <HAL_GPIO_ReadPin>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d10e      	bne.n	80006a6 <read_data+0x4e>
		{
			i &= ~(1 << (7 - j));    // write 0
 8000688:	79bb      	ldrb	r3, [r7, #6]
 800068a:	f1c3 0307 	rsb	r3, r3, #7
 800068e:	2201      	movs	r2, #1
 8000690:	fa02 f303 	lsl.w	r3, r2, r3
 8000694:	b25b      	sxtb	r3, r3
 8000696:	43db      	mvns	r3, r3
 8000698:	b25a      	sxtb	r2, r3
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	4013      	ands	r3, r2
 80006a0:	b25b      	sxtb	r3, r3
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	e00b      	b.n	80006be <read_data+0x66>
		}
		else i |= (1 << (7 - j));   // if the pin is high, write 1
 80006a6:	79bb      	ldrb	r3, [r7, #6]
 80006a8:	f1c3 0307 	rsb	r3, r3, #7
 80006ac:	2201      	movs	r2, #1
 80006ae:	fa02 f303 	lsl.w	r3, r2, r3
 80006b2:	b25a      	sxtb	r2, r3
 80006b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b8:	4313      	orrs	r3, r2
 80006ba:	b25b      	sxtb	r3, r3
 80006bc:	71fb      	strb	r3, [r7, #7]
		while((HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0)));   // wait for the pin to go low
 80006be:	bf00      	nop
 80006c0:	2101      	movs	r1, #1
 80006c2:	4808      	ldr	r0, [pc, #32]	; (80006e4 <read_data+0x8c>)
 80006c4:	f001 fcc6 	bl	8002054 <HAL_GPIO_ReadPin>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d1f8      	bne.n	80006c0 <read_data+0x68>
	for (j = 0; j < 8; j++)
 80006ce:	79bb      	ldrb	r3, [r7, #6]
 80006d0:	3301      	adds	r3, #1
 80006d2:	71bb      	strb	r3, [r7, #6]
 80006d4:	79bb      	ldrb	r3, [r7, #6]
 80006d6:	2b07      	cmp	r3, #7
 80006d8:	d9c4      	bls.n	8000664 <read_data+0xc>
	}
	return i;
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	4618      	mov	r0, r3
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40021000 	.word	0x40021000

080006e8 <PrintString>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PrintString(char * string)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	int length;
	length = (int)strlen(string);
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f7ff fd6d 	bl	80001d0 <strlen>
 80006f6:	4603      	mov	r3, r0
 80006f8:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t *)string, length, 0xffff);
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	4803      	ldr	r0, [pc, #12]	; (8000714 <PrintString+0x2c>)
 8000706:	f005 f96e 	bl	80059e6 <HAL_UART_Transmit>
}
 800070a:	bf00      	nop
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	2000020c 	.word	0x2000020c

08000718 <Delay_us>:
void Delay_us(uint16_t usec)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim9, 0);
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <Delay_us+0x30>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2200      	movs	r2, #0
 8000728:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim9) < usec * 2) ;
 800072a:	bf00      	nop
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <Delay_us+0x30>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000732:	88fa      	ldrh	r2, [r7, #6]
 8000734:	0052      	lsls	r2, r2, #1
 8000736:	4293      	cmp	r3, r2
 8000738:	d3f8      	bcc.n	800072c <Delay_us+0x14>
}
 800073a:	bf00      	nop
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	2000016c 	.word	0x2000016c

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000750:	f001 f93c 	bl	80019cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000754:	f000 f826 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000758:	f000 f9c8 	bl	8000aec <MX_GPIO_Init>
  MX_I2C1_Init();
 800075c:	f000 f8a4 	bl	80008a8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000760:	f000 f8d0 	bl	8000904 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000764:	f000 f8fe 	bl	8000964 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000768:	f008 fb54 	bl	8008e14 <MX_USB_HOST_Init>
  MX_TIM9_Init();
 800076c:	f000 f930 	bl	80009d0 <MX_TIM9_Init>
  MX_USART2_UART_Init();
 8000770:	f000 f968 	bl	8000a44 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000774:	f000 f990 	bl	8000a98 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  if (HAL_TIM_Base_Start(&htim9) != HAL_OK)
 8000778:	4808      	ldr	r0, [pc, #32]	; (800079c <main+0x50>)
 800077a:	f004 fe7d 	bl	8005478 <HAL_TIM_Base_Start>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <main+0x3c>
  {
	  Error_Handler();
 8000784:	f000 fab0 	bl	8000ce8 <Error_Handler>
  }
  PrintString("Hello Cortex-M\n\r");
 8000788:	4805      	ldr	r0, [pc, #20]	; (80007a0 <main+0x54>)
 800078a:	f7ff ffad 	bl	80006e8 <PrintString>
  WifiSetup();
 800078e:	f000 fdd3 	bl	8001338 <WifiSetup>
  WifiUbidots();
 8000792:	f000 ff8f 	bl	80016b4 <WifiUbidots>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000796:	f008 fb63 	bl	8008e60 <MX_USB_HOST_Process>
 800079a:	e7fc      	b.n	8000796 <main+0x4a>
 800079c:	2000016c 	.word	0x2000016c
 80007a0:	08009d4c 	.word	0x08009d4c

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b098      	sub	sp, #96	; 0x60
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007ae:	2230      	movs	r2, #48	; 0x30
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f008 fe70 	bl	8009498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	4b31      	ldr	r3, [pc, #196]	; (80008a0 <SystemClock_Config+0xfc>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	4a30      	ldr	r2, [pc, #192]	; (80008a0 <SystemClock_Config+0xfc>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e4:	6413      	str	r3, [r2, #64]	; 0x40
 80007e6:	4b2e      	ldr	r3, [pc, #184]	; (80008a0 <SystemClock_Config+0xfc>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b2b      	ldr	r3, [pc, #172]	; (80008a4 <SystemClock_Config+0x100>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a2a      	ldr	r2, [pc, #168]	; (80008a4 <SystemClock_Config+0x100>)
 80007fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000800:	6013      	str	r3, [r2, #0]
 8000802:	4b28      	ldr	r3, [pc, #160]	; (80008a4 <SystemClock_Config+0x100>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800080e:	2301      	movs	r3, #1
 8000810:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000812:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000816:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000818:	2302      	movs	r3, #2
 800081a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000820:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000822:	2308      	movs	r3, #8
 8000824:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000826:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800082a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082c:	2302      	movs	r3, #2
 800082e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000830:	2307      	movs	r3, #7
 8000832:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000834:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000838:	4618      	mov	r0, r3
 800083a:	f003 ff91 	bl	8004760 <HAL_RCC_OscConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000844:	f000 fa50 	bl	8000ce8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000848:	230f      	movs	r3, #15
 800084a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084c:	2302      	movs	r3, #2
 800084e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000854:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800085a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	2105      	movs	r1, #5
 8000866:	4618      	mov	r0, r3
 8000868:	f004 f9f2 	bl	8004c50 <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000872:	f000 fa39 	bl	8000ce8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000876:	2301      	movs	r3, #1
 8000878:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800087a:	23c0      	movs	r3, #192	; 0xc0
 800087c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800087e:	2302      	movs	r3, #2
 8000880:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	4618      	mov	r0, r3
 8000888:	f004 fbde 	bl	8005048 <HAL_RCCEx_PeriphCLKConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000892:	f000 fa29 	bl	8000ce8 <Error_Handler>
  }
}
 8000896:	bf00      	nop
 8000898:	3760      	adds	r7, #96	; 0x60
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40007000 	.word	0x40007000

080008a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008ae:	4a13      	ldr	r2, [pc, #76]	; (80008fc <MX_I2C1_Init+0x54>)
 80008b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008b4:	4a12      	ldr	r2, [pc, #72]	; (8000900 <MX_I2C1_Init+0x58>)
 80008b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008e6:	f003 f957 	bl	8003b98 <HAL_I2C_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008f0:	f000 f9fa 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000118 	.word	0x20000118
 80008fc:	40005400 	.word	0x40005400
 8000900:	000186a0 	.word	0x000186a0

08000904 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000908:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_I2S3_Init+0x54>)
 800090a:	4a14      	ldr	r2, [pc, #80]	; (800095c <MX_I2S3_Init+0x58>)
 800090c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <MX_I2S3_Init+0x54>)
 8000910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000914:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <MX_I2S3_Init+0x54>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800091c:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_I2S3_Init+0x54>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <MX_I2S3_Init+0x54>)
 8000924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000928:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_I2S3_Init+0x54>)
 800092c:	4a0c      	ldr	r2, [pc, #48]	; (8000960 <MX_I2S3_Init+0x5c>)
 800092e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_I2S3_Init+0x54>)
 8000932:	2200      	movs	r2, #0
 8000934:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_I2S3_Init+0x54>)
 8000938:	2200      	movs	r2, #0
 800093a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_I2S3_Init+0x54>)
 800093e:	2200      	movs	r2, #0
 8000940:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_I2S3_Init+0x54>)
 8000944:	f003 fa6c 	bl	8003e20 <HAL_I2S_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800094e:	f000 f9cb 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000250 	.word	0x20000250
 800095c:	40003c00 	.word	0x40003c00
 8000960:	00017700 	.word	0x00017700

08000964 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000968:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <MX_SPI1_Init+0x64>)
 800096a:	4a18      	ldr	r2, [pc, #96]	; (80009cc <MX_SPI1_Init+0x68>)
 800096c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800096e:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <MX_SPI1_Init+0x64>)
 8000970:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000974:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_SPI1_Init+0x64>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_SPI1_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_SPI1_Init+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_SPI1_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_SPI1_Init+0x64>)
 8000990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000994:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_SPI1_Init+0x64>)
 8000998:	2200      	movs	r2, #0
 800099a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800099c:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <MX_SPI1_Init+0x64>)
 800099e:	2200      	movs	r2, #0
 80009a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_SPI1_Init+0x64>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a8:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <MX_SPI1_Init+0x64>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_SPI1_Init+0x64>)
 80009b0:	220a      	movs	r2, #10
 80009b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009b4:	4804      	ldr	r0, [pc, #16]	; (80009c8 <MX_SPI1_Init+0x64>)
 80009b6:	f004 fc87 	bl	80052c8 <HAL_SPI_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009c0:	f000 f992 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200001b4 	.word	0x200001b4
 80009cc:	40013000 	.word	0x40013000

080009d0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d6:	463b      	mov	r3, r7
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80009e2:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <MX_TIM9_Init+0x6c>)
 80009e4:	4a16      	ldr	r2, [pc, #88]	; (8000a40 <MX_TIM9_Init+0x70>)
 80009e6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 84;
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <MX_TIM9_Init+0x6c>)
 80009ea:	2254      	movs	r2, #84	; 0x54
 80009ec:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <MX_TIM9_Init+0x6c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 0xFFFF;
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_TIM9_Init+0x6c>)
 80009f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009fa:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_TIM9_Init+0x6c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_TIM9_Init+0x6c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <MX_TIM9_Init+0x6c>)
 8000a0a:	f004 fce6 	bl	80053da <HAL_TIM_Base_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8000a14:	f000 f968 	bl	8000ce8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000a1e:	463b      	mov	r3, r7
 8000a20:	4619      	mov	r1, r3
 8000a22:	4806      	ldr	r0, [pc, #24]	; (8000a3c <MX_TIM9_Init+0x6c>)
 8000a24:	f004 fd90 	bl	8005548 <HAL_TIM_ConfigClockSource>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8000a2e:	f000 f95b 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	2000016c 	.word	0x2000016c
 8000a40:	40014000 	.word	0x40014000

08000a44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a4a:	4a12      	ldr	r2, [pc, #72]	; (8000a94 <MX_USART2_UART_Init+0x50>)
 8000a4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_USART2_UART_Init+0x4c>)
 8000a7c:	f004 ff66 	bl	800594c <HAL_UART_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a86:	f000 f92f 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	2000020c 	.word	0x2000020c
 8000a94:	40004400 	.word	0x40004400

08000a98 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <MX_USART3_UART_Init+0x50>)
 8000aa0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000aa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000abe:	220c      	movs	r2, #12
 8000ac0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_USART3_UART_Init+0x4c>)
 8000ad0:	f004 ff3c 	bl	800594c <HAL_UART_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ada:	f000 f905 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200000d4 	.word	0x200000d4
 8000ae8:	40004800 	.word	0x40004800

08000aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08c      	sub	sp, #48	; 0x30
 8000af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	61bb      	str	r3, [r7, #24]
 8000b06:	4b72      	ldr	r3, [pc, #456]	; (8000cd0 <MX_GPIO_Init+0x1e4>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a71      	ldr	r2, [pc, #452]	; (8000cd0 <MX_GPIO_Init+0x1e4>)
 8000b0c:	f043 0310 	orr.w	r3, r3, #16
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b6f      	ldr	r3, [pc, #444]	; (8000cd0 <MX_GPIO_Init+0x1e4>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0310 	and.w	r3, r3, #16
 8000b1a:	61bb      	str	r3, [r7, #24]
 8000b1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	4b6b      	ldr	r3, [pc, #428]	; (8000cd0 <MX_GPIO_Init+0x1e4>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a6a      	ldr	r2, [pc, #424]	; (8000cd0 <MX_GPIO_Init+0x1e4>)
 8000b28:	f043 0304 	orr.w	r3, r3, #4
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b68      	ldr	r3, [pc, #416]	; (8000cd0 <MX_GPIO_Init+0x1e4>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	4b64      	ldr	r3, [pc, #400]	; (8000cd0 <MX_GPIO_Init+0x1e4>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a63      	ldr	r2, [pc, #396]	; (8000cd0 <MX_GPIO_Init+0x1e4>)
 8000b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b61      	ldr	r3, [pc, #388]	; (8000cd0 <MX_GPIO_Init+0x1e4>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	4b5d      	ldr	r3, [pc, #372]	; (8000cd0 <MX_GPIO_Init+0x1e4>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a5c      	ldr	r2, [pc, #368]	; (8000cd0 <MX_GPIO_Init+0x1e4>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b5a      	ldr	r3, [pc, #360]	; (8000cd0 <MX_GPIO_Init+0x1e4>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	4b56      	ldr	r3, [pc, #344]	; (8000cd0 <MX_GPIO_Init+0x1e4>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a55      	ldr	r2, [pc, #340]	; (8000cd0 <MX_GPIO_Init+0x1e4>)
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b53      	ldr	r3, [pc, #332]	; (8000cd0 <MX_GPIO_Init+0x1e4>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b4f      	ldr	r3, [pc, #316]	; (8000cd0 <MX_GPIO_Init+0x1e4>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a4e      	ldr	r2, [pc, #312]	; (8000cd0 <MX_GPIO_Init+0x1e4>)
 8000b98:	f043 0308 	orr.w	r3, r3, #8
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b4c      	ldr	r3, [pc, #304]	; (8000cd0 <MX_GPIO_Init+0x1e4>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0308 	and.w	r3, r3, #8
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2108      	movs	r1, #8
 8000bae:	4849      	ldr	r0, [pc, #292]	; (8000cd4 <MX_GPIO_Init+0x1e8>)
 8000bb0:	f001 fa68 	bl	8002084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	4847      	ldr	r0, [pc, #284]	; (8000cd8 <MX_GPIO_Init+0x1ec>)
 8000bba:	f001 fa63 	bl	8002084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000bc4:	4845      	ldr	r0, [pc, #276]	; (8000cdc <MX_GPIO_Init+0x1f0>)
 8000bc6:	f001 fa5d 	bl	8002084 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000bca:	2308      	movs	r3, #8
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	4619      	mov	r1, r3
 8000be0:	483c      	ldr	r0, [pc, #240]	; (8000cd4 <MX_GPIO_Init+0x1e8>)
 8000be2:	f001 f89b 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000be6:	2301      	movs	r3, #1
 8000be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bea:	2301      	movs	r3, #1
 8000bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4836      	ldr	r0, [pc, #216]	; (8000cd8 <MX_GPIO_Init+0x1ec>)
 8000bfe:	f001 f88d 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c02:	2308      	movs	r3, #8
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c12:	2305      	movs	r3, #5
 8000c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f107 031c 	add.w	r3, r7, #28
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	482e      	ldr	r0, [pc, #184]	; (8000cd8 <MX_GPIO_Init+0x1ec>)
 8000c1e:	f001 f87d 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c22:	2301      	movs	r3, #1
 8000c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c26:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 031c 	add.w	r3, r7, #28
 8000c34:	4619      	mov	r1, r3
 8000c36:	482a      	ldr	r0, [pc, #168]	; (8000ce0 <MX_GPIO_Init+0x1f4>)
 8000c38:	f001 f870 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c40:	2300      	movs	r3, #0
 8000c42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4825      	ldr	r0, [pc, #148]	; (8000ce4 <MX_GPIO_Init+0x1f8>)
 8000c50:	f001 f864 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c66:	2305      	movs	r3, #5
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	4619      	mov	r1, r3
 8000c70:	481c      	ldr	r0, [pc, #112]	; (8000ce4 <MX_GPIO_Init+0x1f8>)
 8000c72:	f001 f853 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c76:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000c7a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c88:	f107 031c 	add.w	r3, r7, #28
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4813      	ldr	r0, [pc, #76]	; (8000cdc <MX_GPIO_Init+0x1f0>)
 8000c90:	f001 f844 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c94:	2320      	movs	r3, #32
 8000c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480d      	ldr	r0, [pc, #52]	; (8000cdc <MX_GPIO_Init+0x1f0>)
 8000ca8:	f001 f838 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000cac:	2302      	movs	r3, #2
 8000cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cb0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4804      	ldr	r0, [pc, #16]	; (8000cd4 <MX_GPIO_Init+0x1e8>)
 8000cc2:	f001 f82b 	bl	8001d1c <HAL_GPIO_Init>

}
 8000cc6:	bf00      	nop
 8000cc8:	3730      	adds	r7, #48	; 0x30
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40020800 	.word	0x40020800
 8000cdc:	40020c00 	.word	0x40020c00
 8000ce0:	40020000 	.word	0x40020000
 8000ce4:	40020400 	.word	0x40020400

08000ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cec:	b672      	cpsid	i
}
 8000cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <Error_Handler+0x8>
	...

08000cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <HAL_MspInit+0x4c>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	4a0f      	ldr	r2, [pc, #60]	; (8000d40 <HAL_MspInit+0x4c>)
 8000d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d08:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <HAL_MspInit+0x4c>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	603b      	str	r3, [r7, #0]
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <HAL_MspInit+0x4c>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	4a08      	ldr	r2, [pc, #32]	; (8000d40 <HAL_MspInit+0x4c>)
 8000d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d24:	6413      	str	r3, [r2, #64]	; 0x40
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_MspInit+0x4c>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d32:	2007      	movs	r0, #7
 8000d34:	f000 ffb0 	bl	8001c98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40023800 	.word	0x40023800

08000d44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a19      	ldr	r2, [pc, #100]	; (8000dc8 <HAL_I2C_MspInit+0x84>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d12c      	bne.n	8000dc0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <HAL_I2C_MspInit+0x88>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a17      	ldr	r2, [pc, #92]	; (8000dcc <HAL_I2C_MspInit+0x88>)
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_I2C_MspInit+0x88>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d82:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d88:	2312      	movs	r3, #18
 8000d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d94:	2304      	movs	r3, #4
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <HAL_I2C_MspInit+0x8c>)
 8000da0:	f000 ffbc 	bl	8001d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <HAL_I2C_MspInit+0x88>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <HAL_I2C_MspInit+0x88>)
 8000dae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000db2:	6413      	str	r3, [r2, #64]	; 0x40
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <HAL_I2C_MspInit+0x88>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dc0:	bf00      	nop
 8000dc2:	3728      	adds	r7, #40	; 0x28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40005400 	.word	0x40005400
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020400 	.word	0x40020400

08000dd4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a28      	ldr	r2, [pc, #160]	; (8000e94 <HAL_I2S_MspInit+0xc0>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d14a      	bne.n	8000e8c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	4b27      	ldr	r3, [pc, #156]	; (8000e98 <HAL_I2S_MspInit+0xc4>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	4a26      	ldr	r2, [pc, #152]	; (8000e98 <HAL_I2S_MspInit+0xc4>)
 8000e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
 8000e06:	4b24      	ldr	r3, [pc, #144]	; (8000e98 <HAL_I2S_MspInit+0xc4>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	4b20      	ldr	r3, [pc, #128]	; (8000e98 <HAL_I2S_MspInit+0xc4>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a1f      	ldr	r2, [pc, #124]	; (8000e98 <HAL_I2S_MspInit+0xc4>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <HAL_I2S_MspInit+0xc4>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <HAL_I2S_MspInit+0xc4>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a18      	ldr	r2, [pc, #96]	; (8000e98 <HAL_I2S_MspInit+0xc4>)
 8000e38:	f043 0304 	orr.w	r3, r3, #4
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <HAL_I2S_MspInit+0xc4>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0304 	and.w	r3, r3, #4
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e4a:	2310      	movs	r3, #16
 8000e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e5a:	2306      	movs	r3, #6
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	480d      	ldr	r0, [pc, #52]	; (8000e9c <HAL_I2S_MspInit+0xc8>)
 8000e66:	f000 ff59 	bl	8001d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e6a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e7c:	2306      	movs	r3, #6
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <HAL_I2S_MspInit+0xcc>)
 8000e88:	f000 ff48 	bl	8001d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e8c:	bf00      	nop
 8000e8e:	3728      	adds	r7, #40	; 0x28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40003c00 	.word	0x40003c00
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	40020800 	.word	0x40020800

08000ea4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a19      	ldr	r2, [pc, #100]	; (8000f28 <HAL_SPI_MspInit+0x84>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d12b      	bne.n	8000f1e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <HAL_SPI_MspInit+0x88>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	4a17      	ldr	r2, [pc, #92]	; (8000f2c <HAL_SPI_MspInit+0x88>)
 8000ed0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <HAL_SPI_MspInit+0x88>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <HAL_SPI_MspInit+0x88>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a10      	ldr	r2, [pc, #64]	; (8000f2c <HAL_SPI_MspInit+0x88>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_SPI_MspInit+0x88>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000efe:	23e0      	movs	r3, #224	; 0xe0
 8000f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f0e:	2305      	movs	r3, #5
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	4805      	ldr	r0, [pc, #20]	; (8000f30 <HAL_SPI_MspInit+0x8c>)
 8000f1a:	f000 feff 	bl	8001d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f1e:	bf00      	nop
 8000f20:	3728      	adds	r7, #40	; 0x28
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40013000 	.word	0x40013000
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40020000 	.word	0x40020000

08000f34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <HAL_TIM_Base_MspInit+0x3c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d10d      	bne.n	8000f62 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <HAL_TIM_Base_MspInit+0x40>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	4a09      	ldr	r2, [pc, #36]	; (8000f74 <HAL_TIM_Base_MspInit+0x40>)
 8000f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f54:	6453      	str	r3, [r2, #68]	; 0x44
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <HAL_TIM_Base_MspInit+0x40>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8000f62:	bf00      	nop
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40014000 	.word	0x40014000
 8000f74:	40023800 	.word	0x40023800

08000f78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08c      	sub	sp, #48	; 0x30
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a42      	ldr	r2, [pc, #264]	; (80010a0 <HAL_UART_MspInit+0x128>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d12c      	bne.n	8000ff4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
 8000f9e:	4b41      	ldr	r3, [pc, #260]	; (80010a4 <HAL_UART_MspInit+0x12c>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	4a40      	ldr	r2, [pc, #256]	; (80010a4 <HAL_UART_MspInit+0x12c>)
 8000fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000faa:	4b3e      	ldr	r3, [pc, #248]	; (80010a4 <HAL_UART_MspInit+0x12c>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb2:	61bb      	str	r3, [r7, #24]
 8000fb4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	4b3a      	ldr	r3, [pc, #232]	; (80010a4 <HAL_UART_MspInit+0x12c>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a39      	ldr	r2, [pc, #228]	; (80010a4 <HAL_UART_MspInit+0x12c>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b37      	ldr	r3, [pc, #220]	; (80010a4 <HAL_UART_MspInit+0x12c>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fd2:	230c      	movs	r3, #12
 8000fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fe2:	2307      	movs	r3, #7
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	4619      	mov	r1, r3
 8000fec:	482e      	ldr	r0, [pc, #184]	; (80010a8 <HAL_UART_MspInit+0x130>)
 8000fee:	f000 fe95 	bl	8001d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ff2:	e050      	b.n	8001096 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a2c      	ldr	r2, [pc, #176]	; (80010ac <HAL_UART_MspInit+0x134>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d14b      	bne.n	8001096 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <HAL_UART_MspInit+0x12c>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	4a27      	ldr	r2, [pc, #156]	; (80010a4 <HAL_UART_MspInit+0x12c>)
 8001008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800100c:	6413      	str	r3, [r2, #64]	; 0x40
 800100e:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <HAL_UART_MspInit+0x12c>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <HAL_UART_MspInit+0x12c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a20      	ldr	r2, [pc, #128]	; (80010a4 <HAL_UART_MspInit+0x12c>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <HAL_UART_MspInit+0x12c>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <HAL_UART_MspInit+0x12c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a19      	ldr	r2, [pc, #100]	; (80010a4 <HAL_UART_MspInit+0x12c>)
 8001040:	f043 0308 	orr.w	r3, r3, #8
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <HAL_UART_MspInit+0x12c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0308 	and.w	r3, r3, #8
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001052:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001064:	2307      	movs	r3, #7
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001068:	f107 031c 	add.w	r3, r7, #28
 800106c:	4619      	mov	r1, r3
 800106e:	4810      	ldr	r0, [pc, #64]	; (80010b0 <HAL_UART_MspInit+0x138>)
 8001070:	f000 fe54 	bl	8001d1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001074:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001082:	2303      	movs	r3, #3
 8001084:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001086:	2307      	movs	r3, #7
 8001088:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	4619      	mov	r1, r3
 8001090:	4808      	ldr	r0, [pc, #32]	; (80010b4 <HAL_UART_MspInit+0x13c>)
 8001092:	f000 fe43 	bl	8001d1c <HAL_GPIO_Init>
}
 8001096:	bf00      	nop
 8001098:	3730      	adds	r7, #48	; 0x30
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40004400 	.word	0x40004400
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40004800 	.word	0x40004800
 80010b0:	40020400 	.word	0x40020400
 80010b4:	40020c00 	.word	0x40020c00

080010b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <NMI_Handler+0x4>

080010be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <HardFault_Handler+0x4>

080010c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <MemManage_Handler+0x4>

080010ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <BusFault_Handler+0x4>

080010d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <UsageFault_Handler+0x4>

080010d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001104:	f000 fcb4 	bl	8001a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}

0800110c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001110:	4802      	ldr	r0, [pc, #8]	; (800111c <OTG_FS_IRQHandler+0x10>)
 8001112:	f001 fa3b 	bl	800258c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000674 	.word	0x20000674

08001120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001128:	4a14      	ldr	r2, [pc, #80]	; (800117c <_sbrk+0x5c>)
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <_sbrk+0x60>)
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001134:	4b13      	ldr	r3, [pc, #76]	; (8001184 <_sbrk+0x64>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d102      	bne.n	8001142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <_sbrk+0x64>)
 800113e:	4a12      	ldr	r2, [pc, #72]	; (8001188 <_sbrk+0x68>)
 8001140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <_sbrk+0x64>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	429a      	cmp	r2, r3
 800114e:	d207      	bcs.n	8001160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001150:	f008 f968 	bl	8009424 <__errno>
 8001154:	4603      	mov	r3, r0
 8001156:	220c      	movs	r2, #12
 8001158:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800115a:	f04f 33ff 	mov.w	r3, #4294967295
 800115e:	e009      	b.n	8001174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <_sbrk+0x64>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <_sbrk+0x64>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	4a05      	ldr	r2, [pc, #20]	; (8001184 <_sbrk+0x64>)
 8001170:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001172:	68fb      	ldr	r3, [r7, #12]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20020000 	.word	0x20020000
 8001180:	00000400 	.word	0x00000400
 8001184:	200000b0 	.word	0x200000b0
 8001188:	20000988 	.word	0x20000988

0800118c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <SystemInit+0x20>)
 8001192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001196:	4a05      	ldr	r2, [pc, #20]	; (80011ac <SystemInit+0x20>)
 8001198:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800119c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <my_itoa>:
extern UART_HandleTypeDef huart3;
#define UBIDOTS_TOKEN   "BBFF-cZwaJKFwTc362bLFQt6f80iqfwfmdx"
#define UBIDOTS_DEVICE  "STM32F407"

void my_itoa(uint32_t val, uint8_t* str, uint8_t len)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b087      	sub	sp, #28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	4613      	mov	r3, r2
 80011bc:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for (i = 1; i <= len; i++)
 80011be:	2301      	movs	r3, #1
 80011c0:	75fb      	strb	r3, [r7, #23]
 80011c2:	e01c      	b.n	80011fe <my_itoa+0x4e>
	{
		str[len - i] = (uint8_t)((val % 10UL) + '0');
 80011c4:	68f9      	ldr	r1, [r7, #12]
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <my_itoa+0x70>)
 80011c8:	fba3 2301 	umull	r2, r3, r3, r1
 80011cc:	08da      	lsrs	r2, r3, #3
 80011ce:	4613      	mov	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	1aca      	subs	r2, r1, r3
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	79f9      	ldrb	r1, [r7, #7]
 80011dc:	7dfb      	ldrb	r3, [r7, #23]
 80011de:	1acb      	subs	r3, r1, r3
 80011e0:	4619      	mov	r1, r3
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	440b      	add	r3, r1
 80011e6:	3230      	adds	r2, #48	; 0x30
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	701a      	strb	r2, [r3, #0]
		val /= 10;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4a0c      	ldr	r2, [pc, #48]	; (8001220 <my_itoa+0x70>)
 80011f0:	fba2 2303 	umull	r2, r3, r2, r3
 80011f4:	08db      	lsrs	r3, r3, #3
 80011f6:	60fb      	str	r3, [r7, #12]
	for (i = 1; i <= len; i++)
 80011f8:	7dfb      	ldrb	r3, [r7, #23]
 80011fa:	3301      	adds	r3, #1
 80011fc:	75fb      	strb	r3, [r7, #23]
 80011fe:	7dfa      	ldrb	r2, [r7, #23]
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	429a      	cmp	r2, r3
 8001204:	d9de      	bls.n	80011c4 <my_itoa+0x14>
	}
	str[i - 1] = '\0';
 8001206:	7dfb      	ldrb	r3, [r7, #23]
 8001208:	3b01      	subs	r3, #1
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	4413      	add	r3, r2
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
}
 8001212:	bf00      	nop
 8001214:	371c      	adds	r7, #28
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	cccccccd 	.word	0xcccccccd

08001224 <FloatToString>:
void FloatToString(uint8_t *str, float f, char size, char after_point) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001230:	460b      	mov	r3, r1
 8001232:	71fb      	strb	r3, [r7, #7]
 8001234:	4613      	mov	r3, r2
 8001236:	71bb      	strb	r3, [r7, #6]
	int count;
	uint8_t* curr;
	int value;
	
	size++; /* to include NULL */
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	3301      	adds	r3, #1
 800123c:	71fb      	strb	r3, [r7, #7]
	value = (int)f;
 800123e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001242:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001246:	ee17 3a90 	vmov	r3, s15
 800124a:	617b      	str	r3, [r7, #20]
	my_itoa(value, str, size-after_point-2);
 800124c:	6978      	ldr	r0, [r7, #20]
 800124e:	79fa      	ldrb	r2, [r7, #7]
 8001250:	79bb      	ldrb	r3, [r7, #6]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	b2db      	uxtb	r3, r3
 8001256:	3b02      	subs	r3, #2
 8001258:	b2db      	uxtb	r3, r3
 800125a:	461a      	mov	r2, r3
 800125c:	68f9      	ldr	r1, [r7, #12]
 800125e:	f7ff ffa7 	bl	80011b0 <my_itoa>
	count = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
	curr = str;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	61bb      	str	r3, [r7, #24]
	while (*curr != 0) {
 800126a:	e005      	b.n	8001278 <FloatToString+0x54>
		++count;
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	3301      	adds	r3, #1
 8001270:	61fb      	str	r3, [r7, #28]
		++curr;
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	3301      	adds	r3, #1
 8001276:	61bb      	str	r3, [r7, #24]
	while (*curr != 0) {
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1f5      	bne.n	800126c <FloatToString+0x48>
	}
 
	if (count + 1 >= size) {
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	429a      	cmp	r2, r3
 8001288:	db06      	blt.n	8001298 <FloatToString+0x74>
		str[size - 1] = 0;
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	3b01      	subs	r3, #1
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	4413      	add	r3, r2
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
		return;	
 8001296:	e04b      	b.n	8001330 <FloatToString+0x10c>
	}
 	
	str[count++] = '.';
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	1c5a      	adds	r2, r3, #1
 800129c:	61fa      	str	r2, [r7, #28]
 800129e:	461a      	mov	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4413      	add	r3, r2
 80012a4:	222e      	movs	r2, #46	; 0x2e
 80012a6:	701a      	strb	r2, [r3, #0]
	++curr;
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	3301      	adds	r3, #1
 80012ac:	61bb      	str	r3, [r7, #24]
	f = f - (float)value;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	ee07 3a90 	vmov	s15, r3
 80012b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b8:	ed97 7a02 	vldr	s14, [r7, #8]
 80012bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012c0:	edc7 7a02 	vstr	s15, [r7, #8]
 	
	while (count + 1 < size) {
 80012c4:	e00a      	b.n	80012dc <FloatToString+0xb8>
		f *= 10;
 80012c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80012ca:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80012ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d2:	edc7 7a02 	vstr	s15, [r7, #8]
		++count;	
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3301      	adds	r3, #1
 80012da:	61fb      	str	r3, [r7, #28]
	while (count + 1 < size) {
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	1c5a      	adds	r2, r3, #1
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	dbef      	blt.n	80012c6 <FloatToString+0xa2>
	}
 	
	value = (int)f;
 80012e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80012ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ee:	ee17 3a90 	vmov	r3, s15
 80012f2:	617b      	str	r3, [r7, #20]
	my_itoa(value, curr, after_point);
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	79ba      	ldrb	r2, [r7, #6]
 80012f8:	69b9      	ldr	r1, [r7, #24]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ff58 	bl	80011b0 <my_itoa>
	str[size - 1] = 0;
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	3b01      	subs	r3, #1
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	4413      	add	r3, r2
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]
	
	count = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
	while (*(str + count) == '0')
 8001310:	e007      	b.n	8001322 <FloatToString+0xfe>
	{
		*(str + count) = ' ';
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	4413      	add	r3, r2
 8001318:	2220      	movs	r2, #32
 800131a:	701a      	strb	r2, [r3, #0]
		count++;
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	3301      	adds	r3, #1
 8001320:	61fb      	str	r3, [r7, #28]
	while (*(str + count) == '0')
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	4413      	add	r3, r2
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b30      	cmp	r3, #48	; 0x30
 800132c:	d0f1      	beq.n	8001312 <FloatToString+0xee>
	}
	return;
 800132e:	bf00      	nop
}
 8001330:	3720      	adds	r7, #32
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <WifiSetup>:
 
void WifiSetup(void)
{
 8001338:	b5b0      	push	{r4, r5, r7, lr}
 800133a:	b0e6      	sub	sp, #408	; 0x198
 800133c:	af00      	add	r7, sp, #0
	uint8_t  string[200];
	uint8_t  buffer[200];
	int length;
	
	for (int i = 0; i < 200; i++)buffer[i] = ' ';	
 800133e:	2300      	movs	r3, #0
 8001340:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8001344:	e00a      	b.n	800135c <WifiSetup+0x24>
 8001346:	463a      	mov	r2, r7
 8001348:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800134c:	4413      	add	r3, r2
 800134e:	2220      	movs	r2, #32
 8001350:	701a      	strb	r2, [r3, #0]
 8001352:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001356:	3301      	adds	r3, #1
 8001358:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800135c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001360:	2bc7      	cmp	r3, #199	; 0xc7
 8001362:	ddf0      	ble.n	8001346 <WifiSetup+0xe>
	strcpy((char *)string, "AT+CWMODE=3");
 8001364:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001368:	4a53      	ldr	r2, [pc, #332]	; (80014b8 <WifiSetup+0x180>)
 800136a:	ca07      	ldmia	r2, {r0, r1, r2}
 800136c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	length = strlen((char *)string);
 8001370:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001374:	4618      	mov	r0, r3
 8001376:	f7fe ff2b 	bl	80001d0 <strlen>
 800137a:	4603      	mov	r3, r0
 800137c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	string[length] = 0x0D;
 8001380:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001384:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001388:	4413      	add	r3, r2
 800138a:	220d      	movs	r2, #13
 800138c:	701a      	strb	r2, [r3, #0]
	string[length + 1] = 0x0A;
 800138e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001392:	3301      	adds	r3, #1
 8001394:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8001398:	4413      	add	r3, r2
 800139a:	220a      	movs	r2, #10
 800139c:	f803 2cd0 	strb.w	r2, [r3, #-208]
	string[length + 2] = 0;
 80013a0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80013a4:	3302      	adds	r3, #2
 80013a6:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 80013aa:	4413      	add	r3, r2
 80013ac:	2200      	movs	r2, #0
 80013ae:	f803 2cd0 	strb.w	r2, [r3, #-208]
	HAL_UART_Transmit(&huart3, (uint8_t *)string, length + 2, 0xFFFF);	
 80013b2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	3302      	adds	r3, #2
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80013c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013c4:	483d      	ldr	r0, [pc, #244]	; (80014bc <WifiSetup+0x184>)
 80013c6:	f004 fb0e 	bl	80059e6 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, (uint8_t *)buffer, 100, 1000);  
 80013ca:	4639      	mov	r1, r7
 80013cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d0:	2264      	movs	r2, #100	; 0x64
 80013d2:	483a      	ldr	r0, [pc, #232]	; (80014bc <WifiSetup+0x184>)
 80013d4:	f004 fb99 	bl	8005b0a <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t *)buffer, 100, 0xFFFF);	
 80013d8:	4639      	mov	r1, r7
 80013da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013de:	2264      	movs	r2, #100	; 0x64
 80013e0:	4837      	ldr	r0, [pc, #220]	; (80014c0 <WifiSetup+0x188>)
 80013e2:	f004 fb00 	bl	80059e6 <HAL_UART_Transmit>
	string[0] = 0x0D;
 80013e6:	230d      	movs	r3, #13
 80013e8:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
	string[1] = 0x0A;
 80013ec:	230a      	movs	r3, #10
 80013ee:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
	HAL_UART_Transmit(&huart2, (uint8_t *)string, 2, 0xFFFF);	
 80013f2:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80013f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013fa:	2202      	movs	r2, #2
 80013fc:	4830      	ldr	r0, [pc, #192]	; (80014c0 <WifiSetup+0x188>)
 80013fe:	f004 faf2 	bl	80059e6 <HAL_UART_Transmit>
	
	strcpy((char *)string, (char *)"AT+CWJAP=\"HY-DORM5-1107\",\"residence1107\"");
 8001402:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001406:	4a2f      	ldr	r2, [pc, #188]	; (80014c4 <WifiSetup+0x18c>)
 8001408:	461c      	mov	r4, r3
 800140a:	4615      	mov	r5, r2
 800140c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800140e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001414:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001418:	c403      	stmia	r4!, {r0, r1}
 800141a:	7022      	strb	r2, [r4, #0]
	length = strlen((char *)string);
 800141c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001420:	4618      	mov	r0, r3
 8001422:	f7fe fed5 	bl	80001d0 <strlen>
 8001426:	4603      	mov	r3, r0
 8001428:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	string[length] = 0x0D;
 800142c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001430:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001434:	4413      	add	r3, r2
 8001436:	220d      	movs	r2, #13
 8001438:	701a      	strb	r2, [r3, #0]
	string[length + 1] = 0x0A;
 800143a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800143e:	3301      	adds	r3, #1
 8001440:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8001444:	4413      	add	r3, r2
 8001446:	220a      	movs	r2, #10
 8001448:	f803 2cd0 	strb.w	r2, [r3, #-208]
	string[length + 2] = 0;
 800144c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001450:	3302      	adds	r3, #2
 8001452:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8001456:	4413      	add	r3, r2
 8001458:	2200      	movs	r2, #0
 800145a:	f803 2cd0 	strb.w	r2, [r3, #-208]
	HAL_UART_Transmit(&huart3, (uint8_t *)string, length + 2, 0xFFFF);	
 800145e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001462:	b29b      	uxth	r3, r3
 8001464:	3302      	adds	r3, #2
 8001466:	b29a      	uxth	r2, r3
 8001468:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 800146c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001470:	4812      	ldr	r0, [pc, #72]	; (80014bc <WifiSetup+0x184>)
 8001472:	f004 fab8 	bl	80059e6 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, (uint8_t *)buffer, 100, 4000); 
 8001476:	4639      	mov	r1, r7
 8001478:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800147c:	2264      	movs	r2, #100	; 0x64
 800147e:	480f      	ldr	r0, [pc, #60]	; (80014bc <WifiSetup+0x184>)
 8001480:	f004 fb43 	bl	8005b0a <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t *)buffer, 100, 0xFFFF);	
 8001484:	4639      	mov	r1, r7
 8001486:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800148a:	2264      	movs	r2, #100	; 0x64
 800148c:	480c      	ldr	r0, [pc, #48]	; (80014c0 <WifiSetup+0x188>)
 800148e:	f004 faaa 	bl	80059e6 <HAL_UART_Transmit>
	string[0] = 0x0D;
 8001492:	230d      	movs	r3, #13
 8001494:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
	string[1] = 0x0A;
 8001498:	230a      	movs	r3, #10
 800149a:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
	HAL_UART_Transmit(&huart2, (uint8_t *)string, 2, 0xFFFF);
 800149e:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80014a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014a6:	2202      	movs	r2, #2
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <WifiSetup+0x188>)
 80014aa:	f004 fa9c 	bl	80059e6 <HAL_UART_Transmit>
}
 80014ae:	bf00      	nop
 80014b0:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bdb0      	pop	{r4, r5, r7, pc}
 80014b8:	08009d60 	.word	0x08009d60
 80014bc:	200000d4 	.word	0x200000d4
 80014c0:	2000020c 	.word	0x2000020c
 80014c4:	08009d6c 	.word	0x08009d6c

080014c8 <OpenUbidots>:
void OpenUbidots(void)
{
 80014c8:	b5b0      	push	{r4, r5, r7, lr}
 80014ca:	b0e8      	sub	sp, #416	; 0x1a0
 80014cc:	af00      	add	r7, sp, #0
	int length;
	int ret;
	
	do
	{
		for (int i = 0; i < 200; i++)buffer[i] = ' ';
 80014ce:	2300      	movs	r3, #0
 80014d0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80014d4:	e00a      	b.n	80014ec <OpenUbidots+0x24>
 80014d6:	1d3a      	adds	r2, r7, #4
 80014d8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80014dc:	4413      	add	r3, r2
 80014de:	2220      	movs	r2, #32
 80014e0:	701a      	strb	r2, [r3, #0]
 80014e2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80014e6:	3301      	adds	r3, #1
 80014e8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80014ec:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80014f0:	2bc7      	cmp	r3, #199	; 0xc7
 80014f2:	ddf0      	ble.n	80014d6 <OpenUbidots+0xe>
		strcpy((char *)string, (char *)"AT+CIPSTART=\"TCP\",\"things.ubidots.com\",80");
 80014f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014f8:	4a32      	ldr	r2, [pc, #200]	; (80015c4 <OpenUbidots+0xfc>)
 80014fa:	461c      	mov	r4, r3
 80014fc:	4615      	mov	r5, r2
 80014fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001506:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800150a:	c403      	stmia	r4!, {r0, r1}
 800150c:	8022      	strh	r2, [r4, #0]
		length = strlen((char *)string);
 800150e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001512:	4618      	mov	r0, r3
 8001514:	f7fe fe5c 	bl	80001d0 <strlen>
 8001518:	4603      	mov	r3, r0
 800151a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
		string[length] = 0x0D;
 800151e:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8001522:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001526:	4413      	add	r3, r2
 8001528:	220d      	movs	r2, #13
 800152a:	701a      	strb	r2, [r3, #0]
		string[length + 1] = 0x0A;
 800152c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001530:	3301      	adds	r3, #1
 8001532:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8001536:	4413      	add	r3, r2
 8001538:	220a      	movs	r2, #10
 800153a:	f803 2cd4 	strb.w	r2, [r3, #-212]
		string[length + 2] = 0;
 800153e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001542:	3302      	adds	r3, #2
 8001544:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8001548:	4413      	add	r3, r2
 800154a:	2200      	movs	r2, #0
 800154c:	f803 2cd4 	strb.w	r2, [r3, #-212]
		HAL_UART_Transmit(&huart3, (uint8_t *)string, length + 2, 0xFFFF);	
 8001550:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001554:	b29b      	uxth	r3, r3
 8001556:	3302      	adds	r3, #2
 8001558:	b29a      	uxth	r2, r3
 800155a:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 800155e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001562:	4819      	ldr	r0, [pc, #100]	; (80015c8 <OpenUbidots+0x100>)
 8001564:	f004 fa3f 	bl	80059e6 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart3, (uint8_t *)buffer, 100, 4000); 		
 8001568:	1d39      	adds	r1, r7, #4
 800156a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800156e:	2264      	movs	r2, #100	; 0x64
 8001570:	4815      	ldr	r0, [pc, #84]	; (80015c8 <OpenUbidots+0x100>)
 8001572:	f004 faca 	bl	8005b0a <HAL_UART_Receive>
		HAL_UART_Transmit(&huart2, (uint8_t *)buffer, 100, 0xFFFF);
 8001576:	1d39      	adds	r1, r7, #4
 8001578:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800157c:	2264      	movs	r2, #100	; 0x64
 800157e:	4813      	ldr	r0, [pc, #76]	; (80015cc <OpenUbidots+0x104>)
 8001580:	f004 fa31 	bl	80059e6 <HAL_UART_Transmit>
		string[0] = 0x0D;
 8001584:	230d      	movs	r3, #13
 8001586:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
		string[1] = 0x0A;
 800158a:	230a      	movs	r3, #10
 800158c:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
		HAL_UART_Transmit(&huart2, (uint8_t *)string, 2, 0xFFFF);
 8001590:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8001594:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001598:	2202      	movs	r2, #2
 800159a:	480c      	ldr	r0, [pc, #48]	; (80015cc <OpenUbidots+0x104>)
 800159c:	f004 fa23 	bl	80059e6 <HAL_UART_Transmit>
		ret = (int)strstr((char *)buffer, (char *)"CONNECT");
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	490b      	ldr	r1, [pc, #44]	; (80015d0 <OpenUbidots+0x108>)
 80015a4:	4618      	mov	r0, r3
 80015a6:	f008 f859 	bl	800965c <strstr>
 80015aa:	4603      	mov	r3, r0
 80015ac:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	} while (ret == 0);
 80015b0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d08a      	beq.n	80014ce <OpenUbidots+0x6>
}
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bdb0      	pop	{r4, r5, r7, pc}
 80015c4:	08009d98 	.word	0x08009d98
 80015c8:	200000d4 	.word	0x200000d4
 80015cc:	2000020c 	.word	0x2000020c
 80015d0:	08009dc4 	.word	0x08009dc4

080015d4 <CloseUbidots>:
void CloseUbidots(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b0e6      	sub	sp, #408	; 0x198
 80015d8:	af00      	add	r7, sp, #0
	uint8_t  string[200];
	uint8_t  buffer[200];
	int length;
	
	for (int i = 0; i < 200; i++)buffer[i] = ' ';
 80015da:	2300      	movs	r3, #0
 80015dc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80015e0:	e00a      	b.n	80015f8 <CloseUbidots+0x24>
 80015e2:	463a      	mov	r2, r7
 80015e4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80015e8:	4413      	add	r3, r2
 80015ea:	2220      	movs	r2, #32
 80015ec:	701a      	strb	r2, [r3, #0]
 80015ee:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80015f2:	3301      	adds	r3, #1
 80015f4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80015f8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80015fc:	2bc7      	cmp	r3, #199	; 0xc7
 80015fe:	ddf0      	ble.n	80015e2 <CloseUbidots+0xe>
	strcpy((char *)string, (char *)"AT+CIPCLOSE");
 8001600:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001604:	4a28      	ldr	r2, [pc, #160]	; (80016a8 <CloseUbidots+0xd4>)
 8001606:	ca07      	ldmia	r2, {r0, r1, r2}
 8001608:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	length = strlen((char *)string);
 800160c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe fddd 	bl	80001d0 <strlen>
 8001616:	4603      	mov	r3, r0
 8001618:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	string[length] = 0x0D;
 800161c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001620:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001624:	4413      	add	r3, r2
 8001626:	220d      	movs	r2, #13
 8001628:	701a      	strb	r2, [r3, #0]
	string[length + 1] = 0x0A;
 800162a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800162e:	3301      	adds	r3, #1
 8001630:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8001634:	4413      	add	r3, r2
 8001636:	220a      	movs	r2, #10
 8001638:	f803 2cd0 	strb.w	r2, [r3, #-208]
	string[length + 2] = 0;
 800163c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001640:	3302      	adds	r3, #2
 8001642:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8001646:	4413      	add	r3, r2
 8001648:	2200      	movs	r2, #0
 800164a:	f803 2cd0 	strb.w	r2, [r3, #-208]
	HAL_UART_Transmit(&huart3, (uint8_t *)string, length + 2, 0xFFFF);	
 800164e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001652:	b29b      	uxth	r3, r3
 8001654:	3302      	adds	r3, #2
 8001656:	b29a      	uxth	r2, r3
 8001658:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 800165c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001660:	4812      	ldr	r0, [pc, #72]	; (80016ac <CloseUbidots+0xd8>)
 8001662:	f004 f9c0 	bl	80059e6 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, (uint8_t *)buffer, 100, 4000); 		
 8001666:	4639      	mov	r1, r7
 8001668:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800166c:	2264      	movs	r2, #100	; 0x64
 800166e:	480f      	ldr	r0, [pc, #60]	; (80016ac <CloseUbidots+0xd8>)
 8001670:	f004 fa4b 	bl	8005b0a <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t *)buffer, 100, 0xFFFF);
 8001674:	4639      	mov	r1, r7
 8001676:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800167a:	2264      	movs	r2, #100	; 0x64
 800167c:	480c      	ldr	r0, [pc, #48]	; (80016b0 <CloseUbidots+0xdc>)
 800167e:	f004 f9b2 	bl	80059e6 <HAL_UART_Transmit>
	string[0] = 0x0D;
 8001682:	230d      	movs	r3, #13
 8001684:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
	string[1] = 0x0A;
 8001688:	230a      	movs	r3, #10
 800168a:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
	HAL_UART_Transmit(&huart2, (uint8_t *)string, 2, 0xFFFF);
 800168e:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001692:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001696:	2202      	movs	r2, #2
 8001698:	4805      	ldr	r0, [pc, #20]	; (80016b0 <CloseUbidots+0xdc>)
 800169a:	f004 f9a4 	bl	80059e6 <HAL_UART_Transmit>
}
 800169e:	bf00      	nop
 80016a0:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	08009dcc 	.word	0x08009dcc
 80016ac:	200000d4 	.word	0x200000d4
 80016b0:	2000020c 	.word	0x2000020c

080016b4 <WifiUbidots>:
void WifiUbidots(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	f6ad 2d28 	subw	sp, sp, #2600	; 0xa28
 80016ba:	af02      	add	r7, sp, #8
	char sendBuffer[256];
	uint8_t sendBufferLength;
	uint8_t sendBufferLengthString[5];
	char message[64];
	int length;
	float temp = 3.4; 		
 80016bc:	4ba4      	ldr	r3, [pc, #656]	; (8001950 <WifiUbidots+0x29c>)
 80016be:	f607 2214 	addw	r2, r7, #2580	; 0xa14
 80016c2:	6013      	str	r3, [r2, #0]
	float humid = 45.6;
 80016c4:	4ba3      	ldr	r3, [pc, #652]	; (8001954 <WifiUbidots+0x2a0>)
 80016c6:	f507 6221 	add.w	r2, r7, #2576	; 0xa10
 80016ca:	6013      	str	r3, [r2, #0]
	uint16_t RH, TEMP/*, sum*/;
	int ret;
	
	for (;;)
	{
		OpenUbidots();
 80016cc:	f7ff fefc 	bl	80014c8 <OpenUbidots>
		do
		{    
			DHT22_start();
 80016d0:	f7fe ff7e 	bl	80005d0 <DHT22_start>
			check_response();
 80016d4:	f7fe ff98 	bl	8000608 <check_response>
			Rh_byte1 = read_data();
 80016d8:	f7fe ffbe 	bl	8000658 <read_data>
 80016dc:	4603      	mov	r3, r0
 80016de:	f887 3a0f 	strb.w	r3, [r7, #2575]	; 0xa0f
			Rh_byte2 = read_data();
 80016e2:	f7fe ffb9 	bl	8000658 <read_data>
 80016e6:	4603      	mov	r3, r0
 80016e8:	f887 3a0e 	strb.w	r3, [r7, #2574]	; 0xa0e
			Temp_byte1 = read_data();
 80016ec:	f7fe ffb4 	bl	8000658 <read_data>
 80016f0:	4603      	mov	r3, r0
 80016f2:	f887 3a0d 	strb.w	r3, [r7, #2573]	; 0xa0d
			Temp_byte2 = read_data();
 80016f6:	f7fe ffaf 	bl	8000658 <read_data>
 80016fa:	4603      	mov	r3, r0
 80016fc:	f887 3a0c 	strb.w	r3, [r7, #2572]	; 0xa0c
			//sum = read_data();
			//if (sum == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
			{
				TEMP = ((Temp_byte1 << 8) | Temp_byte2);
 8001700:	f897 3a0d 	ldrb.w	r3, [r7, #2573]	; 0xa0d
 8001704:	021b      	lsls	r3, r3, #8
 8001706:	b21a      	sxth	r2, r3
 8001708:	f897 3a0c 	ldrb.w	r3, [r7, #2572]	; 0xa0c
 800170c:	b21b      	sxth	r3, r3
 800170e:	4313      	orrs	r3, r2
 8001710:	b21b      	sxth	r3, r3
 8001712:	f8a7 3a0a 	strh.w	r3, [r7, #2570]	; 0xa0a
				RH = ((Rh_byte1 << 8) | Rh_byte2);
 8001716:	f897 3a0f 	ldrb.w	r3, [r7, #2575]	; 0xa0f
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	b21a      	sxth	r2, r3
 800171e:	f897 3a0e 	ldrb.w	r3, [r7, #2574]	; 0xa0e
 8001722:	b21b      	sxth	r3, r3
 8001724:	4313      	orrs	r3, r2
 8001726:	b21b      	sxth	r3, r3
 8001728:	f8a7 3a08 	strh.w	r3, [r7, #2568]	; 0xa08
			}	
			temp = (float)TEMP / 10.0;
 800172c:	f8b7 3a0a 	ldrh.w	r3, [r7, #2570]	; 0xa0a
 8001730:	ee07 3a90 	vmov	s15, r3
 8001734:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001738:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800173c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001740:	f607 2314 	addw	r3, r7, #2580	; 0xa14
 8001744:	edc3 7a00 	vstr	s15, [r3]
			humid = (float)RH / 10.0;
 8001748:	f8b7 3a08 	ldrh.w	r3, [r7, #2568]	; 0xa08
 800174c:	ee07 3a90 	vmov	s15, r3
 8001750:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001754:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001758:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800175c:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8001760:	edc3 7a00 	vstr	s15, [r3]
			FloatToString(temp_string, temp, 4, 1);
 8001764:	f107 0310 	add.w	r3, r7, #16
 8001768:	2201      	movs	r2, #1
 800176a:	2104      	movs	r1, #4
 800176c:	f607 2014 	addw	r0, r7, #2580	; 0xa14
 8001770:	ed90 0a00 	vldr	s0, [r0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fd55 	bl	8001224 <FloatToString>
			FloatToString(humid_string, humid, 4, 1);
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	2201      	movs	r2, #1
 800177e:	2104      	movs	r1, #4
 8001780:	f507 6021 	add.w	r0, r7, #2576	; 0xa10
 8001784:	ed90 0a00 	vldr	s0, [r0]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fd4b 	bl	8001224 <FloatToString>
			sprintf(message, "{\"temperature\": %s, \"humidity\": %s}", temp_string, humid_string);
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	f107 0210 	add.w	r2, r7, #16
 8001794:	f107 001c 	add.w	r0, r7, #28
 8001798:	496f      	ldr	r1, [pc, #444]	; (8001958 <WifiUbidots+0x2a4>)
 800179a:	f007 ff3f 	bl	800961c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), 0xFFFF);
 800179e:	f107 031c 	add.w	r3, r7, #28
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fd14 	bl	80001d0 <strlen>
 80017a8:	4603      	mov	r3, r0
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	f107 011c 	add.w	r1, r7, #28
 80017b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017b4:	4869      	ldr	r0, [pc, #420]	; (800195c <WifiUbidots+0x2a8>)
 80017b6:	f004 f916 	bl	80059e6 <HAL_UART_Transmit>
			sprintf(sendBuffer, "POST /api/v1.6/devices/%s/?token=%s HTTP/1.1\r\nHost: things.ubidots.com\r\nContent-Type: application/json\r\nContent-Length: %d\r\n\r\n%s", UBIDOTS_DEVICE, UBIDOTS_TOKEN, (int)strlen(message), message); 
 80017ba:	f107 031c 	add.w	r3, r7, #28
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe fd06 	bl	80001d0 <strlen>
 80017c4:	4603      	mov	r3, r0
 80017c6:	461a      	mov	r2, r3
 80017c8:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80017cc:	f107 031c 	add.w	r3, r7, #28
 80017d0:	9301      	str	r3, [sp, #4]
 80017d2:	9200      	str	r2, [sp, #0]
 80017d4:	4b62      	ldr	r3, [pc, #392]	; (8001960 <WifiUbidots+0x2ac>)
 80017d6:	4a63      	ldr	r2, [pc, #396]	; (8001964 <WifiUbidots+0x2b0>)
 80017d8:	4963      	ldr	r1, [pc, #396]	; (8001968 <WifiUbidots+0x2b4>)
 80017da:	f007 ff1f 	bl	800961c <siprintf>
			sendBufferLength = strlen((char *)sendBuffer);
 80017de:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fcf4 	bl	80001d0 <strlen>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f887 3a07 	strb.w	r3, [r7, #2567]	; 0xa07
			for (int i = 0; i < 50; i++)buffer[i] = ' ';
 80017ee:	2300      	movs	r3, #0
 80017f0:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
 80017f4:	e00b      	b.n	800180e <WifiUbidots+0x15a>
 80017f6:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80017fa:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 80017fe:	4413      	add	r3, r2
 8001800:	2220      	movs	r2, #32
 8001802:	701a      	strb	r2, [r3, #0]
 8001804:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 8001808:	3301      	adds	r3, #1
 800180a:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
 800180e:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 8001812:	2b31      	cmp	r3, #49	; 0x31
 8001814:	ddef      	ble.n	80017f6 <WifiUbidots+0x142>
			my_itoa(sendBufferLength, sendBufferLengthString, 3);
 8001816:	f897 3a07 	ldrb.w	r3, [r7, #2567]	; 0xa07
 800181a:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800181e:	2203      	movs	r2, #3
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fcc5 	bl	80011b0 <my_itoa>
			sprintf((char *)string, "AT+CIPSEND=%s", sendBufferLengthString);
 8001826:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800182a:	f607 1334 	addw	r3, r7, #2356	; 0x934
 800182e:	494f      	ldr	r1, [pc, #316]	; (800196c <WifiUbidots+0x2b8>)
 8001830:	4618      	mov	r0, r3
 8001832:	f007 fef3 	bl	800961c <siprintf>
			length = strlen((char *)string);
 8001836:	f607 1334 	addw	r3, r7, #2356	; 0x934
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fcc8 	bl	80001d0 <strlen>
 8001840:	4603      	mov	r3, r0
 8001842:	f8c7 3a00 	str.w	r3, [r7, #2560]	; 0xa00
			string[length] = 0x0D;
 8001846:	f607 1234 	addw	r2, r7, #2356	; 0x934
 800184a:	f8d7 3a00 	ldr.w	r3, [r7, #2560]	; 0xa00
 800184e:	4413      	add	r3, r2
 8001850:	220d      	movs	r2, #13
 8001852:	701a      	strb	r2, [r3, #0]
			string[length + 1] = 0x0A;
 8001854:	f8d7 3a00 	ldr.w	r3, [r7, #2560]	; 0xa00
 8001858:	3301      	adds	r3, #1
 800185a:	f507 6222 	add.w	r2, r7, #2592	; 0xa20
 800185e:	4413      	add	r3, r2
 8001860:	220a      	movs	r2, #10
 8001862:	f803 2cec 	strb.w	r2, [r3, #-236]
			string[length + 2] = 0;
 8001866:	f8d7 3a00 	ldr.w	r3, [r7, #2560]	; 0xa00
 800186a:	3302      	adds	r3, #2
 800186c:	f507 6222 	add.w	r2, r7, #2592	; 0xa20
 8001870:	4413      	add	r3, r2
 8001872:	2200      	movs	r2, #0
 8001874:	f803 2cec 	strb.w	r2, [r3, #-236]
			HAL_UART_Transmit(&huart3, (uint8_t *)string, length + 2, 0xFFFF);	
 8001878:	f8d7 3a00 	ldr.w	r3, [r7, #2560]	; 0xa00
 800187c:	b29b      	uxth	r3, r3
 800187e:	3302      	adds	r3, #2
 8001880:	b29a      	uxth	r2, r3
 8001882:	f607 1134 	addw	r1, r7, #2356	; 0x934
 8001886:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800188a:	4839      	ldr	r0, [pc, #228]	; (8001970 <WifiUbidots+0x2bc>)
 800188c:	f004 f8ab 	bl	80059e6 <HAL_UART_Transmit>
			HAL_UART_Receive(&huart3, (uint8_t *)buffer, 24, 4000);	
 8001890:	f507 71b2 	add.w	r1, r7, #356	; 0x164
 8001894:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001898:	2218      	movs	r2, #24
 800189a:	4835      	ldr	r0, [pc, #212]	; (8001970 <WifiUbidots+0x2bc>)
 800189c:	f004 f935 	bl	8005b0a <HAL_UART_Receive>
		
			for (int i = 0; i < 2000; i++)buffer[i] = ' ';
 80018a0:	2300      	movs	r3, #0
 80018a2:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
 80018a6:	e00b      	b.n	80018c0 <WifiUbidots+0x20c>
 80018a8:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80018ac:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 80018b0:	4413      	add	r3, r2
 80018b2:	2220      	movs	r2, #32
 80018b4:	701a      	strb	r2, [r3, #0]
 80018b6:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 80018ba:	3301      	adds	r3, #1
 80018bc:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
 80018c0:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 80018c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80018c8:	dbee      	blt.n	80018a8 <WifiUbidots+0x1f4>
			HAL_Delay(1);
 80018ca:	2001      	movs	r0, #1
 80018cc:	f000 f8f0 	bl	8001ab0 <HAL_Delay>
			HAL_UART_Transmit(&huart3, (uint8_t *)(sendBuffer), sendBufferLength, 0xFFFF);
 80018d0:	f897 3a07 	ldrb.w	r3, [r7, #2567]	; 0xa07
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80018da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018de:	4824      	ldr	r0, [pc, #144]	; (8001970 <WifiUbidots+0x2bc>)
 80018e0:	f004 f881 	bl	80059e6 <HAL_UART_Transmit>
			HAL_UART_Receive(&huart3, (uint8_t *)buffer, 500, 4000);
 80018e4:	f507 71b2 	add.w	r1, r7, #356	; 0x164
 80018e8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80018ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80018f0:	481f      	ldr	r0, [pc, #124]	; (8001970 <WifiUbidots+0x2bc>)
 80018f2:	f004 f90a 	bl	8005b0a <HAL_UART_Receive>
			HAL_UART_Transmit(&huart2, (uint8_t *)buffer, 500, 0xFFFF);
 80018f6:	f507 71b2 	add.w	r1, r7, #356	; 0x164
 80018fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018fe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001902:	4816      	ldr	r0, [pc, #88]	; (800195c <WifiUbidots+0x2a8>)
 8001904:	f004 f86f 	bl	80059e6 <HAL_UART_Transmit>
			string[0] = 0x0D;
 8001908:	230d      	movs	r3, #13
 800190a:	f887 3934 	strb.w	r3, [r7, #2356]	; 0x934
			string[1] = 0x0A;
 800190e:	230a      	movs	r3, #10
 8001910:	f887 3935 	strb.w	r3, [r7, #2357]	; 0x935
			HAL_UART_Transmit(&huart2, (uint8_t *)string, 2, 0xFFFF);
 8001914:	f607 1134 	addw	r1, r7, #2356	; 0x934
 8001918:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800191c:	2202      	movs	r2, #2
 800191e:	480f      	ldr	r0, [pc, #60]	; (800195c <WifiUbidots+0x2a8>)
 8001920:	f004 f861 	bl	80059e6 <HAL_UART_Transmit>
			ret = (int)strstr((char *)buffer, (char *)"ERROR");
 8001924:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001928:	4912      	ldr	r1, [pc, #72]	; (8001974 <WifiUbidots+0x2c0>)
 800192a:	4618      	mov	r0, r3
 800192c:	f007 fe96 	bl	800965c <strstr>
 8001930:	4603      	mov	r3, r0
 8001932:	f8c7 39fc 	str.w	r3, [r7, #2556]	; 0x9fc
			/* wait for a while to slow down */    
			HAL_Delay(20000);
 8001936:	f644 6020 	movw	r0, #20000	; 0x4e20
 800193a:	f000 f8b9 	bl	8001ab0 <HAL_Delay>
		} while (ret == 0);
 800193e:	f8d7 39fc 	ldr.w	r3, [r7, #2556]	; 0x9fc
 8001942:	2b00      	cmp	r3, #0
 8001944:	f43f aec4 	beq.w	80016d0 <WifiUbidots+0x1c>
		CloseUbidots();
 8001948:	f7ff fe44 	bl	80015d4 <CloseUbidots>
		OpenUbidots();
 800194c:	e6be      	b.n	80016cc <WifiUbidots+0x18>
 800194e:	bf00      	nop
 8001950:	4059999a 	.word	0x4059999a
 8001954:	42366666 	.word	0x42366666
 8001958:	08009dd8 	.word	0x08009dd8
 800195c:	2000020c 	.word	0x2000020c
 8001960:	08009dfc 	.word	0x08009dfc
 8001964:	08009e20 	.word	0x08009e20
 8001968:	08009e2c 	.word	0x08009e2c
 800196c:	08009eb0 	.word	0x08009eb0
 8001970:	200000d4 	.word	0x200000d4
 8001974:	08009ec0 	.word	0x08009ec0

08001978 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001978:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800197c:	480d      	ldr	r0, [pc, #52]	; (80019b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800197e:	490e      	ldr	r1, [pc, #56]	; (80019b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001980:	4a0e      	ldr	r2, [pc, #56]	; (80019bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001984:	e002      	b.n	800198c <LoopCopyDataInit>

08001986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800198a:	3304      	adds	r3, #4

0800198c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800198c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001990:	d3f9      	bcc.n	8001986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001992:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001994:	4c0b      	ldr	r4, [pc, #44]	; (80019c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001998:	e001      	b.n	800199e <LoopFillZerobss>

0800199a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800199a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800199c:	3204      	adds	r2, #4

0800199e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a0:	d3fb      	bcc.n	800199a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019a2:	f7ff fbf3 	bl	800118c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019a6:	f007 fd43 	bl	8009430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019aa:	f7fe fecf 	bl	800074c <main>
  bx  lr    
 80019ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80019bc:	08009f28 	.word	0x08009f28
  ldr r2, =_sbss
 80019c0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80019c4:	20000988 	.word	0x20000988

080019c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019c8:	e7fe      	b.n	80019c8 <ADC_IRQHandler>
	...

080019cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019d0:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <HAL_Init+0x40>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a0d      	ldr	r2, [pc, #52]	; (8001a0c <HAL_Init+0x40>)
 80019d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <HAL_Init+0x40>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <HAL_Init+0x40>)
 80019e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019e8:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <HAL_Init+0x40>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a07      	ldr	r2, [pc, #28]	; (8001a0c <HAL_Init+0x40>)
 80019ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f4:	2003      	movs	r0, #3
 80019f6:	f000 f94f 	bl	8001c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019fa:	2000      	movs	r0, #0
 80019fc:	f000 f808 	bl	8001a10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a00:	f7ff f978 	bl	8000cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40023c00 	.word	0x40023c00

08001a10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <HAL_InitTick+0x54>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_InitTick+0x58>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	4619      	mov	r1, r3
 8001a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 f967 	bl	8001d02 <HAL_SYSTICK_Config>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e00e      	b.n	8001a5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b0f      	cmp	r3, #15
 8001a42:	d80a      	bhi.n	8001a5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a44:	2200      	movs	r2, #0
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4c:	f000 f92f 	bl	8001cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a50:	4a06      	ldr	r2, [pc, #24]	; (8001a6c <HAL_InitTick+0x5c>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
 8001a58:	e000      	b.n	8001a5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000000 	.word	0x20000000
 8001a68:	20000008 	.word	0x20000008
 8001a6c:	20000004 	.word	0x20000004

08001a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_IncTick+0x20>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_IncTick+0x24>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4413      	add	r3, r2
 8001a80:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <HAL_IncTick+0x24>)
 8001a82:	6013      	str	r3, [r2, #0]
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000008 	.word	0x20000008
 8001a94:	20000298 	.word	0x20000298

08001a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <HAL_GetTick+0x14>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20000298 	.word	0x20000298

08001ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab8:	f7ff ffee 	bl	8001a98 <HAL_GetTick>
 8001abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac8:	d005      	beq.n	8001ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <HAL_Delay+0x44>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ad6:	bf00      	nop
 8001ad8:	f7ff ffde 	bl	8001a98 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d8f7      	bhi.n	8001ad8 <HAL_Delay+0x28>
  {
  }
}
 8001ae8:	bf00      	nop
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000008 	.word	0x20000008

08001af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b14:	4013      	ands	r3, r2
 8001b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2a:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	60d3      	str	r3, [r2, #12]
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b44:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <__NVIC_GetPriorityGrouping+0x18>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	0a1b      	lsrs	r3, r3, #8
 8001b4a:	f003 0307 	and.w	r3, r3, #7
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	db0b      	blt.n	8001b86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	f003 021f 	and.w	r2, r3, #31
 8001b74:	4907      	ldr	r1, [pc, #28]	; (8001b94 <__NVIC_EnableIRQ+0x38>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	095b      	lsrs	r3, r3, #5
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000e100 	.word	0xe000e100

08001b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	6039      	str	r1, [r7, #0]
 8001ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	db0a      	blt.n	8001bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	490c      	ldr	r1, [pc, #48]	; (8001be4 <__NVIC_SetPriority+0x4c>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	0112      	lsls	r2, r2, #4
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	440b      	add	r3, r1
 8001bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc0:	e00a      	b.n	8001bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4908      	ldr	r1, [pc, #32]	; (8001be8 <__NVIC_SetPriority+0x50>)
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	3b04      	subs	r3, #4
 8001bd0:	0112      	lsls	r2, r2, #4
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	761a      	strb	r2, [r3, #24]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000e100 	.word	0xe000e100
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b089      	sub	sp, #36	; 0x24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f1c3 0307 	rsb	r3, r3, #7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	bf28      	it	cs
 8001c0a:	2304      	movcs	r3, #4
 8001c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3304      	adds	r3, #4
 8001c12:	2b06      	cmp	r3, #6
 8001c14:	d902      	bls.n	8001c1c <NVIC_EncodePriority+0x30>
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3b03      	subs	r3, #3
 8001c1a:	e000      	b.n	8001c1e <NVIC_EncodePriority+0x32>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	f04f 32ff 	mov.w	r2, #4294967295
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	401a      	ands	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	43d9      	mvns	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	4313      	orrs	r3, r2
         );
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3724      	adds	r7, #36	; 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c64:	d301      	bcc.n	8001c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00f      	b.n	8001c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <SysTick_Config+0x40>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c72:	210f      	movs	r1, #15
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295
 8001c78:	f7ff ff8e 	bl	8001b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <SysTick_Config+0x40>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c82:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <SysTick_Config+0x40>)
 8001c84:	2207      	movs	r2, #7
 8001c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	e000e010 	.word	0xe000e010

08001c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff29 	bl	8001af8 <__NVIC_SetPriorityGrouping>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc0:	f7ff ff3e 	bl	8001b40 <__NVIC_GetPriorityGrouping>
 8001cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	6978      	ldr	r0, [r7, #20]
 8001ccc:	f7ff ff8e 	bl	8001bec <NVIC_EncodePriority>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff5d 	bl	8001b98 <__NVIC_SetPriority>
}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff31 	bl	8001b5c <__NVIC_EnableIRQ>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ffa2 	bl	8001c54 <SysTick_Config>
 8001d10:	4603      	mov	r3, r0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b089      	sub	sp, #36	; 0x24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
 8001d36:	e16b      	b.n	8002010 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d38:	2201      	movs	r2, #1
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	f040 815a 	bne.w	800200a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d005      	beq.n	8001d6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d130      	bne.n	8001dd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	2203      	movs	r2, #3
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da4:	2201      	movs	r2, #1
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	f003 0201 	and.w	r2, r3, #1
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	2b03      	cmp	r3, #3
 8001dda:	d017      	beq.n	8001e0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	2203      	movs	r2, #3
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d123      	bne.n	8001e60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	08da      	lsrs	r2, r3, #3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3208      	adds	r2, #8
 8001e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	220f      	movs	r2, #15
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	08da      	lsrs	r2, r3, #3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3208      	adds	r2, #8
 8001e5a:	69b9      	ldr	r1, [r7, #24]
 8001e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0203 	and.w	r2, r3, #3
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 80b4 	beq.w	800200a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	4b60      	ldr	r3, [pc, #384]	; (8002028 <HAL_GPIO_Init+0x30c>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	4a5f      	ldr	r2, [pc, #380]	; (8002028 <HAL_GPIO_Init+0x30c>)
 8001eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb2:	4b5d      	ldr	r3, [pc, #372]	; (8002028 <HAL_GPIO_Init+0x30c>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ebe:	4a5b      	ldr	r2, [pc, #364]	; (800202c <HAL_GPIO_Init+0x310>)
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	089b      	lsrs	r3, r3, #2
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a52      	ldr	r2, [pc, #328]	; (8002030 <HAL_GPIO_Init+0x314>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d02b      	beq.n	8001f42 <HAL_GPIO_Init+0x226>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a51      	ldr	r2, [pc, #324]	; (8002034 <HAL_GPIO_Init+0x318>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d025      	beq.n	8001f3e <HAL_GPIO_Init+0x222>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a50      	ldr	r2, [pc, #320]	; (8002038 <HAL_GPIO_Init+0x31c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d01f      	beq.n	8001f3a <HAL_GPIO_Init+0x21e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a4f      	ldr	r2, [pc, #316]	; (800203c <HAL_GPIO_Init+0x320>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d019      	beq.n	8001f36 <HAL_GPIO_Init+0x21a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a4e      	ldr	r2, [pc, #312]	; (8002040 <HAL_GPIO_Init+0x324>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d013      	beq.n	8001f32 <HAL_GPIO_Init+0x216>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a4d      	ldr	r2, [pc, #308]	; (8002044 <HAL_GPIO_Init+0x328>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00d      	beq.n	8001f2e <HAL_GPIO_Init+0x212>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a4c      	ldr	r2, [pc, #304]	; (8002048 <HAL_GPIO_Init+0x32c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d007      	beq.n	8001f2a <HAL_GPIO_Init+0x20e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a4b      	ldr	r2, [pc, #300]	; (800204c <HAL_GPIO_Init+0x330>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d101      	bne.n	8001f26 <HAL_GPIO_Init+0x20a>
 8001f22:	2307      	movs	r3, #7
 8001f24:	e00e      	b.n	8001f44 <HAL_GPIO_Init+0x228>
 8001f26:	2308      	movs	r3, #8
 8001f28:	e00c      	b.n	8001f44 <HAL_GPIO_Init+0x228>
 8001f2a:	2306      	movs	r3, #6
 8001f2c:	e00a      	b.n	8001f44 <HAL_GPIO_Init+0x228>
 8001f2e:	2305      	movs	r3, #5
 8001f30:	e008      	b.n	8001f44 <HAL_GPIO_Init+0x228>
 8001f32:	2304      	movs	r3, #4
 8001f34:	e006      	b.n	8001f44 <HAL_GPIO_Init+0x228>
 8001f36:	2303      	movs	r3, #3
 8001f38:	e004      	b.n	8001f44 <HAL_GPIO_Init+0x228>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e002      	b.n	8001f44 <HAL_GPIO_Init+0x228>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <HAL_GPIO_Init+0x228>
 8001f42:	2300      	movs	r3, #0
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	f002 0203 	and.w	r2, r2, #3
 8001f4a:	0092      	lsls	r2, r2, #2
 8001f4c:	4093      	lsls	r3, r2
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f54:	4935      	ldr	r1, [pc, #212]	; (800202c <HAL_GPIO_Init+0x310>)
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	089b      	lsrs	r3, r3, #2
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f62:	4b3b      	ldr	r3, [pc, #236]	; (8002050 <HAL_GPIO_Init+0x334>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f86:	4a32      	ldr	r2, [pc, #200]	; (8002050 <HAL_GPIO_Init+0x334>)
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f8c:	4b30      	ldr	r3, [pc, #192]	; (8002050 <HAL_GPIO_Init+0x334>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fb0:	4a27      	ldr	r2, [pc, #156]	; (8002050 <HAL_GPIO_Init+0x334>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fb6:	4b26      	ldr	r3, [pc, #152]	; (8002050 <HAL_GPIO_Init+0x334>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fda:	4a1d      	ldr	r2, [pc, #116]	; (8002050 <HAL_GPIO_Init+0x334>)
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fe0:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <HAL_GPIO_Init+0x334>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002004:	4a12      	ldr	r2, [pc, #72]	; (8002050 <HAL_GPIO_Init+0x334>)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3301      	adds	r3, #1
 800200e:	61fb      	str	r3, [r7, #28]
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	2b0f      	cmp	r3, #15
 8002014:	f67f ae90 	bls.w	8001d38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	3724      	adds	r7, #36	; 0x24
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40023800 	.word	0x40023800
 800202c:	40013800 	.word	0x40013800
 8002030:	40020000 	.word	0x40020000
 8002034:	40020400 	.word	0x40020400
 8002038:	40020800 	.word	0x40020800
 800203c:	40020c00 	.word	0x40020c00
 8002040:	40021000 	.word	0x40021000
 8002044:	40021400 	.word	0x40021400
 8002048:	40021800 	.word	0x40021800
 800204c:	40021c00 	.word	0x40021c00
 8002050:	40013c00 	.word	0x40013c00

08002054 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691a      	ldr	r2, [r3, #16]
 8002064:	887b      	ldrh	r3, [r7, #2]
 8002066:	4013      	ands	r3, r2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d002      	beq.n	8002072 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800206c:	2301      	movs	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
 8002070:	e001      	b.n	8002076 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002072:	2300      	movs	r3, #0
 8002074:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002076:	7bfb      	ldrb	r3, [r7, #15]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	807b      	strh	r3, [r7, #2]
 8002090:	4613      	mov	r3, r2
 8002092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002094:	787b      	ldrb	r3, [r7, #1]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800209a:	887a      	ldrh	r2, [r7, #2]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020a0:	e003      	b.n	80020aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020a2:	887b      	ldrh	r3, [r7, #2]
 80020a4:	041a      	lsls	r2, r3, #16
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	619a      	str	r2, [r3, #24]
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80020b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020b8:	b08f      	sub	sp, #60	; 0x3c
 80020ba:	af0a      	add	r7, sp, #40	; 0x28
 80020bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e054      	b.n	8002172 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d106      	bne.n	80020e8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f006 fef4 	bl	8008ed0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2203      	movs	r2, #3
 80020ec:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d102      	bne.n	8002102 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f004 f84a 	bl	80061a0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	603b      	str	r3, [r7, #0]
 8002112:	687e      	ldr	r6, [r7, #4]
 8002114:	466d      	mov	r5, sp
 8002116:	f106 0410 	add.w	r4, r6, #16
 800211a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800211c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800211e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002120:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002122:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002126:	e885 0003 	stmia.w	r5, {r0, r1}
 800212a:	1d33      	adds	r3, r6, #4
 800212c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800212e:	6838      	ldr	r0, [r7, #0]
 8002130:	f003 ffc4 	bl	80060bc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2101      	movs	r1, #1
 800213a:	4618      	mov	r0, r3
 800213c:	f004 f841 	bl	80061c2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	603b      	str	r3, [r7, #0]
 8002146:	687e      	ldr	r6, [r7, #4]
 8002148:	466d      	mov	r5, sp
 800214a:	f106 0410 	add.w	r4, r6, #16
 800214e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002150:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002152:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002154:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002156:	e894 0003 	ldmia.w	r4, {r0, r1}
 800215a:	e885 0003 	stmia.w	r5, {r0, r1}
 800215e:	1d33      	adds	r3, r6, #4
 8002160:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002162:	6838      	ldr	r0, [r7, #0]
 8002164:	f004 f9a8 	bl	80064b8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800217a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800217a:	b590      	push	{r4, r7, lr}
 800217c:	b089      	sub	sp, #36	; 0x24
 800217e:	af04      	add	r7, sp, #16
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	4608      	mov	r0, r1
 8002184:	4611      	mov	r1, r2
 8002186:	461a      	mov	r2, r3
 8002188:	4603      	mov	r3, r0
 800218a:	70fb      	strb	r3, [r7, #3]
 800218c:	460b      	mov	r3, r1
 800218e:	70bb      	strb	r3, [r7, #2]
 8002190:	4613      	mov	r3, r2
 8002192:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_HCD_HC_Init+0x28>
 800219e:	2302      	movs	r3, #2
 80021a0:	e076      	b.n	8002290 <HAL_HCD_HC_Init+0x116>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	212c      	movs	r1, #44	; 0x2c
 80021b0:	fb01 f303 	mul.w	r3, r1, r3
 80021b4:	4413      	add	r3, r2
 80021b6:	333d      	adds	r3, #61	; 0x3d
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	212c      	movs	r1, #44	; 0x2c
 80021c2:	fb01 f303 	mul.w	r3, r1, r3
 80021c6:	4413      	add	r3, r2
 80021c8:	3338      	adds	r3, #56	; 0x38
 80021ca:	787a      	ldrb	r2, [r7, #1]
 80021cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	212c      	movs	r1, #44	; 0x2c
 80021d4:	fb01 f303 	mul.w	r3, r1, r3
 80021d8:	4413      	add	r3, r2
 80021da:	3340      	adds	r3, #64	; 0x40
 80021dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80021de:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	212c      	movs	r1, #44	; 0x2c
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	3339      	adds	r3, #57	; 0x39
 80021ee:	78fa      	ldrb	r2, [r7, #3]
 80021f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80021f2:	78fb      	ldrb	r3, [r7, #3]
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	212c      	movs	r1, #44	; 0x2c
 80021f8:	fb01 f303 	mul.w	r3, r1, r3
 80021fc:	4413      	add	r3, r2
 80021fe:	333f      	adds	r3, #63	; 0x3f
 8002200:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002204:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002206:	78fb      	ldrb	r3, [r7, #3]
 8002208:	78ba      	ldrb	r2, [r7, #2]
 800220a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800220e:	b2d0      	uxtb	r0, r2
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	212c      	movs	r1, #44	; 0x2c
 8002214:	fb01 f303 	mul.w	r3, r1, r3
 8002218:	4413      	add	r3, r2
 800221a:	333a      	adds	r3, #58	; 0x3a
 800221c:	4602      	mov	r2, r0
 800221e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002220:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002224:	2b00      	cmp	r3, #0
 8002226:	da09      	bge.n	800223c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002228:	78fb      	ldrb	r3, [r7, #3]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	212c      	movs	r1, #44	; 0x2c
 800222e:	fb01 f303 	mul.w	r3, r1, r3
 8002232:	4413      	add	r3, r2
 8002234:	333b      	adds	r3, #59	; 0x3b
 8002236:	2201      	movs	r2, #1
 8002238:	701a      	strb	r2, [r3, #0]
 800223a:	e008      	b.n	800224e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	212c      	movs	r1, #44	; 0x2c
 8002242:	fb01 f303 	mul.w	r3, r1, r3
 8002246:	4413      	add	r3, r2
 8002248:	333b      	adds	r3, #59	; 0x3b
 800224a:	2200      	movs	r2, #0
 800224c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800224e:	78fb      	ldrb	r3, [r7, #3]
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	212c      	movs	r1, #44	; 0x2c
 8002254:	fb01 f303 	mul.w	r3, r1, r3
 8002258:	4413      	add	r3, r2
 800225a:	333c      	adds	r3, #60	; 0x3c
 800225c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002260:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6818      	ldr	r0, [r3, #0]
 8002266:	787c      	ldrb	r4, [r7, #1]
 8002268:	78ba      	ldrb	r2, [r7, #2]
 800226a:	78f9      	ldrb	r1, [r7, #3]
 800226c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800226e:	9302      	str	r3, [sp, #8]
 8002270:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002274:	9301      	str	r3, [sp, #4]
 8002276:	f897 3020 	ldrb.w	r3, [r7, #32]
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	4623      	mov	r3, r4
 800227e:	f004 fa95 	bl	80067ac <USB_HC_Init>
 8002282:	4603      	mov	r3, r0
 8002284:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800228e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	bd90      	pop	{r4, r7, pc}

08002298 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d101      	bne.n	80022b6 <HAL_HCD_HC_Halt+0x1e>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e00f      	b.n	80022d6 <HAL_HCD_HC_Halt+0x3e>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	78fa      	ldrb	r2, [r7, #3]
 80022c4:	4611      	mov	r1, r2
 80022c6:	4618      	mov	r0, r3
 80022c8:	f004 fcd1 	bl	8006c6e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	4608      	mov	r0, r1
 80022ea:	4611      	mov	r1, r2
 80022ec:	461a      	mov	r2, r3
 80022ee:	4603      	mov	r3, r0
 80022f0:	70fb      	strb	r3, [r7, #3]
 80022f2:	460b      	mov	r3, r1
 80022f4:	70bb      	strb	r3, [r7, #2]
 80022f6:	4613      	mov	r3, r2
 80022f8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80022fa:	78fb      	ldrb	r3, [r7, #3]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	212c      	movs	r1, #44	; 0x2c
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	333b      	adds	r3, #59	; 0x3b
 8002308:	78ba      	ldrb	r2, [r7, #2]
 800230a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800230c:	78fb      	ldrb	r3, [r7, #3]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	212c      	movs	r1, #44	; 0x2c
 8002312:	fb01 f303 	mul.w	r3, r1, r3
 8002316:	4413      	add	r3, r2
 8002318:	333f      	adds	r3, #63	; 0x3f
 800231a:	787a      	ldrb	r2, [r7, #1]
 800231c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800231e:	7c3b      	ldrb	r3, [r7, #16]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d112      	bne.n	800234a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	212c      	movs	r1, #44	; 0x2c
 800232a:	fb01 f303 	mul.w	r3, r1, r3
 800232e:	4413      	add	r3, r2
 8002330:	3342      	adds	r3, #66	; 0x42
 8002332:	2203      	movs	r2, #3
 8002334:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002336:	78fb      	ldrb	r3, [r7, #3]
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	212c      	movs	r1, #44	; 0x2c
 800233c:	fb01 f303 	mul.w	r3, r1, r3
 8002340:	4413      	add	r3, r2
 8002342:	333d      	adds	r3, #61	; 0x3d
 8002344:	7f3a      	ldrb	r2, [r7, #28]
 8002346:	701a      	strb	r2, [r3, #0]
 8002348:	e008      	b.n	800235c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800234a:	78fb      	ldrb	r3, [r7, #3]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	212c      	movs	r1, #44	; 0x2c
 8002350:	fb01 f303 	mul.w	r3, r1, r3
 8002354:	4413      	add	r3, r2
 8002356:	3342      	adds	r3, #66	; 0x42
 8002358:	2202      	movs	r2, #2
 800235a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800235c:	787b      	ldrb	r3, [r7, #1]
 800235e:	2b03      	cmp	r3, #3
 8002360:	f200 80c6 	bhi.w	80024f0 <HAL_HCD_HC_SubmitRequest+0x210>
 8002364:	a201      	add	r2, pc, #4	; (adr r2, 800236c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236a:	bf00      	nop
 800236c:	0800237d 	.word	0x0800237d
 8002370:	080024dd 	.word	0x080024dd
 8002374:	080023e1 	.word	0x080023e1
 8002378:	0800245f 	.word	0x0800245f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800237c:	7c3b      	ldrb	r3, [r7, #16]
 800237e:	2b01      	cmp	r3, #1
 8002380:	f040 80b8 	bne.w	80024f4 <HAL_HCD_HC_SubmitRequest+0x214>
 8002384:	78bb      	ldrb	r3, [r7, #2]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f040 80b4 	bne.w	80024f4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800238c:	8b3b      	ldrh	r3, [r7, #24]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d108      	bne.n	80023a4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	212c      	movs	r1, #44	; 0x2c
 8002398:	fb01 f303 	mul.w	r3, r1, r3
 800239c:	4413      	add	r3, r2
 800239e:	3355      	adds	r3, #85	; 0x55
 80023a0:	2201      	movs	r2, #1
 80023a2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	212c      	movs	r1, #44	; 0x2c
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	4413      	add	r3, r2
 80023b0:	3355      	adds	r3, #85	; 0x55
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d109      	bne.n	80023cc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	212c      	movs	r1, #44	; 0x2c
 80023be:	fb01 f303 	mul.w	r3, r1, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	3342      	adds	r3, #66	; 0x42
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80023ca:	e093      	b.n	80024f4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	212c      	movs	r1, #44	; 0x2c
 80023d2:	fb01 f303 	mul.w	r3, r1, r3
 80023d6:	4413      	add	r3, r2
 80023d8:	3342      	adds	r3, #66	; 0x42
 80023da:	2202      	movs	r2, #2
 80023dc:	701a      	strb	r2, [r3, #0]
      break;
 80023de:	e089      	b.n	80024f4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80023e0:	78bb      	ldrb	r3, [r7, #2]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d11d      	bne.n	8002422 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	212c      	movs	r1, #44	; 0x2c
 80023ec:	fb01 f303 	mul.w	r3, r1, r3
 80023f0:	4413      	add	r3, r2
 80023f2:	3355      	adds	r3, #85	; 0x55
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d109      	bne.n	800240e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023fa:	78fb      	ldrb	r3, [r7, #3]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	212c      	movs	r1, #44	; 0x2c
 8002400:	fb01 f303 	mul.w	r3, r1, r3
 8002404:	4413      	add	r3, r2
 8002406:	3342      	adds	r3, #66	; 0x42
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800240c:	e073      	b.n	80024f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800240e:	78fb      	ldrb	r3, [r7, #3]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	212c      	movs	r1, #44	; 0x2c
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	4413      	add	r3, r2
 800241a:	3342      	adds	r3, #66	; 0x42
 800241c:	2202      	movs	r2, #2
 800241e:	701a      	strb	r2, [r3, #0]
      break;
 8002420:	e069      	b.n	80024f6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002422:	78fb      	ldrb	r3, [r7, #3]
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	212c      	movs	r1, #44	; 0x2c
 8002428:	fb01 f303 	mul.w	r3, r1, r3
 800242c:	4413      	add	r3, r2
 800242e:	3354      	adds	r3, #84	; 0x54
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d109      	bne.n	800244a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	212c      	movs	r1, #44	; 0x2c
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	4413      	add	r3, r2
 8002442:	3342      	adds	r3, #66	; 0x42
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]
      break;
 8002448:	e055      	b.n	80024f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800244a:	78fb      	ldrb	r3, [r7, #3]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	212c      	movs	r1, #44	; 0x2c
 8002450:	fb01 f303 	mul.w	r3, r1, r3
 8002454:	4413      	add	r3, r2
 8002456:	3342      	adds	r3, #66	; 0x42
 8002458:	2202      	movs	r2, #2
 800245a:	701a      	strb	r2, [r3, #0]
      break;
 800245c:	e04b      	b.n	80024f6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800245e:	78bb      	ldrb	r3, [r7, #2]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d11d      	bne.n	80024a0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	212c      	movs	r1, #44	; 0x2c
 800246a:	fb01 f303 	mul.w	r3, r1, r3
 800246e:	4413      	add	r3, r2
 8002470:	3355      	adds	r3, #85	; 0x55
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d109      	bne.n	800248c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	212c      	movs	r1, #44	; 0x2c
 800247e:	fb01 f303 	mul.w	r3, r1, r3
 8002482:	4413      	add	r3, r2
 8002484:	3342      	adds	r3, #66	; 0x42
 8002486:	2200      	movs	r2, #0
 8002488:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800248a:	e034      	b.n	80024f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	212c      	movs	r1, #44	; 0x2c
 8002492:	fb01 f303 	mul.w	r3, r1, r3
 8002496:	4413      	add	r3, r2
 8002498:	3342      	adds	r3, #66	; 0x42
 800249a:	2202      	movs	r2, #2
 800249c:	701a      	strb	r2, [r3, #0]
      break;
 800249e:	e02a      	b.n	80024f6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80024a0:	78fb      	ldrb	r3, [r7, #3]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	212c      	movs	r1, #44	; 0x2c
 80024a6:	fb01 f303 	mul.w	r3, r1, r3
 80024aa:	4413      	add	r3, r2
 80024ac:	3354      	adds	r3, #84	; 0x54
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d109      	bne.n	80024c8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024b4:	78fb      	ldrb	r3, [r7, #3]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	212c      	movs	r1, #44	; 0x2c
 80024ba:	fb01 f303 	mul.w	r3, r1, r3
 80024be:	4413      	add	r3, r2
 80024c0:	3342      	adds	r3, #66	; 0x42
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]
      break;
 80024c6:	e016      	b.n	80024f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	212c      	movs	r1, #44	; 0x2c
 80024ce:	fb01 f303 	mul.w	r3, r1, r3
 80024d2:	4413      	add	r3, r2
 80024d4:	3342      	adds	r3, #66	; 0x42
 80024d6:	2202      	movs	r2, #2
 80024d8:	701a      	strb	r2, [r3, #0]
      break;
 80024da:	e00c      	b.n	80024f6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024dc:	78fb      	ldrb	r3, [r7, #3]
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	212c      	movs	r1, #44	; 0x2c
 80024e2:	fb01 f303 	mul.w	r3, r1, r3
 80024e6:	4413      	add	r3, r2
 80024e8:	3342      	adds	r3, #66	; 0x42
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
      break;
 80024ee:	e002      	b.n	80024f6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80024f0:	bf00      	nop
 80024f2:	e000      	b.n	80024f6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80024f4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80024f6:	78fb      	ldrb	r3, [r7, #3]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	212c      	movs	r1, #44	; 0x2c
 80024fc:	fb01 f303 	mul.w	r3, r1, r3
 8002500:	4413      	add	r3, r2
 8002502:	3344      	adds	r3, #68	; 0x44
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	8b3a      	ldrh	r2, [r7, #24]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	202c      	movs	r0, #44	; 0x2c
 8002510:	fb00 f303 	mul.w	r3, r0, r3
 8002514:	440b      	add	r3, r1
 8002516:	334c      	adds	r3, #76	; 0x4c
 8002518:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800251a:	78fb      	ldrb	r3, [r7, #3]
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	212c      	movs	r1, #44	; 0x2c
 8002520:	fb01 f303 	mul.w	r3, r1, r3
 8002524:	4413      	add	r3, r2
 8002526:	3360      	adds	r3, #96	; 0x60
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800252c:	78fb      	ldrb	r3, [r7, #3]
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	212c      	movs	r1, #44	; 0x2c
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	4413      	add	r3, r2
 8002538:	3350      	adds	r3, #80	; 0x50
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800253e:	78fb      	ldrb	r3, [r7, #3]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	212c      	movs	r1, #44	; 0x2c
 8002544:	fb01 f303 	mul.w	r3, r1, r3
 8002548:	4413      	add	r3, r2
 800254a:	3339      	adds	r3, #57	; 0x39
 800254c:	78fa      	ldrb	r2, [r7, #3]
 800254e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	212c      	movs	r1, #44	; 0x2c
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	4413      	add	r3, r2
 800255c:	3361      	adds	r3, #97	; 0x61
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	78fb      	ldrb	r3, [r7, #3]
 8002568:	222c      	movs	r2, #44	; 0x2c
 800256a:	fb02 f303 	mul.w	r3, r2, r3
 800256e:	3338      	adds	r3, #56	; 0x38
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	18d1      	adds	r1, r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	461a      	mov	r2, r3
 800257c:	f004 fa24 	bl	80069c8 <USB_HC_StartXfer>
 8002580:	4603      	mov	r3, r0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop

0800258c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f003 ff47 	bl	8006436 <USB_GetMode>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	f040 80f6 	bne.w	800279c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f003 ff2b 	bl	8006410 <USB_ReadInterrupts>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 80ec 	beq.w	800279a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f003 ff22 	bl	8006410 <USB_ReadInterrupts>
 80025cc:	4603      	mov	r3, r0
 80025ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025d6:	d104      	bne.n	80025e2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80025e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f003 ff12 	bl	8006410 <USB_ReadInterrupts>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025f6:	d104      	bne.n	8002602 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002600:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f003 ff02 	bl	8006410 <USB_ReadInterrupts>
 800260c:	4603      	mov	r3, r0
 800260e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002612:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002616:	d104      	bne.n	8002622 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002620:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f003 fef2 	bl	8006410 <USB_ReadInterrupts>
 800262c:	4603      	mov	r3, r0
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b02      	cmp	r3, #2
 8002634:	d103      	bne.n	800263e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2202      	movs	r2, #2
 800263c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f003 fee4 	bl	8006410 <USB_ReadInterrupts>
 8002648:	4603      	mov	r3, r0
 800264a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800264e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002652:	d11c      	bne.n	800268e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800265c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10f      	bne.n	800268e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800266e:	2110      	movs	r1, #16
 8002670:	6938      	ldr	r0, [r7, #16]
 8002672:	f003 fdf3 	bl	800625c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002676:	6938      	ldr	r0, [r7, #16]
 8002678:	f003 fe14 	bl	80062a4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2101      	movs	r1, #1
 8002682:	4618      	mov	r0, r3
 8002684:	f003 ffcc 	bl	8006620 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f006 fc9f 	bl	8008fcc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f003 febc 	bl	8006410 <USB_ReadInterrupts>
 8002698:	4603      	mov	r3, r0
 800269a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800269e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026a2:	d102      	bne.n	80026aa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f001 fa03 	bl	8003ab0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f003 feae 	bl	8006410 <USB_ReadInterrupts>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d106      	bne.n	80026cc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f006 fc68 	bl	8008f94 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2208      	movs	r2, #8
 80026ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f003 fe9d 	bl	8006410 <USB_ReadInterrupts>
 80026d6:	4603      	mov	r3, r0
 80026d8:	f003 0310 	and.w	r3, r3, #16
 80026dc:	2b10      	cmp	r3, #16
 80026de:	d101      	bne.n	80026e4 <HAL_HCD_IRQHandler+0x158>
 80026e0:	2301      	movs	r3, #1
 80026e2:	e000      	b.n	80026e6 <HAL_HCD_IRQHandler+0x15a>
 80026e4:	2300      	movs	r3, #0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d012      	beq.n	8002710 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	699a      	ldr	r2, [r3, #24]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0210 	bic.w	r2, r2, #16
 80026f8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f001 f906 	bl	800390c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699a      	ldr	r2, [r3, #24]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0210 	orr.w	r2, r2, #16
 800270e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f003 fe7b 	bl	8006410 <USB_ReadInterrupts>
 800271a:	4603      	mov	r3, r0
 800271c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002720:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002724:	d13a      	bne.n	800279c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f004 fa8e 	bl	8006c4c <USB_HC_ReadInterrupt>
 8002730:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	e025      	b.n	8002784 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	fa22 f303 	lsr.w	r3, r2, r3
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d018      	beq.n	800277e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	015a      	lsls	r2, r3, #5
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4413      	add	r3, r2
 8002754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800275e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002762:	d106      	bne.n	8002772 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	b2db      	uxtb	r3, r3
 8002768:	4619      	mov	r1, r3
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f8ab 	bl	80028c6 <HCD_HC_IN_IRQHandler>
 8002770:	e005      	b.n	800277e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	4619      	mov	r1, r3
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 fcc6 	bl	800310a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	3301      	adds	r3, #1
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	429a      	cmp	r2, r3
 800278c:	d3d4      	bcc.n	8002738 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002796:	615a      	str	r2, [r3, #20]
 8002798:	e000      	b.n	800279c <HAL_HCD_IRQHandler+0x210>
      return;
 800279a:	bf00      	nop
    }
  }
}
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_HCD_Start+0x16>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e013      	b.n	80027e0 <HAL_HCD_Start+0x3e>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2101      	movs	r1, #1
 80027c6:	4618      	mov	r0, r3
 80027c8:	f003 ff8e 	bl	80066e8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f003 fcd4 	bl	800617e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d101      	bne.n	80027fe <HAL_HCD_Stop+0x16>
 80027fa:	2302      	movs	r3, #2
 80027fc:	e00d      	b.n	800281a <HAL_HCD_Stop+0x32>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f004 fb88 	bl	8006f20 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f003 ff30 	bl	8006694 <USB_ResetPort>
 8002834:	4603      	mov	r3, r0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	460b      	mov	r3, r1
 8002848:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800284a:	78fb      	ldrb	r3, [r7, #3]
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	212c      	movs	r1, #44	; 0x2c
 8002850:	fb01 f303 	mul.w	r3, r1, r3
 8002854:	4413      	add	r3, r2
 8002856:	3360      	adds	r3, #96	; 0x60
 8002858:	781b      	ldrb	r3, [r3, #0]
}
 800285a:	4618      	mov	r0, r3
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	460b      	mov	r3, r1
 8002870:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002872:	78fb      	ldrb	r3, [r7, #3]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	212c      	movs	r1, #44	; 0x2c
 8002878:	fb01 f303 	mul.w	r3, r1, r3
 800287c:	4413      	add	r3, r2
 800287e:	3350      	adds	r3, #80	; 0x50
 8002880:	681b      	ldr	r3, [r3, #0]
}
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f003 ff74 	bl	8006788 <USB_GetCurrentFrame>
 80028a0:	4603      	mov	r3, r0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f003 ff4f 	bl	800675a <USB_GetHostSpeed>
 80028bc:	4603      	mov	r3, r0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b086      	sub	sp, #24
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
 80028ce:	460b      	mov	r3, r1
 80028d0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d119      	bne.n	800292a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	015a      	lsls	r2, r3, #5
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002902:	461a      	mov	r2, r3
 8002904:	2304      	movs	r3, #4
 8002906:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	015a      	lsls	r2, r3, #5
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	4413      	add	r3, r2
 8002910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	0151      	lsls	r1, r2, #5
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	440a      	add	r2, r1
 800291e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002922:	f043 0302 	orr.w	r3, r3, #2
 8002926:	60d3      	str	r3, [r2, #12]
 8002928:	e101      	b.n	8002b2e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	015a      	lsls	r2, r3, #5
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4413      	add	r3, r2
 8002932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002940:	d12b      	bne.n	800299a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	015a      	lsls	r2, r3, #5
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4413      	add	r3, r2
 800294a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294e:	461a      	mov	r2, r3
 8002950:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002954:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	212c      	movs	r1, #44	; 0x2c
 800295c:	fb01 f303 	mul.w	r3, r1, r3
 8002960:	4413      	add	r3, r2
 8002962:	3361      	adds	r3, #97	; 0x61
 8002964:	2207      	movs	r2, #7
 8002966:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	015a      	lsls	r2, r3, #5
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4413      	add	r3, r2
 8002970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	0151      	lsls	r1, r2, #5
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	440a      	add	r2, r1
 800297e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002982:	f043 0302 	orr.w	r3, r3, #2
 8002986:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	4611      	mov	r1, r2
 8002992:	4618      	mov	r0, r3
 8002994:	f004 f96b 	bl	8006c6e <USB_HC_Halt>
 8002998:	e0c9      	b.n	8002b2e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	015a      	lsls	r2, r3, #5
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	4413      	add	r3, r2
 80029a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 0320 	and.w	r3, r3, #32
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	d109      	bne.n	80029c4 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	015a      	lsls	r2, r3, #5
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4413      	add	r3, r2
 80029b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029bc:	461a      	mov	r2, r3
 80029be:	2320      	movs	r3, #32
 80029c0:	6093      	str	r3, [r2, #8]
 80029c2:	e0b4      	b.n	8002b2e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d133      	bne.n	8002a42 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	015a      	lsls	r2, r3, #5
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4413      	add	r3, r2
 80029e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	0151      	lsls	r1, r2, #5
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	440a      	add	r2, r1
 80029f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029f4:	f043 0302 	orr.w	r3, r3, #2
 80029f8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	212c      	movs	r1, #44	; 0x2c
 8002a00:	fb01 f303 	mul.w	r3, r1, r3
 8002a04:	4413      	add	r3, r2
 8002a06:	3361      	adds	r3, #97	; 0x61
 8002a08:	2205      	movs	r2, #5
 8002a0a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a18:	461a      	mov	r2, r3
 8002a1a:	2310      	movs	r3, #16
 8002a1c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	015a      	lsls	r2, r3, #5
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4413      	add	r3, r2
 8002a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	2308      	movs	r3, #8
 8002a2e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	4611      	mov	r1, r2
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f004 f917 	bl	8006c6e <USB_HC_Halt>
 8002a40:	e075      	b.n	8002b2e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a58:	d134      	bne.n	8002ac4 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	0151      	lsls	r1, r2, #5
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	440a      	add	r2, r1
 8002a70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a74:	f043 0302 	orr.w	r3, r3, #2
 8002a78:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	212c      	movs	r1, #44	; 0x2c
 8002a80:	fb01 f303 	mul.w	r3, r1, r3
 8002a84:	4413      	add	r3, r2
 8002a86:	3361      	adds	r3, #97	; 0x61
 8002a88:	2208      	movs	r2, #8
 8002a8a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a98:	461a      	mov	r2, r3
 8002a9a:	2310      	movs	r3, #16
 8002a9c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aaa:	461a      	mov	r2, r3
 8002aac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ab0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	4611      	mov	r1, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f004 f8d6 	bl	8006c6e <USB_HC_Halt>
 8002ac2:	e034      	b.n	8002b2e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad6:	2b80      	cmp	r3, #128	; 0x80
 8002ad8:	d129      	bne.n	8002b2e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	015a      	lsls	r2, r3, #5
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	0151      	lsls	r1, r2, #5
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	440a      	add	r2, r1
 8002af0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002af4:	f043 0302 	orr.w	r3, r3, #2
 8002af8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	212c      	movs	r1, #44	; 0x2c
 8002b00:	fb01 f303 	mul.w	r3, r1, r3
 8002b04:	4413      	add	r3, r2
 8002b06:	3361      	adds	r3, #97	; 0x61
 8002b08:	2206      	movs	r2, #6
 8002b0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	4611      	mov	r1, r2
 8002b16:	4618      	mov	r0, r3
 8002b18:	f004 f8a9 	bl	8006c6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b28:	461a      	mov	r2, r3
 8002b2a:	2380      	movs	r3, #128	; 0x80
 8002b2c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b44:	d122      	bne.n	8002b8c <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	015a      	lsls	r2, r3, #5
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	0151      	lsls	r1, r2, #5
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	440a      	add	r2, r1
 8002b5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b60:	f043 0302 	orr.w	r3, r3, #2
 8002b64:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	4611      	mov	r1, r2
 8002b70:	4618      	mov	r0, r3
 8002b72:	f004 f87c 	bl	8006c6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	015a      	lsls	r2, r3, #5
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b82:	461a      	mov	r2, r3
 8002b84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b88:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002b8a:	e2ba      	b.n	8003102 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	015a      	lsls	r2, r3, #5
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4413      	add	r3, r2
 8002b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	f040 811b 	bne.w	8002dda <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d019      	beq.n	8002be0 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	212c      	movs	r1, #44	; 0x2c
 8002bb2:	fb01 f303 	mul.w	r3, r1, r3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3348      	adds	r3, #72	; 0x48
 8002bba:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	0159      	lsls	r1, r3, #5
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002bce:	1ad2      	subs	r2, r2, r3
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	202c      	movs	r0, #44	; 0x2c
 8002bd6:	fb00 f303 	mul.w	r3, r0, r3
 8002bda:	440b      	add	r3, r1
 8002bdc:	3350      	adds	r3, #80	; 0x50
 8002bde:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	212c      	movs	r1, #44	; 0x2c
 8002be6:	fb01 f303 	mul.w	r3, r1, r3
 8002bea:	4413      	add	r3, r2
 8002bec:	3361      	adds	r3, #97	; 0x61
 8002bee:	2201      	movs	r2, #1
 8002bf0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	212c      	movs	r1, #44	; 0x2c
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	335c      	adds	r3, #92	; 0x5c
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c10:	461a      	mov	r2, r3
 8002c12:	2301      	movs	r3, #1
 8002c14:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	212c      	movs	r1, #44	; 0x2c
 8002c1c:	fb01 f303 	mul.w	r3, r1, r3
 8002c20:	4413      	add	r3, r2
 8002c22:	333f      	adds	r3, #63	; 0x3f
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d009      	beq.n	8002c3e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	212c      	movs	r1, #44	; 0x2c
 8002c30:	fb01 f303 	mul.w	r3, r1, r3
 8002c34:	4413      	add	r3, r2
 8002c36:	333f      	adds	r3, #63	; 0x3f
 8002c38:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d121      	bne.n	8002c82 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	015a      	lsls	r2, r3, #5
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	0151      	lsls	r1, r2, #5
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	440a      	add	r2, r1
 8002c54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c58:	f043 0302 	orr.w	r3, r3, #2
 8002c5c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	4611      	mov	r1, r2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f004 f800 	bl	8006c6e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	015a      	lsls	r2, r3, #5
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	2310      	movs	r3, #16
 8002c7e:	6093      	str	r3, [r2, #8]
 8002c80:	e066      	b.n	8002d50 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	212c      	movs	r1, #44	; 0x2c
 8002c88:	fb01 f303 	mul.w	r3, r1, r3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	333f      	adds	r3, #63	; 0x3f
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	d127      	bne.n	8002ce6 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	015a      	lsls	r2, r3, #5
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	0151      	lsls	r1, r2, #5
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	440a      	add	r2, r1
 8002cac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002cb4:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	212c      	movs	r1, #44	; 0x2c
 8002cbc:	fb01 f303 	mul.w	r3, r1, r3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3360      	adds	r3, #96	; 0x60
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	b2d9      	uxtb	r1, r3
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	202c      	movs	r0, #44	; 0x2c
 8002cd2:	fb00 f303 	mul.w	r3, r0, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3360      	adds	r3, #96	; 0x60
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f006 f982 	bl	8008fe8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ce4:	e034      	b.n	8002d50 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	212c      	movs	r1, #44	; 0x2c
 8002cec:	fb01 f303 	mul.w	r3, r1, r3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	333f      	adds	r3, #63	; 0x3f
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d12a      	bne.n	8002d50 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	212c      	movs	r1, #44	; 0x2c
 8002d00:	fb01 f303 	mul.w	r3, r1, r3
 8002d04:	4413      	add	r3, r2
 8002d06:	3360      	adds	r3, #96	; 0x60
 8002d08:	2201      	movs	r2, #1
 8002d0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	212c      	movs	r1, #44	; 0x2c
 8002d12:	fb01 f303 	mul.w	r3, r1, r3
 8002d16:	4413      	add	r3, r2
 8002d18:	3354      	adds	r3, #84	; 0x54
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	f083 0301 	eor.w	r3, r3, #1
 8002d20:	b2d8      	uxtb	r0, r3
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	212c      	movs	r1, #44	; 0x2c
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3354      	adds	r3, #84	; 0x54
 8002d30:	4602      	mov	r2, r0
 8002d32:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	b2d9      	uxtb	r1, r3
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	202c      	movs	r0, #44	; 0x2c
 8002d3e:	fb00 f303 	mul.w	r3, r0, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	3360      	adds	r3, #96	; 0x60
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f006 f94c 	bl	8008fe8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d12b      	bne.n	8002db0 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	212c      	movs	r1, #44	; 0x2c
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	3348      	adds	r3, #72	; 0x48
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	202c      	movs	r0, #44	; 0x2c
 8002d6e:	fb00 f202 	mul.w	r2, r0, r2
 8002d72:	440a      	add	r2, r1
 8002d74:	3240      	adds	r2, #64	; 0x40
 8002d76:	8812      	ldrh	r2, [r2, #0]
 8002d78:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 81be 	beq.w	8003102 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	212c      	movs	r1, #44	; 0x2c
 8002d8c:	fb01 f303 	mul.w	r3, r1, r3
 8002d90:	4413      	add	r3, r2
 8002d92:	3354      	adds	r3, #84	; 0x54
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	f083 0301 	eor.w	r3, r3, #1
 8002d9a:	b2d8      	uxtb	r0, r3
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	212c      	movs	r1, #44	; 0x2c
 8002da2:	fb01 f303 	mul.w	r3, r1, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	3354      	adds	r3, #84	; 0x54
 8002daa:	4602      	mov	r2, r0
 8002dac:	701a      	strb	r2, [r3, #0]
}
 8002dae:	e1a8      	b.n	8003102 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	212c      	movs	r1, #44	; 0x2c
 8002db6:	fb01 f303 	mul.w	r3, r1, r3
 8002dba:	4413      	add	r3, r2
 8002dbc:	3354      	adds	r3, #84	; 0x54
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	f083 0301 	eor.w	r3, r3, #1
 8002dc4:	b2d8      	uxtb	r0, r3
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	212c      	movs	r1, #44	; 0x2c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3354      	adds	r3, #84	; 0x54
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	701a      	strb	r2, [r3, #0]
}
 8002dd8:	e193      	b.n	8003102 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	015a      	lsls	r2, r3, #5
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	f040 8106 	bne.w	8002ffe <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	015a      	lsls	r2, r3, #5
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	0151      	lsls	r1, r2, #5
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	440a      	add	r2, r1
 8002e08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e0c:	f023 0302 	bic.w	r3, r3, #2
 8002e10:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	212c      	movs	r1, #44	; 0x2c
 8002e18:	fb01 f303 	mul.w	r3, r1, r3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3361      	adds	r3, #97	; 0x61
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d109      	bne.n	8002e3a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	212c      	movs	r1, #44	; 0x2c
 8002e2c:	fb01 f303 	mul.w	r3, r1, r3
 8002e30:	4413      	add	r3, r2
 8002e32:	3360      	adds	r3, #96	; 0x60
 8002e34:	2201      	movs	r2, #1
 8002e36:	701a      	strb	r2, [r3, #0]
 8002e38:	e0c9      	b.n	8002fce <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	212c      	movs	r1, #44	; 0x2c
 8002e40:	fb01 f303 	mul.w	r3, r1, r3
 8002e44:	4413      	add	r3, r2
 8002e46:	3361      	adds	r3, #97	; 0x61
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b05      	cmp	r3, #5
 8002e4c:	d109      	bne.n	8002e62 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	212c      	movs	r1, #44	; 0x2c
 8002e54:	fb01 f303 	mul.w	r3, r1, r3
 8002e58:	4413      	add	r3, r2
 8002e5a:	3360      	adds	r3, #96	; 0x60
 8002e5c:	2205      	movs	r2, #5
 8002e5e:	701a      	strb	r2, [r3, #0]
 8002e60:	e0b5      	b.n	8002fce <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	212c      	movs	r1, #44	; 0x2c
 8002e68:	fb01 f303 	mul.w	r3, r1, r3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	3361      	adds	r3, #97	; 0x61
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b06      	cmp	r3, #6
 8002e74:	d009      	beq.n	8002e8a <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	212c      	movs	r1, #44	; 0x2c
 8002e7c:	fb01 f303 	mul.w	r3, r1, r3
 8002e80:	4413      	add	r3, r2
 8002e82:	3361      	adds	r3, #97	; 0x61
 8002e84:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d150      	bne.n	8002f2c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	212c      	movs	r1, #44	; 0x2c
 8002e90:	fb01 f303 	mul.w	r3, r1, r3
 8002e94:	4413      	add	r3, r2
 8002e96:	335c      	adds	r3, #92	; 0x5c
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	202c      	movs	r0, #44	; 0x2c
 8002ea2:	fb00 f303 	mul.w	r3, r0, r3
 8002ea6:	440b      	add	r3, r1
 8002ea8:	335c      	adds	r3, #92	; 0x5c
 8002eaa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	212c      	movs	r1, #44	; 0x2c
 8002eb2:	fb01 f303 	mul.w	r3, r1, r3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	335c      	adds	r3, #92	; 0x5c
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d912      	bls.n	8002ee6 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	212c      	movs	r1, #44	; 0x2c
 8002ec6:	fb01 f303 	mul.w	r3, r1, r3
 8002eca:	4413      	add	r3, r2
 8002ecc:	335c      	adds	r3, #92	; 0x5c
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	212c      	movs	r1, #44	; 0x2c
 8002ed8:	fb01 f303 	mul.w	r3, r1, r3
 8002edc:	4413      	add	r3, r2
 8002ede:	3360      	adds	r3, #96	; 0x60
 8002ee0:	2204      	movs	r2, #4
 8002ee2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ee4:	e073      	b.n	8002fce <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	212c      	movs	r1, #44	; 0x2c
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3360      	adds	r3, #96	; 0x60
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f0e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f16:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f24:	461a      	mov	r2, r3
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f2a:	e050      	b.n	8002fce <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	212c      	movs	r1, #44	; 0x2c
 8002f32:	fb01 f303 	mul.w	r3, r1, r3
 8002f36:	4413      	add	r3, r2
 8002f38:	3361      	adds	r3, #97	; 0x61
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d122      	bne.n	8002f86 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	212c      	movs	r1, #44	; 0x2c
 8002f46:	fb01 f303 	mul.w	r3, r1, r3
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3360      	adds	r3, #96	; 0x60
 8002f4e:	2202      	movs	r2, #2
 8002f50:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	015a      	lsls	r2, r3, #5
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	4413      	add	r3, r2
 8002f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f68:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f70:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7e:	461a      	mov	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	e023      	b.n	8002fce <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	212c      	movs	r1, #44	; 0x2c
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	4413      	add	r3, r2
 8002f92:	3361      	adds	r3, #97	; 0x61
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b07      	cmp	r3, #7
 8002f98:	d119      	bne.n	8002fce <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	212c      	movs	r1, #44	; 0x2c
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	335c      	adds	r3, #92	; 0x5c
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	202c      	movs	r0, #44	; 0x2c
 8002fb2:	fb00 f303 	mul.w	r3, r0, r3
 8002fb6:	440b      	add	r3, r1
 8002fb8:	335c      	adds	r3, #92	; 0x5c
 8002fba:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	212c      	movs	r1, #44	; 0x2c
 8002fc2:	fb01 f303 	mul.w	r3, r1, r3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3360      	adds	r3, #96	; 0x60
 8002fca:	2204      	movs	r2, #4
 8002fcc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	015a      	lsls	r2, r3, #5
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fda:	461a      	mov	r2, r3
 8002fdc:	2302      	movs	r3, #2
 8002fde:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	b2d9      	uxtb	r1, r3
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	202c      	movs	r0, #44	; 0x2c
 8002fea:	fb00 f303 	mul.w	r3, r0, r3
 8002fee:	4413      	add	r3, r2
 8002ff0:	3360      	adds	r3, #96	; 0x60
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f005 fff6 	bl	8008fe8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ffc:	e081      	b.n	8003102 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4413      	add	r3, r2
 8003006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 0310 	and.w	r3, r3, #16
 8003010:	2b10      	cmp	r3, #16
 8003012:	d176      	bne.n	8003102 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	212c      	movs	r1, #44	; 0x2c
 800301a:	fb01 f303 	mul.w	r3, r1, r3
 800301e:	4413      	add	r3, r2
 8003020:	333f      	adds	r3, #63	; 0x3f
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b03      	cmp	r3, #3
 8003026:	d121      	bne.n	800306c <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	212c      	movs	r1, #44	; 0x2c
 800302e:	fb01 f303 	mul.w	r3, r1, r3
 8003032:	4413      	add	r3, r2
 8003034:	335c      	adds	r3, #92	; 0x5c
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	015a      	lsls	r2, r3, #5
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	4413      	add	r3, r2
 8003042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	0151      	lsls	r1, r2, #5
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	440a      	add	r2, r1
 8003050:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003054:	f043 0302 	orr.w	r3, r3, #2
 8003058:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	4611      	mov	r1, r2
 8003064:	4618      	mov	r0, r3
 8003066:	f003 fe02 	bl	8006c6e <USB_HC_Halt>
 800306a:	e041      	b.n	80030f0 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	212c      	movs	r1, #44	; 0x2c
 8003072:	fb01 f303 	mul.w	r3, r1, r3
 8003076:	4413      	add	r3, r2
 8003078:	333f      	adds	r3, #63	; 0x3f
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d009      	beq.n	8003094 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	212c      	movs	r1, #44	; 0x2c
 8003086:	fb01 f303 	mul.w	r3, r1, r3
 800308a:	4413      	add	r3, r2
 800308c:	333f      	adds	r3, #63	; 0x3f
 800308e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003090:	2b02      	cmp	r3, #2
 8003092:	d12d      	bne.n	80030f0 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	212c      	movs	r1, #44	; 0x2c
 800309a:	fb01 f303 	mul.w	r3, r1, r3
 800309e:	4413      	add	r3, r2
 80030a0:	335c      	adds	r3, #92	; 0x5c
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d120      	bne.n	80030f0 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	212c      	movs	r1, #44	; 0x2c
 80030b4:	fb01 f303 	mul.w	r3, r1, r3
 80030b8:	4413      	add	r3, r2
 80030ba:	3361      	adds	r3, #97	; 0x61
 80030bc:	2203      	movs	r2, #3
 80030be:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	015a      	lsls	r2, r3, #5
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	4413      	add	r3, r2
 80030c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	0151      	lsls	r1, r2, #5
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	440a      	add	r2, r1
 80030d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030da:	f043 0302 	orr.w	r3, r3, #2
 80030de:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	4611      	mov	r1, r2
 80030ea:	4618      	mov	r0, r3
 80030ec:	f003 fdbf 	bl	8006c6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fc:	461a      	mov	r2, r3
 80030fe:	2310      	movs	r3, #16
 8003100:	6093      	str	r3, [r2, #8]
}
 8003102:	bf00      	nop
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b088      	sub	sp, #32
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	460b      	mov	r3, r1
 8003114:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003120:	78fb      	ldrb	r3, [r7, #3]
 8003122:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	015a      	lsls	r2, r3, #5
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	4413      	add	r3, r2
 800312c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	2b04      	cmp	r3, #4
 8003138:	d119      	bne.n	800316e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	015a      	lsls	r2, r3, #5
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	4413      	add	r3, r2
 8003142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003146:	461a      	mov	r2, r3
 8003148:	2304      	movs	r3, #4
 800314a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	4413      	add	r3, r2
 8003154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	0151      	lsls	r1, r2, #5
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	440a      	add	r2, r1
 8003162:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003166:	f043 0302 	orr.w	r3, r3, #2
 800316a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800316c:	e3ca      	b.n	8003904 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	015a      	lsls	r2, r3, #5
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	4413      	add	r3, r2
 8003176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 0320 	and.w	r3, r3, #32
 8003180:	2b20      	cmp	r3, #32
 8003182:	d13e      	bne.n	8003202 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	015a      	lsls	r2, r3, #5
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	4413      	add	r3, r2
 800318c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003190:	461a      	mov	r2, r3
 8003192:	2320      	movs	r3, #32
 8003194:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	212c      	movs	r1, #44	; 0x2c
 800319c:	fb01 f303 	mul.w	r3, r1, r3
 80031a0:	4413      	add	r3, r2
 80031a2:	333d      	adds	r3, #61	; 0x3d
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	f040 83ac 	bne.w	8003904 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	212c      	movs	r1, #44	; 0x2c
 80031b2:	fb01 f303 	mul.w	r3, r1, r3
 80031b6:	4413      	add	r3, r2
 80031b8:	333d      	adds	r3, #61	; 0x3d
 80031ba:	2200      	movs	r2, #0
 80031bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	212c      	movs	r1, #44	; 0x2c
 80031c4:	fb01 f303 	mul.w	r3, r1, r3
 80031c8:	4413      	add	r3, r2
 80031ca:	3360      	adds	r3, #96	; 0x60
 80031cc:	2202      	movs	r2, #2
 80031ce:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	015a      	lsls	r2, r3, #5
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	4413      	add	r3, r2
 80031d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	0151      	lsls	r1, r2, #5
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	440a      	add	r2, r1
 80031e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031ea:	f043 0302 	orr.w	r3, r3, #2
 80031ee:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	4611      	mov	r1, r2
 80031fa:	4618      	mov	r0, r3
 80031fc:	f003 fd37 	bl	8006c6e <USB_HC_Halt>
}
 8003200:	e380      	b.n	8003904 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	015a      	lsls	r2, r3, #5
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	4413      	add	r3, r2
 800320a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003218:	d122      	bne.n	8003260 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	015a      	lsls	r2, r3, #5
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	4413      	add	r3, r2
 8003222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	0151      	lsls	r1, r2, #5
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	440a      	add	r2, r1
 8003230:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003234:	f043 0302 	orr.w	r3, r3, #2
 8003238:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	4611      	mov	r1, r2
 8003244:	4618      	mov	r0, r3
 8003246:	f003 fd12 	bl	8006c6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	4413      	add	r3, r2
 8003252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003256:	461a      	mov	r2, r3
 8003258:	f44f 7300 	mov.w	r3, #512	; 0x200
 800325c:	6093      	str	r3, [r2, #8]
}
 800325e:	e351      	b.n	8003904 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	4413      	add	r3, r2
 8003268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b01      	cmp	r3, #1
 8003274:	d150      	bne.n	8003318 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	212c      	movs	r1, #44	; 0x2c
 800327c:	fb01 f303 	mul.w	r3, r1, r3
 8003280:	4413      	add	r3, r2
 8003282:	335c      	adds	r3, #92	; 0x5c
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	4413      	add	r3, r2
 8003290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329a:	2b40      	cmp	r3, #64	; 0x40
 800329c:	d111      	bne.n	80032c2 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	212c      	movs	r1, #44	; 0x2c
 80032a4:	fb01 f303 	mul.w	r3, r1, r3
 80032a8:	4413      	add	r3, r2
 80032aa:	333d      	adds	r3, #61	; 0x3d
 80032ac:	2201      	movs	r2, #1
 80032ae:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	015a      	lsls	r2, r3, #5
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032bc:	461a      	mov	r2, r3
 80032be:	2340      	movs	r3, #64	; 0x40
 80032c0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	015a      	lsls	r2, r3, #5
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	4413      	add	r3, r2
 80032ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	0151      	lsls	r1, r2, #5
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	440a      	add	r2, r1
 80032d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032dc:	f043 0302 	orr.w	r3, r3, #2
 80032e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	4611      	mov	r1, r2
 80032ec:	4618      	mov	r0, r3
 80032ee:	f003 fcbe 	bl	8006c6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	015a      	lsls	r2, r3, #5
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fe:	461a      	mov	r2, r3
 8003300:	2301      	movs	r3, #1
 8003302:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	212c      	movs	r1, #44	; 0x2c
 800330a:	fb01 f303 	mul.w	r3, r1, r3
 800330e:	4413      	add	r3, r2
 8003310:	3361      	adds	r3, #97	; 0x61
 8003312:	2201      	movs	r2, #1
 8003314:	701a      	strb	r2, [r3, #0]
}
 8003316:	e2f5      	b.n	8003904 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	4413      	add	r3, r2
 8003320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332a:	2b40      	cmp	r3, #64	; 0x40
 800332c:	d13c      	bne.n	80033a8 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	212c      	movs	r1, #44	; 0x2c
 8003334:	fb01 f303 	mul.w	r3, r1, r3
 8003338:	4413      	add	r3, r2
 800333a:	3361      	adds	r3, #97	; 0x61
 800333c:	2204      	movs	r2, #4
 800333e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	212c      	movs	r1, #44	; 0x2c
 8003346:	fb01 f303 	mul.w	r3, r1, r3
 800334a:	4413      	add	r3, r2
 800334c:	333d      	adds	r3, #61	; 0x3d
 800334e:	2201      	movs	r2, #1
 8003350:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	212c      	movs	r1, #44	; 0x2c
 8003358:	fb01 f303 	mul.w	r3, r1, r3
 800335c:	4413      	add	r3, r2
 800335e:	335c      	adds	r3, #92	; 0x5c
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	4413      	add	r3, r2
 800336c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	0151      	lsls	r1, r2, #5
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	440a      	add	r2, r1
 800337a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800337e:	f043 0302 	orr.w	r3, r3, #2
 8003382:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	4611      	mov	r1, r2
 800338e:	4618      	mov	r0, r3
 8003390:	f003 fc6d 	bl	8006c6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	4413      	add	r3, r2
 800339c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a0:	461a      	mov	r2, r3
 80033a2:	2340      	movs	r3, #64	; 0x40
 80033a4:	6093      	str	r3, [r2, #8]
}
 80033a6:	e2ad      	b.n	8003904 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d12a      	bne.n	8003414 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ca:	461a      	mov	r2, r3
 80033cc:	2308      	movs	r3, #8
 80033ce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	015a      	lsls	r2, r3, #5
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	4413      	add	r3, r2
 80033d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	0151      	lsls	r1, r2, #5
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	440a      	add	r2, r1
 80033e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033ea:	f043 0302 	orr.w	r3, r3, #2
 80033ee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	4611      	mov	r1, r2
 80033fa:	4618      	mov	r0, r3
 80033fc:	f003 fc37 	bl	8006c6e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	212c      	movs	r1, #44	; 0x2c
 8003406:	fb01 f303 	mul.w	r3, r1, r3
 800340a:	4413      	add	r3, r2
 800340c:	3361      	adds	r3, #97	; 0x61
 800340e:	2205      	movs	r2, #5
 8003410:	701a      	strb	r2, [r3, #0]
}
 8003412:	e277      	b.n	8003904 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	4413      	add	r3, r2
 800341c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 0310 	and.w	r3, r3, #16
 8003426:	2b10      	cmp	r3, #16
 8003428:	d150      	bne.n	80034cc <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	212c      	movs	r1, #44	; 0x2c
 8003430:	fb01 f303 	mul.w	r3, r1, r3
 8003434:	4413      	add	r3, r2
 8003436:	335c      	adds	r3, #92	; 0x5c
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	212c      	movs	r1, #44	; 0x2c
 8003442:	fb01 f303 	mul.w	r3, r1, r3
 8003446:	4413      	add	r3, r2
 8003448:	3361      	adds	r3, #97	; 0x61
 800344a:	2203      	movs	r2, #3
 800344c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	212c      	movs	r1, #44	; 0x2c
 8003454:	fb01 f303 	mul.w	r3, r1, r3
 8003458:	4413      	add	r3, r2
 800345a:	333d      	adds	r3, #61	; 0x3d
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d112      	bne.n	8003488 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	212c      	movs	r1, #44	; 0x2c
 8003468:	fb01 f303 	mul.w	r3, r1, r3
 800346c:	4413      	add	r3, r2
 800346e:	333c      	adds	r3, #60	; 0x3c
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d108      	bne.n	8003488 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	212c      	movs	r1, #44	; 0x2c
 800347c:	fb01 f303 	mul.w	r3, r1, r3
 8003480:	4413      	add	r3, r2
 8003482:	333d      	adds	r3, #61	; 0x3d
 8003484:	2201      	movs	r2, #1
 8003486:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	4413      	add	r3, r2
 8003490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	0151      	lsls	r1, r2, #5
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	440a      	add	r2, r1
 800349e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034a2:	f043 0302 	orr.w	r3, r3, #2
 80034a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	4611      	mov	r1, r2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f003 fbdb 	bl	8006c6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c4:	461a      	mov	r2, r3
 80034c6:	2310      	movs	r3, #16
 80034c8:	6093      	str	r3, [r2, #8]
}
 80034ca:	e21b      	b.n	8003904 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	015a      	lsls	r2, r3, #5
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034de:	2b80      	cmp	r3, #128	; 0x80
 80034e0:	d174      	bne.n	80035cc <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d121      	bne.n	800352e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	212c      	movs	r1, #44	; 0x2c
 80034f0:	fb01 f303 	mul.w	r3, r1, r3
 80034f4:	4413      	add	r3, r2
 80034f6:	3361      	adds	r3, #97	; 0x61
 80034f8:	2206      	movs	r2, #6
 80034fa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	015a      	lsls	r2, r3, #5
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	4413      	add	r3, r2
 8003504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	0151      	lsls	r1, r2, #5
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	440a      	add	r2, r1
 8003512:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003516:	f043 0302 	orr.w	r3, r3, #2
 800351a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	4611      	mov	r1, r2
 8003526:	4618      	mov	r0, r3
 8003528:	f003 fba1 	bl	8006c6e <USB_HC_Halt>
 800352c:	e044      	b.n	80035b8 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	212c      	movs	r1, #44	; 0x2c
 8003534:	fb01 f303 	mul.w	r3, r1, r3
 8003538:	4413      	add	r3, r2
 800353a:	335c      	adds	r3, #92	; 0x5c
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	202c      	movs	r0, #44	; 0x2c
 8003546:	fb00 f303 	mul.w	r3, r0, r3
 800354a:	440b      	add	r3, r1
 800354c:	335c      	adds	r3, #92	; 0x5c
 800354e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	212c      	movs	r1, #44	; 0x2c
 8003556:	fb01 f303 	mul.w	r3, r1, r3
 800355a:	4413      	add	r3, r2
 800355c:	335c      	adds	r3, #92	; 0x5c
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b02      	cmp	r3, #2
 8003562:	d920      	bls.n	80035a6 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	212c      	movs	r1, #44	; 0x2c
 800356a:	fb01 f303 	mul.w	r3, r1, r3
 800356e:	4413      	add	r3, r2
 8003570:	335c      	adds	r3, #92	; 0x5c
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	212c      	movs	r1, #44	; 0x2c
 800357c:	fb01 f303 	mul.w	r3, r1, r3
 8003580:	4413      	add	r3, r2
 8003582:	3360      	adds	r3, #96	; 0x60
 8003584:	2204      	movs	r2, #4
 8003586:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	b2d9      	uxtb	r1, r3
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	202c      	movs	r0, #44	; 0x2c
 8003592:	fb00 f303 	mul.w	r3, r0, r3
 8003596:	4413      	add	r3, r2
 8003598:	3360      	adds	r3, #96	; 0x60
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	461a      	mov	r2, r3
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f005 fd22 	bl	8008fe8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80035a4:	e008      	b.n	80035b8 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	212c      	movs	r1, #44	; 0x2c
 80035ac:	fb01 f303 	mul.w	r3, r1, r3
 80035b0:	4413      	add	r3, r2
 80035b2:	3360      	adds	r3, #96	; 0x60
 80035b4:	2202      	movs	r2, #2
 80035b6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c4:	461a      	mov	r2, r3
 80035c6:	2380      	movs	r3, #128	; 0x80
 80035c8:	6093      	str	r3, [r2, #8]
}
 80035ca:	e19b      	b.n	8003904 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e2:	d134      	bne.n	800364e <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	0151      	lsls	r1, r2, #5
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	440a      	add	r2, r1
 80035fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035fe:	f043 0302 	orr.w	r3, r3, #2
 8003602:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	4611      	mov	r1, r2
 800360e:	4618      	mov	r0, r3
 8003610:	f003 fb2d 	bl	8006c6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	4413      	add	r3, r2
 800361c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003620:	461a      	mov	r2, r3
 8003622:	2310      	movs	r3, #16
 8003624:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	015a      	lsls	r2, r3, #5
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	4413      	add	r3, r2
 800362e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003632:	461a      	mov	r2, r3
 8003634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003638:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	212c      	movs	r1, #44	; 0x2c
 8003640:	fb01 f303 	mul.w	r3, r1, r3
 8003644:	4413      	add	r3, r2
 8003646:	3361      	adds	r3, #97	; 0x61
 8003648:	2208      	movs	r2, #8
 800364a:	701a      	strb	r2, [r3, #0]
}
 800364c:	e15a      	b.n	8003904 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	015a      	lsls	r2, r3, #5
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	4413      	add	r3, r2
 8003656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b02      	cmp	r3, #2
 8003662:	f040 814f 	bne.w	8003904 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	4413      	add	r3, r2
 800366e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	0151      	lsls	r1, r2, #5
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	440a      	add	r2, r1
 800367c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003680:	f023 0302 	bic.w	r3, r3, #2
 8003684:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	212c      	movs	r1, #44	; 0x2c
 800368c:	fb01 f303 	mul.w	r3, r1, r3
 8003690:	4413      	add	r3, r2
 8003692:	3361      	adds	r3, #97	; 0x61
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d17d      	bne.n	8003796 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	212c      	movs	r1, #44	; 0x2c
 80036a0:	fb01 f303 	mul.w	r3, r1, r3
 80036a4:	4413      	add	r3, r2
 80036a6:	3360      	adds	r3, #96	; 0x60
 80036a8:	2201      	movs	r2, #1
 80036aa:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	212c      	movs	r1, #44	; 0x2c
 80036b2:	fb01 f303 	mul.w	r3, r1, r3
 80036b6:	4413      	add	r3, r2
 80036b8:	333f      	adds	r3, #63	; 0x3f
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d00a      	beq.n	80036d6 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	212c      	movs	r1, #44	; 0x2c
 80036c6:	fb01 f303 	mul.w	r3, r1, r3
 80036ca:	4413      	add	r3, r2
 80036cc:	333f      	adds	r3, #63	; 0x3f
 80036ce:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	f040 8100 	bne.w	80038d6 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d113      	bne.n	8003706 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	212c      	movs	r1, #44	; 0x2c
 80036e4:	fb01 f303 	mul.w	r3, r1, r3
 80036e8:	4413      	add	r3, r2
 80036ea:	3355      	adds	r3, #85	; 0x55
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	f083 0301 	eor.w	r3, r3, #1
 80036f2:	b2d8      	uxtb	r0, r3
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	212c      	movs	r1, #44	; 0x2c
 80036fa:	fb01 f303 	mul.w	r3, r1, r3
 80036fe:	4413      	add	r3, r2
 8003700:	3355      	adds	r3, #85	; 0x55
 8003702:	4602      	mov	r2, r0
 8003704:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	2b01      	cmp	r3, #1
 800370c:	f040 80e3 	bne.w	80038d6 <HCD_HC_OUT_IRQHandler+0x7cc>
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	212c      	movs	r1, #44	; 0x2c
 8003716:	fb01 f303 	mul.w	r3, r1, r3
 800371a:	4413      	add	r3, r2
 800371c:	334c      	adds	r3, #76	; 0x4c
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 80d8 	beq.w	80038d6 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	212c      	movs	r1, #44	; 0x2c
 800372c:	fb01 f303 	mul.w	r3, r1, r3
 8003730:	4413      	add	r3, r2
 8003732:	334c      	adds	r3, #76	; 0x4c
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	202c      	movs	r0, #44	; 0x2c
 800373c:	fb00 f202 	mul.w	r2, r0, r2
 8003740:	440a      	add	r2, r1
 8003742:	3240      	adds	r2, #64	; 0x40
 8003744:	8812      	ldrh	r2, [r2, #0]
 8003746:	4413      	add	r3, r2
 8003748:	3b01      	subs	r3, #1
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	202c      	movs	r0, #44	; 0x2c
 8003750:	fb00 f202 	mul.w	r2, r0, r2
 8003754:	440a      	add	r2, r1
 8003756:	3240      	adds	r2, #64	; 0x40
 8003758:	8812      	ldrh	r2, [r2, #0]
 800375a:	fbb3 f3f2 	udiv	r3, r3, r2
 800375e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 80b5 	beq.w	80038d6 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	212c      	movs	r1, #44	; 0x2c
 8003772:	fb01 f303 	mul.w	r3, r1, r3
 8003776:	4413      	add	r3, r2
 8003778:	3355      	adds	r3, #85	; 0x55
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	f083 0301 	eor.w	r3, r3, #1
 8003780:	b2d8      	uxtb	r0, r3
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	212c      	movs	r1, #44	; 0x2c
 8003788:	fb01 f303 	mul.w	r3, r1, r3
 800378c:	4413      	add	r3, r2
 800378e:	3355      	adds	r3, #85	; 0x55
 8003790:	4602      	mov	r2, r0
 8003792:	701a      	strb	r2, [r3, #0]
 8003794:	e09f      	b.n	80038d6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	212c      	movs	r1, #44	; 0x2c
 800379c:	fb01 f303 	mul.w	r3, r1, r3
 80037a0:	4413      	add	r3, r2
 80037a2:	3361      	adds	r3, #97	; 0x61
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d109      	bne.n	80037be <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	212c      	movs	r1, #44	; 0x2c
 80037b0:	fb01 f303 	mul.w	r3, r1, r3
 80037b4:	4413      	add	r3, r2
 80037b6:	3360      	adds	r3, #96	; 0x60
 80037b8:	2202      	movs	r2, #2
 80037ba:	701a      	strb	r2, [r3, #0]
 80037bc:	e08b      	b.n	80038d6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	212c      	movs	r1, #44	; 0x2c
 80037c4:	fb01 f303 	mul.w	r3, r1, r3
 80037c8:	4413      	add	r3, r2
 80037ca:	3361      	adds	r3, #97	; 0x61
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d109      	bne.n	80037e6 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	212c      	movs	r1, #44	; 0x2c
 80037d8:	fb01 f303 	mul.w	r3, r1, r3
 80037dc:	4413      	add	r3, r2
 80037de:	3360      	adds	r3, #96	; 0x60
 80037e0:	2202      	movs	r2, #2
 80037e2:	701a      	strb	r2, [r3, #0]
 80037e4:	e077      	b.n	80038d6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	212c      	movs	r1, #44	; 0x2c
 80037ec:	fb01 f303 	mul.w	r3, r1, r3
 80037f0:	4413      	add	r3, r2
 80037f2:	3361      	adds	r3, #97	; 0x61
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b05      	cmp	r3, #5
 80037f8:	d109      	bne.n	800380e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	212c      	movs	r1, #44	; 0x2c
 8003800:	fb01 f303 	mul.w	r3, r1, r3
 8003804:	4413      	add	r3, r2
 8003806:	3360      	adds	r3, #96	; 0x60
 8003808:	2205      	movs	r2, #5
 800380a:	701a      	strb	r2, [r3, #0]
 800380c:	e063      	b.n	80038d6 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	212c      	movs	r1, #44	; 0x2c
 8003814:	fb01 f303 	mul.w	r3, r1, r3
 8003818:	4413      	add	r3, r2
 800381a:	3361      	adds	r3, #97	; 0x61
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b06      	cmp	r3, #6
 8003820:	d009      	beq.n	8003836 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	212c      	movs	r1, #44	; 0x2c
 8003828:	fb01 f303 	mul.w	r3, r1, r3
 800382c:	4413      	add	r3, r2
 800382e:	3361      	adds	r3, #97	; 0x61
 8003830:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003832:	2b08      	cmp	r3, #8
 8003834:	d14f      	bne.n	80038d6 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	212c      	movs	r1, #44	; 0x2c
 800383c:	fb01 f303 	mul.w	r3, r1, r3
 8003840:	4413      	add	r3, r2
 8003842:	335c      	adds	r3, #92	; 0x5c
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	1c5a      	adds	r2, r3, #1
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	202c      	movs	r0, #44	; 0x2c
 800384e:	fb00 f303 	mul.w	r3, r0, r3
 8003852:	440b      	add	r3, r1
 8003854:	335c      	adds	r3, #92	; 0x5c
 8003856:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	212c      	movs	r1, #44	; 0x2c
 800385e:	fb01 f303 	mul.w	r3, r1, r3
 8003862:	4413      	add	r3, r2
 8003864:	335c      	adds	r3, #92	; 0x5c
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b02      	cmp	r3, #2
 800386a:	d912      	bls.n	8003892 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	212c      	movs	r1, #44	; 0x2c
 8003872:	fb01 f303 	mul.w	r3, r1, r3
 8003876:	4413      	add	r3, r2
 8003878:	335c      	adds	r3, #92	; 0x5c
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	212c      	movs	r1, #44	; 0x2c
 8003884:	fb01 f303 	mul.w	r3, r1, r3
 8003888:	4413      	add	r3, r2
 800388a:	3360      	adds	r3, #96	; 0x60
 800388c:	2204      	movs	r2, #4
 800388e:	701a      	strb	r2, [r3, #0]
 8003890:	e021      	b.n	80038d6 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	212c      	movs	r1, #44	; 0x2c
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	4413      	add	r3, r2
 800389e:	3360      	adds	r3, #96	; 0x60
 80038a0:	2202      	movs	r2, #2
 80038a2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038ba:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038c2:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d0:	461a      	mov	r2, r3
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e2:	461a      	mov	r2, r3
 80038e4:	2302      	movs	r3, #2
 80038e6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	b2d9      	uxtb	r1, r3
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	202c      	movs	r0, #44	; 0x2c
 80038f2:	fb00 f303 	mul.w	r3, r0, r3
 80038f6:	4413      	add	r3, r2
 80038f8:	3360      	adds	r3, #96	; 0x60
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	461a      	mov	r2, r3
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f005 fb72 	bl	8008fe8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003904:	bf00      	nop
 8003906:	3720      	adds	r7, #32
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b08a      	sub	sp, #40	; 0x28
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	f003 030f 	and.w	r3, r3, #15
 800392c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	0c5b      	lsrs	r3, r3, #17
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	091b      	lsrs	r3, r3, #4
 800393c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003940:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2b02      	cmp	r3, #2
 8003946:	d004      	beq.n	8003952 <HCD_RXQLVL_IRQHandler+0x46>
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	2b05      	cmp	r3, #5
 800394c:	f000 80a9 	beq.w	8003aa2 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003950:	e0aa      	b.n	8003aa8 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 80a6 	beq.w	8003aa6 <HCD_RXQLVL_IRQHandler+0x19a>
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	212c      	movs	r1, #44	; 0x2c
 8003960:	fb01 f303 	mul.w	r3, r1, r3
 8003964:	4413      	add	r3, r2
 8003966:	3344      	adds	r3, #68	; 0x44
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 809b 	beq.w	8003aa6 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	212c      	movs	r1, #44	; 0x2c
 8003976:	fb01 f303 	mul.w	r3, r1, r3
 800397a:	4413      	add	r3, r2
 800397c:	3350      	adds	r3, #80	; 0x50
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	441a      	add	r2, r3
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	202c      	movs	r0, #44	; 0x2c
 800398a:	fb00 f303 	mul.w	r3, r0, r3
 800398e:	440b      	add	r3, r1
 8003990:	334c      	adds	r3, #76	; 0x4c
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d87a      	bhi.n	8003a8e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6818      	ldr	r0, [r3, #0]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	212c      	movs	r1, #44	; 0x2c
 80039a2:	fb01 f303 	mul.w	r3, r1, r3
 80039a6:	4413      	add	r3, r2
 80039a8:	3344      	adds	r3, #68	; 0x44
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	b292      	uxth	r2, r2
 80039b0:	4619      	mov	r1, r3
 80039b2:	f002 fcd5 	bl	8006360 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	212c      	movs	r1, #44	; 0x2c
 80039bc:	fb01 f303 	mul.w	r3, r1, r3
 80039c0:	4413      	add	r3, r2
 80039c2:	3344      	adds	r3, #68	; 0x44
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	441a      	add	r2, r3
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	202c      	movs	r0, #44	; 0x2c
 80039d0:	fb00 f303 	mul.w	r3, r0, r3
 80039d4:	440b      	add	r3, r1
 80039d6:	3344      	adds	r3, #68	; 0x44
 80039d8:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	212c      	movs	r1, #44	; 0x2c
 80039e0:	fb01 f303 	mul.w	r3, r1, r3
 80039e4:	4413      	add	r3, r2
 80039e6:	3350      	adds	r3, #80	; 0x50
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	441a      	add	r2, r3
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	202c      	movs	r0, #44	; 0x2c
 80039f4:	fb00 f303 	mul.w	r3, r0, r3
 80039f8:	440b      	add	r3, r1
 80039fa:	3350      	adds	r3, #80	; 0x50
 80039fc:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	0cdb      	lsrs	r3, r3, #19
 8003a0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a12:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	212c      	movs	r1, #44	; 0x2c
 8003a1a:	fb01 f303 	mul.w	r3, r1, r3
 8003a1e:	4413      	add	r3, r2
 8003a20:	3340      	adds	r3, #64	; 0x40
 8003a22:	881b      	ldrh	r3, [r3, #0]
 8003a24:	461a      	mov	r2, r3
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d13c      	bne.n	8003aa6 <HCD_RXQLVL_IRQHandler+0x19a>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d039      	beq.n	8003aa6 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a48:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a50:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a5e:	461a      	mov	r2, r3
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	212c      	movs	r1, #44	; 0x2c
 8003a6a:	fb01 f303 	mul.w	r3, r1, r3
 8003a6e:	4413      	add	r3, r2
 8003a70:	3354      	adds	r3, #84	; 0x54
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	f083 0301 	eor.w	r3, r3, #1
 8003a78:	b2d8      	uxtb	r0, r3
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	212c      	movs	r1, #44	; 0x2c
 8003a80:	fb01 f303 	mul.w	r3, r1, r3
 8003a84:	4413      	add	r3, r2
 8003a86:	3354      	adds	r3, #84	; 0x54
 8003a88:	4602      	mov	r2, r0
 8003a8a:	701a      	strb	r2, [r3, #0]
      break;
 8003a8c:	e00b      	b.n	8003aa6 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	212c      	movs	r1, #44	; 0x2c
 8003a94:	fb01 f303 	mul.w	r3, r1, r3
 8003a98:	4413      	add	r3, r2
 8003a9a:	3360      	adds	r3, #96	; 0x60
 8003a9c:	2204      	movs	r2, #4
 8003a9e:	701a      	strb	r2, [r3, #0]
      break;
 8003aa0:	e001      	b.n	8003aa6 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003aa2:	bf00      	nop
 8003aa4:	e000      	b.n	8003aa8 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003aa6:	bf00      	nop
  }
}
 8003aa8:	bf00      	nop
 8003aaa:	3728      	adds	r7, #40	; 0x28
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003adc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d10b      	bne.n	8003b00 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d102      	bne.n	8003af8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f005 fa5c 	bl	8008fb0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	f043 0302 	orr.w	r3, r3, #2
 8003afe:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d132      	bne.n	8003b70 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	f043 0308 	orr.w	r3, r3, #8
 8003b10:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d126      	bne.n	8003b6a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d113      	bne.n	8003b4c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003b2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b2e:	d106      	bne.n	8003b3e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2102      	movs	r1, #2
 8003b36:	4618      	mov	r0, r3
 8003b38:	f002 fd72 	bl	8006620 <USB_InitFSLSPClkSel>
 8003b3c:	e011      	b.n	8003b62 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2101      	movs	r1, #1
 8003b44:	4618      	mov	r0, r3
 8003b46:	f002 fd6b 	bl	8006620 <USB_InitFSLSPClkSel>
 8003b4a:	e00a      	b.n	8003b62 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d106      	bne.n	8003b62 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003b60:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f005 fa4e 	bl	8009004 <HAL_HCD_PortEnabled_Callback>
 8003b68:	e002      	b.n	8003b70 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f005 fa58 	bl	8009020 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f003 0320 	and.w	r3, r3, #32
 8003b76:	2b20      	cmp	r3, #32
 8003b78:	d103      	bne.n	8003b82 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	f043 0320 	orr.w	r3, r3, #32
 8003b80:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b88:	461a      	mov	r2, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	6013      	str	r3, [r2, #0]
}
 8003b8e:	bf00      	nop
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e12b      	b.n	8003e02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d106      	bne.n	8003bc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7fd f8c0 	bl	8000d44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2224      	movs	r2, #36	; 0x24
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0201 	bic.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bfc:	f001 f9fc 	bl	8004ff8 <HAL_RCC_GetPCLK1Freq>
 8003c00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	4a81      	ldr	r2, [pc, #516]	; (8003e0c <HAL_I2C_Init+0x274>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d807      	bhi.n	8003c1c <HAL_I2C_Init+0x84>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4a80      	ldr	r2, [pc, #512]	; (8003e10 <HAL_I2C_Init+0x278>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	bf94      	ite	ls
 8003c14:	2301      	movls	r3, #1
 8003c16:	2300      	movhi	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	e006      	b.n	8003c2a <HAL_I2C_Init+0x92>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4a7d      	ldr	r2, [pc, #500]	; (8003e14 <HAL_I2C_Init+0x27c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	bf94      	ite	ls
 8003c24:	2301      	movls	r3, #1
 8003c26:	2300      	movhi	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e0e7      	b.n	8003e02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4a78      	ldr	r2, [pc, #480]	; (8003e18 <HAL_I2C_Init+0x280>)
 8003c36:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3a:	0c9b      	lsrs	r3, r3, #18
 8003c3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	4a6a      	ldr	r2, [pc, #424]	; (8003e0c <HAL_I2C_Init+0x274>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d802      	bhi.n	8003c6c <HAL_I2C_Init+0xd4>
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	e009      	b.n	8003c80 <HAL_I2C_Init+0xe8>
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c72:	fb02 f303 	mul.w	r3, r2, r3
 8003c76:	4a69      	ldr	r2, [pc, #420]	; (8003e1c <HAL_I2C_Init+0x284>)
 8003c78:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7c:	099b      	lsrs	r3, r3, #6
 8003c7e:	3301      	adds	r3, #1
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	430b      	orrs	r3, r1
 8003c86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	495c      	ldr	r1, [pc, #368]	; (8003e0c <HAL_I2C_Init+0x274>)
 8003c9c:	428b      	cmp	r3, r1
 8003c9e:	d819      	bhi.n	8003cd4 <HAL_I2C_Init+0x13c>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	1e59      	subs	r1, r3, #1
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cae:	1c59      	adds	r1, r3, #1
 8003cb0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003cb4:	400b      	ands	r3, r1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <HAL_I2C_Init+0x138>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	1e59      	subs	r1, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cc8:	3301      	adds	r3, #1
 8003cca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cce:	e051      	b.n	8003d74 <HAL_I2C_Init+0x1dc>
 8003cd0:	2304      	movs	r3, #4
 8003cd2:	e04f      	b.n	8003d74 <HAL_I2C_Init+0x1dc>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d111      	bne.n	8003d00 <HAL_I2C_Init+0x168>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	1e58      	subs	r0, r3, #1
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6859      	ldr	r1, [r3, #4]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	440b      	add	r3, r1
 8003cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cee:	3301      	adds	r3, #1
 8003cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	bf0c      	ite	eq
 8003cf8:	2301      	moveq	r3, #1
 8003cfa:	2300      	movne	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	e012      	b.n	8003d26 <HAL_I2C_Init+0x18e>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	1e58      	subs	r0, r3, #1
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6859      	ldr	r1, [r3, #4]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	0099      	lsls	r1, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d16:	3301      	adds	r3, #1
 8003d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	bf0c      	ite	eq
 8003d20:	2301      	moveq	r3, #1
 8003d22:	2300      	movne	r3, #0
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <HAL_I2C_Init+0x196>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e022      	b.n	8003d74 <HAL_I2C_Init+0x1dc>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10e      	bne.n	8003d54 <HAL_I2C_Init+0x1bc>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	1e58      	subs	r0, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6859      	ldr	r1, [r3, #4]
 8003d3e:	460b      	mov	r3, r1
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	440b      	add	r3, r1
 8003d44:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d48:	3301      	adds	r3, #1
 8003d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d52:	e00f      	b.n	8003d74 <HAL_I2C_Init+0x1dc>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	1e58      	subs	r0, r3, #1
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6859      	ldr	r1, [r3, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	0099      	lsls	r1, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	6809      	ldr	r1, [r1, #0]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69da      	ldr	r2, [r3, #28]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003da2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6911      	ldr	r1, [r2, #16]
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	68d2      	ldr	r2, [r2, #12]
 8003dae:	4311      	orrs	r1, r2
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6812      	ldr	r2, [r2, #0]
 8003db4:	430b      	orrs	r3, r1
 8003db6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	695a      	ldr	r2, [r3, #20]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0201 	orr.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	000186a0 	.word	0x000186a0
 8003e10:	001e847f 	.word	0x001e847f
 8003e14:	003d08ff 	.word	0x003d08ff
 8003e18:	431bde83 	.word	0x431bde83
 8003e1c:	10624dd3 	.word	0x10624dd3

08003e20 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e128      	b.n	8004084 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d109      	bne.n	8003e52 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a90      	ldr	r2, [pc, #576]	; (800408c <HAL_I2S_Init+0x26c>)
 8003e4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7fc ffc1 	bl	8000dd4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2202      	movs	r2, #2
 8003e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6812      	ldr	r2, [r2, #0]
 8003e64:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003e68:	f023 030f 	bic.w	r3, r3, #15
 8003e6c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2202      	movs	r2, #2
 8003e74:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d060      	beq.n	8003f40 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d102      	bne.n	8003e8c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003e86:	2310      	movs	r3, #16
 8003e88:	617b      	str	r3, [r7, #20]
 8003e8a:	e001      	b.n	8003e90 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003e8c:	2320      	movs	r3, #32
 8003e8e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	d802      	bhi.n	8003e9e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003e9e:	2001      	movs	r0, #1
 8003ea0:	f001 f9b4 	bl	800520c <HAL_RCCEx_GetPeriphCLKFreq>
 8003ea4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eae:	d125      	bne.n	8003efc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d010      	beq.n	8003eda <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	461a      	mov	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed4:	3305      	adds	r3, #5
 8003ed6:	613b      	str	r3, [r7, #16]
 8003ed8:	e01f      	b.n	8003f1a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	461a      	mov	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef6:	3305      	adds	r3, #5
 8003ef8:	613b      	str	r3, [r7, #16]
 8003efa:	e00e      	b.n	8003f1a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f04:	4613      	mov	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f16:	3305      	adds	r3, #5
 8003f18:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	4a5c      	ldr	r2, [pc, #368]	; (8004090 <HAL_I2S_Init+0x270>)
 8003f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f22:	08db      	lsrs	r3, r3, #3
 8003f24:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	085b      	lsrs	r3, r3, #1
 8003f36:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	021b      	lsls	r3, r3, #8
 8003f3c:	61bb      	str	r3, [r7, #24]
 8003f3e:	e003      	b.n	8003f48 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003f40:	2302      	movs	r3, #2
 8003f42:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d902      	bls.n	8003f54 <HAL_I2S_Init+0x134>
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	2bff      	cmp	r3, #255	; 0xff
 8003f52:	d907      	bls.n	8003f64 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f58:	f043 0210 	orr.w	r2, r3, #16
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e08f      	b.n	8004084 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	ea42 0103 	orr.w	r1, r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	69fa      	ldr	r2, [r7, #28]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003f82:	f023 030f 	bic.w	r3, r3, #15
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6851      	ldr	r1, [r2, #4]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6892      	ldr	r2, [r2, #8]
 8003f8e:	4311      	orrs	r1, r2
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	68d2      	ldr	r2, [r2, #12]
 8003f94:	4311      	orrs	r1, r2
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6992      	ldr	r2, [r2, #24]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fa6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d161      	bne.n	8004074 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a38      	ldr	r2, [pc, #224]	; (8004094 <HAL_I2S_Init+0x274>)
 8003fb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a37      	ldr	r2, [pc, #220]	; (8004098 <HAL_I2S_Init+0x278>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d101      	bne.n	8003fc4 <HAL_I2S_Init+0x1a4>
 8003fc0:	4b36      	ldr	r3, [pc, #216]	; (800409c <HAL_I2S_Init+0x27c>)
 8003fc2:	e001      	b.n	8003fc8 <HAL_I2S_Init+0x1a8>
 8003fc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6812      	ldr	r2, [r2, #0]
 8003fce:	4932      	ldr	r1, [pc, #200]	; (8004098 <HAL_I2S_Init+0x278>)
 8003fd0:	428a      	cmp	r2, r1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_I2S_Init+0x1b8>
 8003fd4:	4a31      	ldr	r2, [pc, #196]	; (800409c <HAL_I2S_Init+0x27c>)
 8003fd6:	e001      	b.n	8003fdc <HAL_I2S_Init+0x1bc>
 8003fd8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003fdc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003fe0:	f023 030f 	bic.w	r3, r3, #15
 8003fe4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a2b      	ldr	r2, [pc, #172]	; (8004098 <HAL_I2S_Init+0x278>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d101      	bne.n	8003ff4 <HAL_I2S_Init+0x1d4>
 8003ff0:	4b2a      	ldr	r3, [pc, #168]	; (800409c <HAL_I2S_Init+0x27c>)
 8003ff2:	e001      	b.n	8003ff8 <HAL_I2S_Init+0x1d8>
 8003ff4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a25      	ldr	r2, [pc, #148]	; (8004098 <HAL_I2S_Init+0x278>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d101      	bne.n	800400a <HAL_I2S_Init+0x1ea>
 8004006:	4b25      	ldr	r3, [pc, #148]	; (800409c <HAL_I2S_Init+0x27c>)
 8004008:	e001      	b.n	800400e <HAL_I2S_Init+0x1ee>
 800400a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800401a:	d003      	beq.n	8004024 <HAL_I2S_Init+0x204>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d103      	bne.n	800402c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004024:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004028:	613b      	str	r3, [r7, #16]
 800402a:	e001      	b.n	8004030 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800402c:	2300      	movs	r3, #0
 800402e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800403a:	4313      	orrs	r3, r2
 800403c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004044:	4313      	orrs	r3, r2
 8004046:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800404e:	4313      	orrs	r3, r2
 8004050:	b29a      	uxth	r2, r3
 8004052:	897b      	ldrh	r3, [r7, #10]
 8004054:	4313      	orrs	r3, r2
 8004056:	b29b      	uxth	r3, r3
 8004058:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800405c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a0d      	ldr	r2, [pc, #52]	; (8004098 <HAL_I2S_Init+0x278>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d101      	bne.n	800406c <HAL_I2S_Init+0x24c>
 8004068:	4b0c      	ldr	r3, [pc, #48]	; (800409c <HAL_I2S_Init+0x27c>)
 800406a:	e001      	b.n	8004070 <HAL_I2S_Init+0x250>
 800406c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004070:	897a      	ldrh	r2, [r7, #10]
 8004072:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3720      	adds	r7, #32
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	08004197 	.word	0x08004197
 8004090:	cccccccd 	.word	0xcccccccd
 8004094:	080042ad 	.word	0x080042ad
 8004098:	40003800 	.word	0x40003800
 800409c:	40003400 	.word	0x40003400

080040a0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	881a      	ldrh	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	1c9a      	adds	r2, r3, #2
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410c:	b29b      	uxth	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10e      	bne.n	8004130 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004120:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7ff ffb8 	bl	80040a0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004130:	bf00      	nop
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414a:	b292      	uxth	r2, r2
 800414c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004152:	1c9a      	adds	r2, r3, #2
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800415c:	b29b      	uxth	r3, r3
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800416a:	b29b      	uxth	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10e      	bne.n	800418e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800417e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7ff ff93 	bl	80040b4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800418e:	bf00      	nop
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b086      	sub	sp, #24
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	d13a      	bne.n	8004228 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d109      	bne.n	80041d0 <I2S_IRQHandler+0x3a>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c6:	2b40      	cmp	r3, #64	; 0x40
 80041c8:	d102      	bne.n	80041d0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7ff ffb4 	bl	8004138 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d6:	2b40      	cmp	r3, #64	; 0x40
 80041d8:	d126      	bne.n	8004228 <I2S_IRQHandler+0x92>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f003 0320 	and.w	r3, r3, #32
 80041e4:	2b20      	cmp	r3, #32
 80041e6:	d11f      	bne.n	8004228 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041f6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80041f8:	2300      	movs	r3, #0
 80041fa:	613b      	str	r3, [r7, #16]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	613b      	str	r3, [r7, #16]
 800420c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421a:	f043 0202 	orr.w	r2, r3, #2
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7ff ff50 	bl	80040c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b03      	cmp	r3, #3
 8004232:	d136      	bne.n	80042a2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b02      	cmp	r3, #2
 800423c:	d109      	bne.n	8004252 <I2S_IRQHandler+0xbc>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004248:	2b80      	cmp	r3, #128	; 0x80
 800424a:	d102      	bne.n	8004252 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7ff ff45 	bl	80040dc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	f003 0308 	and.w	r3, r3, #8
 8004258:	2b08      	cmp	r3, #8
 800425a:	d122      	bne.n	80042a2 <I2S_IRQHandler+0x10c>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	2b20      	cmp	r3, #32
 8004268:	d11b      	bne.n	80042a2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004278:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004294:	f043 0204 	orr.w	r2, r3, #4
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7ff ff13 	bl	80040c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042a2:	bf00      	nop
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
	...

080042ac <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b088      	sub	sp, #32
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4aa2      	ldr	r2, [pc, #648]	; (800454c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d101      	bne.n	80042ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80042c6:	4ba2      	ldr	r3, [pc, #648]	; (8004550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80042c8:	e001      	b.n	80042ce <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80042ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a9b      	ldr	r2, [pc, #620]	; (800454c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d101      	bne.n	80042e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80042e4:	4b9a      	ldr	r3, [pc, #616]	; (8004550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80042e6:	e001      	b.n	80042ec <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80042e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f8:	d004      	beq.n	8004304 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f040 8099 	bne.w	8004436 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b02      	cmp	r3, #2
 800430c:	d107      	bne.n	800431e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 f925 	bl	8004568 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b01      	cmp	r3, #1
 8004326:	d107      	bne.n	8004338 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f9c8 	bl	80046c8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433e:	2b40      	cmp	r3, #64	; 0x40
 8004340:	d13a      	bne.n	80043b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f003 0320 	and.w	r3, r3, #32
 8004348:	2b00      	cmp	r3, #0
 800434a:	d035      	beq.n	80043b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a7e      	ldr	r2, [pc, #504]	; (800454c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d101      	bne.n	800435a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004356:	4b7e      	ldr	r3, [pc, #504]	; (8004550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004358:	e001      	b.n	800435e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800435a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4979      	ldr	r1, [pc, #484]	; (800454c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004366:	428b      	cmp	r3, r1
 8004368:	d101      	bne.n	800436e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800436a:	4b79      	ldr	r3, [pc, #484]	; (8004550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800436c:	e001      	b.n	8004372 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800436e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004372:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004376:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004386:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004388:	2300      	movs	r3, #0
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043aa:	f043 0202 	orr.w	r2, r3, #2
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7ff fe88 	bl	80040c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b08      	cmp	r3, #8
 80043c0:	f040 80be 	bne.w	8004540 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 80b8 	beq.w	8004540 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043de:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a59      	ldr	r2, [pc, #356]	; (800454c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d101      	bne.n	80043ee <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80043ea:	4b59      	ldr	r3, [pc, #356]	; (8004550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80043ec:	e001      	b.n	80043f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80043ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4954      	ldr	r1, [pc, #336]	; (800454c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043fa:	428b      	cmp	r3, r1
 80043fc:	d101      	bne.n	8004402 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80043fe:	4b54      	ldr	r3, [pc, #336]	; (8004550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004400:	e001      	b.n	8004406 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004402:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004406:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800440a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800440c:	2300      	movs	r3, #0
 800440e:	60bb      	str	r3, [r7, #8]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	60bb      	str	r3, [r7, #8]
 8004418:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004426:	f043 0204 	orr.w	r2, r3, #4
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7ff fe4a 	bl	80040c8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004434:	e084      	b.n	8004540 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b02      	cmp	r3, #2
 800443e:	d107      	bne.n	8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f8be 	bl	80045cc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b01      	cmp	r3, #1
 8004458:	d107      	bne.n	800446a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f8fd 	bl	8004664 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004470:	2b40      	cmp	r3, #64	; 0x40
 8004472:	d12f      	bne.n	80044d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f003 0320 	and.w	r3, r3, #32
 800447a:	2b00      	cmp	r3, #0
 800447c:	d02a      	beq.n	80044d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800448c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a2e      	ldr	r2, [pc, #184]	; (800454c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d101      	bne.n	800449c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004498:	4b2d      	ldr	r3, [pc, #180]	; (8004550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800449a:	e001      	b.n	80044a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800449c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4929      	ldr	r1, [pc, #164]	; (800454c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80044a8:	428b      	cmp	r3, r1
 80044aa:	d101      	bne.n	80044b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80044ac:	4b28      	ldr	r3, [pc, #160]	; (8004550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80044ae:	e001      	b.n	80044b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80044b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044b8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c6:	f043 0202 	orr.w	r2, r3, #2
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7ff fdfa 	bl	80040c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d131      	bne.n	8004542 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f003 0320 	and.w	r3, r3, #32
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d02c      	beq.n	8004542 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a17      	ldr	r2, [pc, #92]	; (800454c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d101      	bne.n	80044f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80044f2:	4b17      	ldr	r3, [pc, #92]	; (8004550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80044f4:	e001      	b.n	80044fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80044f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4912      	ldr	r1, [pc, #72]	; (800454c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004502:	428b      	cmp	r3, r1
 8004504:	d101      	bne.n	800450a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004506:	4b12      	ldr	r3, [pc, #72]	; (8004550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004508:	e001      	b.n	800450e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800450a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800450e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004512:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004522:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004530:	f043 0204 	orr.w	r2, r3, #4
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f7ff fdc5 	bl	80040c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800453e:	e000      	b.n	8004542 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004540:	bf00      	nop
}
 8004542:	bf00      	nop
 8004544:	3720      	adds	r7, #32
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	40003800 	.word	0x40003800
 8004550:	40003400 	.word	0x40003400

08004554 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	1c99      	adds	r1, r3, #2
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6251      	str	r1, [r2, #36]	; 0x24
 800457a:	881a      	ldrh	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004586:	b29b      	uxth	r3, r3
 8004588:	3b01      	subs	r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d113      	bne.n	80045c2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045a8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d106      	bne.n	80045c2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff ffc9 	bl	8004554 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045c2:	bf00      	nop
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
	...

080045cc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	1c99      	adds	r1, r3, #2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6251      	str	r1, [r2, #36]	; 0x24
 80045de:	8819      	ldrh	r1, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a1d      	ldr	r2, [pc, #116]	; (800465c <I2SEx_TxISR_I2SExt+0x90>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d101      	bne.n	80045ee <I2SEx_TxISR_I2SExt+0x22>
 80045ea:	4b1d      	ldr	r3, [pc, #116]	; (8004660 <I2SEx_TxISR_I2SExt+0x94>)
 80045ec:	e001      	b.n	80045f2 <I2SEx_TxISR_I2SExt+0x26>
 80045ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045f2:	460a      	mov	r2, r1
 80045f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004608:	b29b      	uxth	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d121      	bne.n	8004652 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a12      	ldr	r2, [pc, #72]	; (800465c <I2SEx_TxISR_I2SExt+0x90>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d101      	bne.n	800461c <I2SEx_TxISR_I2SExt+0x50>
 8004618:	4b11      	ldr	r3, [pc, #68]	; (8004660 <I2SEx_TxISR_I2SExt+0x94>)
 800461a:	e001      	b.n	8004620 <I2SEx_TxISR_I2SExt+0x54>
 800461c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	490d      	ldr	r1, [pc, #52]	; (800465c <I2SEx_TxISR_I2SExt+0x90>)
 8004628:	428b      	cmp	r3, r1
 800462a:	d101      	bne.n	8004630 <I2SEx_TxISR_I2SExt+0x64>
 800462c:	4b0c      	ldr	r3, [pc, #48]	; (8004660 <I2SEx_TxISR_I2SExt+0x94>)
 800462e:	e001      	b.n	8004634 <I2SEx_TxISR_I2SExt+0x68>
 8004630:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004634:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004638:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800463e:	b29b      	uxth	r3, r3
 8004640:	2b00      	cmp	r3, #0
 8004642:	d106      	bne.n	8004652 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff ff81 	bl	8004554 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004652:	bf00      	nop
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	40003800 	.word	0x40003800
 8004660:	40003400 	.word	0x40003400

08004664 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68d8      	ldr	r0, [r3, #12]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004676:	1c99      	adds	r1, r3, #2
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800467c:	b282      	uxth	r2, r0
 800467e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004684:	b29b      	uxth	r3, r3
 8004686:	3b01      	subs	r3, #1
 8004688:	b29a      	uxth	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004692:	b29b      	uxth	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d113      	bne.n	80046c0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046a6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7ff ff4a 	bl	8004554 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046c0:	bf00      	nop
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a20      	ldr	r2, [pc, #128]	; (8004758 <I2SEx_RxISR_I2SExt+0x90>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d101      	bne.n	80046de <I2SEx_RxISR_I2SExt+0x16>
 80046da:	4b20      	ldr	r3, [pc, #128]	; (800475c <I2SEx_RxISR_I2SExt+0x94>)
 80046dc:	e001      	b.n	80046e2 <I2SEx_RxISR_I2SExt+0x1a>
 80046de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046e2:	68d8      	ldr	r0, [r3, #12]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e8:	1c99      	adds	r1, r3, #2
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	62d1      	str	r1, [r2, #44]	; 0x2c
 80046ee:	b282      	uxth	r2, r0
 80046f0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d121      	bne.n	800474e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a12      	ldr	r2, [pc, #72]	; (8004758 <I2SEx_RxISR_I2SExt+0x90>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d101      	bne.n	8004718 <I2SEx_RxISR_I2SExt+0x50>
 8004714:	4b11      	ldr	r3, [pc, #68]	; (800475c <I2SEx_RxISR_I2SExt+0x94>)
 8004716:	e001      	b.n	800471c <I2SEx_RxISR_I2SExt+0x54>
 8004718:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	490d      	ldr	r1, [pc, #52]	; (8004758 <I2SEx_RxISR_I2SExt+0x90>)
 8004724:	428b      	cmp	r3, r1
 8004726:	d101      	bne.n	800472c <I2SEx_RxISR_I2SExt+0x64>
 8004728:	4b0c      	ldr	r3, [pc, #48]	; (800475c <I2SEx_RxISR_I2SExt+0x94>)
 800472a:	e001      	b.n	8004730 <I2SEx_RxISR_I2SExt+0x68>
 800472c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004730:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004734:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473a:	b29b      	uxth	r3, r3
 800473c:	2b00      	cmp	r3, #0
 800473e:	d106      	bne.n	800474e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7ff ff03 	bl	8004554 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800474e:	bf00      	nop
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	40003800 	.word	0x40003800
 800475c:	40003400 	.word	0x40003400

08004760 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e264      	b.n	8004c3c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d075      	beq.n	800486a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800477e:	4ba3      	ldr	r3, [pc, #652]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 030c 	and.w	r3, r3, #12
 8004786:	2b04      	cmp	r3, #4
 8004788:	d00c      	beq.n	80047a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800478a:	4ba0      	ldr	r3, [pc, #640]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004792:	2b08      	cmp	r3, #8
 8004794:	d112      	bne.n	80047bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004796:	4b9d      	ldr	r3, [pc, #628]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800479e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047a2:	d10b      	bne.n	80047bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a4:	4b99      	ldr	r3, [pc, #612]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d05b      	beq.n	8004868 <HAL_RCC_OscConfig+0x108>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d157      	bne.n	8004868 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e23f      	b.n	8004c3c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c4:	d106      	bne.n	80047d4 <HAL_RCC_OscConfig+0x74>
 80047c6:	4b91      	ldr	r3, [pc, #580]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a90      	ldr	r2, [pc, #576]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 80047cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	e01d      	b.n	8004810 <HAL_RCC_OscConfig+0xb0>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047dc:	d10c      	bne.n	80047f8 <HAL_RCC_OscConfig+0x98>
 80047de:	4b8b      	ldr	r3, [pc, #556]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a8a      	ldr	r2, [pc, #552]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 80047e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047e8:	6013      	str	r3, [r2, #0]
 80047ea:	4b88      	ldr	r3, [pc, #544]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a87      	ldr	r2, [pc, #540]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 80047f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	e00b      	b.n	8004810 <HAL_RCC_OscConfig+0xb0>
 80047f8:	4b84      	ldr	r3, [pc, #528]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a83      	ldr	r2, [pc, #524]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 80047fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004802:	6013      	str	r3, [r2, #0]
 8004804:	4b81      	ldr	r3, [pc, #516]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a80      	ldr	r2, [pc, #512]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 800480a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800480e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d013      	beq.n	8004840 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004818:	f7fd f93e 	bl	8001a98 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004820:	f7fd f93a 	bl	8001a98 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b64      	cmp	r3, #100	; 0x64
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e204      	b.n	8004c3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004832:	4b76      	ldr	r3, [pc, #472]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0f0      	beq.n	8004820 <HAL_RCC_OscConfig+0xc0>
 800483e:	e014      	b.n	800486a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004840:	f7fd f92a 	bl	8001a98 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004848:	f7fd f926 	bl	8001a98 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b64      	cmp	r3, #100	; 0x64
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e1f0      	b.n	8004c3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800485a:	4b6c      	ldr	r3, [pc, #432]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1f0      	bne.n	8004848 <HAL_RCC_OscConfig+0xe8>
 8004866:	e000      	b.n	800486a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d063      	beq.n	800493e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004876:	4b65      	ldr	r3, [pc, #404]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 030c 	and.w	r3, r3, #12
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00b      	beq.n	800489a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004882:	4b62      	ldr	r3, [pc, #392]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800488a:	2b08      	cmp	r3, #8
 800488c:	d11c      	bne.n	80048c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800488e:	4b5f      	ldr	r3, [pc, #380]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d116      	bne.n	80048c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800489a:	4b5c      	ldr	r3, [pc, #368]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d005      	beq.n	80048b2 <HAL_RCC_OscConfig+0x152>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d001      	beq.n	80048b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e1c4      	b.n	8004c3c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b2:	4b56      	ldr	r3, [pc, #344]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	4952      	ldr	r1, [pc, #328]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048c6:	e03a      	b.n	800493e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d020      	beq.n	8004912 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048d0:	4b4f      	ldr	r3, [pc, #316]	; (8004a10 <HAL_RCC_OscConfig+0x2b0>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d6:	f7fd f8df 	bl	8001a98 <HAL_GetTick>
 80048da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048dc:	e008      	b.n	80048f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048de:	f7fd f8db 	bl	8001a98 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e1a5      	b.n	8004c3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f0:	4b46      	ldr	r3, [pc, #280]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0f0      	beq.n	80048de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048fc:	4b43      	ldr	r3, [pc, #268]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	4940      	ldr	r1, [pc, #256]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 800490c:	4313      	orrs	r3, r2
 800490e:	600b      	str	r3, [r1, #0]
 8004910:	e015      	b.n	800493e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004912:	4b3f      	ldr	r3, [pc, #252]	; (8004a10 <HAL_RCC_OscConfig+0x2b0>)
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004918:	f7fd f8be 	bl	8001a98 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004920:	f7fd f8ba 	bl	8001a98 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e184      	b.n	8004c3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004932:	4b36      	ldr	r3, [pc, #216]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f0      	bne.n	8004920 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	d030      	beq.n	80049ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d016      	beq.n	8004980 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004952:	4b30      	ldr	r3, [pc, #192]	; (8004a14 <HAL_RCC_OscConfig+0x2b4>)
 8004954:	2201      	movs	r2, #1
 8004956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004958:	f7fd f89e 	bl	8001a98 <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004960:	f7fd f89a 	bl	8001a98 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e164      	b.n	8004c3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004972:	4b26      	ldr	r3, [pc, #152]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 8004974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0f0      	beq.n	8004960 <HAL_RCC_OscConfig+0x200>
 800497e:	e015      	b.n	80049ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004980:	4b24      	ldr	r3, [pc, #144]	; (8004a14 <HAL_RCC_OscConfig+0x2b4>)
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004986:	f7fd f887 	bl	8001a98 <HAL_GetTick>
 800498a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800498c:	e008      	b.n	80049a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800498e:	f7fd f883 	bl	8001a98 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d901      	bls.n	80049a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e14d      	b.n	8004c3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049a0:	4b1a      	ldr	r3, [pc, #104]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 80049a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1f0      	bne.n	800498e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 80a0 	beq.w	8004afa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ba:	2300      	movs	r3, #0
 80049bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049be:	4b13      	ldr	r3, [pc, #76]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10f      	bne.n	80049ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ca:	2300      	movs	r3, #0
 80049cc:	60bb      	str	r3, [r7, #8]
 80049ce:	4b0f      	ldr	r3, [pc, #60]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	4a0e      	ldr	r2, [pc, #56]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 80049d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d8:	6413      	str	r3, [r2, #64]	; 0x40
 80049da:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <HAL_RCC_OscConfig+0x2ac>)
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e2:	60bb      	str	r3, [r7, #8]
 80049e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049e6:	2301      	movs	r3, #1
 80049e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ea:	4b0b      	ldr	r3, [pc, #44]	; (8004a18 <HAL_RCC_OscConfig+0x2b8>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d121      	bne.n	8004a3a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049f6:	4b08      	ldr	r3, [pc, #32]	; (8004a18 <HAL_RCC_OscConfig+0x2b8>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a07      	ldr	r2, [pc, #28]	; (8004a18 <HAL_RCC_OscConfig+0x2b8>)
 80049fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a02:	f7fd f849 	bl	8001a98 <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a08:	e011      	b.n	8004a2e <HAL_RCC_OscConfig+0x2ce>
 8004a0a:	bf00      	nop
 8004a0c:	40023800 	.word	0x40023800
 8004a10:	42470000 	.word	0x42470000
 8004a14:	42470e80 	.word	0x42470e80
 8004a18:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a1c:	f7fd f83c 	bl	8001a98 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e106      	b.n	8004c3c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a2e:	4b85      	ldr	r3, [pc, #532]	; (8004c44 <HAL_RCC_OscConfig+0x4e4>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0f0      	beq.n	8004a1c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d106      	bne.n	8004a50 <HAL_RCC_OscConfig+0x2f0>
 8004a42:	4b81      	ldr	r3, [pc, #516]	; (8004c48 <HAL_RCC_OscConfig+0x4e8>)
 8004a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a46:	4a80      	ldr	r2, [pc, #512]	; (8004c48 <HAL_RCC_OscConfig+0x4e8>)
 8004a48:	f043 0301 	orr.w	r3, r3, #1
 8004a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a4e:	e01c      	b.n	8004a8a <HAL_RCC_OscConfig+0x32a>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	2b05      	cmp	r3, #5
 8004a56:	d10c      	bne.n	8004a72 <HAL_RCC_OscConfig+0x312>
 8004a58:	4b7b      	ldr	r3, [pc, #492]	; (8004c48 <HAL_RCC_OscConfig+0x4e8>)
 8004a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5c:	4a7a      	ldr	r2, [pc, #488]	; (8004c48 <HAL_RCC_OscConfig+0x4e8>)
 8004a5e:	f043 0304 	orr.w	r3, r3, #4
 8004a62:	6713      	str	r3, [r2, #112]	; 0x70
 8004a64:	4b78      	ldr	r3, [pc, #480]	; (8004c48 <HAL_RCC_OscConfig+0x4e8>)
 8004a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a68:	4a77      	ldr	r2, [pc, #476]	; (8004c48 <HAL_RCC_OscConfig+0x4e8>)
 8004a6a:	f043 0301 	orr.w	r3, r3, #1
 8004a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a70:	e00b      	b.n	8004a8a <HAL_RCC_OscConfig+0x32a>
 8004a72:	4b75      	ldr	r3, [pc, #468]	; (8004c48 <HAL_RCC_OscConfig+0x4e8>)
 8004a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a76:	4a74      	ldr	r2, [pc, #464]	; (8004c48 <HAL_RCC_OscConfig+0x4e8>)
 8004a78:	f023 0301 	bic.w	r3, r3, #1
 8004a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a7e:	4b72      	ldr	r3, [pc, #456]	; (8004c48 <HAL_RCC_OscConfig+0x4e8>)
 8004a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a82:	4a71      	ldr	r2, [pc, #452]	; (8004c48 <HAL_RCC_OscConfig+0x4e8>)
 8004a84:	f023 0304 	bic.w	r3, r3, #4
 8004a88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d015      	beq.n	8004abe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a92:	f7fd f801 	bl	8001a98 <HAL_GetTick>
 8004a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a98:	e00a      	b.n	8004ab0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a9a:	f7fc fffd 	bl	8001a98 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e0c5      	b.n	8004c3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab0:	4b65      	ldr	r3, [pc, #404]	; (8004c48 <HAL_RCC_OscConfig+0x4e8>)
 8004ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0ee      	beq.n	8004a9a <HAL_RCC_OscConfig+0x33a>
 8004abc:	e014      	b.n	8004ae8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004abe:	f7fc ffeb 	bl	8001a98 <HAL_GetTick>
 8004ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ac4:	e00a      	b.n	8004adc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ac6:	f7fc ffe7 	bl	8001a98 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e0af      	b.n	8004c3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004adc:	4b5a      	ldr	r3, [pc, #360]	; (8004c48 <HAL_RCC_OscConfig+0x4e8>)
 8004ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1ee      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ae8:	7dfb      	ldrb	r3, [r7, #23]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d105      	bne.n	8004afa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aee:	4b56      	ldr	r3, [pc, #344]	; (8004c48 <HAL_RCC_OscConfig+0x4e8>)
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	4a55      	ldr	r2, [pc, #340]	; (8004c48 <HAL_RCC_OscConfig+0x4e8>)
 8004af4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004af8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 809b 	beq.w	8004c3a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b04:	4b50      	ldr	r3, [pc, #320]	; (8004c48 <HAL_RCC_OscConfig+0x4e8>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f003 030c 	and.w	r3, r3, #12
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d05c      	beq.n	8004bca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d141      	bne.n	8004b9c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b18:	4b4c      	ldr	r3, [pc, #304]	; (8004c4c <HAL_RCC_OscConfig+0x4ec>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b1e:	f7fc ffbb 	bl	8001a98 <HAL_GetTick>
 8004b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b24:	e008      	b.n	8004b38 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b26:	f7fc ffb7 	bl	8001a98 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d901      	bls.n	8004b38 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e081      	b.n	8004c3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b38:	4b43      	ldr	r3, [pc, #268]	; (8004c48 <HAL_RCC_OscConfig+0x4e8>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1f0      	bne.n	8004b26 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	69da      	ldr	r2, [r3, #28]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	019b      	lsls	r3, r3, #6
 8004b54:	431a      	orrs	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5a:	085b      	lsrs	r3, r3, #1
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	041b      	lsls	r3, r3, #16
 8004b60:	431a      	orrs	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b66:	061b      	lsls	r3, r3, #24
 8004b68:	4937      	ldr	r1, [pc, #220]	; (8004c48 <HAL_RCC_OscConfig+0x4e8>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b6e:	4b37      	ldr	r3, [pc, #220]	; (8004c4c <HAL_RCC_OscConfig+0x4ec>)
 8004b70:	2201      	movs	r2, #1
 8004b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b74:	f7fc ff90 	bl	8001a98 <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b7c:	f7fc ff8c 	bl	8001a98 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e056      	b.n	8004c3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b8e:	4b2e      	ldr	r3, [pc, #184]	; (8004c48 <HAL_RCC_OscConfig+0x4e8>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0f0      	beq.n	8004b7c <HAL_RCC_OscConfig+0x41c>
 8004b9a:	e04e      	b.n	8004c3a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b9c:	4b2b      	ldr	r3, [pc, #172]	; (8004c4c <HAL_RCC_OscConfig+0x4ec>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba2:	f7fc ff79 	bl	8001a98 <HAL_GetTick>
 8004ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ba8:	e008      	b.n	8004bbc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004baa:	f7fc ff75 	bl	8001a98 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e03f      	b.n	8004c3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bbc:	4b22      	ldr	r3, [pc, #136]	; (8004c48 <HAL_RCC_OscConfig+0x4e8>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1f0      	bne.n	8004baa <HAL_RCC_OscConfig+0x44a>
 8004bc8:	e037      	b.n	8004c3a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d101      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e032      	b.n	8004c3c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bd6:	4b1c      	ldr	r3, [pc, #112]	; (8004c48 <HAL_RCC_OscConfig+0x4e8>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d028      	beq.n	8004c36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d121      	bne.n	8004c36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d11a      	bne.n	8004c36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c06:	4013      	ands	r3, r2
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c0c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d111      	bne.n	8004c36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1c:	085b      	lsrs	r3, r3, #1
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d107      	bne.n	8004c36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c30:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d001      	beq.n	8004c3a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e000      	b.n	8004c3c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	40007000 	.word	0x40007000
 8004c48:	40023800 	.word	0x40023800
 8004c4c:	42470060 	.word	0x42470060

08004c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e0cc      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c64:	4b68      	ldr	r3, [pc, #416]	; (8004e08 <HAL_RCC_ClockConfig+0x1b8>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d90c      	bls.n	8004c8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c72:	4b65      	ldr	r3, [pc, #404]	; (8004e08 <HAL_RCC_ClockConfig+0x1b8>)
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c7a:	4b63      	ldr	r3, [pc, #396]	; (8004e08 <HAL_RCC_ClockConfig+0x1b8>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0307 	and.w	r3, r3, #7
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d001      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e0b8      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d020      	beq.n	8004cda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d005      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ca4:	4b59      	ldr	r3, [pc, #356]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	4a58      	ldr	r2, [pc, #352]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004caa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0308 	and.w	r3, r3, #8
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d005      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cbc:	4b53      	ldr	r3, [pc, #332]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	4a52      	ldr	r2, [pc, #328]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004cc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cc8:	4b50      	ldr	r3, [pc, #320]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	494d      	ldr	r1, [pc, #308]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d044      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d107      	bne.n	8004cfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cee:	4b47      	ldr	r3, [pc, #284]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d119      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e07f      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d003      	beq.n	8004d0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d0a:	2b03      	cmp	r3, #3
 8004d0c:	d107      	bne.n	8004d1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d0e:	4b3f      	ldr	r3, [pc, #252]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d109      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e06f      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d1e:	4b3b      	ldr	r3, [pc, #236]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e067      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d2e:	4b37      	ldr	r3, [pc, #220]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f023 0203 	bic.w	r2, r3, #3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	4934      	ldr	r1, [pc, #208]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d40:	f7fc feaa 	bl	8001a98 <HAL_GetTick>
 8004d44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d46:	e00a      	b.n	8004d5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d48:	f7fc fea6 	bl	8001a98 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e04f      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d5e:	4b2b      	ldr	r3, [pc, #172]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 020c 	and.w	r2, r3, #12
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d1eb      	bne.n	8004d48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d70:	4b25      	ldr	r3, [pc, #148]	; (8004e08 <HAL_RCC_ClockConfig+0x1b8>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d20c      	bcs.n	8004d98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d7e:	4b22      	ldr	r3, [pc, #136]	; (8004e08 <HAL_RCC_ClockConfig+0x1b8>)
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d86:	4b20      	ldr	r3, [pc, #128]	; (8004e08 <HAL_RCC_ClockConfig+0x1b8>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0307 	and.w	r3, r3, #7
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d001      	beq.n	8004d98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e032      	b.n	8004dfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d008      	beq.n	8004db6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004da4:	4b19      	ldr	r3, [pc, #100]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	4916      	ldr	r1, [pc, #88]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0308 	and.w	r3, r3, #8
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d009      	beq.n	8004dd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dc2:	4b12      	ldr	r3, [pc, #72]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	490e      	ldr	r1, [pc, #56]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004dd6:	f000 f821 	bl	8004e1c <HAL_RCC_GetSysClockFreq>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <HAL_RCC_ClockConfig+0x1bc>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	091b      	lsrs	r3, r3, #4
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	490a      	ldr	r1, [pc, #40]	; (8004e10 <HAL_RCC_ClockConfig+0x1c0>)
 8004de8:	5ccb      	ldrb	r3, [r1, r3]
 8004dea:	fa22 f303 	lsr.w	r3, r2, r3
 8004dee:	4a09      	ldr	r2, [pc, #36]	; (8004e14 <HAL_RCC_ClockConfig+0x1c4>)
 8004df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004df2:	4b09      	ldr	r3, [pc, #36]	; (8004e18 <HAL_RCC_ClockConfig+0x1c8>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fc fe0a 	bl	8001a10 <HAL_InitTick>

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	40023c00 	.word	0x40023c00
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	08009ecc 	.word	0x08009ecc
 8004e14:	20000000 	.word	0x20000000
 8004e18:	20000004 	.word	0x20000004

08004e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004e20:	b084      	sub	sp, #16
 8004e22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	607b      	str	r3, [r7, #4]
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e34:	4b67      	ldr	r3, [pc, #412]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f003 030c 	and.w	r3, r3, #12
 8004e3c:	2b08      	cmp	r3, #8
 8004e3e:	d00d      	beq.n	8004e5c <HAL_RCC_GetSysClockFreq+0x40>
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	f200 80bd 	bhi.w	8004fc0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <HAL_RCC_GetSysClockFreq+0x34>
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	d003      	beq.n	8004e56 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e4e:	e0b7      	b.n	8004fc0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e50:	4b61      	ldr	r3, [pc, #388]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004e52:	60bb      	str	r3, [r7, #8]
       break;
 8004e54:	e0b7      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e56:	4b61      	ldr	r3, [pc, #388]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004e58:	60bb      	str	r3, [r7, #8]
      break;
 8004e5a:	e0b4      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e5c:	4b5d      	ldr	r3, [pc, #372]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e64:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e66:	4b5b      	ldr	r3, [pc, #364]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d04d      	beq.n	8004f0e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e72:	4b58      	ldr	r3, [pc, #352]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	099b      	lsrs	r3, r3, #6
 8004e78:	461a      	mov	r2, r3
 8004e7a:	f04f 0300 	mov.w	r3, #0
 8004e7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e82:	f04f 0100 	mov.w	r1, #0
 8004e86:	ea02 0800 	and.w	r8, r2, r0
 8004e8a:	ea03 0901 	and.w	r9, r3, r1
 8004e8e:	4640      	mov	r0, r8
 8004e90:	4649      	mov	r1, r9
 8004e92:	f04f 0200 	mov.w	r2, #0
 8004e96:	f04f 0300 	mov.w	r3, #0
 8004e9a:	014b      	lsls	r3, r1, #5
 8004e9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ea0:	0142      	lsls	r2, r0, #5
 8004ea2:	4610      	mov	r0, r2
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	ebb0 0008 	subs.w	r0, r0, r8
 8004eaa:	eb61 0109 	sbc.w	r1, r1, r9
 8004eae:	f04f 0200 	mov.w	r2, #0
 8004eb2:	f04f 0300 	mov.w	r3, #0
 8004eb6:	018b      	lsls	r3, r1, #6
 8004eb8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ebc:	0182      	lsls	r2, r0, #6
 8004ebe:	1a12      	subs	r2, r2, r0
 8004ec0:	eb63 0301 	sbc.w	r3, r3, r1
 8004ec4:	f04f 0000 	mov.w	r0, #0
 8004ec8:	f04f 0100 	mov.w	r1, #0
 8004ecc:	00d9      	lsls	r1, r3, #3
 8004ece:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ed2:	00d0      	lsls	r0, r2, #3
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	eb12 0208 	adds.w	r2, r2, r8
 8004edc:	eb43 0309 	adc.w	r3, r3, r9
 8004ee0:	f04f 0000 	mov.w	r0, #0
 8004ee4:	f04f 0100 	mov.w	r1, #0
 8004ee8:	0259      	lsls	r1, r3, #9
 8004eea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004eee:	0250      	lsls	r0, r2, #9
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	461a      	mov	r2, r3
 8004efc:	f04f 0300 	mov.w	r3, #0
 8004f00:	f7fb f9be 	bl	8000280 <__aeabi_uldivmod>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4613      	mov	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	e04a      	b.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f0e:	4b31      	ldr	r3, [pc, #196]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	099b      	lsrs	r3, r3, #6
 8004f14:	461a      	mov	r2, r3
 8004f16:	f04f 0300 	mov.w	r3, #0
 8004f1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f1e:	f04f 0100 	mov.w	r1, #0
 8004f22:	ea02 0400 	and.w	r4, r2, r0
 8004f26:	ea03 0501 	and.w	r5, r3, r1
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	4629      	mov	r1, r5
 8004f2e:	f04f 0200 	mov.w	r2, #0
 8004f32:	f04f 0300 	mov.w	r3, #0
 8004f36:	014b      	lsls	r3, r1, #5
 8004f38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f3c:	0142      	lsls	r2, r0, #5
 8004f3e:	4610      	mov	r0, r2
 8004f40:	4619      	mov	r1, r3
 8004f42:	1b00      	subs	r0, r0, r4
 8004f44:	eb61 0105 	sbc.w	r1, r1, r5
 8004f48:	f04f 0200 	mov.w	r2, #0
 8004f4c:	f04f 0300 	mov.w	r3, #0
 8004f50:	018b      	lsls	r3, r1, #6
 8004f52:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f56:	0182      	lsls	r2, r0, #6
 8004f58:	1a12      	subs	r2, r2, r0
 8004f5a:	eb63 0301 	sbc.w	r3, r3, r1
 8004f5e:	f04f 0000 	mov.w	r0, #0
 8004f62:	f04f 0100 	mov.w	r1, #0
 8004f66:	00d9      	lsls	r1, r3, #3
 8004f68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f6c:	00d0      	lsls	r0, r2, #3
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	1912      	adds	r2, r2, r4
 8004f74:	eb45 0303 	adc.w	r3, r5, r3
 8004f78:	f04f 0000 	mov.w	r0, #0
 8004f7c:	f04f 0100 	mov.w	r1, #0
 8004f80:	0299      	lsls	r1, r3, #10
 8004f82:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004f86:	0290      	lsls	r0, r2, #10
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	4619      	mov	r1, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	461a      	mov	r2, r3
 8004f94:	f04f 0300 	mov.w	r3, #0
 8004f98:	f7fb f972 	bl	8000280 <__aeabi_uldivmod>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fa4:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	0c1b      	lsrs	r3, r3, #16
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	3301      	adds	r3, #1
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbc:	60bb      	str	r3, [r7, #8]
      break;
 8004fbe:	e002      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fc0:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004fc2:	60bb      	str	r3, [r7, #8]
      break;
 8004fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fc6:	68bb      	ldr	r3, [r7, #8]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004fd2:	bf00      	nop
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	00f42400 	.word	0x00f42400
 8004fdc:	007a1200 	.word	0x007a1200

08004fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fe4:	4b03      	ldr	r3, [pc, #12]	; (8004ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	20000000 	.word	0x20000000

08004ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ffc:	f7ff fff0 	bl	8004fe0 <HAL_RCC_GetHCLKFreq>
 8005000:	4602      	mov	r2, r0
 8005002:	4b05      	ldr	r3, [pc, #20]	; (8005018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	0a9b      	lsrs	r3, r3, #10
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	4903      	ldr	r1, [pc, #12]	; (800501c <HAL_RCC_GetPCLK1Freq+0x24>)
 800500e:	5ccb      	ldrb	r3, [r1, r3]
 8005010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005014:	4618      	mov	r0, r3
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40023800 	.word	0x40023800
 800501c:	08009edc 	.word	0x08009edc

08005020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005024:	f7ff ffdc 	bl	8004fe0 <HAL_RCC_GetHCLKFreq>
 8005028:	4602      	mov	r2, r0
 800502a:	4b05      	ldr	r3, [pc, #20]	; (8005040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	0b5b      	lsrs	r3, r3, #13
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	4903      	ldr	r1, [pc, #12]	; (8005044 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005036:	5ccb      	ldrb	r3, [r1, r3]
 8005038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800503c:	4618      	mov	r0, r3
 800503e:	bd80      	pop	{r7, pc}
 8005040:	40023800 	.word	0x40023800
 8005044:	08009edc 	.word	0x08009edc

08005048 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	d105      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800506c:	2b00      	cmp	r3, #0
 800506e:	d035      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005070:	4b62      	ldr	r3, [pc, #392]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005072:	2200      	movs	r2, #0
 8005074:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005076:	f7fc fd0f 	bl	8001a98 <HAL_GetTick>
 800507a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800507c:	e008      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800507e:	f7fc fd0b 	bl	8001a98 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	2b02      	cmp	r3, #2
 800508a:	d901      	bls.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e0b0      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005090:	4b5b      	ldr	r3, [pc, #364]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1f0      	bne.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	019a      	lsls	r2, r3, #6
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	071b      	lsls	r3, r3, #28
 80050a8:	4955      	ldr	r1, [pc, #340]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80050b0:	4b52      	ldr	r3, [pc, #328]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80050b2:	2201      	movs	r2, #1
 80050b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050b6:	f7fc fcef 	bl	8001a98 <HAL_GetTick>
 80050ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050bc:	e008      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050be:	f7fc fceb 	bl	8001a98 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d901      	bls.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e090      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050d0:	4b4b      	ldr	r3, [pc, #300]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d0f0      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 8083 	beq.w	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80050ea:	2300      	movs	r3, #0
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	4b44      	ldr	r3, [pc, #272]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	4a43      	ldr	r2, [pc, #268]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050f8:	6413      	str	r3, [r2, #64]	; 0x40
 80050fa:	4b41      	ldr	r3, [pc, #260]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005102:	60fb      	str	r3, [r7, #12]
 8005104:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005106:	4b3f      	ldr	r3, [pc, #252]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a3e      	ldr	r2, [pc, #248]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800510c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005110:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005112:	f7fc fcc1 	bl	8001a98 <HAL_GetTick>
 8005116:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005118:	e008      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800511a:	f7fc fcbd 	bl	8001a98 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d901      	bls.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e062      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800512c:	4b35      	ldr	r3, [pc, #212]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0f0      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005138:	4b31      	ldr	r3, [pc, #196]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800513a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005140:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d02f      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	429a      	cmp	r2, r3
 8005154:	d028      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005156:	4b2a      	ldr	r3, [pc, #168]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800515e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005160:	4b29      	ldr	r3, [pc, #164]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005162:	2201      	movs	r2, #1
 8005164:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005166:	4b28      	ldr	r3, [pc, #160]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005168:	2200      	movs	r2, #0
 800516a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800516c:	4a24      	ldr	r2, [pc, #144]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005172:	4b23      	ldr	r3, [pc, #140]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b01      	cmp	r3, #1
 800517c:	d114      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800517e:	f7fc fc8b 	bl	8001a98 <HAL_GetTick>
 8005182:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005184:	e00a      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005186:	f7fc fc87 	bl	8001a98 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	f241 3288 	movw	r2, #5000	; 0x1388
 8005194:	4293      	cmp	r3, r2
 8005196:	d901      	bls.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e02a      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800519c:	4b18      	ldr	r3, [pc, #96]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800519e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d0ee      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051b4:	d10d      	bne.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80051b6:	4b12      	ldr	r3, [pc, #72]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80051c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ca:	490d      	ldr	r1, [pc, #52]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	608b      	str	r3, [r1, #8]
 80051d0:	e005      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x196>
 80051d2:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	4a0a      	ldr	r2, [pc, #40]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051d8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80051dc:	6093      	str	r3, [r2, #8]
 80051de:	4b08      	ldr	r3, [pc, #32]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ea:	4905      	ldr	r1, [pc, #20]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3718      	adds	r7, #24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	42470068 	.word	0x42470068
 8005200:	40023800 	.word	0x40023800
 8005204:	40007000 	.word	0x40007000
 8005208:	42470e40 	.word	0x42470e40

0800520c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800520c:	b480      	push	{r7}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005214:	2300      	movs	r3, #0
 8005216:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005218:	2300      	movs	r3, #0
 800521a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d13e      	bne.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800522a:	4b23      	ldr	r3, [pc, #140]	; (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005232:	60fb      	str	r3, [r7, #12]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d005      	beq.n	8005246 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d12f      	bne.n	80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005240:	4b1e      	ldr	r3, [pc, #120]	; (80052bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005242:	617b      	str	r3, [r7, #20]
          break;
 8005244:	e02f      	b.n	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005246:	4b1c      	ldr	r3, [pc, #112]	; (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800524e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005252:	d108      	bne.n	8005266 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005254:	4b18      	ldr	r3, [pc, #96]	; (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800525c:	4a18      	ldr	r2, [pc, #96]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800525e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005262:	613b      	str	r3, [r7, #16]
 8005264:	e007      	b.n	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005266:	4b14      	ldr	r3, [pc, #80]	; (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800526e:	4a15      	ldr	r2, [pc, #84]	; (80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005270:	fbb2 f3f3 	udiv	r3, r2, r3
 8005274:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005276:	4b10      	ldr	r3, [pc, #64]	; (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005278:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800527c:	099b      	lsrs	r3, r3, #6
 800527e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	fb02 f303 	mul.w	r3, r2, r3
 8005288:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800528a:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800528c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005290:	0f1b      	lsrs	r3, r3, #28
 8005292:	f003 0307 	and.w	r3, r3, #7
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	fbb2 f3f3 	udiv	r3, r2, r3
 800529c:	617b      	str	r3, [r7, #20]
          break;
 800529e:	e002      	b.n	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	617b      	str	r3, [r7, #20]
          break;
 80052a4:	bf00      	nop
        }
      }
      break;
 80052a6:	bf00      	nop
    }
  }
  return frequency;
 80052a8:	697b      	ldr	r3, [r7, #20]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	371c      	adds	r7, #28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	40023800 	.word	0x40023800
 80052bc:	00bb8000 	.word	0x00bb8000
 80052c0:	007a1200 	.word	0x007a1200
 80052c4:	00f42400 	.word	0x00f42400

080052c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e07b      	b.n	80053d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d108      	bne.n	80052f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052ea:	d009      	beq.n	8005300 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	61da      	str	r2, [r3, #28]
 80052f2:	e005      	b.n	8005300 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d106      	bne.n	8005320 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7fb fdc2 	bl	8000ea4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005336:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005348:	431a      	orrs	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005352:	431a      	orrs	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	431a      	orrs	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	431a      	orrs	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005370:	431a      	orrs	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005384:	ea42 0103 	orr.w	r1, r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	0c1b      	lsrs	r3, r3, #16
 800539e:	f003 0104 	and.w	r1, r3, #4
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	f003 0210 	and.w	r2, r3, #16
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	69da      	ldr	r2, [r3, #28]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b082      	sub	sp, #8
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e041      	b.n	8005470 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d106      	bne.n	8005406 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f7fb fd97 	bl	8000f34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2202      	movs	r2, #2
 800540a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	3304      	adds	r3, #4
 8005416:	4619      	mov	r1, r3
 8005418:	4610      	mov	r0, r2
 800541a:	f000 f95d 	bl	80056d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b01      	cmp	r3, #1
 800548a:	d001      	beq.n	8005490 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e046      	b.n	800551e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a23      	ldr	r2, [pc, #140]	; (800552c <HAL_TIM_Base_Start+0xb4>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d022      	beq.n	80054e8 <HAL_TIM_Base_Start+0x70>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054aa:	d01d      	beq.n	80054e8 <HAL_TIM_Base_Start+0x70>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a1f      	ldr	r2, [pc, #124]	; (8005530 <HAL_TIM_Base_Start+0xb8>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d018      	beq.n	80054e8 <HAL_TIM_Base_Start+0x70>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a1e      	ldr	r2, [pc, #120]	; (8005534 <HAL_TIM_Base_Start+0xbc>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d013      	beq.n	80054e8 <HAL_TIM_Base_Start+0x70>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a1c      	ldr	r2, [pc, #112]	; (8005538 <HAL_TIM_Base_Start+0xc0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d00e      	beq.n	80054e8 <HAL_TIM_Base_Start+0x70>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a1b      	ldr	r2, [pc, #108]	; (800553c <HAL_TIM_Base_Start+0xc4>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d009      	beq.n	80054e8 <HAL_TIM_Base_Start+0x70>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a19      	ldr	r2, [pc, #100]	; (8005540 <HAL_TIM_Base_Start+0xc8>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d004      	beq.n	80054e8 <HAL_TIM_Base_Start+0x70>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a18      	ldr	r2, [pc, #96]	; (8005544 <HAL_TIM_Base_Start+0xcc>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d111      	bne.n	800550c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f003 0307 	and.w	r3, r3, #7
 80054f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2b06      	cmp	r3, #6
 80054f8:	d010      	beq.n	800551c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f042 0201 	orr.w	r2, r2, #1
 8005508:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800550a:	e007      	b.n	800551c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0201 	orr.w	r2, r2, #1
 800551a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	40010000 	.word	0x40010000
 8005530:	40000400 	.word	0x40000400
 8005534:	40000800 	.word	0x40000800
 8005538:	40000c00 	.word	0x40000c00
 800553c:	40010400 	.word	0x40010400
 8005540:	40014000 	.word	0x40014000
 8005544:	40001800 	.word	0x40001800

08005548 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005552:	2300      	movs	r3, #0
 8005554:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800555c:	2b01      	cmp	r3, #1
 800555e:	d101      	bne.n	8005564 <HAL_TIM_ConfigClockSource+0x1c>
 8005560:	2302      	movs	r3, #2
 8005562:	e0b4      	b.n	80056ce <HAL_TIM_ConfigClockSource+0x186>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2202      	movs	r2, #2
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005582:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800558a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800559c:	d03e      	beq.n	800561c <HAL_TIM_ConfigClockSource+0xd4>
 800559e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055a2:	f200 8087 	bhi.w	80056b4 <HAL_TIM_ConfigClockSource+0x16c>
 80055a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055aa:	f000 8086 	beq.w	80056ba <HAL_TIM_ConfigClockSource+0x172>
 80055ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b2:	d87f      	bhi.n	80056b4 <HAL_TIM_ConfigClockSource+0x16c>
 80055b4:	2b70      	cmp	r3, #112	; 0x70
 80055b6:	d01a      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0xa6>
 80055b8:	2b70      	cmp	r3, #112	; 0x70
 80055ba:	d87b      	bhi.n	80056b4 <HAL_TIM_ConfigClockSource+0x16c>
 80055bc:	2b60      	cmp	r3, #96	; 0x60
 80055be:	d050      	beq.n	8005662 <HAL_TIM_ConfigClockSource+0x11a>
 80055c0:	2b60      	cmp	r3, #96	; 0x60
 80055c2:	d877      	bhi.n	80056b4 <HAL_TIM_ConfigClockSource+0x16c>
 80055c4:	2b50      	cmp	r3, #80	; 0x50
 80055c6:	d03c      	beq.n	8005642 <HAL_TIM_ConfigClockSource+0xfa>
 80055c8:	2b50      	cmp	r3, #80	; 0x50
 80055ca:	d873      	bhi.n	80056b4 <HAL_TIM_ConfigClockSource+0x16c>
 80055cc:	2b40      	cmp	r3, #64	; 0x40
 80055ce:	d058      	beq.n	8005682 <HAL_TIM_ConfigClockSource+0x13a>
 80055d0:	2b40      	cmp	r3, #64	; 0x40
 80055d2:	d86f      	bhi.n	80056b4 <HAL_TIM_ConfigClockSource+0x16c>
 80055d4:	2b30      	cmp	r3, #48	; 0x30
 80055d6:	d064      	beq.n	80056a2 <HAL_TIM_ConfigClockSource+0x15a>
 80055d8:	2b30      	cmp	r3, #48	; 0x30
 80055da:	d86b      	bhi.n	80056b4 <HAL_TIM_ConfigClockSource+0x16c>
 80055dc:	2b20      	cmp	r3, #32
 80055de:	d060      	beq.n	80056a2 <HAL_TIM_ConfigClockSource+0x15a>
 80055e0:	2b20      	cmp	r3, #32
 80055e2:	d867      	bhi.n	80056b4 <HAL_TIM_ConfigClockSource+0x16c>
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d05c      	beq.n	80056a2 <HAL_TIM_ConfigClockSource+0x15a>
 80055e8:	2b10      	cmp	r3, #16
 80055ea:	d05a      	beq.n	80056a2 <HAL_TIM_ConfigClockSource+0x15a>
 80055ec:	e062      	b.n	80056b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6818      	ldr	r0, [r3, #0]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	6899      	ldr	r1, [r3, #8]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f000 f985 	bl	800590c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005610:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	609a      	str	r2, [r3, #8]
      break;
 800561a:	e04f      	b.n	80056bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6818      	ldr	r0, [r3, #0]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	6899      	ldr	r1, [r3, #8]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f000 f96e 	bl	800590c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689a      	ldr	r2, [r3, #8]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800563e:	609a      	str	r2, [r3, #8]
      break;
 8005640:	e03c      	b.n	80056bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6818      	ldr	r0, [r3, #0]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	6859      	ldr	r1, [r3, #4]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	461a      	mov	r2, r3
 8005650:	f000 f8e2 	bl	8005818 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2150      	movs	r1, #80	; 0x50
 800565a:	4618      	mov	r0, r3
 800565c:	f000 f93b 	bl	80058d6 <TIM_ITRx_SetConfig>
      break;
 8005660:	e02c      	b.n	80056bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6818      	ldr	r0, [r3, #0]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	6859      	ldr	r1, [r3, #4]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	461a      	mov	r2, r3
 8005670:	f000 f901 	bl	8005876 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2160      	movs	r1, #96	; 0x60
 800567a:	4618      	mov	r0, r3
 800567c:	f000 f92b 	bl	80058d6 <TIM_ITRx_SetConfig>
      break;
 8005680:	e01c      	b.n	80056bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6818      	ldr	r0, [r3, #0]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	6859      	ldr	r1, [r3, #4]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	461a      	mov	r2, r3
 8005690:	f000 f8c2 	bl	8005818 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2140      	movs	r1, #64	; 0x40
 800569a:	4618      	mov	r0, r3
 800569c:	f000 f91b 	bl	80058d6 <TIM_ITRx_SetConfig>
      break;
 80056a0:	e00c      	b.n	80056bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4619      	mov	r1, r3
 80056ac:	4610      	mov	r0, r2
 80056ae:	f000 f912 	bl	80058d6 <TIM_ITRx_SetConfig>
      break;
 80056b2:	e003      	b.n	80056bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	73fb      	strb	r3, [r7, #15]
      break;
 80056b8:	e000      	b.n	80056bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
	...

080056d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a40      	ldr	r2, [pc, #256]	; (80057ec <TIM_Base_SetConfig+0x114>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d013      	beq.n	8005718 <TIM_Base_SetConfig+0x40>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f6:	d00f      	beq.n	8005718 <TIM_Base_SetConfig+0x40>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a3d      	ldr	r2, [pc, #244]	; (80057f0 <TIM_Base_SetConfig+0x118>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d00b      	beq.n	8005718 <TIM_Base_SetConfig+0x40>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a3c      	ldr	r2, [pc, #240]	; (80057f4 <TIM_Base_SetConfig+0x11c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d007      	beq.n	8005718 <TIM_Base_SetConfig+0x40>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a3b      	ldr	r2, [pc, #236]	; (80057f8 <TIM_Base_SetConfig+0x120>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d003      	beq.n	8005718 <TIM_Base_SetConfig+0x40>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a3a      	ldr	r2, [pc, #232]	; (80057fc <TIM_Base_SetConfig+0x124>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d108      	bne.n	800572a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	4313      	orrs	r3, r2
 8005728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a2f      	ldr	r2, [pc, #188]	; (80057ec <TIM_Base_SetConfig+0x114>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d02b      	beq.n	800578a <TIM_Base_SetConfig+0xb2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005738:	d027      	beq.n	800578a <TIM_Base_SetConfig+0xb2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a2c      	ldr	r2, [pc, #176]	; (80057f0 <TIM_Base_SetConfig+0x118>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d023      	beq.n	800578a <TIM_Base_SetConfig+0xb2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a2b      	ldr	r2, [pc, #172]	; (80057f4 <TIM_Base_SetConfig+0x11c>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d01f      	beq.n	800578a <TIM_Base_SetConfig+0xb2>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a2a      	ldr	r2, [pc, #168]	; (80057f8 <TIM_Base_SetConfig+0x120>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d01b      	beq.n	800578a <TIM_Base_SetConfig+0xb2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a29      	ldr	r2, [pc, #164]	; (80057fc <TIM_Base_SetConfig+0x124>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d017      	beq.n	800578a <TIM_Base_SetConfig+0xb2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a28      	ldr	r2, [pc, #160]	; (8005800 <TIM_Base_SetConfig+0x128>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d013      	beq.n	800578a <TIM_Base_SetConfig+0xb2>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a27      	ldr	r2, [pc, #156]	; (8005804 <TIM_Base_SetConfig+0x12c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d00f      	beq.n	800578a <TIM_Base_SetConfig+0xb2>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a26      	ldr	r2, [pc, #152]	; (8005808 <TIM_Base_SetConfig+0x130>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d00b      	beq.n	800578a <TIM_Base_SetConfig+0xb2>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a25      	ldr	r2, [pc, #148]	; (800580c <TIM_Base_SetConfig+0x134>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d007      	beq.n	800578a <TIM_Base_SetConfig+0xb2>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a24      	ldr	r2, [pc, #144]	; (8005810 <TIM_Base_SetConfig+0x138>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d003      	beq.n	800578a <TIM_Base_SetConfig+0xb2>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a23      	ldr	r2, [pc, #140]	; (8005814 <TIM_Base_SetConfig+0x13c>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d108      	bne.n	800579c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	4313      	orrs	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a0a      	ldr	r2, [pc, #40]	; (80057ec <TIM_Base_SetConfig+0x114>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d003      	beq.n	80057d0 <TIM_Base_SetConfig+0xf8>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a0c      	ldr	r2, [pc, #48]	; (80057fc <TIM_Base_SetConfig+0x124>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d103      	bne.n	80057d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	691a      	ldr	r2, [r3, #16]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	615a      	str	r2, [r3, #20]
}
 80057de:	bf00      	nop
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	40010000 	.word	0x40010000
 80057f0:	40000400 	.word	0x40000400
 80057f4:	40000800 	.word	0x40000800
 80057f8:	40000c00 	.word	0x40000c00
 80057fc:	40010400 	.word	0x40010400
 8005800:	40014000 	.word	0x40014000
 8005804:	40014400 	.word	0x40014400
 8005808:	40014800 	.word	0x40014800
 800580c:	40001800 	.word	0x40001800
 8005810:	40001c00 	.word	0x40001c00
 8005814:	40002000 	.word	0x40002000

08005818 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005818:	b480      	push	{r7}
 800581a:	b087      	sub	sp, #28
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6a1b      	ldr	r3, [r3, #32]
 8005828:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	f023 0201 	bic.w	r2, r3, #1
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	011b      	lsls	r3, r3, #4
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	4313      	orrs	r3, r2
 800584c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f023 030a 	bic.w	r3, r3, #10
 8005854:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	4313      	orrs	r3, r2
 800585c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	621a      	str	r2, [r3, #32]
}
 800586a:	bf00      	nop
 800586c:	371c      	adds	r7, #28
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005876:	b480      	push	{r7}
 8005878:	b087      	sub	sp, #28
 800587a:	af00      	add	r7, sp, #0
 800587c:	60f8      	str	r0, [r7, #12]
 800587e:	60b9      	str	r1, [r7, #8]
 8005880:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	f023 0210 	bic.w	r2, r3, #16
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	031b      	lsls	r3, r3, #12
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	011b      	lsls	r3, r3, #4
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	621a      	str	r2, [r3, #32]
}
 80058ca:	bf00      	nop
 80058cc:	371c      	adds	r7, #28
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b085      	sub	sp, #20
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	f043 0307 	orr.w	r3, r3, #7
 80058f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	609a      	str	r2, [r3, #8]
}
 8005900:	bf00      	nop
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
 8005918:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005926:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	021a      	lsls	r2, r3, #8
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	431a      	orrs	r2, r3
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	4313      	orrs	r3, r2
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	4313      	orrs	r3, r2
 8005938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	609a      	str	r2, [r3, #8]
}
 8005940:	bf00      	nop
 8005942:	371c      	adds	r7, #28
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e03f      	b.n	80059de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d106      	bne.n	8005978 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7fb fb00 	bl	8000f78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2224      	movs	r2, #36	; 0x24
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800598e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f9cb 	bl	8005d2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	691a      	ldr	r2, [r3, #16]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	695a      	ldr	r2, [r3, #20]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2220      	movs	r2, #32
 80059d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b08a      	sub	sp, #40	; 0x28
 80059ea:	af02      	add	r7, sp, #8
 80059ec:	60f8      	str	r0, [r7, #12]
 80059ee:	60b9      	str	r1, [r7, #8]
 80059f0:	603b      	str	r3, [r7, #0]
 80059f2:	4613      	mov	r3, r2
 80059f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b20      	cmp	r3, #32
 8005a04:	d17c      	bne.n	8005b00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d002      	beq.n	8005a12 <HAL_UART_Transmit+0x2c>
 8005a0c:	88fb      	ldrh	r3, [r7, #6]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e075      	b.n	8005b02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d101      	bne.n	8005a24 <HAL_UART_Transmit+0x3e>
 8005a20:	2302      	movs	r3, #2
 8005a22:	e06e      	b.n	8005b02 <HAL_UART_Transmit+0x11c>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2221      	movs	r2, #33	; 0x21
 8005a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a3a:	f7fc f82d 	bl	8001a98 <HAL_GetTick>
 8005a3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	88fa      	ldrh	r2, [r7, #6]
 8005a44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	88fa      	ldrh	r2, [r7, #6]
 8005a4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a54:	d108      	bne.n	8005a68 <HAL_UART_Transmit+0x82>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d104      	bne.n	8005a68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	61bb      	str	r3, [r7, #24]
 8005a66:	e003      	b.n	8005a70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005a78:	e02a      	b.n	8005ad0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	2200      	movs	r2, #0
 8005a82:	2180      	movs	r1, #128	; 0x80
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 f8e2 	bl	8005c4e <UART_WaitOnFlagUntilTimeout>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e036      	b.n	8005b02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10b      	bne.n	8005ab2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005aa8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	3302      	adds	r3, #2
 8005aae:	61bb      	str	r3, [r7, #24]
 8005ab0:	e007      	b.n	8005ac2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	781a      	ldrb	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1cf      	bne.n	8005a7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	2140      	movs	r1, #64	; 0x40
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f000 f8b2 	bl	8005c4e <UART_WaitOnFlagUntilTimeout>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d001      	beq.n	8005af4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e006      	b.n	8005b02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2220      	movs	r2, #32
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005afc:	2300      	movs	r3, #0
 8005afe:	e000      	b.n	8005b02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b00:	2302      	movs	r3, #2
  }
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3720      	adds	r7, #32
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b08a      	sub	sp, #40	; 0x28
 8005b0e:	af02      	add	r7, sp, #8
 8005b10:	60f8      	str	r0, [r7, #12]
 8005b12:	60b9      	str	r1, [r7, #8]
 8005b14:	603b      	str	r3, [r7, #0]
 8005b16:	4613      	mov	r3, r2
 8005b18:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b20      	cmp	r3, #32
 8005b28:	f040 808c 	bne.w	8005c44 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d002      	beq.n	8005b38 <HAL_UART_Receive+0x2e>
 8005b32:	88fb      	ldrh	r3, [r7, #6]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e084      	b.n	8005c46 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d101      	bne.n	8005b4a <HAL_UART_Receive+0x40>
 8005b46:	2302      	movs	r3, #2
 8005b48:	e07d      	b.n	8005c46 <HAL_UART_Receive+0x13c>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2222      	movs	r2, #34	; 0x22
 8005b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b66:	f7fb ff97 	bl	8001a98 <HAL_GetTick>
 8005b6a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	88fa      	ldrh	r2, [r7, #6]
 8005b70:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	88fa      	ldrh	r2, [r7, #6]
 8005b76:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b80:	d108      	bne.n	8005b94 <HAL_UART_Receive+0x8a>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d104      	bne.n	8005b94 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	61bb      	str	r3, [r7, #24]
 8005b92:	e003      	b.n	8005b9c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005ba4:	e043      	b.n	8005c2e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	2200      	movs	r2, #0
 8005bae:	2120      	movs	r1, #32
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 f84c 	bl	8005c4e <UART_WaitOnFlagUntilTimeout>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e042      	b.n	8005c46 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10c      	bne.n	8005be0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	3302      	adds	r3, #2
 8005bdc:	61bb      	str	r3, [r7, #24]
 8005bde:	e01f      	b.n	8005c20 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005be8:	d007      	beq.n	8005bfa <HAL_UART_Receive+0xf0>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10a      	bne.n	8005c08 <HAL_UART_Receive+0xfe>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d106      	bne.n	8005c08 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	701a      	strb	r2, [r3, #0]
 8005c06:	e008      	b.n	8005c1a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	3b01      	subs	r3, #1
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1b6      	bne.n	8005ba6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2220      	movs	r2, #32
 8005c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005c40:	2300      	movs	r3, #0
 8005c42:	e000      	b.n	8005c46 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005c44:	2302      	movs	r3, #2
  }
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3720      	adds	r7, #32
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b090      	sub	sp, #64	; 0x40
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	60b9      	str	r1, [r7, #8]
 8005c58:	603b      	str	r3, [r7, #0]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c5e:	e050      	b.n	8005d02 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c66:	d04c      	beq.n	8005d02 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d007      	beq.n	8005c7e <UART_WaitOnFlagUntilTimeout+0x30>
 8005c6e:	f7fb ff13 	bl	8001a98 <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d241      	bcs.n	8005d02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	330c      	adds	r3, #12
 8005c84:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c88:	e853 3f00 	ldrex	r3, [r3]
 8005c8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	330c      	adds	r3, #12
 8005c9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c9e:	637a      	str	r2, [r7, #52]	; 0x34
 8005ca0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ca4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ca6:	e841 2300 	strex	r3, r2, [r1]
 8005caa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1e5      	bne.n	8005c7e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	3314      	adds	r3, #20
 8005cb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	e853 3f00 	ldrex	r3, [r3]
 8005cc0:	613b      	str	r3, [r7, #16]
   return(result);
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f023 0301 	bic.w	r3, r3, #1
 8005cc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	3314      	adds	r3, #20
 8005cd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cd2:	623a      	str	r2, [r7, #32]
 8005cd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd6:	69f9      	ldr	r1, [r7, #28]
 8005cd8:	6a3a      	ldr	r2, [r7, #32]
 8005cda:	e841 2300 	strex	r3, r2, [r1]
 8005cde:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1e5      	bne.n	8005cb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e00f      	b.n	8005d22 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	bf0c      	ite	eq
 8005d12:	2301      	moveq	r3, #1
 8005d14:	2300      	movne	r3, #0
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	461a      	mov	r2, r3
 8005d1a:	79fb      	ldrb	r3, [r7, #7]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d09f      	beq.n	8005c60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3740      	adds	r7, #64	; 0x40
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
	...

08005d2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d30:	b09f      	sub	sp, #124	; 0x7c
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d42:	68d9      	ldr	r1, [r3, #12]
 8005d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	ea40 0301 	orr.w	r3, r0, r1
 8005d4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d50:	689a      	ldr	r2, [r3, #8]
 8005d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	431a      	orrs	r2, r3
 8005d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	431a      	orrs	r2, r3
 8005d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d70:	f021 010c 	bic.w	r1, r1, #12
 8005d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d7a:	430b      	orrs	r3, r1
 8005d7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d8a:	6999      	ldr	r1, [r3, #24]
 8005d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	ea40 0301 	orr.w	r3, r0, r1
 8005d94:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	4bc5      	ldr	r3, [pc, #788]	; (80060b0 <UART_SetConfig+0x384>)
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d004      	beq.n	8005daa <UART_SetConfig+0x7e>
 8005da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	4bc3      	ldr	r3, [pc, #780]	; (80060b4 <UART_SetConfig+0x388>)
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d103      	bne.n	8005db2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005daa:	f7ff f939 	bl	8005020 <HAL_RCC_GetPCLK2Freq>
 8005dae:	6778      	str	r0, [r7, #116]	; 0x74
 8005db0:	e002      	b.n	8005db8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005db2:	f7ff f921 	bl	8004ff8 <HAL_RCC_GetPCLK1Freq>
 8005db6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dba:	69db      	ldr	r3, [r3, #28]
 8005dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dc0:	f040 80b6 	bne.w	8005f30 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005dc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dc6:	461c      	mov	r4, r3
 8005dc8:	f04f 0500 	mov.w	r5, #0
 8005dcc:	4622      	mov	r2, r4
 8005dce:	462b      	mov	r3, r5
 8005dd0:	1891      	adds	r1, r2, r2
 8005dd2:	6439      	str	r1, [r7, #64]	; 0x40
 8005dd4:	415b      	adcs	r3, r3
 8005dd6:	647b      	str	r3, [r7, #68]	; 0x44
 8005dd8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ddc:	1912      	adds	r2, r2, r4
 8005dde:	eb45 0303 	adc.w	r3, r5, r3
 8005de2:	f04f 0000 	mov.w	r0, #0
 8005de6:	f04f 0100 	mov.w	r1, #0
 8005dea:	00d9      	lsls	r1, r3, #3
 8005dec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005df0:	00d0      	lsls	r0, r2, #3
 8005df2:	4602      	mov	r2, r0
 8005df4:	460b      	mov	r3, r1
 8005df6:	1911      	adds	r1, r2, r4
 8005df8:	6639      	str	r1, [r7, #96]	; 0x60
 8005dfa:	416b      	adcs	r3, r5
 8005dfc:	667b      	str	r3, [r7, #100]	; 0x64
 8005dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	461a      	mov	r2, r3
 8005e04:	f04f 0300 	mov.w	r3, #0
 8005e08:	1891      	adds	r1, r2, r2
 8005e0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e0c:	415b      	adcs	r3, r3
 8005e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e14:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005e18:	f7fa fa32 	bl	8000280 <__aeabi_uldivmod>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	460b      	mov	r3, r1
 8005e20:	4ba5      	ldr	r3, [pc, #660]	; (80060b8 <UART_SetConfig+0x38c>)
 8005e22:	fba3 2302 	umull	r2, r3, r3, r2
 8005e26:	095b      	lsrs	r3, r3, #5
 8005e28:	011e      	lsls	r6, r3, #4
 8005e2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e2c:	461c      	mov	r4, r3
 8005e2e:	f04f 0500 	mov.w	r5, #0
 8005e32:	4622      	mov	r2, r4
 8005e34:	462b      	mov	r3, r5
 8005e36:	1891      	adds	r1, r2, r2
 8005e38:	6339      	str	r1, [r7, #48]	; 0x30
 8005e3a:	415b      	adcs	r3, r3
 8005e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e3e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005e42:	1912      	adds	r2, r2, r4
 8005e44:	eb45 0303 	adc.w	r3, r5, r3
 8005e48:	f04f 0000 	mov.w	r0, #0
 8005e4c:	f04f 0100 	mov.w	r1, #0
 8005e50:	00d9      	lsls	r1, r3, #3
 8005e52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e56:	00d0      	lsls	r0, r2, #3
 8005e58:	4602      	mov	r2, r0
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	1911      	adds	r1, r2, r4
 8005e5e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e60:	416b      	adcs	r3, r5
 8005e62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	f04f 0300 	mov.w	r3, #0
 8005e6e:	1891      	adds	r1, r2, r2
 8005e70:	62b9      	str	r1, [r7, #40]	; 0x28
 8005e72:	415b      	adcs	r3, r3
 8005e74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e7a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005e7e:	f7fa f9ff 	bl	8000280 <__aeabi_uldivmod>
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	4b8c      	ldr	r3, [pc, #560]	; (80060b8 <UART_SetConfig+0x38c>)
 8005e88:	fba3 1302 	umull	r1, r3, r3, r2
 8005e8c:	095b      	lsrs	r3, r3, #5
 8005e8e:	2164      	movs	r1, #100	; 0x64
 8005e90:	fb01 f303 	mul.w	r3, r1, r3
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	3332      	adds	r3, #50	; 0x32
 8005e9a:	4a87      	ldr	r2, [pc, #540]	; (80060b8 <UART_SetConfig+0x38c>)
 8005e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea0:	095b      	lsrs	r3, r3, #5
 8005ea2:	005b      	lsls	r3, r3, #1
 8005ea4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ea8:	441e      	add	r6, r3
 8005eaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eac:	4618      	mov	r0, r3
 8005eae:	f04f 0100 	mov.w	r1, #0
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	1894      	adds	r4, r2, r2
 8005eb8:	623c      	str	r4, [r7, #32]
 8005eba:	415b      	adcs	r3, r3
 8005ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ebe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ec2:	1812      	adds	r2, r2, r0
 8005ec4:	eb41 0303 	adc.w	r3, r1, r3
 8005ec8:	f04f 0400 	mov.w	r4, #0
 8005ecc:	f04f 0500 	mov.w	r5, #0
 8005ed0:	00dd      	lsls	r5, r3, #3
 8005ed2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ed6:	00d4      	lsls	r4, r2, #3
 8005ed8:	4622      	mov	r2, r4
 8005eda:	462b      	mov	r3, r5
 8005edc:	1814      	adds	r4, r2, r0
 8005ede:	653c      	str	r4, [r7, #80]	; 0x50
 8005ee0:	414b      	adcs	r3, r1
 8005ee2:	657b      	str	r3, [r7, #84]	; 0x54
 8005ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	461a      	mov	r2, r3
 8005eea:	f04f 0300 	mov.w	r3, #0
 8005eee:	1891      	adds	r1, r2, r2
 8005ef0:	61b9      	str	r1, [r7, #24]
 8005ef2:	415b      	adcs	r3, r3
 8005ef4:	61fb      	str	r3, [r7, #28]
 8005ef6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005efa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005efe:	f7fa f9bf 	bl	8000280 <__aeabi_uldivmod>
 8005f02:	4602      	mov	r2, r0
 8005f04:	460b      	mov	r3, r1
 8005f06:	4b6c      	ldr	r3, [pc, #432]	; (80060b8 <UART_SetConfig+0x38c>)
 8005f08:	fba3 1302 	umull	r1, r3, r3, r2
 8005f0c:	095b      	lsrs	r3, r3, #5
 8005f0e:	2164      	movs	r1, #100	; 0x64
 8005f10:	fb01 f303 	mul.w	r3, r1, r3
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	3332      	adds	r3, #50	; 0x32
 8005f1a:	4a67      	ldr	r2, [pc, #412]	; (80060b8 <UART_SetConfig+0x38c>)
 8005f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f20:	095b      	lsrs	r3, r3, #5
 8005f22:	f003 0207 	and.w	r2, r3, #7
 8005f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4432      	add	r2, r6
 8005f2c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f2e:	e0b9      	b.n	80060a4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f32:	461c      	mov	r4, r3
 8005f34:	f04f 0500 	mov.w	r5, #0
 8005f38:	4622      	mov	r2, r4
 8005f3a:	462b      	mov	r3, r5
 8005f3c:	1891      	adds	r1, r2, r2
 8005f3e:	6139      	str	r1, [r7, #16]
 8005f40:	415b      	adcs	r3, r3
 8005f42:	617b      	str	r3, [r7, #20]
 8005f44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f48:	1912      	adds	r2, r2, r4
 8005f4a:	eb45 0303 	adc.w	r3, r5, r3
 8005f4e:	f04f 0000 	mov.w	r0, #0
 8005f52:	f04f 0100 	mov.w	r1, #0
 8005f56:	00d9      	lsls	r1, r3, #3
 8005f58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f5c:	00d0      	lsls	r0, r2, #3
 8005f5e:	4602      	mov	r2, r0
 8005f60:	460b      	mov	r3, r1
 8005f62:	eb12 0804 	adds.w	r8, r2, r4
 8005f66:	eb43 0905 	adc.w	r9, r3, r5
 8005f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f04f 0100 	mov.w	r1, #0
 8005f74:	f04f 0200 	mov.w	r2, #0
 8005f78:	f04f 0300 	mov.w	r3, #0
 8005f7c:	008b      	lsls	r3, r1, #2
 8005f7e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f82:	0082      	lsls	r2, r0, #2
 8005f84:	4640      	mov	r0, r8
 8005f86:	4649      	mov	r1, r9
 8005f88:	f7fa f97a 	bl	8000280 <__aeabi_uldivmod>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4b49      	ldr	r3, [pc, #292]	; (80060b8 <UART_SetConfig+0x38c>)
 8005f92:	fba3 2302 	umull	r2, r3, r3, r2
 8005f96:	095b      	lsrs	r3, r3, #5
 8005f98:	011e      	lsls	r6, r3, #4
 8005f9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f04f 0100 	mov.w	r1, #0
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	1894      	adds	r4, r2, r2
 8005fa8:	60bc      	str	r4, [r7, #8]
 8005faa:	415b      	adcs	r3, r3
 8005fac:	60fb      	str	r3, [r7, #12]
 8005fae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fb2:	1812      	adds	r2, r2, r0
 8005fb4:	eb41 0303 	adc.w	r3, r1, r3
 8005fb8:	f04f 0400 	mov.w	r4, #0
 8005fbc:	f04f 0500 	mov.w	r5, #0
 8005fc0:	00dd      	lsls	r5, r3, #3
 8005fc2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005fc6:	00d4      	lsls	r4, r2, #3
 8005fc8:	4622      	mov	r2, r4
 8005fca:	462b      	mov	r3, r5
 8005fcc:	1814      	adds	r4, r2, r0
 8005fce:	64bc      	str	r4, [r7, #72]	; 0x48
 8005fd0:	414b      	adcs	r3, r1
 8005fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f04f 0100 	mov.w	r1, #0
 8005fde:	f04f 0200 	mov.w	r2, #0
 8005fe2:	f04f 0300 	mov.w	r3, #0
 8005fe6:	008b      	lsls	r3, r1, #2
 8005fe8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005fec:	0082      	lsls	r2, r0, #2
 8005fee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005ff2:	f7fa f945 	bl	8000280 <__aeabi_uldivmod>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	4b2f      	ldr	r3, [pc, #188]	; (80060b8 <UART_SetConfig+0x38c>)
 8005ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8006000:	095b      	lsrs	r3, r3, #5
 8006002:	2164      	movs	r1, #100	; 0x64
 8006004:	fb01 f303 	mul.w	r3, r1, r3
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	011b      	lsls	r3, r3, #4
 800600c:	3332      	adds	r3, #50	; 0x32
 800600e:	4a2a      	ldr	r2, [pc, #168]	; (80060b8 <UART_SetConfig+0x38c>)
 8006010:	fba2 2303 	umull	r2, r3, r2, r3
 8006014:	095b      	lsrs	r3, r3, #5
 8006016:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800601a:	441e      	add	r6, r3
 800601c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800601e:	4618      	mov	r0, r3
 8006020:	f04f 0100 	mov.w	r1, #0
 8006024:	4602      	mov	r2, r0
 8006026:	460b      	mov	r3, r1
 8006028:	1894      	adds	r4, r2, r2
 800602a:	603c      	str	r4, [r7, #0]
 800602c:	415b      	adcs	r3, r3
 800602e:	607b      	str	r3, [r7, #4]
 8006030:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006034:	1812      	adds	r2, r2, r0
 8006036:	eb41 0303 	adc.w	r3, r1, r3
 800603a:	f04f 0400 	mov.w	r4, #0
 800603e:	f04f 0500 	mov.w	r5, #0
 8006042:	00dd      	lsls	r5, r3, #3
 8006044:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006048:	00d4      	lsls	r4, r2, #3
 800604a:	4622      	mov	r2, r4
 800604c:	462b      	mov	r3, r5
 800604e:	eb12 0a00 	adds.w	sl, r2, r0
 8006052:	eb43 0b01 	adc.w	fp, r3, r1
 8006056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	4618      	mov	r0, r3
 800605c:	f04f 0100 	mov.w	r1, #0
 8006060:	f04f 0200 	mov.w	r2, #0
 8006064:	f04f 0300 	mov.w	r3, #0
 8006068:	008b      	lsls	r3, r1, #2
 800606a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800606e:	0082      	lsls	r2, r0, #2
 8006070:	4650      	mov	r0, sl
 8006072:	4659      	mov	r1, fp
 8006074:	f7fa f904 	bl	8000280 <__aeabi_uldivmod>
 8006078:	4602      	mov	r2, r0
 800607a:	460b      	mov	r3, r1
 800607c:	4b0e      	ldr	r3, [pc, #56]	; (80060b8 <UART_SetConfig+0x38c>)
 800607e:	fba3 1302 	umull	r1, r3, r3, r2
 8006082:	095b      	lsrs	r3, r3, #5
 8006084:	2164      	movs	r1, #100	; 0x64
 8006086:	fb01 f303 	mul.w	r3, r1, r3
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	011b      	lsls	r3, r3, #4
 800608e:	3332      	adds	r3, #50	; 0x32
 8006090:	4a09      	ldr	r2, [pc, #36]	; (80060b8 <UART_SetConfig+0x38c>)
 8006092:	fba2 2303 	umull	r2, r3, r2, r3
 8006096:	095b      	lsrs	r3, r3, #5
 8006098:	f003 020f 	and.w	r2, r3, #15
 800609c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4432      	add	r2, r6
 80060a2:	609a      	str	r2, [r3, #8]
}
 80060a4:	bf00      	nop
 80060a6:	377c      	adds	r7, #124	; 0x7c
 80060a8:	46bd      	mov	sp, r7
 80060aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ae:	bf00      	nop
 80060b0:	40011000 	.word	0x40011000
 80060b4:	40011400 	.word	0x40011400
 80060b8:	51eb851f 	.word	0x51eb851f

080060bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060bc:	b084      	sub	sp, #16
 80060be:	b580      	push	{r7, lr}
 80060c0:	b084      	sub	sp, #16
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	f107 001c 	add.w	r0, r7, #28
 80060ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d122      	bne.n	800611a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80060e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80060fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d105      	bne.n	800610e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f9a0 	bl	8006454 <USB_CoreReset>
 8006114:	4603      	mov	r3, r0
 8006116:	73fb      	strb	r3, [r7, #15]
 8006118:	e01a      	b.n	8006150 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f994 	bl	8006454 <USB_CoreReset>
 800612c:	4603      	mov	r3, r0
 800612e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006132:	2b00      	cmp	r3, #0
 8006134:	d106      	bne.n	8006144 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	639a      	str	r2, [r3, #56]	; 0x38
 8006142:	e005      	b.n	8006150 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006148:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006152:	2b01      	cmp	r3, #1
 8006154:	d10b      	bne.n	800616e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f043 0206 	orr.w	r2, r3, #6
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f043 0220 	orr.w	r2, r3, #32
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800616e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006170:	4618      	mov	r0, r3
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800617a:	b004      	add	sp, #16
 800617c:	4770      	bx	lr

0800617e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800617e:	b480      	push	{r7}
 8006180:	b083      	sub	sp, #12
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f043 0201 	orr.w	r2, r3, #1
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f023 0201 	bic.w	r2, r3, #1
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b084      	sub	sp, #16
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	460b      	mov	r3, r1
 80061cc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80061ce:	2300      	movs	r3, #0
 80061d0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80061de:	78fb      	ldrb	r3, [r7, #3]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d115      	bne.n	8006210 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80061f0:	2001      	movs	r0, #1
 80061f2:	f7fb fc5d 	bl	8001ab0 <HAL_Delay>
      ms++;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	3301      	adds	r3, #1
 80061fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 f91a 	bl	8006436 <USB_GetMode>
 8006202:	4603      	mov	r3, r0
 8006204:	2b01      	cmp	r3, #1
 8006206:	d01e      	beq.n	8006246 <USB_SetCurrentMode+0x84>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2b31      	cmp	r3, #49	; 0x31
 800620c:	d9f0      	bls.n	80061f0 <USB_SetCurrentMode+0x2e>
 800620e:	e01a      	b.n	8006246 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006210:	78fb      	ldrb	r3, [r7, #3]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d115      	bne.n	8006242 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006222:	2001      	movs	r0, #1
 8006224:	f7fb fc44 	bl	8001ab0 <HAL_Delay>
      ms++;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	3301      	adds	r3, #1
 800622c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f901 	bl	8006436 <USB_GetMode>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d005      	beq.n	8006246 <USB_SetCurrentMode+0x84>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2b31      	cmp	r3, #49	; 0x31
 800623e:	d9f0      	bls.n	8006222 <USB_SetCurrentMode+0x60>
 8006240:	e001      	b.n	8006246 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e005      	b.n	8006252 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2b32      	cmp	r3, #50	; 0x32
 800624a:	d101      	bne.n	8006250 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e000      	b.n	8006252 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
	...

0800625c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006266:	2300      	movs	r3, #0
 8006268:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	019b      	lsls	r3, r3, #6
 800626e:	f043 0220 	orr.w	r2, r3, #32
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	3301      	adds	r3, #1
 800627a:	60fb      	str	r3, [r7, #12]
 800627c:	4a08      	ldr	r2, [pc, #32]	; (80062a0 <USB_FlushTxFifo+0x44>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d901      	bls.n	8006286 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e006      	b.n	8006294 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	f003 0320 	and.w	r3, r3, #32
 800628e:	2b20      	cmp	r3, #32
 8006290:	d0f1      	beq.n	8006276 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	00030d40 	.word	0x00030d40

080062a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062ac:	2300      	movs	r3, #0
 80062ae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2210      	movs	r2, #16
 80062b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	3301      	adds	r3, #1
 80062ba:	60fb      	str	r3, [r7, #12]
 80062bc:	4a08      	ldr	r2, [pc, #32]	; (80062e0 <USB_FlushRxFifo+0x3c>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d901      	bls.n	80062c6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e006      	b.n	80062d4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	f003 0310 	and.w	r3, r3, #16
 80062ce:	2b10      	cmp	r3, #16
 80062d0:	d0f1      	beq.n	80062b6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	00030d40 	.word	0x00030d40

080062e4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b089      	sub	sp, #36	; 0x24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	4611      	mov	r1, r2
 80062f0:	461a      	mov	r2, r3
 80062f2:	460b      	mov	r3, r1
 80062f4:	71fb      	strb	r3, [r7, #7]
 80062f6:	4613      	mov	r3, r2
 80062f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006302:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006306:	2b00      	cmp	r3, #0
 8006308:	d123      	bne.n	8006352 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800630a:	88bb      	ldrh	r3, [r7, #4]
 800630c:	3303      	adds	r3, #3
 800630e:	089b      	lsrs	r3, r3, #2
 8006310:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006312:	2300      	movs	r3, #0
 8006314:	61bb      	str	r3, [r7, #24]
 8006316:	e018      	b.n	800634a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006318:	79fb      	ldrb	r3, [r7, #7]
 800631a:	031a      	lsls	r2, r3, #12
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	4413      	add	r3, r2
 8006320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006324:	461a      	mov	r2, r3
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	3301      	adds	r3, #1
 8006330:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	3301      	adds	r3, #1
 8006336:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	3301      	adds	r3, #1
 800633c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	3301      	adds	r3, #1
 8006342:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	3301      	adds	r3, #1
 8006348:	61bb      	str	r3, [r7, #24]
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	429a      	cmp	r2, r3
 8006350:	d3e2      	bcc.n	8006318 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3724      	adds	r7, #36	; 0x24
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006360:	b480      	push	{r7}
 8006362:	b08b      	sub	sp, #44	; 0x2c
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	4613      	mov	r3, r2
 800636c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006376:	88fb      	ldrh	r3, [r7, #6]
 8006378:	089b      	lsrs	r3, r3, #2
 800637a:	b29b      	uxth	r3, r3
 800637c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800637e:	88fb      	ldrh	r3, [r7, #6]
 8006380:	f003 0303 	and.w	r3, r3, #3
 8006384:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006386:	2300      	movs	r3, #0
 8006388:	623b      	str	r3, [r7, #32]
 800638a:	e014      	b.n	80063b6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	601a      	str	r2, [r3, #0]
    pDest++;
 8006398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639a:	3301      	adds	r3, #1
 800639c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	3301      	adds	r3, #1
 80063a2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a6:	3301      	adds	r3, #1
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	3301      	adds	r3, #1
 80063ae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	3301      	adds	r3, #1
 80063b4:	623b      	str	r3, [r7, #32]
 80063b6:	6a3a      	ldr	r2, [r7, #32]
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d3e6      	bcc.n	800638c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80063be:	8bfb      	ldrh	r3, [r7, #30]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d01e      	beq.n	8006402 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ce:	461a      	mov	r2, r3
 80063d0:	f107 0310 	add.w	r3, r7, #16
 80063d4:	6812      	ldr	r2, [r2, #0]
 80063d6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	6a3b      	ldr	r3, [r7, #32]
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	00db      	lsls	r3, r3, #3
 80063e0:	fa22 f303 	lsr.w	r3, r2, r3
 80063e4:	b2da      	uxtb	r2, r3
 80063e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e8:	701a      	strb	r2, [r3, #0]
      i++;
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	3301      	adds	r3, #1
 80063ee:	623b      	str	r3, [r7, #32]
      pDest++;
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	3301      	adds	r3, #1
 80063f4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80063f6:	8bfb      	ldrh	r3, [r7, #30]
 80063f8:	3b01      	subs	r3, #1
 80063fa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80063fc:	8bfb      	ldrh	r3, [r7, #30]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1ea      	bne.n	80063d8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006404:	4618      	mov	r0, r3
 8006406:	372c      	adds	r7, #44	; 0x2c
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	4013      	ands	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006428:	68fb      	ldr	r3, [r7, #12]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006436:	b480      	push	{r7}
 8006438:	b083      	sub	sp, #12
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	f003 0301 	and.w	r3, r3, #1
}
 8006446:	4618      	mov	r0, r3
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
	...

08006454 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800645c:	2300      	movs	r3, #0
 800645e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	3301      	adds	r3, #1
 8006464:	60fb      	str	r3, [r7, #12]
 8006466:	4a13      	ldr	r2, [pc, #76]	; (80064b4 <USB_CoreReset+0x60>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d901      	bls.n	8006470 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e01a      	b.n	80064a6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	2b00      	cmp	r3, #0
 8006476:	daf3      	bge.n	8006460 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006478:	2300      	movs	r3, #0
 800647a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	f043 0201 	orr.w	r2, r3, #1
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	3301      	adds	r3, #1
 800648c:	60fb      	str	r3, [r7, #12]
 800648e:	4a09      	ldr	r2, [pc, #36]	; (80064b4 <USB_CoreReset+0x60>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d901      	bls.n	8006498 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e006      	b.n	80064a6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	f003 0301 	and.w	r3, r3, #1
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d0f1      	beq.n	8006488 <USB_CoreReset+0x34>

  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	00030d40 	.word	0x00030d40

080064b8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064b8:	b084      	sub	sp, #16
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b084      	sub	sp, #16
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	f107 001c 	add.w	r0, r7, #28
 80064c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064d4:	461a      	mov	r2, r3
 80064d6:	2300      	movs	r3, #0
 80064d8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ea:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006506:	2b00      	cmp	r3, #0
 8006508:	d018      	beq.n	800653c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	2b01      	cmp	r3, #1
 800650e:	d10a      	bne.n	8006526 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800651e:	f043 0304 	orr.w	r3, r3, #4
 8006522:	6013      	str	r3, [r2, #0]
 8006524:	e014      	b.n	8006550 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006534:	f023 0304 	bic.w	r3, r3, #4
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	e009      	b.n	8006550 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800654a:	f023 0304 	bic.w	r3, r3, #4
 800654e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006550:	2110      	movs	r1, #16
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7ff fe82 	bl	800625c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7ff fea3 	bl	80062a4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800655e:	2300      	movs	r3, #0
 8006560:	60fb      	str	r3, [r7, #12]
 8006562:	e015      	b.n	8006590 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	4413      	add	r3, r2
 800656c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006570:	461a      	mov	r2, r3
 8006572:	f04f 33ff 	mov.w	r3, #4294967295
 8006576:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	4413      	add	r3, r2
 8006580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006584:	461a      	mov	r2, r3
 8006586:	2300      	movs	r3, #0
 8006588:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3301      	adds	r3, #1
 800658e:	60fb      	str	r3, [r7, #12]
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	429a      	cmp	r2, r3
 8006596:	d3e5      	bcc.n	8006564 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f04f 32ff 	mov.w	r2, #4294967295
 80065a4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00b      	beq.n	80065ca <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065b8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a13      	ldr	r2, [pc, #76]	; (800660c <USB_HostInit+0x154>)
 80065be:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a13      	ldr	r2, [pc, #76]	; (8006610 <USB_HostInit+0x158>)
 80065c4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80065c8:	e009      	b.n	80065de <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2280      	movs	r2, #128	; 0x80
 80065ce:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a10      	ldr	r2, [pc, #64]	; (8006614 <USB_HostInit+0x15c>)
 80065d4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a0f      	ldr	r2, [pc, #60]	; (8006618 <USB_HostInit+0x160>)
 80065da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80065de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d105      	bne.n	80065f0 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	f043 0210 	orr.w	r2, r3, #16
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	699a      	ldr	r2, [r3, #24]
 80065f4:	4b09      	ldr	r3, [pc, #36]	; (800661c <USB_HostInit+0x164>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006608:	b004      	add	sp, #16
 800660a:	4770      	bx	lr
 800660c:	01000200 	.word	0x01000200
 8006610:	00e00300 	.word	0x00e00300
 8006614:	00600080 	.word	0x00600080
 8006618:	004000e0 	.word	0x004000e0
 800661c:	a3200008 	.word	0xa3200008

08006620 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	460b      	mov	r3, r1
 800662a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800663e:	f023 0303 	bic.w	r3, r3, #3
 8006642:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	78fb      	ldrb	r3, [r7, #3]
 800664e:	f003 0303 	and.w	r3, r3, #3
 8006652:	68f9      	ldr	r1, [r7, #12]
 8006654:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006658:	4313      	orrs	r3, r2
 800665a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800665c:	78fb      	ldrb	r3, [r7, #3]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d107      	bne.n	8006672 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006668:	461a      	mov	r2, r3
 800666a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800666e:	6053      	str	r3, [r2, #4]
 8006670:	e009      	b.n	8006686 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006672:	78fb      	ldrb	r3, [r7, #3]
 8006674:	2b02      	cmp	r3, #2
 8006676:	d106      	bne.n	8006686 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800667e:	461a      	mov	r2, r3
 8006680:	f241 7370 	movw	r3, #6000	; 0x1770
 8006684:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3714      	adds	r7, #20
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80066b4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80066be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066c2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80066c4:	2064      	movs	r0, #100	; 0x64
 80066c6:	f7fb f9f3 	bl	8001ab0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80066d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066d6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80066d8:	200a      	movs	r0, #10
 80066da:	f7fb f9e9 	bl	8001ab0 <HAL_Delay>

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	460b      	mov	r3, r1
 80066f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80066f8:	2300      	movs	r3, #0
 80066fa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800670c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d109      	bne.n	800672c <USB_DriveVbus+0x44>
 8006718:	78fb      	ldrb	r3, [r7, #3]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d106      	bne.n	800672c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006726:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800672a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006736:	d109      	bne.n	800674c <USB_DriveVbus+0x64>
 8006738:	78fb      	ldrb	r3, [r7, #3]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d106      	bne.n	800674c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006746:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800674a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800675a:	b480      	push	{r7}
 800675c:	b085      	sub	sp, #20
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006766:	2300      	movs	r3, #0
 8006768:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	0c5b      	lsrs	r3, r3, #17
 8006778:	f003 0303 	and.w	r3, r3, #3
}
 800677c:	4618      	mov	r0, r3
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	b29b      	uxth	r3, r3
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
	...

080067ac <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b088      	sub	sp, #32
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	4608      	mov	r0, r1
 80067b6:	4611      	mov	r1, r2
 80067b8:	461a      	mov	r2, r3
 80067ba:	4603      	mov	r3, r0
 80067bc:	70fb      	strb	r3, [r7, #3]
 80067be:	460b      	mov	r3, r1
 80067c0:	70bb      	strb	r3, [r7, #2]
 80067c2:	4613      	mov	r3, r2
 80067c4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80067c6:	2300      	movs	r3, #0
 80067c8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80067ce:	78fb      	ldrb	r3, [r7, #3]
 80067d0:	015a      	lsls	r2, r3, #5
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	4413      	add	r3, r2
 80067d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067da:	461a      	mov	r2, r3
 80067dc:	f04f 33ff 	mov.w	r3, #4294967295
 80067e0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80067e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	d87e      	bhi.n	80068e8 <USB_HC_Init+0x13c>
 80067ea:	a201      	add	r2, pc, #4	; (adr r2, 80067f0 <USB_HC_Init+0x44>)
 80067ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f0:	08006801 	.word	0x08006801
 80067f4:	080068ab 	.word	0x080068ab
 80067f8:	08006801 	.word	0x08006801
 80067fc:	0800686d 	.word	0x0800686d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006800:	78fb      	ldrb	r3, [r7, #3]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	4413      	add	r3, r2
 8006808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800680c:	461a      	mov	r2, r3
 800680e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006812:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006814:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006818:	2b00      	cmp	r3, #0
 800681a:	da10      	bge.n	800683e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800681c:	78fb      	ldrb	r3, [r7, #3]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	4413      	add	r3, r2
 8006824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	78fa      	ldrb	r2, [r7, #3]
 800682c:	0151      	lsls	r1, r2, #5
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	440a      	add	r2, r1
 8006832:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800683a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800683c:	e057      	b.n	80068ee <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006846:	2b00      	cmp	r3, #0
 8006848:	d051      	beq.n	80068ee <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800684a:	78fb      	ldrb	r3, [r7, #3]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	4413      	add	r3, r2
 8006852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	78fa      	ldrb	r2, [r7, #3]
 800685a:	0151      	lsls	r1, r2, #5
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	440a      	add	r2, r1
 8006860:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006864:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006868:	60d3      	str	r3, [r2, #12]
      break;
 800686a:	e040      	b.n	80068ee <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800686c:	78fb      	ldrb	r3, [r7, #3]
 800686e:	015a      	lsls	r2, r3, #5
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	4413      	add	r3, r2
 8006874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006878:	461a      	mov	r2, r3
 800687a:	f240 639d 	movw	r3, #1693	; 0x69d
 800687e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006880:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006884:	2b00      	cmp	r3, #0
 8006886:	da34      	bge.n	80068f2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006888:	78fb      	ldrb	r3, [r7, #3]
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	4413      	add	r3, r2
 8006890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	78fa      	ldrb	r2, [r7, #3]
 8006898:	0151      	lsls	r1, r2, #5
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	440a      	add	r2, r1
 800689e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068a6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80068a8:	e023      	b.n	80068f2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80068aa:	78fb      	ldrb	r3, [r7, #3]
 80068ac:	015a      	lsls	r2, r3, #5
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b6:	461a      	mov	r2, r3
 80068b8:	f240 2325 	movw	r3, #549	; 0x225
 80068bc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80068be:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	da17      	bge.n	80068f6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80068c6:	78fb      	ldrb	r3, [r7, #3]
 80068c8:	015a      	lsls	r2, r3, #5
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	78fa      	ldrb	r2, [r7, #3]
 80068d6:	0151      	lsls	r1, r2, #5
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	440a      	add	r2, r1
 80068dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068e0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80068e4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80068e6:	e006      	b.n	80068f6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	77fb      	strb	r3, [r7, #31]
      break;
 80068ec:	e004      	b.n	80068f8 <USB_HC_Init+0x14c>
      break;
 80068ee:	bf00      	nop
 80068f0:	e002      	b.n	80068f8 <USB_HC_Init+0x14c>
      break;
 80068f2:	bf00      	nop
 80068f4:	e000      	b.n	80068f8 <USB_HC_Init+0x14c>
      break;
 80068f6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068fe:	699a      	ldr	r2, [r3, #24]
 8006900:	78fb      	ldrb	r3, [r7, #3]
 8006902:	f003 030f 	and.w	r3, r3, #15
 8006906:	2101      	movs	r1, #1
 8006908:	fa01 f303 	lsl.w	r3, r1, r3
 800690c:	6939      	ldr	r1, [r7, #16]
 800690e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006912:	4313      	orrs	r3, r2
 8006914:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006922:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006926:	2b00      	cmp	r3, #0
 8006928:	da03      	bge.n	8006932 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800692a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800692e:	61bb      	str	r3, [r7, #24]
 8006930:	e001      	b.n	8006936 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006932:	2300      	movs	r3, #0
 8006934:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7ff ff0f 	bl	800675a <USB_GetHostSpeed>
 800693c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800693e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006942:	2b02      	cmp	r3, #2
 8006944:	d106      	bne.n	8006954 <USB_HC_Init+0x1a8>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2b02      	cmp	r3, #2
 800694a:	d003      	beq.n	8006954 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800694c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006950:	617b      	str	r3, [r7, #20]
 8006952:	e001      	b.n	8006958 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006954:	2300      	movs	r3, #0
 8006956:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006958:	787b      	ldrb	r3, [r7, #1]
 800695a:	059b      	lsls	r3, r3, #22
 800695c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006960:	78bb      	ldrb	r3, [r7, #2]
 8006962:	02db      	lsls	r3, r3, #11
 8006964:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006968:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800696a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800696e:	049b      	lsls	r3, r3, #18
 8006970:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006974:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006976:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006978:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800697c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006982:	78fb      	ldrb	r3, [r7, #3]
 8006984:	0159      	lsls	r1, r3, #5
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	440b      	add	r3, r1
 800698a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800698e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006994:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006996:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800699a:	2b03      	cmp	r3, #3
 800699c:	d10f      	bne.n	80069be <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800699e:	78fb      	ldrb	r3, [r7, #3]
 80069a0:	015a      	lsls	r2, r3, #5
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	4413      	add	r3, r2
 80069a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	78fa      	ldrb	r2, [r7, #3]
 80069ae:	0151      	lsls	r1, r2, #5
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	440a      	add	r2, r1
 80069b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069bc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80069be:	7ffb      	ldrb	r3, [r7, #31]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3720      	adds	r7, #32
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b08c      	sub	sp, #48	; 0x30
 80069cc:	af02      	add	r7, sp, #8
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	4613      	mov	r3, r2
 80069d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	785b      	ldrb	r3, [r3, #1]
 80069de:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80069e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069e4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d02d      	beq.n	8006a4e <USB_HC_StartXfer+0x86>
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	791b      	ldrb	r3, [r3, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d129      	bne.n	8006a4e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80069fa:	79fb      	ldrb	r3, [r7, #7]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d117      	bne.n	8006a30 <USB_HC_StartXfer+0x68>
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	79db      	ldrb	r3, [r3, #7]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d003      	beq.n	8006a10 <USB_HC_StartXfer+0x48>
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	79db      	ldrb	r3, [r3, #7]
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d10f      	bne.n	8006a30 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	69fa      	ldr	r2, [r7, #28]
 8006a20:	0151      	lsls	r1, r2, #5
 8006a22:	6a3a      	ldr	r2, [r7, #32]
 8006a24:	440a      	add	r2, r1
 8006a26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a2e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006a30:	79fb      	ldrb	r3, [r7, #7]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10b      	bne.n	8006a4e <USB_HC_StartXfer+0x86>
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	795b      	ldrb	r3, [r3, #5]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d107      	bne.n	8006a4e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	785b      	ldrb	r3, [r3, #1]
 8006a42:	4619      	mov	r1, r3
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 fa2f 	bl	8006ea8 <USB_DoPing>
      return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	e0f8      	b.n	8006c40 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d018      	beq.n	8006a88 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	8912      	ldrh	r2, [r2, #8]
 8006a5e:	4413      	add	r3, r2
 8006a60:	3b01      	subs	r3, #1
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	8912      	ldrh	r2, [r2, #8]
 8006a66:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a6a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006a6c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006a6e:	8b7b      	ldrh	r3, [r7, #26]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d90b      	bls.n	8006a8c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006a74:	8b7b      	ldrh	r3, [r7, #26]
 8006a76:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	8912      	ldrh	r2, [r2, #8]
 8006a7e:	fb02 f203 	mul.w	r2, r2, r3
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	611a      	str	r2, [r3, #16]
 8006a86:	e001      	b.n	8006a8c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	78db      	ldrb	r3, [r3, #3]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d007      	beq.n	8006aa4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	8912      	ldrh	r2, [r2, #8]
 8006a9a:	fb02 f203 	mul.w	r2, r2, r3
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	611a      	str	r2, [r3, #16]
 8006aa2:	e003      	b.n	8006aac <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	695a      	ldr	r2, [r3, #20]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ab4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ab6:	04d9      	lsls	r1, r3, #19
 8006ab8:	4b63      	ldr	r3, [pc, #396]	; (8006c48 <USB_HC_StartXfer+0x280>)
 8006aba:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006abc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	7a9b      	ldrb	r3, [r3, #10]
 8006ac2:	075b      	lsls	r3, r3, #29
 8006ac4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ac8:	69f9      	ldr	r1, [r7, #28]
 8006aca:	0148      	lsls	r0, r1, #5
 8006acc:	6a39      	ldr	r1, [r7, #32]
 8006ace:	4401      	add	r1, r0
 8006ad0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ad4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ad6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006ad8:	79fb      	ldrb	r3, [r7, #7]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d009      	beq.n	8006af2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	68d9      	ldr	r1, [r3, #12]
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	015a      	lsls	r2, r3, #5
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	4413      	add	r3, r2
 8006aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aee:	460a      	mov	r2, r1
 8006af0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	bf0c      	ite	eq
 8006b02:	2301      	moveq	r3, #1
 8006b04:	2300      	movne	r3, #0
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	015a      	lsls	r2, r3, #5
 8006b0e:	6a3b      	ldr	r3, [r7, #32]
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	69fa      	ldr	r2, [r7, #28]
 8006b1a:	0151      	lsls	r1, r2, #5
 8006b1c:	6a3a      	ldr	r2, [r7, #32]
 8006b1e:	440a      	add	r2, r1
 8006b20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b24:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006b28:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	7e7b      	ldrb	r3, [r7, #25]
 8006b3a:	075b      	lsls	r3, r3, #29
 8006b3c:	69f9      	ldr	r1, [r7, #28]
 8006b3e:	0148      	lsls	r0, r1, #5
 8006b40:	6a39      	ldr	r1, [r7, #32]
 8006b42:	4401      	add	r1, r0
 8006b44:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	015a      	lsls	r2, r3, #5
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b62:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	78db      	ldrb	r3, [r3, #3]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d004      	beq.n	8006b76 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b72:	613b      	str	r3, [r7, #16]
 8006b74:	e003      	b.n	8006b7e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b7c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b84:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	015a      	lsls	r2, r3, #5
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b92:	461a      	mov	r2, r3
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006b98:	79fb      	ldrb	r3, [r7, #7]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	e04e      	b.n	8006c40 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	78db      	ldrb	r3, [r3, #3]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d149      	bne.n	8006c3e <USB_HC_StartXfer+0x276>
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d045      	beq.n	8006c3e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	79db      	ldrb	r3, [r3, #7]
 8006bb6:	2b03      	cmp	r3, #3
 8006bb8:	d830      	bhi.n	8006c1c <USB_HC_StartXfer+0x254>
 8006bba:	a201      	add	r2, pc, #4	; (adr r2, 8006bc0 <USB_HC_StartXfer+0x1f8>)
 8006bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc0:	08006bd1 	.word	0x08006bd1
 8006bc4:	08006bf5 	.word	0x08006bf5
 8006bc8:	08006bd1 	.word	0x08006bd1
 8006bcc:	08006bf5 	.word	0x08006bf5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	3303      	adds	r3, #3
 8006bd6:	089b      	lsrs	r3, r3, #2
 8006bd8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006bda:	8afa      	ldrh	r2, [r7, #22]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d91c      	bls.n	8006c20 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	f043 0220 	orr.w	r2, r3, #32
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	619a      	str	r2, [r3, #24]
        }
        break;
 8006bf2:	e015      	b.n	8006c20 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	695b      	ldr	r3, [r3, #20]
 8006bf8:	3303      	adds	r3, #3
 8006bfa:	089b      	lsrs	r3, r3, #2
 8006bfc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006bfe:	8afa      	ldrh	r2, [r7, #22]
 8006c00:	6a3b      	ldr	r3, [r7, #32]
 8006c02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d90a      	bls.n	8006c24 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	619a      	str	r2, [r3, #24]
        }
        break;
 8006c1a:	e003      	b.n	8006c24 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006c1c:	bf00      	nop
 8006c1e:	e002      	b.n	8006c26 <USB_HC_StartXfer+0x25e>
        break;
 8006c20:	bf00      	nop
 8006c22:	e000      	b.n	8006c26 <USB_HC_StartXfer+0x25e>
        break;
 8006c24:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	68d9      	ldr	r1, [r3, #12]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	785a      	ldrb	r2, [r3, #1]
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	2000      	movs	r0, #0
 8006c36:	9000      	str	r0, [sp, #0]
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f7ff fb53 	bl	80062e4 <USB_WritePacket>
  }

  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3728      	adds	r7, #40	; 0x28
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	1ff80000 	.word	0x1ff80000

08006c4c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c5e:	695b      	ldr	r3, [r3, #20]
 8006c60:	b29b      	uxth	r3, r3
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3714      	adds	r7, #20
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b089      	sub	sp, #36	; 0x24
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
 8006c76:	460b      	mov	r3, r1
 8006c78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8006c7e:	78fb      	ldrb	r3, [r7, #3]
 8006c80:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	015a      	lsls	r2, r3, #5
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	0c9b      	lsrs	r3, r3, #18
 8006c96:	f003 0303 	and.w	r3, r3, #3
 8006c9a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	0fdb      	lsrs	r3, r3, #31
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f003 0320 	and.w	r3, r3, #32
 8006cba:	2b20      	cmp	r3, #32
 8006cbc:	d104      	bne.n	8006cc8 <USB_HC_Halt+0x5a>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d101      	bne.n	8006cc8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	e0e8      	b.n	8006e9a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d002      	beq.n	8006cd4 <USB_HC_Halt+0x66>
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d173      	bne.n	8006dbc <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	0151      	lsls	r1, r2, #5
 8006ce6:	69ba      	ldr	r2, [r7, #24]
 8006ce8:	440a      	add	r2, r1
 8006cea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cf2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f003 0320 	and.w	r3, r3, #32
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f040 80cb 	bne.w	8006e98 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d06:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d143      	bne.n	8006d96 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	015a      	lsls	r2, r3, #5
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	4413      	add	r3, r2
 8006d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	0151      	lsls	r1, r2, #5
 8006d20:	69ba      	ldr	r2, [r7, #24]
 8006d22:	440a      	add	r2, r1
 8006d24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d2c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	015a      	lsls	r2, r3, #5
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	0151      	lsls	r1, r2, #5
 8006d40:	69ba      	ldr	r2, [r7, #24]
 8006d42:	440a      	add	r2, r1
 8006d44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d4c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	015a      	lsls	r2, r3, #5
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	4413      	add	r3, r2
 8006d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	0151      	lsls	r1, r2, #5
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	440a      	add	r2, r1
 8006d64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d6c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	3301      	adds	r3, #1
 8006d72:	61fb      	str	r3, [r7, #28]
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d7a:	d81d      	bhi.n	8006db8 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d92:	d0ec      	beq.n	8006d6e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d94:	e080      	b.n	8006e98 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	015a      	lsls	r2, r3, #5
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	0151      	lsls	r1, r2, #5
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	440a      	add	r2, r1
 8006dac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006db0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006db4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006db6:	e06f      	b.n	8006e98 <USB_HC_Halt+0x22a>
            break;
 8006db8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006dba:	e06d      	b.n	8006e98 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	015a      	lsls	r2, r3, #5
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	0151      	lsls	r1, r2, #5
 8006dce:	69ba      	ldr	r2, [r7, #24]
 8006dd0:	440a      	add	r2, r1
 8006dd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dda:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d143      	bne.n	8006e74 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	0151      	lsls	r1, r2, #5
 8006dfe:	69ba      	ldr	r2, [r7, #24]
 8006e00:	440a      	add	r2, r1
 8006e02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e0a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	015a      	lsls	r2, r3, #5
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	4413      	add	r3, r2
 8006e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	0151      	lsls	r1, r2, #5
 8006e1e:	69ba      	ldr	r2, [r7, #24]
 8006e20:	440a      	add	r2, r1
 8006e22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e2a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	015a      	lsls	r2, r3, #5
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	4413      	add	r3, r2
 8006e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	0151      	lsls	r1, r2, #5
 8006e3e:	69ba      	ldr	r2, [r7, #24]
 8006e40:	440a      	add	r2, r1
 8006e42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e4a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	61fb      	str	r3, [r7, #28]
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e58:	d81d      	bhi.n	8006e96 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	015a      	lsls	r2, r3, #5
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	4413      	add	r3, r2
 8006e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e70:	d0ec      	beq.n	8006e4c <USB_HC_Halt+0x1de>
 8006e72:	e011      	b.n	8006e98 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	015a      	lsls	r2, r3, #5
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	0151      	lsls	r1, r2, #5
 8006e86:	69ba      	ldr	r2, [r7, #24]
 8006e88:	440a      	add	r2, r1
 8006e8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e92:	6013      	str	r3, [r2, #0]
 8006e94:	e000      	b.n	8006e98 <USB_HC_Halt+0x22a>
          break;
 8006e96:	bf00      	nop
    }
  }

  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3724      	adds	r7, #36	; 0x24
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
	...

08006ea8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b087      	sub	sp, #28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006eb8:	78fb      	ldrb	r3, [r7, #3]
 8006eba:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	04da      	lsls	r2, r3, #19
 8006ec4:	4b15      	ldr	r3, [pc, #84]	; (8006f1c <USB_DoPing+0x74>)
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	0151      	lsls	r1, r2, #5
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	440a      	add	r2, r1
 8006ed0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ed4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ed8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	015a      	lsls	r2, r3, #5
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ef0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ef8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f06:	461a      	mov	r2, r3
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	371c      	adds	r7, #28
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	1ff80000 	.word	0x1ff80000

08006f20 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f7ff f935 	bl	80061a0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006f36:	2110      	movs	r1, #16
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f7ff f98f 	bl	800625c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7ff f9b0 	bl	80062a4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006f44:	2300      	movs	r3, #0
 8006f46:	613b      	str	r3, [r7, #16]
 8006f48:	e01f      	b.n	8006f8a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f60:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f68:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f70:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	015a      	lsls	r2, r3, #5
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	4413      	add	r3, r2
 8006f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f7e:	461a      	mov	r2, r3
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	3301      	adds	r3, #1
 8006f88:	613b      	str	r3, [r7, #16]
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	2b0f      	cmp	r3, #15
 8006f8e:	d9dc      	bls.n	8006f4a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006f90:	2300      	movs	r3, #0
 8006f92:	613b      	str	r3, [r7, #16]
 8006f94:	e034      	b.n	8007000 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fac:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fb4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fbc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	015a      	lsls	r2, r3, #5
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fca:	461a      	mov	r2, r3
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	617b      	str	r3, [r7, #20]
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fdc:	d80c      	bhi.n	8006ff8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ff0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ff4:	d0ec      	beq.n	8006fd0 <USB_StopHost+0xb0>
 8006ff6:	e000      	b.n	8006ffa <USB_StopHost+0xda>
        break;
 8006ff8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	613b      	str	r3, [r7, #16]
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	2b0f      	cmp	r3, #15
 8007004:	d9c7      	bls.n	8006f96 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800700c:	461a      	mov	r2, r3
 800700e:	f04f 33ff 	mov.w	r3, #4294967295
 8007012:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f04f 32ff 	mov.w	r2, #4294967295
 800701a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f7ff f8ae 	bl	800617e <USB_EnableGlobalInt>

  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3718      	adds	r7, #24
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800702c:	b590      	push	{r4, r7, lr}
 800702e:	b089      	sub	sp, #36	; 0x24
 8007030:	af04      	add	r7, sp, #16
 8007032:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007034:	2301      	movs	r3, #1
 8007036:	2202      	movs	r2, #2
 8007038:	2102      	movs	r1, #2
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fc66 	bl	800790c <USBH_FindInterface>
 8007040:	4603      	mov	r3, r0
 8007042:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007044:	7bfb      	ldrb	r3, [r7, #15]
 8007046:	2bff      	cmp	r3, #255	; 0xff
 8007048:	d002      	beq.n	8007050 <USBH_CDC_InterfaceInit+0x24>
 800704a:	7bfb      	ldrb	r3, [r7, #15]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d901      	bls.n	8007054 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007050:	2302      	movs	r3, #2
 8007052:	e13d      	b.n	80072d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007054:	7bfb      	ldrb	r3, [r7, #15]
 8007056:	4619      	mov	r1, r3
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fc3b 	bl	80078d4 <USBH_SelectInterface>
 800705e:	4603      	mov	r3, r0
 8007060:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007062:	7bbb      	ldrb	r3, [r7, #14]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d001      	beq.n	800706c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007068:	2302      	movs	r3, #2
 800706a:	e131      	b.n	80072d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007072:	2050      	movs	r0, #80	; 0x50
 8007074:	f002 fa00 	bl	8009478 <malloc>
 8007078:	4603      	mov	r3, r0
 800707a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007082:	69db      	ldr	r3, [r3, #28]
 8007084:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d101      	bne.n	8007090 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800708c:	2302      	movs	r3, #2
 800708e:	e11f      	b.n	80072d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007090:	2250      	movs	r2, #80	; 0x50
 8007092:	2100      	movs	r1, #0
 8007094:	68b8      	ldr	r0, [r7, #8]
 8007096:	f002 f9ff 	bl	8009498 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800709a:	7bfb      	ldrb	r3, [r7, #15]
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	211a      	movs	r1, #26
 80070a0:	fb01 f303 	mul.w	r3, r1, r3
 80070a4:	4413      	add	r3, r2
 80070a6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	b25b      	sxtb	r3, r3
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	da15      	bge.n	80070de <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80070b2:	7bfb      	ldrb	r3, [r7, #15]
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	211a      	movs	r1, #26
 80070b8:	fb01 f303 	mul.w	r3, r1, r3
 80070bc:	4413      	add	r3, r2
 80070be:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80070c2:	781a      	ldrb	r2, [r3, #0]
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	211a      	movs	r1, #26
 80070ce:	fb01 f303 	mul.w	r3, r1, r3
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80070d8:	881a      	ldrh	r2, [r3, #0]
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	785b      	ldrb	r3, [r3, #1]
 80070e2:	4619      	mov	r1, r3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f001 fe32 	bl	8008d4e <USBH_AllocPipe>
 80070ea:	4603      	mov	r3, r0
 80070ec:	461a      	mov	r2, r3
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	7819      	ldrb	r1, [r3, #0]
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	7858      	ldrb	r0, [r3, #1]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	8952      	ldrh	r2, [r2, #10]
 800710a:	9202      	str	r2, [sp, #8]
 800710c:	2203      	movs	r2, #3
 800710e:	9201      	str	r2, [sp, #4]
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	4623      	mov	r3, r4
 8007114:	4602      	mov	r2, r0
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f001 fdea 	bl	8008cf0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	2200      	movs	r2, #0
 8007122:	4619      	mov	r1, r3
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f002 f8f9 	bl	800931c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800712a:	2300      	movs	r3, #0
 800712c:	2200      	movs	r2, #0
 800712e:	210a      	movs	r1, #10
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fbeb 	bl	800790c <USBH_FindInterface>
 8007136:	4603      	mov	r3, r0
 8007138:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800713a:	7bfb      	ldrb	r3, [r7, #15]
 800713c:	2bff      	cmp	r3, #255	; 0xff
 800713e:	d002      	beq.n	8007146 <USBH_CDC_InterfaceInit+0x11a>
 8007140:	7bfb      	ldrb	r3, [r7, #15]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d901      	bls.n	800714a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007146:	2302      	movs	r3, #2
 8007148:	e0c2      	b.n	80072d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800714a:	7bfb      	ldrb	r3, [r7, #15]
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	211a      	movs	r1, #26
 8007150:	fb01 f303 	mul.w	r3, r1, r3
 8007154:	4413      	add	r3, r2
 8007156:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	b25b      	sxtb	r3, r3
 800715e:	2b00      	cmp	r3, #0
 8007160:	da16      	bge.n	8007190 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007162:	7bfb      	ldrb	r3, [r7, #15]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	211a      	movs	r1, #26
 8007168:	fb01 f303 	mul.w	r3, r1, r3
 800716c:	4413      	add	r3, r2
 800716e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007172:	781a      	ldrb	r2, [r3, #0]
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007178:	7bfb      	ldrb	r3, [r7, #15]
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	211a      	movs	r1, #26
 800717e:	fb01 f303 	mul.w	r3, r1, r3
 8007182:	4413      	add	r3, r2
 8007184:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007188:	881a      	ldrh	r2, [r3, #0]
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	835a      	strh	r2, [r3, #26]
 800718e:	e015      	b.n	80071bc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007190:	7bfb      	ldrb	r3, [r7, #15]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	211a      	movs	r1, #26
 8007196:	fb01 f303 	mul.w	r3, r1, r3
 800719a:	4413      	add	r3, r2
 800719c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80071a0:	781a      	ldrb	r2, [r3, #0]
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80071a6:	7bfb      	ldrb	r3, [r7, #15]
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	211a      	movs	r1, #26
 80071ac:	fb01 f303 	mul.w	r3, r1, r3
 80071b0:	4413      	add	r3, r2
 80071b2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80071b6:	881a      	ldrh	r2, [r3, #0]
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80071bc:	7bfb      	ldrb	r3, [r7, #15]
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	211a      	movs	r1, #26
 80071c2:	fb01 f303 	mul.w	r3, r1, r3
 80071c6:	4413      	add	r3, r2
 80071c8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	b25b      	sxtb	r3, r3
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	da16      	bge.n	8007202 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80071d4:	7bfb      	ldrb	r3, [r7, #15]
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	211a      	movs	r1, #26
 80071da:	fb01 f303 	mul.w	r3, r1, r3
 80071de:	4413      	add	r3, r2
 80071e0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80071e4:	781a      	ldrb	r2, [r3, #0]
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	211a      	movs	r1, #26
 80071f0:	fb01 f303 	mul.w	r3, r1, r3
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80071fa:	881a      	ldrh	r2, [r3, #0]
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	835a      	strh	r2, [r3, #26]
 8007200:	e015      	b.n	800722e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007202:	7bfb      	ldrb	r3, [r7, #15]
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	211a      	movs	r1, #26
 8007208:	fb01 f303 	mul.w	r3, r1, r3
 800720c:	4413      	add	r3, r2
 800720e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007212:	781a      	ldrb	r2, [r3, #0]
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007218:	7bfb      	ldrb	r3, [r7, #15]
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	211a      	movs	r1, #26
 800721e:	fb01 f303 	mul.w	r3, r1, r3
 8007222:	4413      	add	r3, r2
 8007224:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007228:	881a      	ldrh	r2, [r3, #0]
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	7b9b      	ldrb	r3, [r3, #14]
 8007232:	4619      	mov	r1, r3
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f001 fd8a 	bl	8008d4e <USBH_AllocPipe>
 800723a:	4603      	mov	r3, r0
 800723c:	461a      	mov	r2, r3
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	7bdb      	ldrb	r3, [r3, #15]
 8007246:	4619      	mov	r1, r3
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f001 fd80 	bl	8008d4e <USBH_AllocPipe>
 800724e:	4603      	mov	r3, r0
 8007250:	461a      	mov	r2, r3
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	7b59      	ldrb	r1, [r3, #13]
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	7b98      	ldrb	r0, [r3, #14]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	8b12      	ldrh	r2, [r2, #24]
 800726e:	9202      	str	r2, [sp, #8]
 8007270:	2202      	movs	r2, #2
 8007272:	9201      	str	r2, [sp, #4]
 8007274:	9300      	str	r3, [sp, #0]
 8007276:	4623      	mov	r3, r4
 8007278:	4602      	mov	r2, r0
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f001 fd38 	bl	8008cf0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	7b19      	ldrb	r1, [r3, #12]
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	7bd8      	ldrb	r0, [r3, #15]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	8b52      	ldrh	r2, [r2, #26]
 8007298:	9202      	str	r2, [sp, #8]
 800729a:	2202      	movs	r2, #2
 800729c:	9201      	str	r2, [sp, #4]
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	4623      	mov	r3, r4
 80072a2:	4602      	mov	r2, r0
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f001 fd23 	bl	8008cf0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	7b5b      	ldrb	r3, [r3, #13]
 80072b6:	2200      	movs	r2, #0
 80072b8:	4619      	mov	r1, r3
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f002 f82e 	bl	800931c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	7b1b      	ldrb	r3, [r3, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f002 f827 	bl	800931c <USBH_LL_SetToggle>

  return USBH_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3714      	adds	r7, #20
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd90      	pop	{r4, r7, pc}

080072d8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072e6:	69db      	ldr	r3, [r3, #28]
 80072e8:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00e      	beq.n	8007310 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	4619      	mov	r1, r3
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f001 fd18 	bl	8008d2e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f001 fd43 	bl	8008d90 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	7b1b      	ldrb	r3, [r3, #12]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00e      	beq.n	8007336 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	7b1b      	ldrb	r3, [r3, #12]
 800731c:	4619      	mov	r1, r3
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f001 fd05 	bl	8008d2e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	7b1b      	ldrb	r3, [r3, #12]
 8007328:	4619      	mov	r1, r3
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f001 fd30 	bl	8008d90 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	7b5b      	ldrb	r3, [r3, #13]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00e      	beq.n	800735c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	7b5b      	ldrb	r3, [r3, #13]
 8007342:	4619      	mov	r1, r3
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f001 fcf2 	bl	8008d2e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	7b5b      	ldrb	r3, [r3, #13]
 800734e:	4619      	mov	r1, r3
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f001 fd1d 	bl	8008d90 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007362:	69db      	ldr	r3, [r3, #28]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00b      	beq.n	8007380 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800736e:	69db      	ldr	r3, [r3, #28]
 8007370:	4618      	mov	r0, r3
 8007372:	f002 f889 	bl	8009488 <free>
    phost->pActiveClass->pData = 0U;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800737c:	2200      	movs	r2, #0
 800737e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b084      	sub	sp, #16
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	3340      	adds	r3, #64	; 0x40
 80073a0:	4619      	mov	r1, r3
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f8b1 	bl	800750a <GetLineCoding>
 80073a8:	4603      	mov	r3, r0
 80073aa:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80073ac:	7afb      	ldrb	r3, [r7, #11]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d105      	bne.n	80073be <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073b8:	2102      	movs	r1, #2
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80073be:	7afb      	ldrb	r3, [r7, #11]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80073d0:	2301      	movs	r3, #1
 80073d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073de:	69db      	ldr	r3, [r3, #28]
 80073e0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80073e8:	2b04      	cmp	r3, #4
 80073ea:	d877      	bhi.n	80074dc <USBH_CDC_Process+0x114>
 80073ec:	a201      	add	r2, pc, #4	; (adr r2, 80073f4 <USBH_CDC_Process+0x2c>)
 80073ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f2:	bf00      	nop
 80073f4:	08007409 	.word	0x08007409
 80073f8:	0800740f 	.word	0x0800740f
 80073fc:	0800743f 	.word	0x0800743f
 8007400:	080074b3 	.word	0x080074b3
 8007404:	080074c1 	.word	0x080074c1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007408:	2300      	movs	r3, #0
 800740a:	73fb      	strb	r3, [r7, #15]
      break;
 800740c:	e06d      	b.n	80074ea <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007412:	4619      	mov	r1, r3
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f897 	bl	8007548 <SetLineCoding>
 800741a:	4603      	mov	r3, r0
 800741c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800741e:	7bbb      	ldrb	r3, [r7, #14]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d104      	bne.n	800742e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	2202      	movs	r2, #2
 8007428:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800742c:	e058      	b.n	80074e0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800742e:	7bbb      	ldrb	r3, [r7, #14]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d055      	beq.n	80074e0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	2204      	movs	r2, #4
 8007438:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800743c:	e050      	b.n	80074e0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	3340      	adds	r3, #64	; 0x40
 8007442:	4619      	mov	r1, r3
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f860 	bl	800750a <GetLineCoding>
 800744a:	4603      	mov	r3, r0
 800744c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800744e:	7bbb      	ldrb	r3, [r7, #14]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d126      	bne.n	80074a2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007466:	791b      	ldrb	r3, [r3, #4]
 8007468:	429a      	cmp	r2, r3
 800746a:	d13b      	bne.n	80074e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007476:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007478:	429a      	cmp	r2, r3
 800747a:	d133      	bne.n	80074e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007486:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007488:	429a      	cmp	r2, r3
 800748a:	d12b      	bne.n	80074e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007494:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007496:	429a      	cmp	r2, r3
 8007498:	d124      	bne.n	80074e4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f958 	bl	8007750 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80074a0:	e020      	b.n	80074e4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80074a2:	7bbb      	ldrb	r3, [r7, #14]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d01d      	beq.n	80074e4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	2204      	movs	r2, #4
 80074ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80074b0:	e018      	b.n	80074e4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f867 	bl	8007586 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f8da 	bl	8007672 <CDC_ProcessReception>
      break;
 80074be:	e014      	b.n	80074ea <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80074c0:	2100      	movs	r1, #0
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 ffe3 	bl	800848e <USBH_ClrFeature>
 80074c8:	4603      	mov	r3, r0
 80074ca:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80074cc:	7bbb      	ldrb	r3, [r7, #14]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10a      	bne.n	80074e8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80074da:	e005      	b.n	80074e8 <USBH_CDC_Process+0x120>

    default:
      break;
 80074dc:	bf00      	nop
 80074de:	e004      	b.n	80074ea <USBH_CDC_Process+0x122>
      break;
 80074e0:	bf00      	nop
 80074e2:	e002      	b.n	80074ea <USBH_CDC_Process+0x122>
      break;
 80074e4:	bf00      	nop
 80074e6:	e000      	b.n	80074ea <USBH_CDC_Process+0x122>
      break;
 80074e8:	bf00      	nop

  }

  return status;
 80074ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	370c      	adds	r7, #12
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b082      	sub	sp, #8
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	22a1      	movs	r2, #161	; 0xa1
 8007518:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2221      	movs	r2, #33	; 0x21
 800751e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2207      	movs	r2, #7
 8007530:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	2207      	movs	r2, #7
 8007536:	4619      	mov	r1, r3
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f001 f988 	bl	800884e <USBH_CtlReq>
 800753e:	4603      	mov	r3, r0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2221      	movs	r2, #33	; 0x21
 8007556:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2220      	movs	r2, #32
 800755c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2207      	movs	r2, #7
 800756e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	2207      	movs	r2, #7
 8007574:	4619      	mov	r1, r3
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f001 f969 	bl	800884e <USBH_CtlReq>
 800757c:	4603      	mov	r3, r0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b086      	sub	sp, #24
 800758a:	af02      	add	r7, sp, #8
 800758c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007594:	69db      	ldr	r3, [r3, #28]
 8007596:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007598:	2300      	movs	r3, #0
 800759a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d002      	beq.n	80075ac <CDC_ProcessTransmission+0x26>
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d023      	beq.n	80075f2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80075aa:	e05e      	b.n	800766a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	8b12      	ldrh	r2, [r2, #24]
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d90b      	bls.n	80075d0 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	69d9      	ldr	r1, [r3, #28]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	8b1a      	ldrh	r2, [r3, #24]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	7b5b      	ldrb	r3, [r3, #13]
 80075c4:	2001      	movs	r0, #1
 80075c6:	9000      	str	r0, [sp, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f001 fb4e 	bl	8008c6a <USBH_BulkSendData>
 80075ce:	e00b      	b.n	80075e8 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80075d8:	b29a      	uxth	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	7b5b      	ldrb	r3, [r3, #13]
 80075de:	2001      	movs	r0, #1
 80075e0:	9000      	str	r0, [sp, #0]
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f001 fb41 	bl	8008c6a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2202      	movs	r2, #2
 80075ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80075f0:	e03b      	b.n	800766a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	7b5b      	ldrb	r3, [r3, #13]
 80075f6:	4619      	mov	r1, r3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f001 fe65 	bl	80092c8 <USBH_LL_GetURBState>
 80075fe:	4603      	mov	r3, r0
 8007600:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007602:	7afb      	ldrb	r3, [r7, #11]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d128      	bne.n	800765a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	8b12      	ldrh	r2, [r2, #24]
 8007610:	4293      	cmp	r3, r2
 8007612:	d90e      	bls.n	8007632 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	8b12      	ldrh	r2, [r2, #24]
 800761c:	1a9a      	subs	r2, r3, r2
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	69db      	ldr	r3, [r3, #28]
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	8b12      	ldrh	r2, [r2, #24]
 800762a:	441a      	add	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	61da      	str	r2, [r3, #28]
 8007630:	e002      	b.n	8007638 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763c:	2b00      	cmp	r3, #0
 800763e:	d004      	beq.n	800764a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007648:	e00e      	b.n	8007668 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f868 	bl	8007728 <USBH_CDC_TransmitCallback>
      break;
 8007658:	e006      	b.n	8007668 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800765a:	7afb      	ldrb	r3, [r7, #11]
 800765c:	2b02      	cmp	r3, #2
 800765e:	d103      	bne.n	8007668 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007668:	bf00      	nop
  }
}
 800766a:	bf00      	nop
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b086      	sub	sp, #24
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007680:	69db      	ldr	r3, [r3, #28]
 8007682:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007684:	2300      	movs	r3, #0
 8007686:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800768e:	2b03      	cmp	r3, #3
 8007690:	d002      	beq.n	8007698 <CDC_ProcessReception+0x26>
 8007692:	2b04      	cmp	r3, #4
 8007694:	d00e      	beq.n	80076b4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007696:	e043      	b.n	8007720 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	6a19      	ldr	r1, [r3, #32]
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	8b5a      	ldrh	r2, [r3, #26]
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	7b1b      	ldrb	r3, [r3, #12]
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f001 fb05 	bl	8008cb4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	2204      	movs	r2, #4
 80076ae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80076b2:	e035      	b.n	8007720 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	7b1b      	ldrb	r3, [r3, #12]
 80076b8:	4619      	mov	r1, r3
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f001 fe04 	bl	80092c8 <USBH_LL_GetURBState>
 80076c0:	4603      	mov	r3, r0
 80076c2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80076c4:	7cfb      	ldrb	r3, [r7, #19]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d129      	bne.n	800771e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	7b1b      	ldrb	r3, [r3, #12]
 80076ce:	4619      	mov	r1, r3
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f001 fd67 	bl	80091a4 <USBH_LL_GetLastXferSize>
 80076d6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d016      	beq.n	8007710 <CDC_ProcessReception+0x9e>
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	8b5b      	ldrh	r3, [r3, #26]
 80076e6:	461a      	mov	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d910      	bls.n	8007710 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	1ad2      	subs	r2, r2, r3
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	6a1a      	ldr	r2, [r3, #32]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	441a      	add	r2, r3
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	2203      	movs	r2, #3
 800770a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800770e:	e006      	b.n	800771e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 f80f 	bl	800773c <USBH_CDC_ReceiveCallback>
      break;
 800771e:	bf00      	nop
  }
}
 8007720:	bf00      	nop
 8007722:	3718      	adds	r7, #24
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007758:	bf00      	nop
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	4613      	mov	r3, r2
 8007770:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d101      	bne.n	800777c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007778:	2302      	movs	r3, #2
 800777a:	e029      	b.n	80077d0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	79fa      	ldrb	r2, [r7, #7]
 8007780:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2200      	movs	r2, #0
 8007788:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f000 f81f 	bl	80077d8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d003      	beq.n	80077c8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f001 fc37 	bl	800903c <USBH_LL_Init>

  return USBH_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80077e0:	2300      	movs	r3, #0
 80077e2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80077e4:	2300      	movs	r3, #0
 80077e6:	60fb      	str	r3, [r7, #12]
 80077e8:	e009      	b.n	80077fe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	33e0      	adds	r3, #224	; 0xe0
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	4413      	add	r3, r2
 80077f4:	2200      	movs	r2, #0
 80077f6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	3301      	adds	r3, #1
 80077fc:	60fb      	str	r3, [r7, #12]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2b0e      	cmp	r3, #14
 8007802:	d9f2      	bls.n	80077ea <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007804:	2300      	movs	r3, #0
 8007806:	60fb      	str	r3, [r7, #12]
 8007808:	e009      	b.n	800781e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4413      	add	r3, r2
 8007810:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007814:	2200      	movs	r2, #0
 8007816:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	3301      	adds	r3, #1
 800781c:	60fb      	str	r3, [r7, #12]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007824:	d3f1      	bcc.n	800780a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2240      	movs	r2, #64	; 0x40
 800784a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2201      	movs	r2, #1
 800785e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3714      	adds	r7, #20
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800788a:	2300      	movs	r3, #0
 800788c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d016      	beq.n	80078c2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800789a:	2b00      	cmp	r3, #0
 800789c:	d10e      	bne.n	80078bc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80078a4:	1c59      	adds	r1, r3, #1
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	33de      	adds	r3, #222	; 0xde
 80078b0:	6839      	ldr	r1, [r7, #0]
 80078b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80078b6:	2300      	movs	r3, #0
 80078b8:	73fb      	strb	r3, [r7, #15]
 80078ba:	e004      	b.n	80078c6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80078bc:	2302      	movs	r3, #2
 80078be:	73fb      	strb	r3, [r7, #15]
 80078c0:	e001      	b.n	80078c6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80078c2:	2302      	movs	r3, #2
 80078c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80078c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3714      	adds	r7, #20
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	460b      	mov	r3, r1
 80078de:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80078ea:	78fa      	ldrb	r2, [r7, #3]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d204      	bcs.n	80078fa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	78fa      	ldrb	r2, [r7, #3]
 80078f4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80078f8:	e001      	b.n	80078fe <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80078fa:	2302      	movs	r3, #2
 80078fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80078fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3714      	adds	r7, #20
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800790c:	b480      	push	{r7}
 800790e:	b087      	sub	sp, #28
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	4608      	mov	r0, r1
 8007916:	4611      	mov	r1, r2
 8007918:	461a      	mov	r2, r3
 800791a:	4603      	mov	r3, r0
 800791c:	70fb      	strb	r3, [r7, #3]
 800791e:	460b      	mov	r3, r1
 8007920:	70bb      	strb	r3, [r7, #2]
 8007922:	4613      	mov	r3, r2
 8007924:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007926:	2300      	movs	r3, #0
 8007928:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800792a:	2300      	movs	r3, #0
 800792c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007934:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007936:	e025      	b.n	8007984 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007938:	7dfb      	ldrb	r3, [r7, #23]
 800793a:	221a      	movs	r2, #26
 800793c:	fb02 f303 	mul.w	r3, r2, r3
 8007940:	3308      	adds	r3, #8
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	4413      	add	r3, r2
 8007946:	3302      	adds	r3, #2
 8007948:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	795b      	ldrb	r3, [r3, #5]
 800794e:	78fa      	ldrb	r2, [r7, #3]
 8007950:	429a      	cmp	r2, r3
 8007952:	d002      	beq.n	800795a <USBH_FindInterface+0x4e>
 8007954:	78fb      	ldrb	r3, [r7, #3]
 8007956:	2bff      	cmp	r3, #255	; 0xff
 8007958:	d111      	bne.n	800797e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800795e:	78ba      	ldrb	r2, [r7, #2]
 8007960:	429a      	cmp	r2, r3
 8007962:	d002      	beq.n	800796a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007964:	78bb      	ldrb	r3, [r7, #2]
 8007966:	2bff      	cmp	r3, #255	; 0xff
 8007968:	d109      	bne.n	800797e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800796e:	787a      	ldrb	r2, [r7, #1]
 8007970:	429a      	cmp	r2, r3
 8007972:	d002      	beq.n	800797a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007974:	787b      	ldrb	r3, [r7, #1]
 8007976:	2bff      	cmp	r3, #255	; 0xff
 8007978:	d101      	bne.n	800797e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800797a:	7dfb      	ldrb	r3, [r7, #23]
 800797c:	e006      	b.n	800798c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800797e:	7dfb      	ldrb	r3, [r7, #23]
 8007980:	3301      	adds	r3, #1
 8007982:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007984:	7dfb      	ldrb	r3, [r7, #23]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d9d6      	bls.n	8007938 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800798a:	23ff      	movs	r3, #255	; 0xff
}
 800798c:	4618      	mov	r0, r3
 800798e:	371c      	adds	r7, #28
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f001 fb87 	bl	80090b4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80079a6:	2101      	movs	r1, #1
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f001 fca0 	bl	80092ee <USBH_LL_DriverVBUS>

  return USBH_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b088      	sub	sp, #32
 80079bc:	af04      	add	r7, sp, #16
 80079be:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80079c0:	2302      	movs	r3, #2
 80079c2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d102      	bne.n	80079da <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2203      	movs	r2, #3
 80079d8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	2b0b      	cmp	r3, #11
 80079e2:	f200 81b3 	bhi.w	8007d4c <USBH_Process+0x394>
 80079e6:	a201      	add	r2, pc, #4	; (adr r2, 80079ec <USBH_Process+0x34>)
 80079e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ec:	08007a1d 	.word	0x08007a1d
 80079f0:	08007a4f 	.word	0x08007a4f
 80079f4:	08007ab7 	.word	0x08007ab7
 80079f8:	08007ce7 	.word	0x08007ce7
 80079fc:	08007d4d 	.word	0x08007d4d
 8007a00:	08007b5b 	.word	0x08007b5b
 8007a04:	08007c8d 	.word	0x08007c8d
 8007a08:	08007b91 	.word	0x08007b91
 8007a0c:	08007bb1 	.word	0x08007bb1
 8007a10:	08007bd1 	.word	0x08007bd1
 8007a14:	08007bff 	.word	0x08007bff
 8007a18:	08007ccf 	.word	0x08007ccf
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 8193 	beq.w	8007d50 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007a30:	20c8      	movs	r0, #200	; 0xc8
 8007a32:	f001 fca3 	bl	800937c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f001 fb99 	bl	800916e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007a4c:	e180      	b.n	8007d50 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d107      	bne.n	8007a68 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2202      	movs	r2, #2
 8007a64:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007a66:	e182      	b.n	8007d6e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007a6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a72:	d914      	bls.n	8007a9e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	b2da      	uxtb	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007a8a:	2b03      	cmp	r3, #3
 8007a8c:	d903      	bls.n	8007a96 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	220d      	movs	r2, #13
 8007a92:	701a      	strb	r2, [r3, #0]
      break;
 8007a94:	e16b      	b.n	8007d6e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	701a      	strb	r2, [r3, #0]
      break;
 8007a9c:	e167      	b.n	8007d6e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007aa4:	f103 020a 	add.w	r2, r3, #10
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007aae:	200a      	movs	r0, #10
 8007ab0:	f001 fc64 	bl	800937c <USBH_Delay>
      break;
 8007ab4:	e15b      	b.n	8007d6e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d005      	beq.n	8007acc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ac6:	2104      	movs	r1, #4
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007acc:	2064      	movs	r0, #100	; 0x64
 8007ace:	f001 fc55 	bl	800937c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f001 fb24 	bl	8009120 <USBH_LL_GetSpeed>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	461a      	mov	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2205      	movs	r2, #5
 8007ae6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007ae8:	2100      	movs	r1, #0
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f001 f92f 	bl	8008d4e <USBH_AllocPipe>
 8007af0:	4603      	mov	r3, r0
 8007af2:	461a      	mov	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007af8:	2180      	movs	r1, #128	; 0x80
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f001 f927 	bl	8008d4e <USBH_AllocPipe>
 8007b00:	4603      	mov	r3, r0
 8007b02:	461a      	mov	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	7919      	ldrb	r1, [r3, #4]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007b1c:	b292      	uxth	r2, r2
 8007b1e:	9202      	str	r2, [sp, #8]
 8007b20:	2200      	movs	r2, #0
 8007b22:	9201      	str	r2, [sp, #4]
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	4603      	mov	r3, r0
 8007b28:	2280      	movs	r2, #128	; 0x80
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f001 f8e0 	bl	8008cf0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	7959      	ldrb	r1, [r3, #5]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007b44:	b292      	uxth	r2, r2
 8007b46:	9202      	str	r2, [sp, #8]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	9201      	str	r2, [sp, #4]
 8007b4c:	9300      	str	r3, [sp, #0]
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2200      	movs	r2, #0
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f001 f8cc 	bl	8008cf0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007b58:	e109      	b.n	8007d6e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f90c 	bl	8007d78 <USBH_HandleEnum>
 8007b60:	4603      	mov	r3, r0
 8007b62:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007b64:	7bbb      	ldrb	r3, [r7, #14]
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f040 80f3 	bne.w	8007d54 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d103      	bne.n	8007b88 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2208      	movs	r2, #8
 8007b84:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007b86:	e0e5      	b.n	8007d54 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2207      	movs	r2, #7
 8007b8c:	701a      	strb	r2, [r3, #0]
      break;
 8007b8e:	e0e1      	b.n	8007d54 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f000 80de 	beq.w	8007d58 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ba2:	2101      	movs	r1, #1
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2208      	movs	r2, #8
 8007bac:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007bae:	e0d3      	b.n	8007d58 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	4619      	mov	r1, r3
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fc20 	bl	8008400 <USBH_SetCfg>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f040 80ca 	bne.w	8007d5c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2209      	movs	r2, #9
 8007bcc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007bce:	e0c5      	b.n	8007d5c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007bd6:	f003 0320 	and.w	r3, r3, #32
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00b      	beq.n	8007bf6 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007bde:	2101      	movs	r1, #1
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 fc30 	bl	8008446 <USBH_SetFeature>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f040 80b9 	bne.w	8007d60 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	220a      	movs	r2, #10
 8007bf2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007bf4:	e0b4      	b.n	8007d60 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	220a      	movs	r2, #10
 8007bfa:	701a      	strb	r2, [r3, #0]
      break;
 8007bfc:	e0b0      	b.n	8007d60 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 80ad 	beq.w	8007d64 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007c12:	2300      	movs	r3, #0
 8007c14:	73fb      	strb	r3, [r7, #15]
 8007c16:	e016      	b.n	8007c46 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007c18:	7bfa      	ldrb	r2, [r7, #15]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	32de      	adds	r2, #222	; 0xde
 8007c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c22:	791a      	ldrb	r2, [r3, #4]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d108      	bne.n	8007c40 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007c2e:	7bfa      	ldrb	r2, [r7, #15]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	32de      	adds	r2, #222	; 0xde
 8007c34:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007c3e:	e005      	b.n	8007c4c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007c40:	7bfb      	ldrb	r3, [r7, #15]
 8007c42:	3301      	adds	r3, #1
 8007c44:	73fb      	strb	r3, [r7, #15]
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d0e5      	beq.n	8007c18 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d016      	beq.n	8007c84 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	4798      	blx	r3
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d109      	bne.n	8007c7c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2206      	movs	r2, #6
 8007c6c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c74:	2103      	movs	r1, #3
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007c7a:	e073      	b.n	8007d64 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	220d      	movs	r2, #13
 8007c80:	701a      	strb	r2, [r3, #0]
      break;
 8007c82:	e06f      	b.n	8007d64 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	220d      	movs	r2, #13
 8007c88:	701a      	strb	r2, [r3, #0]
      break;
 8007c8a:	e06b      	b.n	8007d64 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d017      	beq.n	8007cc6 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	4798      	blx	r3
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007ca6:	7bbb      	ldrb	r3, [r7, #14]
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d103      	bne.n	8007cb6 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	220b      	movs	r2, #11
 8007cb2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007cb4:	e058      	b.n	8007d68 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007cb6:	7bbb      	ldrb	r3, [r7, #14]
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d154      	bne.n	8007d68 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	220d      	movs	r2, #13
 8007cc2:	701a      	strb	r2, [r3, #0]
      break;
 8007cc4:	e050      	b.n	8007d68 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	220d      	movs	r2, #13
 8007cca:	701a      	strb	r2, [r3, #0]
      break;
 8007ccc:	e04c      	b.n	8007d68 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d049      	beq.n	8007d6c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cde:	695b      	ldr	r3, [r3, #20]
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	4798      	blx	r3
      }
      break;
 8007ce4:	e042      	b.n	8007d6c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f7ff fd72 	bl	80077d8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d009      	beq.n	8007d12 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d005      	beq.n	8007d28 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d22:	2105      	movs	r1, #5
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d107      	bne.n	8007d44 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f7ff fe2b 	bl	8007998 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007d42:	e014      	b.n	8007d6e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f001 f9b5 	bl	80090b4 <USBH_LL_Start>
      break;
 8007d4a:	e010      	b.n	8007d6e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007d4c:	bf00      	nop
 8007d4e:	e00e      	b.n	8007d6e <USBH_Process+0x3b6>
      break;
 8007d50:	bf00      	nop
 8007d52:	e00c      	b.n	8007d6e <USBH_Process+0x3b6>
      break;
 8007d54:	bf00      	nop
 8007d56:	e00a      	b.n	8007d6e <USBH_Process+0x3b6>
    break;
 8007d58:	bf00      	nop
 8007d5a:	e008      	b.n	8007d6e <USBH_Process+0x3b6>
      break;
 8007d5c:	bf00      	nop
 8007d5e:	e006      	b.n	8007d6e <USBH_Process+0x3b6>
      break;
 8007d60:	bf00      	nop
 8007d62:	e004      	b.n	8007d6e <USBH_Process+0x3b6>
      break;
 8007d64:	bf00      	nop
 8007d66:	e002      	b.n	8007d6e <USBH_Process+0x3b6>
      break;
 8007d68:	bf00      	nop
 8007d6a:	e000      	b.n	8007d6e <USBH_Process+0x3b6>
      break;
 8007d6c:	bf00      	nop
  }
  return USBH_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b088      	sub	sp, #32
 8007d7c:	af04      	add	r7, sp, #16
 8007d7e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007d80:	2301      	movs	r3, #1
 8007d82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007d84:	2301      	movs	r3, #1
 8007d86:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	785b      	ldrb	r3, [r3, #1]
 8007d8c:	2b07      	cmp	r3, #7
 8007d8e:	f200 81c1 	bhi.w	8008114 <USBH_HandleEnum+0x39c>
 8007d92:	a201      	add	r2, pc, #4	; (adr r2, 8007d98 <USBH_HandleEnum+0x20>)
 8007d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d98:	08007db9 	.word	0x08007db9
 8007d9c:	08007e77 	.word	0x08007e77
 8007da0:	08007ee1 	.word	0x08007ee1
 8007da4:	08007f6f 	.word	0x08007f6f
 8007da8:	08007fd9 	.word	0x08007fd9
 8007dac:	08008049 	.word	0x08008049
 8007db0:	0800808f 	.word	0x0800808f
 8007db4:	080080d5 	.word	0x080080d5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007db8:	2108      	movs	r1, #8
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fa50 	bl	8008260 <USBH_Get_DevDesc>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007dc4:	7bbb      	ldrb	r3, [r7, #14]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d130      	bne.n	8007e2c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	7919      	ldrb	r1, [r3, #4]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007dee:	b292      	uxth	r2, r2
 8007df0:	9202      	str	r2, [sp, #8]
 8007df2:	2200      	movs	r2, #0
 8007df4:	9201      	str	r2, [sp, #4]
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2280      	movs	r2, #128	; 0x80
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 ff77 	bl	8008cf0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	7959      	ldrb	r1, [r3, #5]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007e16:	b292      	uxth	r2, r2
 8007e18:	9202      	str	r2, [sp, #8]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	9201      	str	r2, [sp, #4]
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	4603      	mov	r3, r0
 8007e22:	2200      	movs	r2, #0
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 ff63 	bl	8008cf0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007e2a:	e175      	b.n	8008118 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e2c:	7bbb      	ldrb	r3, [r7, #14]
 8007e2e:	2b03      	cmp	r3, #3
 8007e30:	f040 8172 	bne.w	8008118 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	b2da      	uxtb	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e4a:	2b03      	cmp	r3, #3
 8007e4c:	d903      	bls.n	8007e56 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	220d      	movs	r2, #13
 8007e52:	701a      	strb	r2, [r3, #0]
      break;
 8007e54:	e160      	b.n	8008118 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	795b      	ldrb	r3, [r3, #5]
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 ff97 	bl	8008d90 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	791b      	ldrb	r3, [r3, #4]
 8007e66:	4619      	mov	r1, r3
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 ff91 	bl	8008d90 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	701a      	strb	r2, [r3, #0]
      break;
 8007e74:	e150      	b.n	8008118 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007e76:	2112      	movs	r1, #18
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 f9f1 	bl	8008260 <USBH_Get_DevDesc>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e82:	7bbb      	ldrb	r3, [r7, #14]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d103      	bne.n	8007e90 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007e8e:	e145      	b.n	800811c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e90:	7bbb      	ldrb	r3, [r7, #14]
 8007e92:	2b03      	cmp	r3, #3
 8007e94:	f040 8142 	bne.w	800811c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	b2da      	uxtb	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007eae:	2b03      	cmp	r3, #3
 8007eb0:	d903      	bls.n	8007eba <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	220d      	movs	r2, #13
 8007eb6:	701a      	strb	r2, [r3, #0]
      break;
 8007eb8:	e130      	b.n	800811c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	795b      	ldrb	r3, [r3, #5]
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 ff65 	bl	8008d90 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	791b      	ldrb	r3, [r3, #4]
 8007eca:	4619      	mov	r1, r3
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 ff5f 	bl	8008d90 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	701a      	strb	r2, [r3, #0]
      break;
 8007ede:	e11d      	b.n	800811c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007ee0:	2101      	movs	r1, #1
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 fa68 	bl	80083b8 <USBH_SetAddress>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007eec:	7bbb      	ldrb	r3, [r7, #14]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d132      	bne.n	8007f58 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007ef2:	2002      	movs	r0, #2
 8007ef4:	f001 fa42 	bl	800937c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2203      	movs	r2, #3
 8007f04:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	7919      	ldrb	r1, [r3, #4]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007f1a:	b292      	uxth	r2, r2
 8007f1c:	9202      	str	r2, [sp, #8]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	9201      	str	r2, [sp, #4]
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	4603      	mov	r3, r0
 8007f26:	2280      	movs	r2, #128	; 0x80
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fee1 	bl	8008cf0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	7959      	ldrb	r1, [r3, #5]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007f42:	b292      	uxth	r2, r2
 8007f44:	9202      	str	r2, [sp, #8]
 8007f46:	2200      	movs	r2, #0
 8007f48:	9201      	str	r2, [sp, #4]
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2200      	movs	r2, #0
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fecd 	bl	8008cf0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007f56:	e0e3      	b.n	8008120 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f58:	7bbb      	ldrb	r3, [r7, #14]
 8007f5a:	2b03      	cmp	r3, #3
 8007f5c:	f040 80e0 	bne.w	8008120 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	220d      	movs	r2, #13
 8007f64:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	705a      	strb	r2, [r3, #1]
      break;
 8007f6c:	e0d8      	b.n	8008120 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007f6e:	2109      	movs	r1, #9
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 f99d 	bl	80082b0 <USBH_Get_CfgDesc>
 8007f76:	4603      	mov	r3, r0
 8007f78:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f7a:	7bbb      	ldrb	r3, [r7, #14]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d103      	bne.n	8007f88 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2204      	movs	r2, #4
 8007f84:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007f86:	e0cd      	b.n	8008124 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f88:	7bbb      	ldrb	r3, [r7, #14]
 8007f8a:	2b03      	cmp	r3, #3
 8007f8c:	f040 80ca 	bne.w	8008124 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f96:	3301      	adds	r3, #1
 8007f98:	b2da      	uxtb	r2, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	d903      	bls.n	8007fb2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	220d      	movs	r2, #13
 8007fae:	701a      	strb	r2, [r3, #0]
      break;
 8007fb0:	e0b8      	b.n	8008124 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	795b      	ldrb	r3, [r3, #5]
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 fee9 	bl	8008d90 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	791b      	ldrb	r3, [r3, #4]
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fee3 	bl	8008d90 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	701a      	strb	r2, [r3, #0]
      break;
 8007fd6:	e0a5      	b.n	8008124 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f965 	bl	80082b0 <USBH_Get_CfgDesc>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007fea:	7bbb      	ldrb	r3, [r7, #14]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d103      	bne.n	8007ff8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2205      	movs	r2, #5
 8007ff4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007ff6:	e097      	b.n	8008128 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ff8:	7bbb      	ldrb	r3, [r7, #14]
 8007ffa:	2b03      	cmp	r3, #3
 8007ffc:	f040 8094 	bne.w	8008128 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008006:	3301      	adds	r3, #1
 8008008:	b2da      	uxtb	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008016:	2b03      	cmp	r3, #3
 8008018:	d903      	bls.n	8008022 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	220d      	movs	r2, #13
 800801e:	701a      	strb	r2, [r3, #0]
      break;
 8008020:	e082      	b.n	8008128 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	795b      	ldrb	r3, [r3, #5]
 8008026:	4619      	mov	r1, r3
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 feb1 	bl	8008d90 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	791b      	ldrb	r3, [r3, #4]
 8008032:	4619      	mov	r1, r3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 feab 	bl	8008d90 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	701a      	strb	r2, [r3, #0]
      break;
 8008046:	e06f      	b.n	8008128 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800804e:	2b00      	cmp	r3, #0
 8008050:	d019      	beq.n	8008086 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800805e:	23ff      	movs	r3, #255	; 0xff
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f949 	bl	80082f8 <USBH_Get_StringDesc>
 8008066:	4603      	mov	r3, r0
 8008068:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800806a:	7bbb      	ldrb	r3, [r7, #14]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d103      	bne.n	8008078 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2206      	movs	r2, #6
 8008074:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008076:	e059      	b.n	800812c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008078:	7bbb      	ldrb	r3, [r7, #14]
 800807a:	2b03      	cmp	r3, #3
 800807c:	d156      	bne.n	800812c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2206      	movs	r2, #6
 8008082:	705a      	strb	r2, [r3, #1]
      break;
 8008084:	e052      	b.n	800812c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2206      	movs	r2, #6
 800808a:	705a      	strb	r2, [r3, #1]
      break;
 800808c:	e04e      	b.n	800812c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008094:	2b00      	cmp	r3, #0
 8008096:	d019      	beq.n	80080cc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80080a4:	23ff      	movs	r3, #255	; 0xff
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f926 	bl	80082f8 <USBH_Get_StringDesc>
 80080ac:	4603      	mov	r3, r0
 80080ae:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80080b0:	7bbb      	ldrb	r3, [r7, #14]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d103      	bne.n	80080be <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2207      	movs	r2, #7
 80080ba:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80080bc:	e038      	b.n	8008130 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080be:	7bbb      	ldrb	r3, [r7, #14]
 80080c0:	2b03      	cmp	r3, #3
 80080c2:	d135      	bne.n	8008130 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2207      	movs	r2, #7
 80080c8:	705a      	strb	r2, [r3, #1]
      break;
 80080ca:	e031      	b.n	8008130 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2207      	movs	r2, #7
 80080d0:	705a      	strb	r2, [r3, #1]
      break;
 80080d2:	e02d      	b.n	8008130 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d017      	beq.n	800810e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80080ea:	23ff      	movs	r3, #255	; 0xff
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 f903 	bl	80082f8 <USBH_Get_StringDesc>
 80080f2:	4603      	mov	r3, r0
 80080f4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80080f6:	7bbb      	ldrb	r3, [r7, #14]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d102      	bne.n	8008102 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008100:	e018      	b.n	8008134 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008102:	7bbb      	ldrb	r3, [r7, #14]
 8008104:	2b03      	cmp	r3, #3
 8008106:	d115      	bne.n	8008134 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	73fb      	strb	r3, [r7, #15]
      break;
 800810c:	e012      	b.n	8008134 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800810e:	2300      	movs	r3, #0
 8008110:	73fb      	strb	r3, [r7, #15]
      break;
 8008112:	e00f      	b.n	8008134 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008114:	bf00      	nop
 8008116:	e00e      	b.n	8008136 <USBH_HandleEnum+0x3be>
      break;
 8008118:	bf00      	nop
 800811a:	e00c      	b.n	8008136 <USBH_HandleEnum+0x3be>
      break;
 800811c:	bf00      	nop
 800811e:	e00a      	b.n	8008136 <USBH_HandleEnum+0x3be>
      break;
 8008120:	bf00      	nop
 8008122:	e008      	b.n	8008136 <USBH_HandleEnum+0x3be>
      break;
 8008124:	bf00      	nop
 8008126:	e006      	b.n	8008136 <USBH_HandleEnum+0x3be>
      break;
 8008128:	bf00      	nop
 800812a:	e004      	b.n	8008136 <USBH_HandleEnum+0x3be>
      break;
 800812c:	bf00      	nop
 800812e:	e002      	b.n	8008136 <USBH_HandleEnum+0x3be>
      break;
 8008130:	bf00      	nop
 8008132:	e000      	b.n	8008136 <USBH_HandleEnum+0x3be>
      break;
 8008134:	bf00      	nop
  }
  return Status;
 8008136:	7bfb      	ldrb	r3, [r7, #15]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3710      	adds	r7, #16
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	683a      	ldr	r2, [r7, #0]
 800814e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008152:	bf00      	nop
 8008154:	370c      	adds	r7, #12
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b082      	sub	sp, #8
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800816c:	1c5a      	adds	r2, r3, #1
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f804 	bl	8008182 <USBH_HandleSof>
}
 800817a:	bf00      	nop
 800817c:	3708      	adds	r7, #8
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b082      	sub	sp, #8
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	b2db      	uxtb	r3, r3
 8008190:	2b0b      	cmp	r3, #11
 8008192:	d10a      	bne.n	80081aa <USBH_HandleSof+0x28>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800819a:	2b00      	cmp	r3, #0
 800819c:	d005      	beq.n	80081aa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	4798      	blx	r3
  }
}
 80081aa:	bf00      	nop
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b083      	sub	sp, #12
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80081c2:	bf00      	nop
}
 80081c4:	370c      	adds	r7, #12
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b083      	sub	sp, #12
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80081de:	bf00      	nop
}
 80081e0:	370c      	adds	r7, #12
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b083      	sub	sp, #12
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 ff56 	bl	80090ea <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	791b      	ldrb	r3, [r3, #4]
 8008242:	4619      	mov	r1, r3
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 fda3 	bl	8008d90 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	795b      	ldrb	r3, [r3, #5]
 800824e:	4619      	mov	r1, r3
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fd9d 	bl	8008d90 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af02      	add	r7, sp, #8
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	460b      	mov	r3, r1
 800826a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008272:	78fb      	ldrb	r3, [r7, #3]
 8008274:	b29b      	uxth	r3, r3
 8008276:	9300      	str	r3, [sp, #0]
 8008278:	4613      	mov	r3, r2
 800827a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800827e:	2100      	movs	r1, #0
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f864 	bl	800834e <USBH_GetDescriptor>
 8008286:	4603      	mov	r3, r0
 8008288:	73fb      	strb	r3, [r7, #15]
 800828a:	7bfb      	ldrb	r3, [r7, #15]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10a      	bne.n	80082a6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800829c:	78fa      	ldrb	r2, [r7, #3]
 800829e:	b292      	uxth	r2, r2
 80082a0:	4619      	mov	r1, r3
 80082a2:	f000 f918 	bl	80084d6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80082a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af02      	add	r7, sp, #8
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	460b      	mov	r3, r1
 80082ba:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	331c      	adds	r3, #28
 80082c0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80082c2:	887b      	ldrh	r3, [r7, #2]
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082cc:	2100      	movs	r1, #0
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f83d 	bl	800834e <USBH_GetDescriptor>
 80082d4:	4603      	mov	r3, r0
 80082d6:	72fb      	strb	r3, [r7, #11]
 80082d8:	7afb      	ldrb	r3, [r7, #11]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d107      	bne.n	80082ee <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80082e4:	887a      	ldrh	r2, [r7, #2]
 80082e6:	68f9      	ldr	r1, [r7, #12]
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 f964 	bl	80085b6 <USBH_ParseCfgDesc>
  }

  return status;
 80082ee:	7afb      	ldrb	r3, [r7, #11]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b088      	sub	sp, #32
 80082fc:	af02      	add	r7, sp, #8
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	607a      	str	r2, [r7, #4]
 8008302:	461a      	mov	r2, r3
 8008304:	460b      	mov	r3, r1
 8008306:	72fb      	strb	r3, [r7, #11]
 8008308:	4613      	mov	r3, r2
 800830a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800830c:	7afb      	ldrb	r3, [r7, #11]
 800830e:	b29b      	uxth	r3, r3
 8008310:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008314:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800831c:	893b      	ldrh	r3, [r7, #8]
 800831e:	9300      	str	r3, [sp, #0]
 8008320:	460b      	mov	r3, r1
 8008322:	2100      	movs	r1, #0
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f000 f812 	bl	800834e <USBH_GetDescriptor>
 800832a:	4603      	mov	r3, r0
 800832c:	75fb      	strb	r3, [r7, #23]
 800832e:	7dfb      	ldrb	r3, [r7, #23]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d107      	bne.n	8008344 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800833a:	893a      	ldrh	r2, [r7, #8]
 800833c:	6879      	ldr	r1, [r7, #4]
 800833e:	4618      	mov	r0, r3
 8008340:	f000 fa37 	bl	80087b2 <USBH_ParseStringDesc>
  }

  return status;
 8008344:	7dfb      	ldrb	r3, [r7, #23]
}
 8008346:	4618      	mov	r0, r3
 8008348:	3718      	adds	r7, #24
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b084      	sub	sp, #16
 8008352:	af00      	add	r7, sp, #0
 8008354:	60f8      	str	r0, [r7, #12]
 8008356:	607b      	str	r3, [r7, #4]
 8008358:	460b      	mov	r3, r1
 800835a:	72fb      	strb	r3, [r7, #11]
 800835c:	4613      	mov	r3, r2
 800835e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	789b      	ldrb	r3, [r3, #2]
 8008364:	2b01      	cmp	r3, #1
 8008366:	d11c      	bne.n	80083a2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008368:	7afb      	ldrb	r3, [r7, #11]
 800836a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800836e:	b2da      	uxtb	r2, r3
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2206      	movs	r2, #6
 8008378:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	893a      	ldrh	r2, [r7, #8]
 800837e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008380:	893b      	ldrh	r3, [r7, #8]
 8008382:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008386:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800838a:	d104      	bne.n	8008396 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f240 4209 	movw	r2, #1033	; 0x409
 8008392:	829a      	strh	r2, [r3, #20]
 8008394:	e002      	b.n	800839c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2200      	movs	r2, #0
 800839a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	8b3a      	ldrh	r2, [r7, #24]
 80083a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80083a2:	8b3b      	ldrh	r3, [r7, #24]
 80083a4:	461a      	mov	r2, r3
 80083a6:	6879      	ldr	r1, [r7, #4]
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f000 fa50 	bl	800884e <USBH_CtlReq>
 80083ae:	4603      	mov	r3, r0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	460b      	mov	r3, r1
 80083c2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	789b      	ldrb	r3, [r3, #2]
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d10f      	bne.n	80083ec <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2205      	movs	r2, #5
 80083d6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80083d8:	78fb      	ldrb	r3, [r7, #3]
 80083da:	b29a      	uxth	r2, r3
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80083ec:	2200      	movs	r2, #0
 80083ee:	2100      	movs	r1, #0
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fa2c 	bl	800884e <USBH_CtlReq>
 80083f6:	4603      	mov	r3, r0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3708      	adds	r7, #8
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	460b      	mov	r3, r1
 800840a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	789b      	ldrb	r3, [r3, #2]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d10e      	bne.n	8008432 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2209      	movs	r2, #9
 800841e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	887a      	ldrh	r2, [r7, #2]
 8008424:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008432:	2200      	movs	r2, #0
 8008434:	2100      	movs	r1, #0
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fa09 	bl	800884e <USBH_CtlReq>
 800843c:	4603      	mov	r3, r0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b082      	sub	sp, #8
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
 800844e:	460b      	mov	r3, r1
 8008450:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	789b      	ldrb	r3, [r3, #2]
 8008456:	2b01      	cmp	r3, #1
 8008458:	d10f      	bne.n	800847a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2203      	movs	r2, #3
 8008464:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008466:	78fb      	ldrb	r3, [r7, #3]
 8008468:	b29a      	uxth	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800847a:	2200      	movs	r2, #0
 800847c:	2100      	movs	r1, #0
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f9e5 	bl	800884e <USBH_CtlReq>
 8008484:	4603      	mov	r3, r0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3708      	adds	r7, #8
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b082      	sub	sp, #8
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
 8008496:	460b      	mov	r3, r1
 8008498:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	789b      	ldrb	r3, [r3, #2]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d10f      	bne.n	80084c2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2202      	movs	r2, #2
 80084a6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80084b4:	78fb      	ldrb	r3, [r7, #3]
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80084c2:	2200      	movs	r2, #0
 80084c4:	2100      	movs	r1, #0
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f9c1 	bl	800884e <USBH_CtlReq>
 80084cc:	4603      	mov	r3, r0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80084d6:	b480      	push	{r7}
 80084d8:	b085      	sub	sp, #20
 80084da:	af00      	add	r7, sp, #0
 80084dc:	60f8      	str	r0, [r7, #12]
 80084de:	60b9      	str	r1, [r7, #8]
 80084e0:	4613      	mov	r3, r2
 80084e2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	781a      	ldrb	r2, [r3, #0]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	785a      	ldrb	r2, [r3, #1]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	3302      	adds	r3, #2
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	3303      	adds	r3, #3
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	b29b      	uxth	r3, r3
 8008504:	021b      	lsls	r3, r3, #8
 8008506:	b29b      	uxth	r3, r3
 8008508:	4313      	orrs	r3, r2
 800850a:	b29a      	uxth	r2, r3
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	791a      	ldrb	r2, [r3, #4]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	795a      	ldrb	r2, [r3, #5]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	799a      	ldrb	r2, [r3, #6]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	79da      	ldrb	r2, [r3, #7]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008530:	88fb      	ldrh	r3, [r7, #6]
 8008532:	2b08      	cmp	r3, #8
 8008534:	d939      	bls.n	80085aa <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	3308      	adds	r3, #8
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	b29a      	uxth	r2, r3
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	3309      	adds	r3, #9
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	b29b      	uxth	r3, r3
 8008546:	021b      	lsls	r3, r3, #8
 8008548:	b29b      	uxth	r3, r3
 800854a:	4313      	orrs	r3, r2
 800854c:	b29a      	uxth	r2, r3
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	330a      	adds	r3, #10
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	b29a      	uxth	r2, r3
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	330b      	adds	r3, #11
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	b29b      	uxth	r3, r3
 8008562:	021b      	lsls	r3, r3, #8
 8008564:	b29b      	uxth	r3, r3
 8008566:	4313      	orrs	r3, r2
 8008568:	b29a      	uxth	r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	330c      	adds	r3, #12
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	b29a      	uxth	r2, r3
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	330d      	adds	r3, #13
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	b29b      	uxth	r3, r3
 800857e:	021b      	lsls	r3, r3, #8
 8008580:	b29b      	uxth	r3, r3
 8008582:	4313      	orrs	r3, r2
 8008584:	b29a      	uxth	r2, r3
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	7b9a      	ldrb	r2, [r3, #14]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	7bda      	ldrb	r2, [r3, #15]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	7c1a      	ldrb	r2, [r3, #16]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	7c5a      	ldrb	r2, [r3, #17]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	745a      	strb	r2, [r3, #17]
  }
}
 80085aa:	bf00      	nop
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b08a      	sub	sp, #40	; 0x28
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	60f8      	str	r0, [r7, #12]
 80085be:	60b9      	str	r1, [r7, #8]
 80085c0:	4613      	mov	r3, r2
 80085c2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80085c8:	2300      	movs	r3, #0
 80085ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80085ce:	2300      	movs	r3, #0
 80085d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	781a      	ldrb	r2, [r3, #0]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	785a      	ldrb	r2, [r3, #1]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	3302      	adds	r3, #2
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	3303      	adds	r3, #3
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	021b      	lsls	r3, r3, #8
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	4313      	orrs	r3, r2
 80085fe:	b29a      	uxth	r2, r3
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	791a      	ldrb	r2, [r3, #4]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	795a      	ldrb	r2, [r3, #5]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	799a      	ldrb	r2, [r3, #6]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	79da      	ldrb	r2, [r3, #7]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	7a1a      	ldrb	r2, [r3, #8]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800862c:	88fb      	ldrh	r3, [r7, #6]
 800862e:	2b09      	cmp	r3, #9
 8008630:	d95f      	bls.n	80086f2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008632:	2309      	movs	r3, #9
 8008634:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008636:	2300      	movs	r3, #0
 8008638:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800863a:	e051      	b.n	80086e0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800863c:	f107 0316 	add.w	r3, r7, #22
 8008640:	4619      	mov	r1, r3
 8008642:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008644:	f000 f8e8 	bl	8008818 <USBH_GetNextDesc>
 8008648:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800864a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864c:	785b      	ldrb	r3, [r3, #1]
 800864e:	2b04      	cmp	r3, #4
 8008650:	d146      	bne.n	80086e0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008652:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008656:	221a      	movs	r2, #26
 8008658:	fb02 f303 	mul.w	r3, r2, r3
 800865c:	3308      	adds	r3, #8
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	4413      	add	r3, r2
 8008662:	3302      	adds	r3, #2
 8008664:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008666:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008668:	69f8      	ldr	r0, [r7, #28]
 800866a:	f000 f846 	bl	80086fa <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800866e:	2300      	movs	r3, #0
 8008670:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008674:	2300      	movs	r3, #0
 8008676:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008678:	e022      	b.n	80086c0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800867a:	f107 0316 	add.w	r3, r7, #22
 800867e:	4619      	mov	r1, r3
 8008680:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008682:	f000 f8c9 	bl	8008818 <USBH_GetNextDesc>
 8008686:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868a:	785b      	ldrb	r3, [r3, #1]
 800868c:	2b05      	cmp	r3, #5
 800868e:	d117      	bne.n	80086c0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008690:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008694:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008698:	3201      	adds	r2, #1
 800869a:	00d2      	lsls	r2, r2, #3
 800869c:	211a      	movs	r1, #26
 800869e:	fb01 f303 	mul.w	r3, r1, r3
 80086a2:	4413      	add	r3, r2
 80086a4:	3308      	adds	r3, #8
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	4413      	add	r3, r2
 80086aa:	3304      	adds	r3, #4
 80086ac:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80086ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086b0:	69b8      	ldr	r0, [r7, #24]
 80086b2:	f000 f851 	bl	8008758 <USBH_ParseEPDesc>
            ep_ix++;
 80086b6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80086ba:	3301      	adds	r3, #1
 80086bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	791b      	ldrb	r3, [r3, #4]
 80086c4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d204      	bcs.n	80086d6 <USBH_ParseCfgDesc+0x120>
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	885a      	ldrh	r2, [r3, #2]
 80086d0:	8afb      	ldrh	r3, [r7, #22]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d8d1      	bhi.n	800867a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80086d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086da:	3301      	adds	r3, #1
 80086dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80086e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d804      	bhi.n	80086f2 <USBH_ParseCfgDesc+0x13c>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	885a      	ldrh	r2, [r3, #2]
 80086ec:	8afb      	ldrh	r3, [r7, #22]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d8a4      	bhi.n	800863c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80086f2:	bf00      	nop
 80086f4:	3728      	adds	r7, #40	; 0x28
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b083      	sub	sp, #12
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	781a      	ldrb	r2, [r3, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	785a      	ldrb	r2, [r3, #1]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	789a      	ldrb	r2, [r3, #2]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	78da      	ldrb	r2, [r3, #3]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	791a      	ldrb	r2, [r3, #4]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	795a      	ldrb	r2, [r3, #5]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	799a      	ldrb	r2, [r3, #6]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	79da      	ldrb	r2, [r3, #7]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	7a1a      	ldrb	r2, [r3, #8]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	721a      	strb	r2, [r3, #8]
}
 800874c:	bf00      	nop
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	781a      	ldrb	r2, [r3, #0]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	785a      	ldrb	r2, [r3, #1]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	789a      	ldrb	r2, [r3, #2]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	78da      	ldrb	r2, [r3, #3]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	3304      	adds	r3, #4
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	b29a      	uxth	r2, r3
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	3305      	adds	r3, #5
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	b29b      	uxth	r3, r3
 8008792:	021b      	lsls	r3, r3, #8
 8008794:	b29b      	uxth	r3, r3
 8008796:	4313      	orrs	r3, r2
 8008798:	b29a      	uxth	r2, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	799a      	ldrb	r2, [r3, #6]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	719a      	strb	r2, [r3, #6]
}
 80087a6:	bf00      	nop
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr

080087b2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80087b2:	b480      	push	{r7}
 80087b4:	b087      	sub	sp, #28
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	60f8      	str	r0, [r7, #12]
 80087ba:	60b9      	str	r1, [r7, #8]
 80087bc:	4613      	mov	r3, r2
 80087be:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	3301      	adds	r3, #1
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	2b03      	cmp	r3, #3
 80087c8:	d120      	bne.n	800880c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	1e9a      	subs	r2, r3, #2
 80087d0:	88fb      	ldrh	r3, [r7, #6]
 80087d2:	4293      	cmp	r3, r2
 80087d4:	bf28      	it	cs
 80087d6:	4613      	movcs	r3, r2
 80087d8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	3302      	adds	r3, #2
 80087de:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80087e0:	2300      	movs	r3, #0
 80087e2:	82fb      	strh	r3, [r7, #22]
 80087e4:	e00b      	b.n	80087fe <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80087e6:	8afb      	ldrh	r3, [r7, #22]
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	4413      	add	r3, r2
 80087ec:	781a      	ldrb	r2, [r3, #0]
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	701a      	strb	r2, [r3, #0]
      pdest++;
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	3301      	adds	r3, #1
 80087f6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80087f8:	8afb      	ldrh	r3, [r7, #22]
 80087fa:	3302      	adds	r3, #2
 80087fc:	82fb      	strh	r3, [r7, #22]
 80087fe:	8afa      	ldrh	r2, [r7, #22]
 8008800:	8abb      	ldrh	r3, [r7, #20]
 8008802:	429a      	cmp	r2, r3
 8008804:	d3ef      	bcc.n	80087e6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	2200      	movs	r2, #0
 800880a:	701a      	strb	r2, [r3, #0]
  }
}
 800880c:	bf00      	nop
 800880e:	371c      	adds	r7, #28
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	881a      	ldrh	r2, [r3, #0]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	b29b      	uxth	r3, r3
 800882c:	4413      	add	r3, r2
 800882e:	b29a      	uxth	r2, r3
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4413      	add	r3, r2
 800883e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008840:	68fb      	ldr	r3, [r7, #12]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3714      	adds	r7, #20
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b086      	sub	sp, #24
 8008852:	af00      	add	r7, sp, #0
 8008854:	60f8      	str	r0, [r7, #12]
 8008856:	60b9      	str	r1, [r7, #8]
 8008858:	4613      	mov	r3, r2
 800885a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800885c:	2301      	movs	r3, #1
 800885e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	789b      	ldrb	r3, [r3, #2]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d002      	beq.n	800886e <USBH_CtlReq+0x20>
 8008868:	2b02      	cmp	r3, #2
 800886a:	d00f      	beq.n	800888c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800886c:	e027      	b.n	80088be <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	68ba      	ldr	r2, [r7, #8]
 8008872:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	88fa      	ldrh	r2, [r7, #6]
 8008878:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2201      	movs	r2, #1
 800887e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2202      	movs	r2, #2
 8008884:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008886:	2301      	movs	r3, #1
 8008888:	75fb      	strb	r3, [r7, #23]
      break;
 800888a:	e018      	b.n	80088be <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f000 f81b 	bl	80088c8 <USBH_HandleControl>
 8008892:	4603      	mov	r3, r0
 8008894:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008896:	7dfb      	ldrb	r3, [r7, #23]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d002      	beq.n	80088a2 <USBH_CtlReq+0x54>
 800889c:	7dfb      	ldrb	r3, [r7, #23]
 800889e:	2b03      	cmp	r3, #3
 80088a0:	d106      	bne.n	80088b0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2201      	movs	r2, #1
 80088a6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	761a      	strb	r2, [r3, #24]
      break;
 80088ae:	e005      	b.n	80088bc <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80088b0:	7dfb      	ldrb	r3, [r7, #23]
 80088b2:	2b02      	cmp	r3, #2
 80088b4:	d102      	bne.n	80088bc <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2201      	movs	r2, #1
 80088ba:	709a      	strb	r2, [r3, #2]
      break;
 80088bc:	bf00      	nop
  }
  return status;
 80088be:	7dfb      	ldrb	r3, [r7, #23]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3718      	adds	r7, #24
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b086      	sub	sp, #24
 80088cc:	af02      	add	r7, sp, #8
 80088ce:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80088d0:	2301      	movs	r3, #1
 80088d2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80088d4:	2300      	movs	r3, #0
 80088d6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	7e1b      	ldrb	r3, [r3, #24]
 80088dc:	3b01      	subs	r3, #1
 80088de:	2b0a      	cmp	r3, #10
 80088e0:	f200 8156 	bhi.w	8008b90 <USBH_HandleControl+0x2c8>
 80088e4:	a201      	add	r2, pc, #4	; (adr r2, 80088ec <USBH_HandleControl+0x24>)
 80088e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ea:	bf00      	nop
 80088ec:	08008919 	.word	0x08008919
 80088f0:	08008933 	.word	0x08008933
 80088f4:	0800899d 	.word	0x0800899d
 80088f8:	080089c3 	.word	0x080089c3
 80088fc:	080089fb 	.word	0x080089fb
 8008900:	08008a25 	.word	0x08008a25
 8008904:	08008a77 	.word	0x08008a77
 8008908:	08008a99 	.word	0x08008a99
 800890c:	08008ad5 	.word	0x08008ad5
 8008910:	08008afb 	.word	0x08008afb
 8008914:	08008b39 	.word	0x08008b39
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f103 0110 	add.w	r1, r3, #16
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	795b      	ldrb	r3, [r3, #5]
 8008922:	461a      	mov	r2, r3
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 f943 	bl	8008bb0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2202      	movs	r2, #2
 800892e:	761a      	strb	r2, [r3, #24]
      break;
 8008930:	e139      	b.n	8008ba6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	795b      	ldrb	r3, [r3, #5]
 8008936:	4619      	mov	r1, r3
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 fcc5 	bl	80092c8 <USBH_LL_GetURBState>
 800893e:	4603      	mov	r3, r0
 8008940:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008942:	7bbb      	ldrb	r3, [r7, #14]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d11e      	bne.n	8008986 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	7c1b      	ldrb	r3, [r3, #16]
 800894c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008950:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	8adb      	ldrh	r3, [r3, #22]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00a      	beq.n	8008970 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800895a:	7b7b      	ldrb	r3, [r7, #13]
 800895c:	2b80      	cmp	r3, #128	; 0x80
 800895e:	d103      	bne.n	8008968 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2203      	movs	r2, #3
 8008964:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008966:	e115      	b.n	8008b94 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2205      	movs	r2, #5
 800896c:	761a      	strb	r2, [r3, #24]
      break;
 800896e:	e111      	b.n	8008b94 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008970:	7b7b      	ldrb	r3, [r7, #13]
 8008972:	2b80      	cmp	r3, #128	; 0x80
 8008974:	d103      	bne.n	800897e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2209      	movs	r2, #9
 800897a:	761a      	strb	r2, [r3, #24]
      break;
 800897c:	e10a      	b.n	8008b94 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2207      	movs	r2, #7
 8008982:	761a      	strb	r2, [r3, #24]
      break;
 8008984:	e106      	b.n	8008b94 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008986:	7bbb      	ldrb	r3, [r7, #14]
 8008988:	2b04      	cmp	r3, #4
 800898a:	d003      	beq.n	8008994 <USBH_HandleControl+0xcc>
 800898c:	7bbb      	ldrb	r3, [r7, #14]
 800898e:	2b02      	cmp	r3, #2
 8008990:	f040 8100 	bne.w	8008b94 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	220b      	movs	r2, #11
 8008998:	761a      	strb	r2, [r3, #24]
      break;
 800899a:	e0fb      	b.n	8008b94 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6899      	ldr	r1, [r3, #8]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	899a      	ldrh	r2, [r3, #12]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	791b      	ldrb	r3, [r3, #4]
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 f93a 	bl	8008c2e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2204      	movs	r2, #4
 80089be:	761a      	strb	r2, [r3, #24]
      break;
 80089c0:	e0f1      	b.n	8008ba6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	791b      	ldrb	r3, [r3, #4]
 80089c6:	4619      	mov	r1, r3
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fc7d 	bl	80092c8 <USBH_LL_GetURBState>
 80089ce:	4603      	mov	r3, r0
 80089d0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80089d2:	7bbb      	ldrb	r3, [r7, #14]
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d102      	bne.n	80089de <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2209      	movs	r2, #9
 80089dc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80089de:	7bbb      	ldrb	r3, [r7, #14]
 80089e0:	2b05      	cmp	r3, #5
 80089e2:	d102      	bne.n	80089ea <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80089e4:	2303      	movs	r3, #3
 80089e6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80089e8:	e0d6      	b.n	8008b98 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80089ea:	7bbb      	ldrb	r3, [r7, #14]
 80089ec:	2b04      	cmp	r3, #4
 80089ee:	f040 80d3 	bne.w	8008b98 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	220b      	movs	r2, #11
 80089f6:	761a      	strb	r2, [r3, #24]
      break;
 80089f8:	e0ce      	b.n	8008b98 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6899      	ldr	r1, [r3, #8]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	899a      	ldrh	r2, [r3, #12]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	795b      	ldrb	r3, [r3, #5]
 8008a06:	2001      	movs	r0, #1
 8008a08:	9000      	str	r0, [sp, #0]
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f8ea 	bl	8008be4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2206      	movs	r2, #6
 8008a20:	761a      	strb	r2, [r3, #24]
      break;
 8008a22:	e0c0      	b.n	8008ba6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	795b      	ldrb	r3, [r3, #5]
 8008a28:	4619      	mov	r1, r3
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fc4c 	bl	80092c8 <USBH_LL_GetURBState>
 8008a30:	4603      	mov	r3, r0
 8008a32:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008a34:	7bbb      	ldrb	r3, [r7, #14]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d103      	bne.n	8008a42 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2207      	movs	r2, #7
 8008a3e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008a40:	e0ac      	b.n	8008b9c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008a42:	7bbb      	ldrb	r3, [r7, #14]
 8008a44:	2b05      	cmp	r3, #5
 8008a46:	d105      	bne.n	8008a54 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	220c      	movs	r2, #12
 8008a4c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	73fb      	strb	r3, [r7, #15]
      break;
 8008a52:	e0a3      	b.n	8008b9c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008a54:	7bbb      	ldrb	r3, [r7, #14]
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d103      	bne.n	8008a62 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2205      	movs	r2, #5
 8008a5e:	761a      	strb	r2, [r3, #24]
      break;
 8008a60:	e09c      	b.n	8008b9c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008a62:	7bbb      	ldrb	r3, [r7, #14]
 8008a64:	2b04      	cmp	r3, #4
 8008a66:	f040 8099 	bne.w	8008b9c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	220b      	movs	r2, #11
 8008a6e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008a70:	2302      	movs	r3, #2
 8008a72:	73fb      	strb	r3, [r7, #15]
      break;
 8008a74:	e092      	b.n	8008b9c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	791b      	ldrb	r3, [r3, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 f8d5 	bl	8008c2e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a8a:	b29a      	uxth	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2208      	movs	r2, #8
 8008a94:	761a      	strb	r2, [r3, #24]

      break;
 8008a96:	e086      	b.n	8008ba6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	791b      	ldrb	r3, [r3, #4]
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fc12 	bl	80092c8 <USBH_LL_GetURBState>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008aa8:	7bbb      	ldrb	r3, [r7, #14]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d105      	bne.n	8008aba <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	220d      	movs	r2, #13
 8008ab2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008ab8:	e072      	b.n	8008ba0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008aba:	7bbb      	ldrb	r3, [r7, #14]
 8008abc:	2b04      	cmp	r3, #4
 8008abe:	d103      	bne.n	8008ac8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	220b      	movs	r2, #11
 8008ac4:	761a      	strb	r2, [r3, #24]
      break;
 8008ac6:	e06b      	b.n	8008ba0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008ac8:	7bbb      	ldrb	r3, [r7, #14]
 8008aca:	2b05      	cmp	r3, #5
 8008acc:	d168      	bne.n	8008ba0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ad2:	e065      	b.n	8008ba0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	795b      	ldrb	r3, [r3, #5]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	9200      	str	r2, [sp, #0]
 8008adc:	2200      	movs	r2, #0
 8008ade:	2100      	movs	r1, #0
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 f87f 	bl	8008be4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	220a      	movs	r2, #10
 8008af6:	761a      	strb	r2, [r3, #24]
      break;
 8008af8:	e055      	b.n	8008ba6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	795b      	ldrb	r3, [r3, #5]
 8008afe:	4619      	mov	r1, r3
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 fbe1 	bl	80092c8 <USBH_LL_GetURBState>
 8008b06:	4603      	mov	r3, r0
 8008b08:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008b0a:	7bbb      	ldrb	r3, [r7, #14]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d105      	bne.n	8008b1c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008b10:	2300      	movs	r3, #0
 8008b12:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	220d      	movs	r2, #13
 8008b18:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008b1a:	e043      	b.n	8008ba4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008b1c:	7bbb      	ldrb	r3, [r7, #14]
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	d103      	bne.n	8008b2a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2209      	movs	r2, #9
 8008b26:	761a      	strb	r2, [r3, #24]
      break;
 8008b28:	e03c      	b.n	8008ba4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008b2a:	7bbb      	ldrb	r3, [r7, #14]
 8008b2c:	2b04      	cmp	r3, #4
 8008b2e:	d139      	bne.n	8008ba4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	220b      	movs	r2, #11
 8008b34:	761a      	strb	r2, [r3, #24]
      break;
 8008b36:	e035      	b.n	8008ba4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	7e5b      	ldrb	r3, [r3, #25]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	b2da      	uxtb	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	765a      	strb	r2, [r3, #25]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	7e5b      	ldrb	r3, [r3, #25]
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	d806      	bhi.n	8008b5a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2201      	movs	r2, #1
 8008b56:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008b58:	e025      	b.n	8008ba6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b60:	2106      	movs	r1, #6
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	795b      	ldrb	r3, [r3, #5]
 8008b70:	4619      	mov	r1, r3
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 f90c 	bl	8008d90 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	791b      	ldrb	r3, [r3, #4]
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 f906 	bl	8008d90 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008b8a:	2302      	movs	r3, #2
 8008b8c:	73fb      	strb	r3, [r7, #15]
      break;
 8008b8e:	e00a      	b.n	8008ba6 <USBH_HandleControl+0x2de>

    default:
      break;
 8008b90:	bf00      	nop
 8008b92:	e008      	b.n	8008ba6 <USBH_HandleControl+0x2de>
      break;
 8008b94:	bf00      	nop
 8008b96:	e006      	b.n	8008ba6 <USBH_HandleControl+0x2de>
      break;
 8008b98:	bf00      	nop
 8008b9a:	e004      	b.n	8008ba6 <USBH_HandleControl+0x2de>
      break;
 8008b9c:	bf00      	nop
 8008b9e:	e002      	b.n	8008ba6 <USBH_HandleControl+0x2de>
      break;
 8008ba0:	bf00      	nop
 8008ba2:	e000      	b.n	8008ba6 <USBH_HandleControl+0x2de>
      break;
 8008ba4:	bf00      	nop
  }

  return status;
 8008ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b088      	sub	sp, #32
 8008bb4:	af04      	add	r7, sp, #16
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	4613      	mov	r3, r2
 8008bbc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008bbe:	79f9      	ldrb	r1, [r7, #7]
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	9303      	str	r3, [sp, #12]
 8008bc4:	2308      	movs	r3, #8
 8008bc6:	9302      	str	r3, [sp, #8]
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	9301      	str	r3, [sp, #4]
 8008bcc:	2300      	movs	r3, #0
 8008bce:	9300      	str	r3, [sp, #0]
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f000 fb46 	bl	8009266 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b088      	sub	sp, #32
 8008be8:	af04      	add	r7, sp, #16
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	4611      	mov	r1, r2
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	80fb      	strh	r3, [r7, #6]
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d001      	beq.n	8008c08 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008c04:	2300      	movs	r3, #0
 8008c06:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008c08:	7979      	ldrb	r1, [r7, #5]
 8008c0a:	7e3b      	ldrb	r3, [r7, #24]
 8008c0c:	9303      	str	r3, [sp, #12]
 8008c0e:	88fb      	ldrh	r3, [r7, #6]
 8008c10:	9302      	str	r3, [sp, #8]
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	9301      	str	r3, [sp, #4]
 8008c16:	2301      	movs	r3, #1
 8008c18:	9300      	str	r3, [sp, #0]
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f000 fb21 	bl	8009266 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b088      	sub	sp, #32
 8008c32:	af04      	add	r7, sp, #16
 8008c34:	60f8      	str	r0, [r7, #12]
 8008c36:	60b9      	str	r1, [r7, #8]
 8008c38:	4611      	mov	r1, r2
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	80fb      	strh	r3, [r7, #6]
 8008c40:	4613      	mov	r3, r2
 8008c42:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008c44:	7979      	ldrb	r1, [r7, #5]
 8008c46:	2300      	movs	r3, #0
 8008c48:	9303      	str	r3, [sp, #12]
 8008c4a:	88fb      	ldrh	r3, [r7, #6]
 8008c4c:	9302      	str	r3, [sp, #8]
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	9301      	str	r3, [sp, #4]
 8008c52:	2301      	movs	r3, #1
 8008c54:	9300      	str	r3, [sp, #0]
 8008c56:	2300      	movs	r3, #0
 8008c58:	2201      	movs	r2, #1
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f000 fb03 	bl	8009266 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008c60:	2300      	movs	r3, #0

}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b088      	sub	sp, #32
 8008c6e:	af04      	add	r7, sp, #16
 8008c70:	60f8      	str	r0, [r7, #12]
 8008c72:	60b9      	str	r1, [r7, #8]
 8008c74:	4611      	mov	r1, r2
 8008c76:	461a      	mov	r2, r3
 8008c78:	460b      	mov	r3, r1
 8008c7a:	80fb      	strh	r3, [r7, #6]
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d001      	beq.n	8008c8e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008c8e:	7979      	ldrb	r1, [r7, #5]
 8008c90:	7e3b      	ldrb	r3, [r7, #24]
 8008c92:	9303      	str	r3, [sp, #12]
 8008c94:	88fb      	ldrh	r3, [r7, #6]
 8008c96:	9302      	str	r3, [sp, #8]
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	9301      	str	r3, [sp, #4]
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	9300      	str	r3, [sp, #0]
 8008ca0:	2302      	movs	r3, #2
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f000 fade 	bl	8009266 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b088      	sub	sp, #32
 8008cb8:	af04      	add	r7, sp, #16
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	4611      	mov	r1, r2
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	80fb      	strh	r3, [r7, #6]
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008cca:	7979      	ldrb	r1, [r7, #5]
 8008ccc:	2300      	movs	r3, #0
 8008cce:	9303      	str	r3, [sp, #12]
 8008cd0:	88fb      	ldrh	r3, [r7, #6]
 8008cd2:	9302      	str	r3, [sp, #8]
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	9301      	str	r3, [sp, #4]
 8008cd8:	2301      	movs	r3, #1
 8008cda:	9300      	str	r3, [sp, #0]
 8008cdc:	2302      	movs	r3, #2
 8008cde:	2201      	movs	r2, #1
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f000 fac0 	bl	8009266 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3710      	adds	r7, #16
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af04      	add	r7, sp, #16
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	4608      	mov	r0, r1
 8008cfa:	4611      	mov	r1, r2
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	4603      	mov	r3, r0
 8008d00:	70fb      	strb	r3, [r7, #3]
 8008d02:	460b      	mov	r3, r1
 8008d04:	70bb      	strb	r3, [r7, #2]
 8008d06:	4613      	mov	r3, r2
 8008d08:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008d0a:	7878      	ldrb	r0, [r7, #1]
 8008d0c:	78ba      	ldrb	r2, [r7, #2]
 8008d0e:	78f9      	ldrb	r1, [r7, #3]
 8008d10:	8b3b      	ldrh	r3, [r7, #24]
 8008d12:	9302      	str	r3, [sp, #8]
 8008d14:	7d3b      	ldrb	r3, [r7, #20]
 8008d16:	9301      	str	r3, [sp, #4]
 8008d18:	7c3b      	ldrb	r3, [r7, #16]
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 fa53 	bl	80091ca <USBH_LL_OpenPipe>

  return USBH_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b082      	sub	sp, #8
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
 8008d36:	460b      	mov	r3, r1
 8008d38:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008d3a:	78fb      	ldrb	r3, [r7, #3]
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fa72 	bl	8009228 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3708      	adds	r7, #8
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b084      	sub	sp, #16
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
 8008d56:	460b      	mov	r3, r1
 8008d58:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 f836 	bl	8008dcc <USBH_GetFreePipe>
 8008d60:	4603      	mov	r3, r0
 8008d62:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008d64:	89fb      	ldrh	r3, [r7, #14]
 8008d66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d00a      	beq.n	8008d84 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008d6e:	78fa      	ldrb	r2, [r7, #3]
 8008d70:	89fb      	ldrh	r3, [r7, #14]
 8008d72:	f003 030f 	and.w	r3, r3, #15
 8008d76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d7a:	6879      	ldr	r1, [r7, #4]
 8008d7c:	33e0      	adds	r3, #224	; 0xe0
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	440b      	add	r3, r1
 8008d82:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008d84:	89fb      	ldrh	r3, [r7, #14]
 8008d86:	b2db      	uxtb	r3, r3
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3710      	adds	r7, #16
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	460b      	mov	r3, r1
 8008d9a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008d9c:	78fb      	ldrb	r3, [r7, #3]
 8008d9e:	2b0a      	cmp	r3, #10
 8008da0:	d80d      	bhi.n	8008dbe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008da2:	78fb      	ldrb	r3, [r7, #3]
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	33e0      	adds	r3, #224	; 0xe0
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	4413      	add	r3, r2
 8008dac:	685a      	ldr	r2, [r3, #4]
 8008dae:	78fb      	ldrb	r3, [r7, #3]
 8008db0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008db4:	6879      	ldr	r1, [r7, #4]
 8008db6:	33e0      	adds	r3, #224	; 0xe0
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	440b      	add	r3, r1
 8008dbc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b085      	sub	sp, #20
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008dd8:	2300      	movs	r3, #0
 8008dda:	73fb      	strb	r3, [r7, #15]
 8008ddc:	e00f      	b.n	8008dfe <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008dde:	7bfb      	ldrb	r3, [r7, #15]
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	33e0      	adds	r3, #224	; 0xe0
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	4413      	add	r3, r2
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d102      	bne.n	8008df8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008df2:	7bfb      	ldrb	r3, [r7, #15]
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	e007      	b.n	8008e08 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008df8:	7bfb      	ldrb	r3, [r7, #15]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	73fb      	strb	r3, [r7, #15]
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
 8008e00:	2b0a      	cmp	r3, #10
 8008e02:	d9ec      	bls.n	8008dde <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008e04:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008e18:	2201      	movs	r2, #1
 8008e1a:	490e      	ldr	r1, [pc, #56]	; (8008e54 <MX_USB_HOST_Init+0x40>)
 8008e1c:	480e      	ldr	r0, [pc, #56]	; (8008e58 <MX_USB_HOST_Init+0x44>)
 8008e1e:	f7fe fca1 	bl	8007764 <USBH_Init>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d001      	beq.n	8008e2c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008e28:	f7f7 ff5e 	bl	8000ce8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008e2c:	490b      	ldr	r1, [pc, #44]	; (8008e5c <MX_USB_HOST_Init+0x48>)
 8008e2e:	480a      	ldr	r0, [pc, #40]	; (8008e58 <MX_USB_HOST_Init+0x44>)
 8008e30:	f7fe fd26 	bl	8007880 <USBH_RegisterClass>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d001      	beq.n	8008e3e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008e3a:	f7f7 ff55 	bl	8000ce8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008e3e:	4806      	ldr	r0, [pc, #24]	; (8008e58 <MX_USB_HOST_Init+0x44>)
 8008e40:	f7fe fdaa 	bl	8007998 <USBH_Start>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d001      	beq.n	8008e4e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008e4a:	f7f7 ff4d 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008e4e:	bf00      	nop
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	08008e75 	.word	0x08008e75
 8008e58:	2000029c 	.word	0x2000029c
 8008e5c:	2000000c 	.word	0x2000000c

08008e60 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008e64:	4802      	ldr	r0, [pc, #8]	; (8008e70 <MX_USB_HOST_Process+0x10>)
 8008e66:	f7fe fda7 	bl	80079b8 <USBH_Process>
}
 8008e6a:	bf00      	nop
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	2000029c 	.word	0x2000029c

08008e74 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008e80:	78fb      	ldrb	r3, [r7, #3]
 8008e82:	3b01      	subs	r3, #1
 8008e84:	2b04      	cmp	r3, #4
 8008e86:	d819      	bhi.n	8008ebc <USBH_UserProcess+0x48>
 8008e88:	a201      	add	r2, pc, #4	; (adr r2, 8008e90 <USBH_UserProcess+0x1c>)
 8008e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8e:	bf00      	nop
 8008e90:	08008ebd 	.word	0x08008ebd
 8008e94:	08008ead 	.word	0x08008ead
 8008e98:	08008ebd 	.word	0x08008ebd
 8008e9c:	08008eb5 	.word	0x08008eb5
 8008ea0:	08008ea5 	.word	0x08008ea5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008ea4:	4b09      	ldr	r3, [pc, #36]	; (8008ecc <USBH_UserProcess+0x58>)
 8008ea6:	2203      	movs	r2, #3
 8008ea8:	701a      	strb	r2, [r3, #0]
  break;
 8008eaa:	e008      	b.n	8008ebe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008eac:	4b07      	ldr	r3, [pc, #28]	; (8008ecc <USBH_UserProcess+0x58>)
 8008eae:	2202      	movs	r2, #2
 8008eb0:	701a      	strb	r2, [r3, #0]
  break;
 8008eb2:	e004      	b.n	8008ebe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008eb4:	4b05      	ldr	r3, [pc, #20]	; (8008ecc <USBH_UserProcess+0x58>)
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	701a      	strb	r2, [r3, #0]
  break;
 8008eba:	e000      	b.n	8008ebe <USBH_UserProcess+0x4a>

  default:
  break;
 8008ebc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008ebe:	bf00      	nop
 8008ec0:	370c      	adds	r7, #12
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	200000b4 	.word	0x200000b4

08008ed0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b08a      	sub	sp, #40	; 0x28
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ed8:	f107 0314 	add.w	r3, r7, #20
 8008edc:	2200      	movs	r2, #0
 8008ede:	601a      	str	r2, [r3, #0]
 8008ee0:	605a      	str	r2, [r3, #4]
 8008ee2:	609a      	str	r2, [r3, #8]
 8008ee4:	60da      	str	r2, [r3, #12]
 8008ee6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ef0:	d147      	bne.n	8008f82 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	613b      	str	r3, [r7, #16]
 8008ef6:	4b25      	ldr	r3, [pc, #148]	; (8008f8c <HAL_HCD_MspInit+0xbc>)
 8008ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008efa:	4a24      	ldr	r2, [pc, #144]	; (8008f8c <HAL_HCD_MspInit+0xbc>)
 8008efc:	f043 0301 	orr.w	r3, r3, #1
 8008f00:	6313      	str	r3, [r2, #48]	; 0x30
 8008f02:	4b22      	ldr	r3, [pc, #136]	; (8008f8c <HAL_HCD_MspInit+0xbc>)
 8008f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f06:	f003 0301 	and.w	r3, r3, #1
 8008f0a:	613b      	str	r3, [r7, #16]
 8008f0c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008f0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f14:	2300      	movs	r3, #0
 8008f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008f1c:	f107 0314 	add.w	r3, r7, #20
 8008f20:	4619      	mov	r1, r3
 8008f22:	481b      	ldr	r0, [pc, #108]	; (8008f90 <HAL_HCD_MspInit+0xc0>)
 8008f24:	f7f8 fefa 	bl	8001d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008f28:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f2e:	2302      	movs	r3, #2
 8008f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f32:	2300      	movs	r3, #0
 8008f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f36:	2300      	movs	r3, #0
 8008f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008f3a:	230a      	movs	r3, #10
 8008f3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f3e:	f107 0314 	add.w	r3, r7, #20
 8008f42:	4619      	mov	r1, r3
 8008f44:	4812      	ldr	r0, [pc, #72]	; (8008f90 <HAL_HCD_MspInit+0xc0>)
 8008f46:	f7f8 fee9 	bl	8001d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f4a:	4b10      	ldr	r3, [pc, #64]	; (8008f8c <HAL_HCD_MspInit+0xbc>)
 8008f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f4e:	4a0f      	ldr	r2, [pc, #60]	; (8008f8c <HAL_HCD_MspInit+0xbc>)
 8008f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f54:	6353      	str	r3, [r2, #52]	; 0x34
 8008f56:	2300      	movs	r3, #0
 8008f58:	60fb      	str	r3, [r7, #12]
 8008f5a:	4b0c      	ldr	r3, [pc, #48]	; (8008f8c <HAL_HCD_MspInit+0xbc>)
 8008f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f5e:	4a0b      	ldr	r2, [pc, #44]	; (8008f8c <HAL_HCD_MspInit+0xbc>)
 8008f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f64:	6453      	str	r3, [r2, #68]	; 0x44
 8008f66:	4b09      	ldr	r3, [pc, #36]	; (8008f8c <HAL_HCD_MspInit+0xbc>)
 8008f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f6e:	60fb      	str	r3, [r7, #12]
 8008f70:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008f72:	2200      	movs	r2, #0
 8008f74:	2100      	movs	r1, #0
 8008f76:	2043      	movs	r0, #67	; 0x43
 8008f78:	f7f8 fe99 	bl	8001cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f7c:	2043      	movs	r0, #67	; 0x43
 8008f7e:	f7f8 feb2 	bl	8001ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f82:	bf00      	nop
 8008f84:	3728      	adds	r7, #40	; 0x28
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	40023800 	.word	0x40023800
 8008f90:	40020000 	.word	0x40020000

08008f94 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7ff f8db 	bl	800815e <USBH_LL_IncTimer>
}
 8008fa8:	bf00      	nop
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7ff f913 	bl	80081ea <USBH_LL_Connect>
}
 8008fc4:	bf00      	nop
 8008fc6:	3708      	adds	r7, #8
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7ff f91c 	bl	8008218 <USBH_LL_Disconnect>
}
 8008fe0:	bf00      	nop
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	70fb      	strb	r3, [r7, #3]
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008ff8:	bf00      	nop
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009012:	4618      	mov	r0, r3
 8009014:	f7ff f8cd 	bl	80081b2 <USBH_LL_PortEnabled>
}
 8009018:	bf00      	nop
 800901a:	3708      	adds	r7, #8
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800902e:	4618      	mov	r0, r3
 8009030:	f7ff f8cd 	bl	80081ce <USBH_LL_PortDisabled>
}
 8009034:	bf00      	nop
 8009036:	3708      	adds	r7, #8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800904a:	2b01      	cmp	r3, #1
 800904c:	d12a      	bne.n	80090a4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800904e:	4a18      	ldr	r2, [pc, #96]	; (80090b0 <USBH_LL_Init+0x74>)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	4a15      	ldr	r2, [pc, #84]	; (80090b0 <USBH_LL_Init+0x74>)
 800905a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800905e:	4b14      	ldr	r3, [pc, #80]	; (80090b0 <USBH_LL_Init+0x74>)
 8009060:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009064:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009066:	4b12      	ldr	r3, [pc, #72]	; (80090b0 <USBH_LL_Init+0x74>)
 8009068:	2208      	movs	r2, #8
 800906a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800906c:	4b10      	ldr	r3, [pc, #64]	; (80090b0 <USBH_LL_Init+0x74>)
 800906e:	2201      	movs	r2, #1
 8009070:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009072:	4b0f      	ldr	r3, [pc, #60]	; (80090b0 <USBH_LL_Init+0x74>)
 8009074:	2200      	movs	r2, #0
 8009076:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009078:	4b0d      	ldr	r3, [pc, #52]	; (80090b0 <USBH_LL_Init+0x74>)
 800907a:	2202      	movs	r2, #2
 800907c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800907e:	4b0c      	ldr	r3, [pc, #48]	; (80090b0 <USBH_LL_Init+0x74>)
 8009080:	2200      	movs	r2, #0
 8009082:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009084:	480a      	ldr	r0, [pc, #40]	; (80090b0 <USBH_LL_Init+0x74>)
 8009086:	f7f9 f816 	bl	80020b6 <HAL_HCD_Init>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d001      	beq.n	8009094 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009090:	f7f7 fe2a 	bl	8000ce8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009094:	4806      	ldr	r0, [pc, #24]	; (80090b0 <USBH_LL_Init+0x74>)
 8009096:	f7f9 fbfa 	bl	800288e <HAL_HCD_GetCurrentFrame>
 800909a:	4603      	mov	r3, r0
 800909c:	4619      	mov	r1, r3
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f7ff f84e 	bl	8008140 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	20000674 	.word	0x20000674

080090b4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090bc:	2300      	movs	r3, #0
 80090be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7f9 fb69 	bl	80027a2 <HAL_HCD_Start>
 80090d0:	4603      	mov	r3, r0
 80090d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80090d4:	7bfb      	ldrb	r3, [r7, #15]
 80090d6:	4618      	mov	r0, r3
 80090d8:	f000 f95c 	bl	8009394 <USBH_Get_USB_Status>
 80090dc:	4603      	mov	r3, r0
 80090de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b084      	sub	sp, #16
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090f2:	2300      	movs	r3, #0
 80090f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090f6:	2300      	movs	r3, #0
 80090f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009100:	4618      	mov	r0, r3
 8009102:	f7f9 fb71 	bl	80027e8 <HAL_HCD_Stop>
 8009106:	4603      	mov	r3, r0
 8009108:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800910a:	7bfb      	ldrb	r3, [r7, #15]
 800910c:	4618      	mov	r0, r3
 800910e:	f000 f941 	bl	8009394 <USBH_Get_USB_Status>
 8009112:	4603      	mov	r3, r0
 8009114:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009116:	7bbb      	ldrb	r3, [r7, #14]
}
 8009118:	4618      	mov	r0, r3
 800911a:	3710      	adds	r7, #16
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009128:	2301      	movs	r3, #1
 800912a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009132:	4618      	mov	r0, r3
 8009134:	f7f9 fbb9 	bl	80028aa <HAL_HCD_GetCurrentSpeed>
 8009138:	4603      	mov	r3, r0
 800913a:	2b02      	cmp	r3, #2
 800913c:	d00c      	beq.n	8009158 <USBH_LL_GetSpeed+0x38>
 800913e:	2b02      	cmp	r3, #2
 8009140:	d80d      	bhi.n	800915e <USBH_LL_GetSpeed+0x3e>
 8009142:	2b00      	cmp	r3, #0
 8009144:	d002      	beq.n	800914c <USBH_LL_GetSpeed+0x2c>
 8009146:	2b01      	cmp	r3, #1
 8009148:	d003      	beq.n	8009152 <USBH_LL_GetSpeed+0x32>
 800914a:	e008      	b.n	800915e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800914c:	2300      	movs	r3, #0
 800914e:	73fb      	strb	r3, [r7, #15]
    break;
 8009150:	e008      	b.n	8009164 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009152:	2301      	movs	r3, #1
 8009154:	73fb      	strb	r3, [r7, #15]
    break;
 8009156:	e005      	b.n	8009164 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009158:	2302      	movs	r3, #2
 800915a:	73fb      	strb	r3, [r7, #15]
    break;
 800915c:	e002      	b.n	8009164 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800915e:	2301      	movs	r3, #1
 8009160:	73fb      	strb	r3, [r7, #15]
    break;
 8009162:	bf00      	nop
  }
  return  speed;
 8009164:	7bfb      	ldrb	r3, [r7, #15]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b084      	sub	sp, #16
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009176:	2300      	movs	r3, #0
 8009178:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800917a:	2300      	movs	r3, #0
 800917c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009184:	4618      	mov	r0, r3
 8009186:	f7f9 fb4c 	bl	8002822 <HAL_HCD_ResetPort>
 800918a:	4603      	mov	r3, r0
 800918c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800918e:	7bfb      	ldrb	r3, [r7, #15]
 8009190:	4618      	mov	r0, r3
 8009192:	f000 f8ff 	bl	8009394 <USBH_Get_USB_Status>
 8009196:	4603      	mov	r3, r0
 8009198:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800919a:	7bbb      	ldrb	r3, [r7, #14]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	460b      	mov	r3, r1
 80091ae:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80091b6:	78fa      	ldrb	r2, [r7, #3]
 80091b8:	4611      	mov	r1, r2
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7f9 fb53 	bl	8002866 <HAL_HCD_HC_GetXferCount>
 80091c0:	4603      	mov	r3, r0
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3708      	adds	r7, #8
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80091ca:	b590      	push	{r4, r7, lr}
 80091cc:	b089      	sub	sp, #36	; 0x24
 80091ce:	af04      	add	r7, sp, #16
 80091d0:	6078      	str	r0, [r7, #4]
 80091d2:	4608      	mov	r0, r1
 80091d4:	4611      	mov	r1, r2
 80091d6:	461a      	mov	r2, r3
 80091d8:	4603      	mov	r3, r0
 80091da:	70fb      	strb	r3, [r7, #3]
 80091dc:	460b      	mov	r3, r1
 80091de:	70bb      	strb	r3, [r7, #2]
 80091e0:	4613      	mov	r3, r2
 80091e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091e4:	2300      	movs	r3, #0
 80091e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091e8:	2300      	movs	r3, #0
 80091ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80091f2:	787c      	ldrb	r4, [r7, #1]
 80091f4:	78ba      	ldrb	r2, [r7, #2]
 80091f6:	78f9      	ldrb	r1, [r7, #3]
 80091f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80091fa:	9302      	str	r3, [sp, #8]
 80091fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009200:	9301      	str	r3, [sp, #4]
 8009202:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009206:	9300      	str	r3, [sp, #0]
 8009208:	4623      	mov	r3, r4
 800920a:	f7f8 ffb6 	bl	800217a <HAL_HCD_HC_Init>
 800920e:	4603      	mov	r3, r0
 8009210:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009212:	7bfb      	ldrb	r3, [r7, #15]
 8009214:	4618      	mov	r0, r3
 8009216:	f000 f8bd 	bl	8009394 <USBH_Get_USB_Status>
 800921a:	4603      	mov	r3, r0
 800921c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800921e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009220:	4618      	mov	r0, r3
 8009222:	3714      	adds	r7, #20
 8009224:	46bd      	mov	sp, r7
 8009226:	bd90      	pop	{r4, r7, pc}

08009228 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	460b      	mov	r3, r1
 8009232:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009234:	2300      	movs	r3, #0
 8009236:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009238:	2300      	movs	r3, #0
 800923a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009242:	78fa      	ldrb	r2, [r7, #3]
 8009244:	4611      	mov	r1, r2
 8009246:	4618      	mov	r0, r3
 8009248:	f7f9 f826 	bl	8002298 <HAL_HCD_HC_Halt>
 800924c:	4603      	mov	r3, r0
 800924e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009250:	7bfb      	ldrb	r3, [r7, #15]
 8009252:	4618      	mov	r0, r3
 8009254:	f000 f89e 	bl	8009394 <USBH_Get_USB_Status>
 8009258:	4603      	mov	r3, r0
 800925a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800925c:	7bbb      	ldrb	r3, [r7, #14]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009266:	b590      	push	{r4, r7, lr}
 8009268:	b089      	sub	sp, #36	; 0x24
 800926a:	af04      	add	r7, sp, #16
 800926c:	6078      	str	r0, [r7, #4]
 800926e:	4608      	mov	r0, r1
 8009270:	4611      	mov	r1, r2
 8009272:	461a      	mov	r2, r3
 8009274:	4603      	mov	r3, r0
 8009276:	70fb      	strb	r3, [r7, #3]
 8009278:	460b      	mov	r3, r1
 800927a:	70bb      	strb	r3, [r7, #2]
 800927c:	4613      	mov	r3, r2
 800927e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009280:	2300      	movs	r3, #0
 8009282:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009284:	2300      	movs	r3, #0
 8009286:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800928e:	787c      	ldrb	r4, [r7, #1]
 8009290:	78ba      	ldrb	r2, [r7, #2]
 8009292:	78f9      	ldrb	r1, [r7, #3]
 8009294:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009298:	9303      	str	r3, [sp, #12]
 800929a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800929c:	9302      	str	r3, [sp, #8]
 800929e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a0:	9301      	str	r3, [sp, #4]
 80092a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80092a6:	9300      	str	r3, [sp, #0]
 80092a8:	4623      	mov	r3, r4
 80092aa:	f7f9 f819 	bl	80022e0 <HAL_HCD_HC_SubmitRequest>
 80092ae:	4603      	mov	r3, r0
 80092b0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80092b2:	7bfb      	ldrb	r3, [r7, #15]
 80092b4:	4618      	mov	r0, r3
 80092b6:	f000 f86d 	bl	8009394 <USBH_Get_USB_Status>
 80092ba:	4603      	mov	r3, r0
 80092bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092be:	7bbb      	ldrb	r3, [r7, #14]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3714      	adds	r7, #20
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd90      	pop	{r4, r7, pc}

080092c8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	460b      	mov	r3, r1
 80092d2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80092da:	78fa      	ldrb	r2, [r7, #3]
 80092dc:	4611      	mov	r1, r2
 80092de:	4618      	mov	r0, r3
 80092e0:	f7f9 faad 	bl	800283e <HAL_HCD_HC_GetURBState>
 80092e4:	4603      	mov	r3, r0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3708      	adds	r7, #8
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b082      	sub	sp, #8
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
 80092f6:	460b      	mov	r3, r1
 80092f8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009300:	2b01      	cmp	r3, #1
 8009302:	d103      	bne.n	800930c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009304:	78fb      	ldrb	r3, [r7, #3]
 8009306:	4618      	mov	r0, r3
 8009308:	f000 f870 	bl	80093ec <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800930c:	20c8      	movs	r0, #200	; 0xc8
 800930e:	f7f8 fbcf 	bl	8001ab0 <HAL_Delay>
  return USBH_OK;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3708      	adds	r7, #8
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800931c:	b480      	push	{r7}
 800931e:	b085      	sub	sp, #20
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	460b      	mov	r3, r1
 8009326:	70fb      	strb	r3, [r7, #3]
 8009328:	4613      	mov	r3, r2
 800932a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009332:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009334:	78fb      	ldrb	r3, [r7, #3]
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	212c      	movs	r1, #44	; 0x2c
 800933a:	fb01 f303 	mul.w	r3, r1, r3
 800933e:	4413      	add	r3, r2
 8009340:	333b      	adds	r3, #59	; 0x3b
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d009      	beq.n	800935c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009348:	78fb      	ldrb	r3, [r7, #3]
 800934a:	68fa      	ldr	r2, [r7, #12]
 800934c:	212c      	movs	r1, #44	; 0x2c
 800934e:	fb01 f303 	mul.w	r3, r1, r3
 8009352:	4413      	add	r3, r2
 8009354:	3354      	adds	r3, #84	; 0x54
 8009356:	78ba      	ldrb	r2, [r7, #2]
 8009358:	701a      	strb	r2, [r3, #0]
 800935a:	e008      	b.n	800936e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800935c:	78fb      	ldrb	r3, [r7, #3]
 800935e:	68fa      	ldr	r2, [r7, #12]
 8009360:	212c      	movs	r1, #44	; 0x2c
 8009362:	fb01 f303 	mul.w	r3, r1, r3
 8009366:	4413      	add	r3, r2
 8009368:	3355      	adds	r3, #85	; 0x55
 800936a:	78ba      	ldrb	r2, [r7, #2]
 800936c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3714      	adds	r7, #20
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f7f8 fb93 	bl	8001ab0 <HAL_Delay>
}
 800938a:	bf00      	nop
 800938c:	3708      	adds	r7, #8
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
	...

08009394 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
 800939a:	4603      	mov	r3, r0
 800939c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800939e:	2300      	movs	r3, #0
 80093a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80093a2:	79fb      	ldrb	r3, [r7, #7]
 80093a4:	2b03      	cmp	r3, #3
 80093a6:	d817      	bhi.n	80093d8 <USBH_Get_USB_Status+0x44>
 80093a8:	a201      	add	r2, pc, #4	; (adr r2, 80093b0 <USBH_Get_USB_Status+0x1c>)
 80093aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ae:	bf00      	nop
 80093b0:	080093c1 	.word	0x080093c1
 80093b4:	080093c7 	.word	0x080093c7
 80093b8:	080093cd 	.word	0x080093cd
 80093bc:	080093d3 	.word	0x080093d3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80093c0:	2300      	movs	r3, #0
 80093c2:	73fb      	strb	r3, [r7, #15]
    break;
 80093c4:	e00b      	b.n	80093de <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80093c6:	2302      	movs	r3, #2
 80093c8:	73fb      	strb	r3, [r7, #15]
    break;
 80093ca:	e008      	b.n	80093de <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80093cc:	2301      	movs	r3, #1
 80093ce:	73fb      	strb	r3, [r7, #15]
    break;
 80093d0:	e005      	b.n	80093de <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80093d2:	2302      	movs	r3, #2
 80093d4:	73fb      	strb	r3, [r7, #15]
    break;
 80093d6:	e002      	b.n	80093de <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80093d8:	2302      	movs	r3, #2
 80093da:	73fb      	strb	r3, [r7, #15]
    break;
 80093dc:	bf00      	nop
  }
  return usb_status;
 80093de:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3714      	adds	r7, #20
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	4603      	mov	r3, r0
 80093f4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80093f6:	79fb      	ldrb	r3, [r7, #7]
 80093f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80093fa:	79fb      	ldrb	r3, [r7, #7]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d102      	bne.n	8009406 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8009400:	2301      	movs	r3, #1
 8009402:	73fb      	strb	r3, [r7, #15]
 8009404:	e001      	b.n	800940a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8009406:	2300      	movs	r3, #0
 8009408:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800940a:	7bfb      	ldrb	r3, [r7, #15]
 800940c:	461a      	mov	r2, r3
 800940e:	2101      	movs	r1, #1
 8009410:	4803      	ldr	r0, [pc, #12]	; (8009420 <MX_DriverVbusFS+0x34>)
 8009412:	f7f8 fe37 	bl	8002084 <HAL_GPIO_WritePin>
}
 8009416:	bf00      	nop
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	40020800 	.word	0x40020800

08009424 <__errno>:
 8009424:	4b01      	ldr	r3, [pc, #4]	; (800942c <__errno+0x8>)
 8009426:	6818      	ldr	r0, [r3, #0]
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	2000002c 	.word	0x2000002c

08009430 <__libc_init_array>:
 8009430:	b570      	push	{r4, r5, r6, lr}
 8009432:	4d0d      	ldr	r5, [pc, #52]	; (8009468 <__libc_init_array+0x38>)
 8009434:	4c0d      	ldr	r4, [pc, #52]	; (800946c <__libc_init_array+0x3c>)
 8009436:	1b64      	subs	r4, r4, r5
 8009438:	10a4      	asrs	r4, r4, #2
 800943a:	2600      	movs	r6, #0
 800943c:	42a6      	cmp	r6, r4
 800943e:	d109      	bne.n	8009454 <__libc_init_array+0x24>
 8009440:	4d0b      	ldr	r5, [pc, #44]	; (8009470 <__libc_init_array+0x40>)
 8009442:	4c0c      	ldr	r4, [pc, #48]	; (8009474 <__libc_init_array+0x44>)
 8009444:	f000 fc76 	bl	8009d34 <_init>
 8009448:	1b64      	subs	r4, r4, r5
 800944a:	10a4      	asrs	r4, r4, #2
 800944c:	2600      	movs	r6, #0
 800944e:	42a6      	cmp	r6, r4
 8009450:	d105      	bne.n	800945e <__libc_init_array+0x2e>
 8009452:	bd70      	pop	{r4, r5, r6, pc}
 8009454:	f855 3b04 	ldr.w	r3, [r5], #4
 8009458:	4798      	blx	r3
 800945a:	3601      	adds	r6, #1
 800945c:	e7ee      	b.n	800943c <__libc_init_array+0xc>
 800945e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009462:	4798      	blx	r3
 8009464:	3601      	adds	r6, #1
 8009466:	e7f2      	b.n	800944e <__libc_init_array+0x1e>
 8009468:	08009f20 	.word	0x08009f20
 800946c:	08009f20 	.word	0x08009f20
 8009470:	08009f20 	.word	0x08009f20
 8009474:	08009f24 	.word	0x08009f24

08009478 <malloc>:
 8009478:	4b02      	ldr	r3, [pc, #8]	; (8009484 <malloc+0xc>)
 800947a:	4601      	mov	r1, r0
 800947c:	6818      	ldr	r0, [r3, #0]
 800947e:	f000 b863 	b.w	8009548 <_malloc_r>
 8009482:	bf00      	nop
 8009484:	2000002c 	.word	0x2000002c

08009488 <free>:
 8009488:	4b02      	ldr	r3, [pc, #8]	; (8009494 <free+0xc>)
 800948a:	4601      	mov	r1, r0
 800948c:	6818      	ldr	r0, [r3, #0]
 800948e:	f000 b80b 	b.w	80094a8 <_free_r>
 8009492:	bf00      	nop
 8009494:	2000002c 	.word	0x2000002c

08009498 <memset>:
 8009498:	4402      	add	r2, r0
 800949a:	4603      	mov	r3, r0
 800949c:	4293      	cmp	r3, r2
 800949e:	d100      	bne.n	80094a2 <memset+0xa>
 80094a0:	4770      	bx	lr
 80094a2:	f803 1b01 	strb.w	r1, [r3], #1
 80094a6:	e7f9      	b.n	800949c <memset+0x4>

080094a8 <_free_r>:
 80094a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094aa:	2900      	cmp	r1, #0
 80094ac:	d048      	beq.n	8009540 <_free_r+0x98>
 80094ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094b2:	9001      	str	r0, [sp, #4]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	f1a1 0404 	sub.w	r4, r1, #4
 80094ba:	bfb8      	it	lt
 80094bc:	18e4      	addlt	r4, r4, r3
 80094be:	f000 f8e5 	bl	800968c <__malloc_lock>
 80094c2:	4a20      	ldr	r2, [pc, #128]	; (8009544 <_free_r+0x9c>)
 80094c4:	9801      	ldr	r0, [sp, #4]
 80094c6:	6813      	ldr	r3, [r2, #0]
 80094c8:	4615      	mov	r5, r2
 80094ca:	b933      	cbnz	r3, 80094da <_free_r+0x32>
 80094cc:	6063      	str	r3, [r4, #4]
 80094ce:	6014      	str	r4, [r2, #0]
 80094d0:	b003      	add	sp, #12
 80094d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094d6:	f000 b8df 	b.w	8009698 <__malloc_unlock>
 80094da:	42a3      	cmp	r3, r4
 80094dc:	d90b      	bls.n	80094f6 <_free_r+0x4e>
 80094de:	6821      	ldr	r1, [r4, #0]
 80094e0:	1862      	adds	r2, r4, r1
 80094e2:	4293      	cmp	r3, r2
 80094e4:	bf04      	itt	eq
 80094e6:	681a      	ldreq	r2, [r3, #0]
 80094e8:	685b      	ldreq	r3, [r3, #4]
 80094ea:	6063      	str	r3, [r4, #4]
 80094ec:	bf04      	itt	eq
 80094ee:	1852      	addeq	r2, r2, r1
 80094f0:	6022      	streq	r2, [r4, #0]
 80094f2:	602c      	str	r4, [r5, #0]
 80094f4:	e7ec      	b.n	80094d0 <_free_r+0x28>
 80094f6:	461a      	mov	r2, r3
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	b10b      	cbz	r3, 8009500 <_free_r+0x58>
 80094fc:	42a3      	cmp	r3, r4
 80094fe:	d9fa      	bls.n	80094f6 <_free_r+0x4e>
 8009500:	6811      	ldr	r1, [r2, #0]
 8009502:	1855      	adds	r5, r2, r1
 8009504:	42a5      	cmp	r5, r4
 8009506:	d10b      	bne.n	8009520 <_free_r+0x78>
 8009508:	6824      	ldr	r4, [r4, #0]
 800950a:	4421      	add	r1, r4
 800950c:	1854      	adds	r4, r2, r1
 800950e:	42a3      	cmp	r3, r4
 8009510:	6011      	str	r1, [r2, #0]
 8009512:	d1dd      	bne.n	80094d0 <_free_r+0x28>
 8009514:	681c      	ldr	r4, [r3, #0]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	6053      	str	r3, [r2, #4]
 800951a:	4421      	add	r1, r4
 800951c:	6011      	str	r1, [r2, #0]
 800951e:	e7d7      	b.n	80094d0 <_free_r+0x28>
 8009520:	d902      	bls.n	8009528 <_free_r+0x80>
 8009522:	230c      	movs	r3, #12
 8009524:	6003      	str	r3, [r0, #0]
 8009526:	e7d3      	b.n	80094d0 <_free_r+0x28>
 8009528:	6825      	ldr	r5, [r4, #0]
 800952a:	1961      	adds	r1, r4, r5
 800952c:	428b      	cmp	r3, r1
 800952e:	bf04      	itt	eq
 8009530:	6819      	ldreq	r1, [r3, #0]
 8009532:	685b      	ldreq	r3, [r3, #4]
 8009534:	6063      	str	r3, [r4, #4]
 8009536:	bf04      	itt	eq
 8009538:	1949      	addeq	r1, r1, r5
 800953a:	6021      	streq	r1, [r4, #0]
 800953c:	6054      	str	r4, [r2, #4]
 800953e:	e7c7      	b.n	80094d0 <_free_r+0x28>
 8009540:	b003      	add	sp, #12
 8009542:	bd30      	pop	{r4, r5, pc}
 8009544:	200000b8 	.word	0x200000b8

08009548 <_malloc_r>:
 8009548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800954a:	1ccd      	adds	r5, r1, #3
 800954c:	f025 0503 	bic.w	r5, r5, #3
 8009550:	3508      	adds	r5, #8
 8009552:	2d0c      	cmp	r5, #12
 8009554:	bf38      	it	cc
 8009556:	250c      	movcc	r5, #12
 8009558:	2d00      	cmp	r5, #0
 800955a:	4606      	mov	r6, r0
 800955c:	db01      	blt.n	8009562 <_malloc_r+0x1a>
 800955e:	42a9      	cmp	r1, r5
 8009560:	d903      	bls.n	800956a <_malloc_r+0x22>
 8009562:	230c      	movs	r3, #12
 8009564:	6033      	str	r3, [r6, #0]
 8009566:	2000      	movs	r0, #0
 8009568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800956a:	f000 f88f 	bl	800968c <__malloc_lock>
 800956e:	4921      	ldr	r1, [pc, #132]	; (80095f4 <_malloc_r+0xac>)
 8009570:	680a      	ldr	r2, [r1, #0]
 8009572:	4614      	mov	r4, r2
 8009574:	b99c      	cbnz	r4, 800959e <_malloc_r+0x56>
 8009576:	4f20      	ldr	r7, [pc, #128]	; (80095f8 <_malloc_r+0xb0>)
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	b923      	cbnz	r3, 8009586 <_malloc_r+0x3e>
 800957c:	4621      	mov	r1, r4
 800957e:	4630      	mov	r0, r6
 8009580:	f000 f83c 	bl	80095fc <_sbrk_r>
 8009584:	6038      	str	r0, [r7, #0]
 8009586:	4629      	mov	r1, r5
 8009588:	4630      	mov	r0, r6
 800958a:	f000 f837 	bl	80095fc <_sbrk_r>
 800958e:	1c43      	adds	r3, r0, #1
 8009590:	d123      	bne.n	80095da <_malloc_r+0x92>
 8009592:	230c      	movs	r3, #12
 8009594:	6033      	str	r3, [r6, #0]
 8009596:	4630      	mov	r0, r6
 8009598:	f000 f87e 	bl	8009698 <__malloc_unlock>
 800959c:	e7e3      	b.n	8009566 <_malloc_r+0x1e>
 800959e:	6823      	ldr	r3, [r4, #0]
 80095a0:	1b5b      	subs	r3, r3, r5
 80095a2:	d417      	bmi.n	80095d4 <_malloc_r+0x8c>
 80095a4:	2b0b      	cmp	r3, #11
 80095a6:	d903      	bls.n	80095b0 <_malloc_r+0x68>
 80095a8:	6023      	str	r3, [r4, #0]
 80095aa:	441c      	add	r4, r3
 80095ac:	6025      	str	r5, [r4, #0]
 80095ae:	e004      	b.n	80095ba <_malloc_r+0x72>
 80095b0:	6863      	ldr	r3, [r4, #4]
 80095b2:	42a2      	cmp	r2, r4
 80095b4:	bf0c      	ite	eq
 80095b6:	600b      	streq	r3, [r1, #0]
 80095b8:	6053      	strne	r3, [r2, #4]
 80095ba:	4630      	mov	r0, r6
 80095bc:	f000 f86c 	bl	8009698 <__malloc_unlock>
 80095c0:	f104 000b 	add.w	r0, r4, #11
 80095c4:	1d23      	adds	r3, r4, #4
 80095c6:	f020 0007 	bic.w	r0, r0, #7
 80095ca:	1ac2      	subs	r2, r0, r3
 80095cc:	d0cc      	beq.n	8009568 <_malloc_r+0x20>
 80095ce:	1a1b      	subs	r3, r3, r0
 80095d0:	50a3      	str	r3, [r4, r2]
 80095d2:	e7c9      	b.n	8009568 <_malloc_r+0x20>
 80095d4:	4622      	mov	r2, r4
 80095d6:	6864      	ldr	r4, [r4, #4]
 80095d8:	e7cc      	b.n	8009574 <_malloc_r+0x2c>
 80095da:	1cc4      	adds	r4, r0, #3
 80095dc:	f024 0403 	bic.w	r4, r4, #3
 80095e0:	42a0      	cmp	r0, r4
 80095e2:	d0e3      	beq.n	80095ac <_malloc_r+0x64>
 80095e4:	1a21      	subs	r1, r4, r0
 80095e6:	4630      	mov	r0, r6
 80095e8:	f000 f808 	bl	80095fc <_sbrk_r>
 80095ec:	3001      	adds	r0, #1
 80095ee:	d1dd      	bne.n	80095ac <_malloc_r+0x64>
 80095f0:	e7cf      	b.n	8009592 <_malloc_r+0x4a>
 80095f2:	bf00      	nop
 80095f4:	200000b8 	.word	0x200000b8
 80095f8:	200000bc 	.word	0x200000bc

080095fc <_sbrk_r>:
 80095fc:	b538      	push	{r3, r4, r5, lr}
 80095fe:	4d06      	ldr	r5, [pc, #24]	; (8009618 <_sbrk_r+0x1c>)
 8009600:	2300      	movs	r3, #0
 8009602:	4604      	mov	r4, r0
 8009604:	4608      	mov	r0, r1
 8009606:	602b      	str	r3, [r5, #0]
 8009608:	f7f7 fd8a 	bl	8001120 <_sbrk>
 800960c:	1c43      	adds	r3, r0, #1
 800960e:	d102      	bne.n	8009616 <_sbrk_r+0x1a>
 8009610:	682b      	ldr	r3, [r5, #0]
 8009612:	b103      	cbz	r3, 8009616 <_sbrk_r+0x1a>
 8009614:	6023      	str	r3, [r4, #0]
 8009616:	bd38      	pop	{r3, r4, r5, pc}
 8009618:	20000978 	.word	0x20000978

0800961c <siprintf>:
 800961c:	b40e      	push	{r1, r2, r3}
 800961e:	b500      	push	{lr}
 8009620:	b09c      	sub	sp, #112	; 0x70
 8009622:	ab1d      	add	r3, sp, #116	; 0x74
 8009624:	9002      	str	r0, [sp, #8]
 8009626:	9006      	str	r0, [sp, #24]
 8009628:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800962c:	4809      	ldr	r0, [pc, #36]	; (8009654 <siprintf+0x38>)
 800962e:	9107      	str	r1, [sp, #28]
 8009630:	9104      	str	r1, [sp, #16]
 8009632:	4909      	ldr	r1, [pc, #36]	; (8009658 <siprintf+0x3c>)
 8009634:	f853 2b04 	ldr.w	r2, [r3], #4
 8009638:	9105      	str	r1, [sp, #20]
 800963a:	6800      	ldr	r0, [r0, #0]
 800963c:	9301      	str	r3, [sp, #4]
 800963e:	a902      	add	r1, sp, #8
 8009640:	f000 f88c 	bl	800975c <_svfiprintf_r>
 8009644:	9b02      	ldr	r3, [sp, #8]
 8009646:	2200      	movs	r2, #0
 8009648:	701a      	strb	r2, [r3, #0]
 800964a:	b01c      	add	sp, #112	; 0x70
 800964c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009650:	b003      	add	sp, #12
 8009652:	4770      	bx	lr
 8009654:	2000002c 	.word	0x2000002c
 8009658:	ffff0208 	.word	0xffff0208

0800965c <strstr>:
 800965c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800965e:	780c      	ldrb	r4, [r1, #0]
 8009660:	b164      	cbz	r4, 800967c <strstr+0x20>
 8009662:	4603      	mov	r3, r0
 8009664:	781a      	ldrb	r2, [r3, #0]
 8009666:	4618      	mov	r0, r3
 8009668:	1c5e      	adds	r6, r3, #1
 800966a:	b90a      	cbnz	r2, 8009670 <strstr+0x14>
 800966c:	4610      	mov	r0, r2
 800966e:	e005      	b.n	800967c <strstr+0x20>
 8009670:	4294      	cmp	r4, r2
 8009672:	d108      	bne.n	8009686 <strstr+0x2a>
 8009674:	460d      	mov	r5, r1
 8009676:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800967a:	b902      	cbnz	r2, 800967e <strstr+0x22>
 800967c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800967e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8009682:	4297      	cmp	r7, r2
 8009684:	d0f7      	beq.n	8009676 <strstr+0x1a>
 8009686:	4633      	mov	r3, r6
 8009688:	e7ec      	b.n	8009664 <strstr+0x8>
	...

0800968c <__malloc_lock>:
 800968c:	4801      	ldr	r0, [pc, #4]	; (8009694 <__malloc_lock+0x8>)
 800968e:	f000 baf9 	b.w	8009c84 <__retarget_lock_acquire_recursive>
 8009692:	bf00      	nop
 8009694:	20000980 	.word	0x20000980

08009698 <__malloc_unlock>:
 8009698:	4801      	ldr	r0, [pc, #4]	; (80096a0 <__malloc_unlock+0x8>)
 800969a:	f000 baf4 	b.w	8009c86 <__retarget_lock_release_recursive>
 800969e:	bf00      	nop
 80096a0:	20000980 	.word	0x20000980

080096a4 <__ssputs_r>:
 80096a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096a8:	688e      	ldr	r6, [r1, #8]
 80096aa:	429e      	cmp	r6, r3
 80096ac:	4682      	mov	sl, r0
 80096ae:	460c      	mov	r4, r1
 80096b0:	4690      	mov	r8, r2
 80096b2:	461f      	mov	r7, r3
 80096b4:	d838      	bhi.n	8009728 <__ssputs_r+0x84>
 80096b6:	898a      	ldrh	r2, [r1, #12]
 80096b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80096bc:	d032      	beq.n	8009724 <__ssputs_r+0x80>
 80096be:	6825      	ldr	r5, [r4, #0]
 80096c0:	6909      	ldr	r1, [r1, #16]
 80096c2:	eba5 0901 	sub.w	r9, r5, r1
 80096c6:	6965      	ldr	r5, [r4, #20]
 80096c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096d0:	3301      	adds	r3, #1
 80096d2:	444b      	add	r3, r9
 80096d4:	106d      	asrs	r5, r5, #1
 80096d6:	429d      	cmp	r5, r3
 80096d8:	bf38      	it	cc
 80096da:	461d      	movcc	r5, r3
 80096dc:	0553      	lsls	r3, r2, #21
 80096de:	d531      	bpl.n	8009744 <__ssputs_r+0xa0>
 80096e0:	4629      	mov	r1, r5
 80096e2:	f7ff ff31 	bl	8009548 <_malloc_r>
 80096e6:	4606      	mov	r6, r0
 80096e8:	b950      	cbnz	r0, 8009700 <__ssputs_r+0x5c>
 80096ea:	230c      	movs	r3, #12
 80096ec:	f8ca 3000 	str.w	r3, [sl]
 80096f0:	89a3      	ldrh	r3, [r4, #12]
 80096f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096f6:	81a3      	strh	r3, [r4, #12]
 80096f8:	f04f 30ff 	mov.w	r0, #4294967295
 80096fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009700:	6921      	ldr	r1, [r4, #16]
 8009702:	464a      	mov	r2, r9
 8009704:	f000 fac0 	bl	8009c88 <memcpy>
 8009708:	89a3      	ldrh	r3, [r4, #12]
 800970a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800970e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009712:	81a3      	strh	r3, [r4, #12]
 8009714:	6126      	str	r6, [r4, #16]
 8009716:	6165      	str	r5, [r4, #20]
 8009718:	444e      	add	r6, r9
 800971a:	eba5 0509 	sub.w	r5, r5, r9
 800971e:	6026      	str	r6, [r4, #0]
 8009720:	60a5      	str	r5, [r4, #8]
 8009722:	463e      	mov	r6, r7
 8009724:	42be      	cmp	r6, r7
 8009726:	d900      	bls.n	800972a <__ssputs_r+0x86>
 8009728:	463e      	mov	r6, r7
 800972a:	4632      	mov	r2, r6
 800972c:	6820      	ldr	r0, [r4, #0]
 800972e:	4641      	mov	r1, r8
 8009730:	f000 fab8 	bl	8009ca4 <memmove>
 8009734:	68a3      	ldr	r3, [r4, #8]
 8009736:	6822      	ldr	r2, [r4, #0]
 8009738:	1b9b      	subs	r3, r3, r6
 800973a:	4432      	add	r2, r6
 800973c:	60a3      	str	r3, [r4, #8]
 800973e:	6022      	str	r2, [r4, #0]
 8009740:	2000      	movs	r0, #0
 8009742:	e7db      	b.n	80096fc <__ssputs_r+0x58>
 8009744:	462a      	mov	r2, r5
 8009746:	f000 fac7 	bl	8009cd8 <_realloc_r>
 800974a:	4606      	mov	r6, r0
 800974c:	2800      	cmp	r0, #0
 800974e:	d1e1      	bne.n	8009714 <__ssputs_r+0x70>
 8009750:	6921      	ldr	r1, [r4, #16]
 8009752:	4650      	mov	r0, sl
 8009754:	f7ff fea8 	bl	80094a8 <_free_r>
 8009758:	e7c7      	b.n	80096ea <__ssputs_r+0x46>
	...

0800975c <_svfiprintf_r>:
 800975c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009760:	4698      	mov	r8, r3
 8009762:	898b      	ldrh	r3, [r1, #12]
 8009764:	061b      	lsls	r3, r3, #24
 8009766:	b09d      	sub	sp, #116	; 0x74
 8009768:	4607      	mov	r7, r0
 800976a:	460d      	mov	r5, r1
 800976c:	4614      	mov	r4, r2
 800976e:	d50e      	bpl.n	800978e <_svfiprintf_r+0x32>
 8009770:	690b      	ldr	r3, [r1, #16]
 8009772:	b963      	cbnz	r3, 800978e <_svfiprintf_r+0x32>
 8009774:	2140      	movs	r1, #64	; 0x40
 8009776:	f7ff fee7 	bl	8009548 <_malloc_r>
 800977a:	6028      	str	r0, [r5, #0]
 800977c:	6128      	str	r0, [r5, #16]
 800977e:	b920      	cbnz	r0, 800978a <_svfiprintf_r+0x2e>
 8009780:	230c      	movs	r3, #12
 8009782:	603b      	str	r3, [r7, #0]
 8009784:	f04f 30ff 	mov.w	r0, #4294967295
 8009788:	e0d1      	b.n	800992e <_svfiprintf_r+0x1d2>
 800978a:	2340      	movs	r3, #64	; 0x40
 800978c:	616b      	str	r3, [r5, #20]
 800978e:	2300      	movs	r3, #0
 8009790:	9309      	str	r3, [sp, #36]	; 0x24
 8009792:	2320      	movs	r3, #32
 8009794:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009798:	f8cd 800c 	str.w	r8, [sp, #12]
 800979c:	2330      	movs	r3, #48	; 0x30
 800979e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009948 <_svfiprintf_r+0x1ec>
 80097a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097a6:	f04f 0901 	mov.w	r9, #1
 80097aa:	4623      	mov	r3, r4
 80097ac:	469a      	mov	sl, r3
 80097ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097b2:	b10a      	cbz	r2, 80097b8 <_svfiprintf_r+0x5c>
 80097b4:	2a25      	cmp	r2, #37	; 0x25
 80097b6:	d1f9      	bne.n	80097ac <_svfiprintf_r+0x50>
 80097b8:	ebba 0b04 	subs.w	fp, sl, r4
 80097bc:	d00b      	beq.n	80097d6 <_svfiprintf_r+0x7a>
 80097be:	465b      	mov	r3, fp
 80097c0:	4622      	mov	r2, r4
 80097c2:	4629      	mov	r1, r5
 80097c4:	4638      	mov	r0, r7
 80097c6:	f7ff ff6d 	bl	80096a4 <__ssputs_r>
 80097ca:	3001      	adds	r0, #1
 80097cc:	f000 80aa 	beq.w	8009924 <_svfiprintf_r+0x1c8>
 80097d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097d2:	445a      	add	r2, fp
 80097d4:	9209      	str	r2, [sp, #36]	; 0x24
 80097d6:	f89a 3000 	ldrb.w	r3, [sl]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f000 80a2 	beq.w	8009924 <_svfiprintf_r+0x1c8>
 80097e0:	2300      	movs	r3, #0
 80097e2:	f04f 32ff 	mov.w	r2, #4294967295
 80097e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097ea:	f10a 0a01 	add.w	sl, sl, #1
 80097ee:	9304      	str	r3, [sp, #16]
 80097f0:	9307      	str	r3, [sp, #28]
 80097f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097f6:	931a      	str	r3, [sp, #104]	; 0x68
 80097f8:	4654      	mov	r4, sl
 80097fa:	2205      	movs	r2, #5
 80097fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009800:	4851      	ldr	r0, [pc, #324]	; (8009948 <_svfiprintf_r+0x1ec>)
 8009802:	f7f6 fced 	bl	80001e0 <memchr>
 8009806:	9a04      	ldr	r2, [sp, #16]
 8009808:	b9d8      	cbnz	r0, 8009842 <_svfiprintf_r+0xe6>
 800980a:	06d0      	lsls	r0, r2, #27
 800980c:	bf44      	itt	mi
 800980e:	2320      	movmi	r3, #32
 8009810:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009814:	0711      	lsls	r1, r2, #28
 8009816:	bf44      	itt	mi
 8009818:	232b      	movmi	r3, #43	; 0x2b
 800981a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800981e:	f89a 3000 	ldrb.w	r3, [sl]
 8009822:	2b2a      	cmp	r3, #42	; 0x2a
 8009824:	d015      	beq.n	8009852 <_svfiprintf_r+0xf6>
 8009826:	9a07      	ldr	r2, [sp, #28]
 8009828:	4654      	mov	r4, sl
 800982a:	2000      	movs	r0, #0
 800982c:	f04f 0c0a 	mov.w	ip, #10
 8009830:	4621      	mov	r1, r4
 8009832:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009836:	3b30      	subs	r3, #48	; 0x30
 8009838:	2b09      	cmp	r3, #9
 800983a:	d94e      	bls.n	80098da <_svfiprintf_r+0x17e>
 800983c:	b1b0      	cbz	r0, 800986c <_svfiprintf_r+0x110>
 800983e:	9207      	str	r2, [sp, #28]
 8009840:	e014      	b.n	800986c <_svfiprintf_r+0x110>
 8009842:	eba0 0308 	sub.w	r3, r0, r8
 8009846:	fa09 f303 	lsl.w	r3, r9, r3
 800984a:	4313      	orrs	r3, r2
 800984c:	9304      	str	r3, [sp, #16]
 800984e:	46a2      	mov	sl, r4
 8009850:	e7d2      	b.n	80097f8 <_svfiprintf_r+0x9c>
 8009852:	9b03      	ldr	r3, [sp, #12]
 8009854:	1d19      	adds	r1, r3, #4
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	9103      	str	r1, [sp, #12]
 800985a:	2b00      	cmp	r3, #0
 800985c:	bfbb      	ittet	lt
 800985e:	425b      	neglt	r3, r3
 8009860:	f042 0202 	orrlt.w	r2, r2, #2
 8009864:	9307      	strge	r3, [sp, #28]
 8009866:	9307      	strlt	r3, [sp, #28]
 8009868:	bfb8      	it	lt
 800986a:	9204      	strlt	r2, [sp, #16]
 800986c:	7823      	ldrb	r3, [r4, #0]
 800986e:	2b2e      	cmp	r3, #46	; 0x2e
 8009870:	d10c      	bne.n	800988c <_svfiprintf_r+0x130>
 8009872:	7863      	ldrb	r3, [r4, #1]
 8009874:	2b2a      	cmp	r3, #42	; 0x2a
 8009876:	d135      	bne.n	80098e4 <_svfiprintf_r+0x188>
 8009878:	9b03      	ldr	r3, [sp, #12]
 800987a:	1d1a      	adds	r2, r3, #4
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	9203      	str	r2, [sp, #12]
 8009880:	2b00      	cmp	r3, #0
 8009882:	bfb8      	it	lt
 8009884:	f04f 33ff 	movlt.w	r3, #4294967295
 8009888:	3402      	adds	r4, #2
 800988a:	9305      	str	r3, [sp, #20]
 800988c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009958 <_svfiprintf_r+0x1fc>
 8009890:	7821      	ldrb	r1, [r4, #0]
 8009892:	2203      	movs	r2, #3
 8009894:	4650      	mov	r0, sl
 8009896:	f7f6 fca3 	bl	80001e0 <memchr>
 800989a:	b140      	cbz	r0, 80098ae <_svfiprintf_r+0x152>
 800989c:	2340      	movs	r3, #64	; 0x40
 800989e:	eba0 000a 	sub.w	r0, r0, sl
 80098a2:	fa03 f000 	lsl.w	r0, r3, r0
 80098a6:	9b04      	ldr	r3, [sp, #16]
 80098a8:	4303      	orrs	r3, r0
 80098aa:	3401      	adds	r4, #1
 80098ac:	9304      	str	r3, [sp, #16]
 80098ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098b2:	4826      	ldr	r0, [pc, #152]	; (800994c <_svfiprintf_r+0x1f0>)
 80098b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098b8:	2206      	movs	r2, #6
 80098ba:	f7f6 fc91 	bl	80001e0 <memchr>
 80098be:	2800      	cmp	r0, #0
 80098c0:	d038      	beq.n	8009934 <_svfiprintf_r+0x1d8>
 80098c2:	4b23      	ldr	r3, [pc, #140]	; (8009950 <_svfiprintf_r+0x1f4>)
 80098c4:	bb1b      	cbnz	r3, 800990e <_svfiprintf_r+0x1b2>
 80098c6:	9b03      	ldr	r3, [sp, #12]
 80098c8:	3307      	adds	r3, #7
 80098ca:	f023 0307 	bic.w	r3, r3, #7
 80098ce:	3308      	adds	r3, #8
 80098d0:	9303      	str	r3, [sp, #12]
 80098d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098d4:	4433      	add	r3, r6
 80098d6:	9309      	str	r3, [sp, #36]	; 0x24
 80098d8:	e767      	b.n	80097aa <_svfiprintf_r+0x4e>
 80098da:	fb0c 3202 	mla	r2, ip, r2, r3
 80098de:	460c      	mov	r4, r1
 80098e0:	2001      	movs	r0, #1
 80098e2:	e7a5      	b.n	8009830 <_svfiprintf_r+0xd4>
 80098e4:	2300      	movs	r3, #0
 80098e6:	3401      	adds	r4, #1
 80098e8:	9305      	str	r3, [sp, #20]
 80098ea:	4619      	mov	r1, r3
 80098ec:	f04f 0c0a 	mov.w	ip, #10
 80098f0:	4620      	mov	r0, r4
 80098f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098f6:	3a30      	subs	r2, #48	; 0x30
 80098f8:	2a09      	cmp	r2, #9
 80098fa:	d903      	bls.n	8009904 <_svfiprintf_r+0x1a8>
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d0c5      	beq.n	800988c <_svfiprintf_r+0x130>
 8009900:	9105      	str	r1, [sp, #20]
 8009902:	e7c3      	b.n	800988c <_svfiprintf_r+0x130>
 8009904:	fb0c 2101 	mla	r1, ip, r1, r2
 8009908:	4604      	mov	r4, r0
 800990a:	2301      	movs	r3, #1
 800990c:	e7f0      	b.n	80098f0 <_svfiprintf_r+0x194>
 800990e:	ab03      	add	r3, sp, #12
 8009910:	9300      	str	r3, [sp, #0]
 8009912:	462a      	mov	r2, r5
 8009914:	4b0f      	ldr	r3, [pc, #60]	; (8009954 <_svfiprintf_r+0x1f8>)
 8009916:	a904      	add	r1, sp, #16
 8009918:	4638      	mov	r0, r7
 800991a:	f3af 8000 	nop.w
 800991e:	1c42      	adds	r2, r0, #1
 8009920:	4606      	mov	r6, r0
 8009922:	d1d6      	bne.n	80098d2 <_svfiprintf_r+0x176>
 8009924:	89ab      	ldrh	r3, [r5, #12]
 8009926:	065b      	lsls	r3, r3, #25
 8009928:	f53f af2c 	bmi.w	8009784 <_svfiprintf_r+0x28>
 800992c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800992e:	b01d      	add	sp, #116	; 0x74
 8009930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009934:	ab03      	add	r3, sp, #12
 8009936:	9300      	str	r3, [sp, #0]
 8009938:	462a      	mov	r2, r5
 800993a:	4b06      	ldr	r3, [pc, #24]	; (8009954 <_svfiprintf_r+0x1f8>)
 800993c:	a904      	add	r1, sp, #16
 800993e:	4638      	mov	r0, r7
 8009940:	f000 f87a 	bl	8009a38 <_printf_i>
 8009944:	e7eb      	b.n	800991e <_svfiprintf_r+0x1c2>
 8009946:	bf00      	nop
 8009948:	08009ee4 	.word	0x08009ee4
 800994c:	08009eee 	.word	0x08009eee
 8009950:	00000000 	.word	0x00000000
 8009954:	080096a5 	.word	0x080096a5
 8009958:	08009eea 	.word	0x08009eea

0800995c <_printf_common>:
 800995c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009960:	4616      	mov	r6, r2
 8009962:	4699      	mov	r9, r3
 8009964:	688a      	ldr	r2, [r1, #8]
 8009966:	690b      	ldr	r3, [r1, #16]
 8009968:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800996c:	4293      	cmp	r3, r2
 800996e:	bfb8      	it	lt
 8009970:	4613      	movlt	r3, r2
 8009972:	6033      	str	r3, [r6, #0]
 8009974:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009978:	4607      	mov	r7, r0
 800997a:	460c      	mov	r4, r1
 800997c:	b10a      	cbz	r2, 8009982 <_printf_common+0x26>
 800997e:	3301      	adds	r3, #1
 8009980:	6033      	str	r3, [r6, #0]
 8009982:	6823      	ldr	r3, [r4, #0]
 8009984:	0699      	lsls	r1, r3, #26
 8009986:	bf42      	ittt	mi
 8009988:	6833      	ldrmi	r3, [r6, #0]
 800998a:	3302      	addmi	r3, #2
 800998c:	6033      	strmi	r3, [r6, #0]
 800998e:	6825      	ldr	r5, [r4, #0]
 8009990:	f015 0506 	ands.w	r5, r5, #6
 8009994:	d106      	bne.n	80099a4 <_printf_common+0x48>
 8009996:	f104 0a19 	add.w	sl, r4, #25
 800999a:	68e3      	ldr	r3, [r4, #12]
 800999c:	6832      	ldr	r2, [r6, #0]
 800999e:	1a9b      	subs	r3, r3, r2
 80099a0:	42ab      	cmp	r3, r5
 80099a2:	dc26      	bgt.n	80099f2 <_printf_common+0x96>
 80099a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80099a8:	1e13      	subs	r3, r2, #0
 80099aa:	6822      	ldr	r2, [r4, #0]
 80099ac:	bf18      	it	ne
 80099ae:	2301      	movne	r3, #1
 80099b0:	0692      	lsls	r2, r2, #26
 80099b2:	d42b      	bmi.n	8009a0c <_printf_common+0xb0>
 80099b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099b8:	4649      	mov	r1, r9
 80099ba:	4638      	mov	r0, r7
 80099bc:	47c0      	blx	r8
 80099be:	3001      	adds	r0, #1
 80099c0:	d01e      	beq.n	8009a00 <_printf_common+0xa4>
 80099c2:	6823      	ldr	r3, [r4, #0]
 80099c4:	68e5      	ldr	r5, [r4, #12]
 80099c6:	6832      	ldr	r2, [r6, #0]
 80099c8:	f003 0306 	and.w	r3, r3, #6
 80099cc:	2b04      	cmp	r3, #4
 80099ce:	bf08      	it	eq
 80099d0:	1aad      	subeq	r5, r5, r2
 80099d2:	68a3      	ldr	r3, [r4, #8]
 80099d4:	6922      	ldr	r2, [r4, #16]
 80099d6:	bf0c      	ite	eq
 80099d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099dc:	2500      	movne	r5, #0
 80099de:	4293      	cmp	r3, r2
 80099e0:	bfc4      	itt	gt
 80099e2:	1a9b      	subgt	r3, r3, r2
 80099e4:	18ed      	addgt	r5, r5, r3
 80099e6:	2600      	movs	r6, #0
 80099e8:	341a      	adds	r4, #26
 80099ea:	42b5      	cmp	r5, r6
 80099ec:	d11a      	bne.n	8009a24 <_printf_common+0xc8>
 80099ee:	2000      	movs	r0, #0
 80099f0:	e008      	b.n	8009a04 <_printf_common+0xa8>
 80099f2:	2301      	movs	r3, #1
 80099f4:	4652      	mov	r2, sl
 80099f6:	4649      	mov	r1, r9
 80099f8:	4638      	mov	r0, r7
 80099fa:	47c0      	blx	r8
 80099fc:	3001      	adds	r0, #1
 80099fe:	d103      	bne.n	8009a08 <_printf_common+0xac>
 8009a00:	f04f 30ff 	mov.w	r0, #4294967295
 8009a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a08:	3501      	adds	r5, #1
 8009a0a:	e7c6      	b.n	800999a <_printf_common+0x3e>
 8009a0c:	18e1      	adds	r1, r4, r3
 8009a0e:	1c5a      	adds	r2, r3, #1
 8009a10:	2030      	movs	r0, #48	; 0x30
 8009a12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a16:	4422      	add	r2, r4
 8009a18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a20:	3302      	adds	r3, #2
 8009a22:	e7c7      	b.n	80099b4 <_printf_common+0x58>
 8009a24:	2301      	movs	r3, #1
 8009a26:	4622      	mov	r2, r4
 8009a28:	4649      	mov	r1, r9
 8009a2a:	4638      	mov	r0, r7
 8009a2c:	47c0      	blx	r8
 8009a2e:	3001      	adds	r0, #1
 8009a30:	d0e6      	beq.n	8009a00 <_printf_common+0xa4>
 8009a32:	3601      	adds	r6, #1
 8009a34:	e7d9      	b.n	80099ea <_printf_common+0x8e>
	...

08009a38 <_printf_i>:
 8009a38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a3c:	460c      	mov	r4, r1
 8009a3e:	4691      	mov	r9, r2
 8009a40:	7e27      	ldrb	r7, [r4, #24]
 8009a42:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009a44:	2f78      	cmp	r7, #120	; 0x78
 8009a46:	4680      	mov	r8, r0
 8009a48:	469a      	mov	sl, r3
 8009a4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a4e:	d807      	bhi.n	8009a60 <_printf_i+0x28>
 8009a50:	2f62      	cmp	r7, #98	; 0x62
 8009a52:	d80a      	bhi.n	8009a6a <_printf_i+0x32>
 8009a54:	2f00      	cmp	r7, #0
 8009a56:	f000 80d8 	beq.w	8009c0a <_printf_i+0x1d2>
 8009a5a:	2f58      	cmp	r7, #88	; 0x58
 8009a5c:	f000 80a3 	beq.w	8009ba6 <_printf_i+0x16e>
 8009a60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009a64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a68:	e03a      	b.n	8009ae0 <_printf_i+0xa8>
 8009a6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a6e:	2b15      	cmp	r3, #21
 8009a70:	d8f6      	bhi.n	8009a60 <_printf_i+0x28>
 8009a72:	a001      	add	r0, pc, #4	; (adr r0, 8009a78 <_printf_i+0x40>)
 8009a74:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009a78:	08009ad1 	.word	0x08009ad1
 8009a7c:	08009ae5 	.word	0x08009ae5
 8009a80:	08009a61 	.word	0x08009a61
 8009a84:	08009a61 	.word	0x08009a61
 8009a88:	08009a61 	.word	0x08009a61
 8009a8c:	08009a61 	.word	0x08009a61
 8009a90:	08009ae5 	.word	0x08009ae5
 8009a94:	08009a61 	.word	0x08009a61
 8009a98:	08009a61 	.word	0x08009a61
 8009a9c:	08009a61 	.word	0x08009a61
 8009aa0:	08009a61 	.word	0x08009a61
 8009aa4:	08009bf1 	.word	0x08009bf1
 8009aa8:	08009b15 	.word	0x08009b15
 8009aac:	08009bd3 	.word	0x08009bd3
 8009ab0:	08009a61 	.word	0x08009a61
 8009ab4:	08009a61 	.word	0x08009a61
 8009ab8:	08009c13 	.word	0x08009c13
 8009abc:	08009a61 	.word	0x08009a61
 8009ac0:	08009b15 	.word	0x08009b15
 8009ac4:	08009a61 	.word	0x08009a61
 8009ac8:	08009a61 	.word	0x08009a61
 8009acc:	08009bdb 	.word	0x08009bdb
 8009ad0:	680b      	ldr	r3, [r1, #0]
 8009ad2:	1d1a      	adds	r2, r3, #4
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	600a      	str	r2, [r1, #0]
 8009ad8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009adc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e0a3      	b.n	8009c2c <_printf_i+0x1f4>
 8009ae4:	6825      	ldr	r5, [r4, #0]
 8009ae6:	6808      	ldr	r0, [r1, #0]
 8009ae8:	062e      	lsls	r6, r5, #24
 8009aea:	f100 0304 	add.w	r3, r0, #4
 8009aee:	d50a      	bpl.n	8009b06 <_printf_i+0xce>
 8009af0:	6805      	ldr	r5, [r0, #0]
 8009af2:	600b      	str	r3, [r1, #0]
 8009af4:	2d00      	cmp	r5, #0
 8009af6:	da03      	bge.n	8009b00 <_printf_i+0xc8>
 8009af8:	232d      	movs	r3, #45	; 0x2d
 8009afa:	426d      	negs	r5, r5
 8009afc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b00:	485e      	ldr	r0, [pc, #376]	; (8009c7c <_printf_i+0x244>)
 8009b02:	230a      	movs	r3, #10
 8009b04:	e019      	b.n	8009b3a <_printf_i+0x102>
 8009b06:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009b0a:	6805      	ldr	r5, [r0, #0]
 8009b0c:	600b      	str	r3, [r1, #0]
 8009b0e:	bf18      	it	ne
 8009b10:	b22d      	sxthne	r5, r5
 8009b12:	e7ef      	b.n	8009af4 <_printf_i+0xbc>
 8009b14:	680b      	ldr	r3, [r1, #0]
 8009b16:	6825      	ldr	r5, [r4, #0]
 8009b18:	1d18      	adds	r0, r3, #4
 8009b1a:	6008      	str	r0, [r1, #0]
 8009b1c:	0628      	lsls	r0, r5, #24
 8009b1e:	d501      	bpl.n	8009b24 <_printf_i+0xec>
 8009b20:	681d      	ldr	r5, [r3, #0]
 8009b22:	e002      	b.n	8009b2a <_printf_i+0xf2>
 8009b24:	0669      	lsls	r1, r5, #25
 8009b26:	d5fb      	bpl.n	8009b20 <_printf_i+0xe8>
 8009b28:	881d      	ldrh	r5, [r3, #0]
 8009b2a:	4854      	ldr	r0, [pc, #336]	; (8009c7c <_printf_i+0x244>)
 8009b2c:	2f6f      	cmp	r7, #111	; 0x6f
 8009b2e:	bf0c      	ite	eq
 8009b30:	2308      	moveq	r3, #8
 8009b32:	230a      	movne	r3, #10
 8009b34:	2100      	movs	r1, #0
 8009b36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b3a:	6866      	ldr	r6, [r4, #4]
 8009b3c:	60a6      	str	r6, [r4, #8]
 8009b3e:	2e00      	cmp	r6, #0
 8009b40:	bfa2      	ittt	ge
 8009b42:	6821      	ldrge	r1, [r4, #0]
 8009b44:	f021 0104 	bicge.w	r1, r1, #4
 8009b48:	6021      	strge	r1, [r4, #0]
 8009b4a:	b90d      	cbnz	r5, 8009b50 <_printf_i+0x118>
 8009b4c:	2e00      	cmp	r6, #0
 8009b4e:	d04d      	beq.n	8009bec <_printf_i+0x1b4>
 8009b50:	4616      	mov	r6, r2
 8009b52:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b56:	fb03 5711 	mls	r7, r3, r1, r5
 8009b5a:	5dc7      	ldrb	r7, [r0, r7]
 8009b5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b60:	462f      	mov	r7, r5
 8009b62:	42bb      	cmp	r3, r7
 8009b64:	460d      	mov	r5, r1
 8009b66:	d9f4      	bls.n	8009b52 <_printf_i+0x11a>
 8009b68:	2b08      	cmp	r3, #8
 8009b6a:	d10b      	bne.n	8009b84 <_printf_i+0x14c>
 8009b6c:	6823      	ldr	r3, [r4, #0]
 8009b6e:	07df      	lsls	r7, r3, #31
 8009b70:	d508      	bpl.n	8009b84 <_printf_i+0x14c>
 8009b72:	6923      	ldr	r3, [r4, #16]
 8009b74:	6861      	ldr	r1, [r4, #4]
 8009b76:	4299      	cmp	r1, r3
 8009b78:	bfde      	ittt	le
 8009b7a:	2330      	movle	r3, #48	; 0x30
 8009b7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b84:	1b92      	subs	r2, r2, r6
 8009b86:	6122      	str	r2, [r4, #16]
 8009b88:	f8cd a000 	str.w	sl, [sp]
 8009b8c:	464b      	mov	r3, r9
 8009b8e:	aa03      	add	r2, sp, #12
 8009b90:	4621      	mov	r1, r4
 8009b92:	4640      	mov	r0, r8
 8009b94:	f7ff fee2 	bl	800995c <_printf_common>
 8009b98:	3001      	adds	r0, #1
 8009b9a:	d14c      	bne.n	8009c36 <_printf_i+0x1fe>
 8009b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba0:	b004      	add	sp, #16
 8009ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ba6:	4835      	ldr	r0, [pc, #212]	; (8009c7c <_printf_i+0x244>)
 8009ba8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009bac:	6823      	ldr	r3, [r4, #0]
 8009bae:	680e      	ldr	r6, [r1, #0]
 8009bb0:	061f      	lsls	r7, r3, #24
 8009bb2:	f856 5b04 	ldr.w	r5, [r6], #4
 8009bb6:	600e      	str	r6, [r1, #0]
 8009bb8:	d514      	bpl.n	8009be4 <_printf_i+0x1ac>
 8009bba:	07d9      	lsls	r1, r3, #31
 8009bbc:	bf44      	itt	mi
 8009bbe:	f043 0320 	orrmi.w	r3, r3, #32
 8009bc2:	6023      	strmi	r3, [r4, #0]
 8009bc4:	b91d      	cbnz	r5, 8009bce <_printf_i+0x196>
 8009bc6:	6823      	ldr	r3, [r4, #0]
 8009bc8:	f023 0320 	bic.w	r3, r3, #32
 8009bcc:	6023      	str	r3, [r4, #0]
 8009bce:	2310      	movs	r3, #16
 8009bd0:	e7b0      	b.n	8009b34 <_printf_i+0xfc>
 8009bd2:	6823      	ldr	r3, [r4, #0]
 8009bd4:	f043 0320 	orr.w	r3, r3, #32
 8009bd8:	6023      	str	r3, [r4, #0]
 8009bda:	2378      	movs	r3, #120	; 0x78
 8009bdc:	4828      	ldr	r0, [pc, #160]	; (8009c80 <_printf_i+0x248>)
 8009bde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009be2:	e7e3      	b.n	8009bac <_printf_i+0x174>
 8009be4:	065e      	lsls	r6, r3, #25
 8009be6:	bf48      	it	mi
 8009be8:	b2ad      	uxthmi	r5, r5
 8009bea:	e7e6      	b.n	8009bba <_printf_i+0x182>
 8009bec:	4616      	mov	r6, r2
 8009bee:	e7bb      	b.n	8009b68 <_printf_i+0x130>
 8009bf0:	680b      	ldr	r3, [r1, #0]
 8009bf2:	6826      	ldr	r6, [r4, #0]
 8009bf4:	6960      	ldr	r0, [r4, #20]
 8009bf6:	1d1d      	adds	r5, r3, #4
 8009bf8:	600d      	str	r5, [r1, #0]
 8009bfa:	0635      	lsls	r5, r6, #24
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	d501      	bpl.n	8009c04 <_printf_i+0x1cc>
 8009c00:	6018      	str	r0, [r3, #0]
 8009c02:	e002      	b.n	8009c0a <_printf_i+0x1d2>
 8009c04:	0671      	lsls	r1, r6, #25
 8009c06:	d5fb      	bpl.n	8009c00 <_printf_i+0x1c8>
 8009c08:	8018      	strh	r0, [r3, #0]
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	6123      	str	r3, [r4, #16]
 8009c0e:	4616      	mov	r6, r2
 8009c10:	e7ba      	b.n	8009b88 <_printf_i+0x150>
 8009c12:	680b      	ldr	r3, [r1, #0]
 8009c14:	1d1a      	adds	r2, r3, #4
 8009c16:	600a      	str	r2, [r1, #0]
 8009c18:	681e      	ldr	r6, [r3, #0]
 8009c1a:	6862      	ldr	r2, [r4, #4]
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	4630      	mov	r0, r6
 8009c20:	f7f6 fade 	bl	80001e0 <memchr>
 8009c24:	b108      	cbz	r0, 8009c2a <_printf_i+0x1f2>
 8009c26:	1b80      	subs	r0, r0, r6
 8009c28:	6060      	str	r0, [r4, #4]
 8009c2a:	6863      	ldr	r3, [r4, #4]
 8009c2c:	6123      	str	r3, [r4, #16]
 8009c2e:	2300      	movs	r3, #0
 8009c30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c34:	e7a8      	b.n	8009b88 <_printf_i+0x150>
 8009c36:	6923      	ldr	r3, [r4, #16]
 8009c38:	4632      	mov	r2, r6
 8009c3a:	4649      	mov	r1, r9
 8009c3c:	4640      	mov	r0, r8
 8009c3e:	47d0      	blx	sl
 8009c40:	3001      	adds	r0, #1
 8009c42:	d0ab      	beq.n	8009b9c <_printf_i+0x164>
 8009c44:	6823      	ldr	r3, [r4, #0]
 8009c46:	079b      	lsls	r3, r3, #30
 8009c48:	d413      	bmi.n	8009c72 <_printf_i+0x23a>
 8009c4a:	68e0      	ldr	r0, [r4, #12]
 8009c4c:	9b03      	ldr	r3, [sp, #12]
 8009c4e:	4298      	cmp	r0, r3
 8009c50:	bfb8      	it	lt
 8009c52:	4618      	movlt	r0, r3
 8009c54:	e7a4      	b.n	8009ba0 <_printf_i+0x168>
 8009c56:	2301      	movs	r3, #1
 8009c58:	4632      	mov	r2, r6
 8009c5a:	4649      	mov	r1, r9
 8009c5c:	4640      	mov	r0, r8
 8009c5e:	47d0      	blx	sl
 8009c60:	3001      	adds	r0, #1
 8009c62:	d09b      	beq.n	8009b9c <_printf_i+0x164>
 8009c64:	3501      	adds	r5, #1
 8009c66:	68e3      	ldr	r3, [r4, #12]
 8009c68:	9903      	ldr	r1, [sp, #12]
 8009c6a:	1a5b      	subs	r3, r3, r1
 8009c6c:	42ab      	cmp	r3, r5
 8009c6e:	dcf2      	bgt.n	8009c56 <_printf_i+0x21e>
 8009c70:	e7eb      	b.n	8009c4a <_printf_i+0x212>
 8009c72:	2500      	movs	r5, #0
 8009c74:	f104 0619 	add.w	r6, r4, #25
 8009c78:	e7f5      	b.n	8009c66 <_printf_i+0x22e>
 8009c7a:	bf00      	nop
 8009c7c:	08009ef5 	.word	0x08009ef5
 8009c80:	08009f06 	.word	0x08009f06

08009c84 <__retarget_lock_acquire_recursive>:
 8009c84:	4770      	bx	lr

08009c86 <__retarget_lock_release_recursive>:
 8009c86:	4770      	bx	lr

08009c88 <memcpy>:
 8009c88:	440a      	add	r2, r1
 8009c8a:	4291      	cmp	r1, r2
 8009c8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c90:	d100      	bne.n	8009c94 <memcpy+0xc>
 8009c92:	4770      	bx	lr
 8009c94:	b510      	push	{r4, lr}
 8009c96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c9e:	4291      	cmp	r1, r2
 8009ca0:	d1f9      	bne.n	8009c96 <memcpy+0xe>
 8009ca2:	bd10      	pop	{r4, pc}

08009ca4 <memmove>:
 8009ca4:	4288      	cmp	r0, r1
 8009ca6:	b510      	push	{r4, lr}
 8009ca8:	eb01 0402 	add.w	r4, r1, r2
 8009cac:	d902      	bls.n	8009cb4 <memmove+0x10>
 8009cae:	4284      	cmp	r4, r0
 8009cb0:	4623      	mov	r3, r4
 8009cb2:	d807      	bhi.n	8009cc4 <memmove+0x20>
 8009cb4:	1e43      	subs	r3, r0, #1
 8009cb6:	42a1      	cmp	r1, r4
 8009cb8:	d008      	beq.n	8009ccc <memmove+0x28>
 8009cba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009cc2:	e7f8      	b.n	8009cb6 <memmove+0x12>
 8009cc4:	4402      	add	r2, r0
 8009cc6:	4601      	mov	r1, r0
 8009cc8:	428a      	cmp	r2, r1
 8009cca:	d100      	bne.n	8009cce <memmove+0x2a>
 8009ccc:	bd10      	pop	{r4, pc}
 8009cce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009cd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009cd6:	e7f7      	b.n	8009cc8 <memmove+0x24>

08009cd8 <_realloc_r>:
 8009cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cda:	4607      	mov	r7, r0
 8009cdc:	4614      	mov	r4, r2
 8009cde:	460e      	mov	r6, r1
 8009ce0:	b921      	cbnz	r1, 8009cec <_realloc_r+0x14>
 8009ce2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009ce6:	4611      	mov	r1, r2
 8009ce8:	f7ff bc2e 	b.w	8009548 <_malloc_r>
 8009cec:	b922      	cbnz	r2, 8009cf8 <_realloc_r+0x20>
 8009cee:	f7ff fbdb 	bl	80094a8 <_free_r>
 8009cf2:	4625      	mov	r5, r4
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cf8:	f000 f814 	bl	8009d24 <_malloc_usable_size_r>
 8009cfc:	42a0      	cmp	r0, r4
 8009cfe:	d20f      	bcs.n	8009d20 <_realloc_r+0x48>
 8009d00:	4621      	mov	r1, r4
 8009d02:	4638      	mov	r0, r7
 8009d04:	f7ff fc20 	bl	8009548 <_malloc_r>
 8009d08:	4605      	mov	r5, r0
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	d0f2      	beq.n	8009cf4 <_realloc_r+0x1c>
 8009d0e:	4631      	mov	r1, r6
 8009d10:	4622      	mov	r2, r4
 8009d12:	f7ff ffb9 	bl	8009c88 <memcpy>
 8009d16:	4631      	mov	r1, r6
 8009d18:	4638      	mov	r0, r7
 8009d1a:	f7ff fbc5 	bl	80094a8 <_free_r>
 8009d1e:	e7e9      	b.n	8009cf4 <_realloc_r+0x1c>
 8009d20:	4635      	mov	r5, r6
 8009d22:	e7e7      	b.n	8009cf4 <_realloc_r+0x1c>

08009d24 <_malloc_usable_size_r>:
 8009d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d28:	1f18      	subs	r0, r3, #4
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	bfbc      	itt	lt
 8009d2e:	580b      	ldrlt	r3, [r1, r0]
 8009d30:	18c0      	addlt	r0, r0, r3
 8009d32:	4770      	bx	lr

08009d34 <_init>:
 8009d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d36:	bf00      	nop
 8009d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d3a:	bc08      	pop	{r3}
 8009d3c:	469e      	mov	lr, r3
 8009d3e:	4770      	bx	lr

08009d40 <_fini>:
 8009d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d42:	bf00      	nop
 8009d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d46:	bc08      	pop	{r3}
 8009d48:	469e      	mov	lr, r3
 8009d4a:	4770      	bx	lr
