
RhapsodyStopwatch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e90  0800d230  0800d230  0001d230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080100c0  080100c0  000300a8  2**0
                  CONTENTS
  4 .ARM          00000008  080100c0  080100c0  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080100c8  080100c8  000300a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080100c8  080100c8  000200c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080100cc  080100cc  000200cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080100d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001684  200000a8  08010178  000300a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000172c  08010178  0003172c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000302ac  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006cc2  00000000  00000000  00060384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dc8  00000000  00000000  00067048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a68  00000000  00000000  00068e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002814e  00000000  00000000  0006a878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025d0a  00000000  00000000  000929c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da122  00000000  00000000  000b86d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000009c  00000000  00000000  001927f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000985c  00000000  00000000  00192890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d218 	.word	0x0800d218

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800d218 	.word	0x0800d218

080001d0 <RiCEvent_Init>:
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2200      	movs	r2, #0
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2200      	movs	r2, #0
 80001e8:	811a      	strh	r2, [r3, #8]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	2201      	movs	r2, #1
 80001ee:	729a      	strb	r2, [r3, #10]
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr

080001fc <RiCEvent_Cleanup>:
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2b00      	cmp	r3, #0
 8000208:	d105      	bne.n	8000216 <RiCEvent_Cleanup+0x1a>
 800020a:	4b06      	ldr	r3, [pc, #24]	; (8000224 <RiCEvent_Cleanup+0x28>)
 800020c:	4a06      	ldr	r2, [pc, #24]	; (8000228 <RiCEvent_Cleanup+0x2c>)
 800020e:	2127      	movs	r1, #39	; 0x27
 8000210:	4806      	ldr	r0, [pc, #24]	; (800022c <RiCEvent_Cleanup+0x30>)
 8000212:	f00b fd47 	bl	800bca4 <__assert_func>
 8000216:	6878      	ldr	r0, [r7, #4]
 8000218:	f000 f80a 	bl	8000230 <RiCEvent_cleanup>
 800021c:	bf00      	nop
 800021e:	3708      	adds	r7, #8
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	0800d264 	.word	0x0800d264
 8000228:	0800d27c 	.word	0x0800d27c
 800022c:	0800d270 	.word	0x0800d270

08000230 <RiCEvent_cleanup>:
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d105      	bne.n	800024a <RiCEvent_cleanup+0x1a>
 800023e:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <RiCEvent_cleanup+0x38>)
 8000240:	4a0a      	ldr	r2, [pc, #40]	; (800026c <RiCEvent_cleanup+0x3c>)
 8000242:	212f      	movs	r1, #47	; 0x2f
 8000244:	480a      	ldr	r0, [pc, #40]	; (8000270 <RiCEvent_cleanup+0x40>)
 8000246:	f00b fd2d 	bl	800bca4 <__assert_func>
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000250:	811a      	strh	r2, [r3, #8]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2200      	movs	r2, #0
 800025c:	605a      	str	r2, [r3, #4]
 800025e:	bf00      	nop
 8000260:	3708      	adds	r7, #8
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	0800d264 	.word	0x0800d264
 800026c:	0800d290 	.word	0x0800d290
 8000270:	0800d270 	.word	0x0800d270

08000274 <RiCEvent_destroy>:
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d105      	bne.n	800028e <RiCEvent_destroy+0x1a>
 8000282:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <RiCEvent_destroy+0x48>)
 8000284:	4a0e      	ldr	r2, [pc, #56]	; (80002c0 <RiCEvent_destroy+0x4c>)
 8000286:	2139      	movs	r1, #57	; 0x39
 8000288:	480e      	ldr	r0, [pc, #56]	; (80002c4 <RiCEvent_destroy+0x50>)
 800028a:	f00b fd0b 	bl	800bca4 <__assert_func>
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d00f      	beq.n	80002b4 <RiCEvent_destroy+0x40>
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	685b      	ldr	r3, [r3, #4]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d106      	bne.n	80002aa <RiCEvent_destroy+0x36>
 800029c:	6878      	ldr	r0, [r7, #4]
 800029e:	f7ff ffc7 	bl	8000230 <RiCEvent_cleanup>
 80002a2:	6878      	ldr	r0, [r7, #4]
 80002a4:	f00b fd60 	bl	800bd68 <free>
 80002a8:	e005      	b.n	80002b6 <RiCEvent_destroy+0x42>
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	6878      	ldr	r0, [r7, #4]
 80002b0:	4798      	blx	r3
 80002b2:	e000      	b.n	80002b6 <RiCEvent_destroy+0x42>
 80002b4:	bf00      	nop
 80002b6:	3708      	adds	r7, #8
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	0800d264 	.word	0x0800d264
 80002c0:	0800d2a4 	.word	0x0800d2a4
 80002c4:	0800d270 	.word	0x0800d270

080002c8 <RiCEvent_getDestination>:
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d105      	bne.n	80002e2 <RiCEvent_getDestination+0x1a>
 80002d6:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <RiCEvent_getDestination+0x30>)
 80002d8:	4a08      	ldr	r2, [pc, #32]	; (80002fc <RiCEvent_getDestination+0x34>)
 80002da:	214d      	movs	r1, #77	; 0x4d
 80002dc:	4808      	ldr	r0, [pc, #32]	; (8000300 <RiCEvent_getDestination+0x38>)
 80002de:	f00b fce1 	bl	800bca4 <__assert_func>
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d101      	bne.n	80002ec <RiCEvent_getDestination+0x24>
 80002e8:	2300      	movs	r3, #0
 80002ea:	e001      	b.n	80002f0 <RiCEvent_getDestination+0x28>
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4618      	mov	r0, r3
 80002f2:	3708      	adds	r7, #8
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	0800d264 	.word	0x0800d264
 80002fc:	0800d2b8 	.word	0x0800d2b8
 8000300:	0800d270 	.word	0x0800d270

08000304 <RiCEvent_getlId>:
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d105      	bne.n	800031e <RiCEvent_getlId+0x1a>
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <RiCEvent_getlId+0x34>)
 8000314:	4a09      	ldr	r2, [pc, #36]	; (800033c <RiCEvent_getlId+0x38>)
 8000316:	2159      	movs	r1, #89	; 0x59
 8000318:	4809      	ldr	r0, [pc, #36]	; (8000340 <RiCEvent_getlId+0x3c>)
 800031a:	f00b fcc3 	bl	800bca4 <__assert_func>
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d102      	bne.n	800032a <RiCEvent_getlId+0x26>
 8000324:	f06f 0302 	mvn.w	r3, #2
 8000328:	e002      	b.n	8000330 <RiCEvent_getlId+0x2c>
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000330:	4618      	mov	r0, r3
 8000332:	3708      	adds	r7, #8
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	0800d264 	.word	0x0800d264
 800033c:	0800d2d0 	.word	0x0800d2d0
 8000340:	0800d270 	.word	0x0800d270

08000344 <RiCEvent_init>:
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	60f8      	str	r0, [r7, #12]
 800034c:	460b      	mov	r3, r1
 800034e:	607a      	str	r2, [r7, #4]
 8000350:	817b      	strh	r3, [r7, #10]
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d105      	bne.n	8000364 <RiCEvent_init+0x20>
 8000358:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <RiCEvent_init+0x40>)
 800035a:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <RiCEvent_init+0x44>)
 800035c:	2165      	movs	r1, #101	; 0x65
 800035e:	480b      	ldr	r0, [pc, #44]	; (800038c <RiCEvent_init+0x48>)
 8000360:	f00b fca0 	bl	800bca4 <__assert_func>
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d008      	beq.n	800037c <RiCEvent_init+0x38>
 800036a:	68f8      	ldr	r0, [r7, #12]
 800036c:	f7ff ff30 	bl	80001d0 <RiCEvent_Init>
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	897a      	ldrh	r2, [r7, #10]
 8000374:	811a      	strh	r2, [r3, #8]
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	bf00      	nop
 800037e:	3710      	adds	r7, #16
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	0800d264 	.word	0x0800d264
 8000388:	0800d2e0 	.word	0x0800d2e0
 800038c:	0800d270 	.word	0x0800d270

08000390 <RiCEvent_isDeleteAfterConsume>:
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d105      	bne.n	80003aa <RiCEvent_isDeleteAfterConsume+0x1a>
 800039e:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <RiCEvent_isDeleteAfterConsume+0x28>)
 80003a0:	4a06      	ldr	r2, [pc, #24]	; (80003bc <RiCEvent_isDeleteAfterConsume+0x2c>)
 80003a2:	2171      	movs	r1, #113	; 0x71
 80003a4:	4806      	ldr	r0, [pc, #24]	; (80003c0 <RiCEvent_isDeleteAfterConsume+0x30>)
 80003a6:	f00b fc7d 	bl	800bca4 <__assert_func>
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	7a9b      	ldrb	r3, [r3, #10]
 80003ae:	4618      	mov	r0, r3
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	0800d264 	.word	0x0800d264
 80003bc:	0800d2f0 	.word	0x0800d2f0
 80003c0:	0800d270 	.word	0x0800d270

080003c4 <RiCEvent_isTimeout>:
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d105      	bne.n	80003de <RiCEvent_isTimeout+0x1a>
 80003d2:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <RiCEvent_isTimeout+0x4c>)
 80003d4:	4a0f      	ldr	r2, [pc, #60]	; (8000414 <RiCEvent_isTimeout+0x50>)
 80003d6:	2179      	movs	r1, #121	; 0x79
 80003d8:	480f      	ldr	r0, [pc, #60]	; (8000418 <RiCEvent_isTimeout+0x54>)
 80003da:	f00b fc63 	bl	800bca4 <__assert_func>
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d101      	bne.n	80003e8 <RiCEvent_isTimeout+0x24>
 80003e4:	2300      	movs	r3, #0
 80003e6:	e00e      	b.n	8000406 <RiCEvent_isTimeout+0x42>
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80003ee:	f113 0f02 	cmn.w	r3, #2
 80003f2:	d005      	beq.n	8000400 <RiCEvent_isTimeout+0x3c>
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80003fa:	f113 0f06 	cmn.w	r3, #6
 80003fe:	d101      	bne.n	8000404 <RiCEvent_isTimeout+0x40>
 8000400:	2301      	movs	r3, #1
 8000402:	e000      	b.n	8000406 <RiCEvent_isTimeout+0x42>
 8000404:	2300      	movs	r3, #0
 8000406:	4618      	mov	r0, r3
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	0800d264 	.word	0x0800d264
 8000414:	0800d310 	.word	0x0800d310
 8000418:	0800d270 	.word	0x0800d270

0800041c <RiCEvent_setDestination>:
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	683a      	ldr	r2, [r7, #0]
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	bf00      	nop
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr

08000438 <RiCEvent_setLId>:
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	460b      	mov	r3, r1
 8000442:	807b      	strh	r3, [r7, #2]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	887a      	ldrh	r2, [r7, #2]
 8000448:	811a      	strh	r2, [r3, #8]
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr

08000456 <RiCEvent_setDeleteAfterConsume>:
 8000456:	b480      	push	{r7}
 8000458:	b083      	sub	sp, #12
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
 800045e:	460b      	mov	r3, r1
 8000460:	70fb      	strb	r3, [r7, #3]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	78fa      	ldrb	r2, [r7, #3]
 8000466:	729a      	strb	r2, [r3, #10]
 8000468:	bf00      	nop
 800046a:	370c      	adds	r7, #12
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr

08000474 <RiCReactive_Init>:
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	60b9      	str	r1, [r7, #8]
 800047e:	607a      	str	r2, [r7, #4]
 8000480:	603b      	str	r3, [r7, #0]
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	2200      	movs	r2, #0
 8000486:	619a      	str	r2, [r3, #24]
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d018      	beq.n	80004c0 <RiCReactive_Init+0x4c>
 800048e:	68f9      	ldr	r1, [r7, #12]
 8000490:	480d      	ldr	r0, [pc, #52]	; (80004c8 <RiCReactive_Init+0x54>)
 8000492:	f000 fcb3 	bl	8000dfc <RiCStartBehaviorEvent_init>
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	68ba      	ldr	r2, [r7, #8]
 800049a:	60da      	str	r2, [r3, #12]
 800049c:	2200      	movs	r2, #0
 800049e:	6879      	ldr	r1, [r7, #4]
 80004a0:	68f8      	ldr	r0, [r7, #12]
 80004a2:	f000 f90b 	bl	80006bc <RiCReactive_setTask>
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	683a      	ldr	r2, [r7, #0]
 80004aa:	615a      	str	r2, [r3, #20]
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	2200      	movs	r2, #0
 80004bc:	741a      	strb	r2, [r3, #16]
 80004be:	e000      	b.n	80004c2 <RiCReactive_Init+0x4e>
 80004c0:	bf00      	nop
 80004c2:	3710      	adds	r7, #16
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	200000c4 	.word	0x200000c4

080004cc <RiCReactive_cleanup>:
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d105      	bne.n	80004e6 <RiCReactive_cleanup+0x1a>
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <RiCReactive_cleanup+0x40>)
 80004dc:	4a0c      	ldr	r2, [pc, #48]	; (8000510 <RiCReactive_cleanup+0x44>)
 80004de:	2177      	movs	r1, #119	; 0x77
 80004e0:	480c      	ldr	r0, [pc, #48]	; (8000514 <RiCReactive_cleanup+0x48>)
 80004e2:	f00b fbdf 	bl	800bca4 <__assert_func>
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d00b      	beq.n	8000504 <RiCReactive_cleanup+0x38>
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	f043 0210 	orr.w	r2, r3, #16
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	6879      	ldr	r1, [r7, #4]
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 fcdf 	bl	8000ec2 <RiCTask_cancelEvents>
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	0800d324 	.word	0x0800d324
 8000510:	0800d340 	.word	0x0800d340
 8000514:	0800d330 	.word	0x0800d330

08000518 <RiCReactive_destroy>:
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d005      	beq.n	8000532 <RiCReactive_destroy+0x1a>
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f7ff ffd0 	bl	80004cc <RiCReactive_cleanup>
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f00b fc1b 	bl	800bd68 <free>
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <RiCReactive_gen>:
 800053a:	b580      	push	{r7, lr}
 800053c:	b082      	sub	sp, #8
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
 8000542:	6039      	str	r1, [r7, #0]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d105      	bne.n	8000556 <RiCReactive_gen+0x1c>
 800054a:	4b11      	ldr	r3, [pc, #68]	; (8000590 <RiCReactive_gen+0x56>)
 800054c:	4a11      	ldr	r2, [pc, #68]	; (8000594 <RiCReactive_gen+0x5a>)
 800054e:	218d      	movs	r1, #141	; 0x8d
 8000550:	4811      	ldr	r0, [pc, #68]	; (8000598 <RiCReactive_gen+0x5e>)
 8000552:	f00b fba7 	bl	800bca4 <__assert_func>
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d101      	bne.n	8000560 <RiCReactive_gen+0x26>
 800055c:	2300      	movs	r3, #0
 800055e:	e012      	b.n	8000586 <RiCReactive_gen+0x4c>
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f000 fa72 	bl	8000a4a <isInCleanup>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <RiCReactive_gen+0x36>
 800056c:	2300      	movs	r3, #0
 800056e:	e00a      	b.n	8000586 <RiCReactive_gen+0x4c>
 8000570:	6879      	ldr	r1, [r7, #4]
 8000572:	6838      	ldr	r0, [r7, #0]
 8000574:	f7ff ff52 	bl	800041c <RiCEvent_setDestination>
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	6839      	ldr	r1, [r7, #0]
 800057e:	4618      	mov	r0, r3
 8000580:	f000 fccd 	bl	8000f1e <RiCTask_queueEvent>
 8000584:	2301      	movs	r3, #1
 8000586:	4618      	mov	r0, r3
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	0800d324 	.word	0x0800d324
 8000594:	0800d354 	.word	0x0800d354
 8000598:	0800d330 	.word	0x0800d330

0800059c <RiCReactive_init>:
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
 80005a8:	603b      	str	r3, [r7, #0]
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	68b9      	ldr	r1, [r7, #8]
 80005b0:	68f8      	ldr	r0, [r7, #12]
 80005b2:	f7ff ff5f 	bl	8000474 <RiCReactive_Init>
 80005b6:	bf00      	nop
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <RiCReactive_popNullConfig>:
 80005be:	b580      	push	{r7, lr}
 80005c0:	b082      	sub	sp, #8
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d105      	bne.n	80005d8 <RiCReactive_popNullConfig+0x1a>
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <RiCReactive_popNullConfig+0x32>)
 80005ce:	4a09      	ldr	r2, [pc, #36]	; (80005f4 <RiCReactive_popNullConfig+0x36>)
 80005d0:	21a8      	movs	r1, #168	; 0xa8
 80005d2:	4809      	ldr	r0, [pc, #36]	; (80005f8 <RiCReactive_popNullConfig+0x3a>)
 80005d4:	f00b fb66 	bl	800bca4 <__assert_func>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d004      	beq.n	80005e8 <RiCReactive_popNullConfig+0x2a>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	689b      	ldr	r3, [r3, #8]
 80005e2:	1e5a      	subs	r2, r3, #1
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	0800d324 	.word	0x0800d324
 80005f4:	0800d364 	.word	0x0800d364
 80005f8:	0800d330 	.word	0x0800d330

080005fc <RiCReactive_pushNullConfig>:
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d105      	bne.n	8000616 <RiCReactive_pushNullConfig+0x1a>
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <RiCReactive_pushNullConfig+0x34>)
 800060c:	4a09      	ldr	r2, [pc, #36]	; (8000634 <RiCReactive_pushNullConfig+0x38>)
 800060e:	21b3      	movs	r1, #179	; 0xb3
 8000610:	4809      	ldr	r0, [pc, #36]	; (8000638 <RiCReactive_pushNullConfig+0x3c>)
 8000612:	f00b fb47 	bl	800bca4 <__assert_func>
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d004      	beq.n	8000626 <RiCReactive_pushNullConfig+0x2a>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	1c5a      	adds	r2, r3, #1
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	0800d324 	.word	0x0800d324
 8000634:	0800d380 	.word	0x0800d380
 8000638:	0800d330 	.word	0x0800d330

0800063c <RiCReactive_setActive>:
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	460b      	mov	r3, r1
 8000646:	70fb      	strb	r3, [r7, #3]
 8000648:	78fb      	ldrb	r3, [r7, #3]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d102      	bne.n	8000654 <RiCReactive_setActive+0x18>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2b00      	cmp	r3, #0
 8000652:	e000      	b.n	8000656 <RiCReactive_setActive+0x1a>
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <RiCReactive_setShouldDelete>:
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	460b      	mov	r3, r1
 800066a:	70fb      	strb	r3, [r7, #3]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d105      	bne.n	800067e <RiCReactive_setShouldDelete+0x1e>
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <RiCReactive_setShouldDelete+0x50>)
 8000674:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <RiCReactive_setShouldDelete+0x54>)
 8000676:	21c6      	movs	r1, #198	; 0xc6
 8000678:	480f      	ldr	r0, [pc, #60]	; (80006b8 <RiCReactive_setShouldDelete+0x58>)
 800067a:	f00b fb13 	bl	800bca4 <__assert_func>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d010      	beq.n	80006a6 <RiCReactive_setShouldDelete+0x46>
 8000684:	78fb      	ldrb	r3, [r7, #3]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d006      	beq.n	8000698 <RiCReactive_setShouldDelete+0x38>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	689b      	ldr	r3, [r3, #8]
 800068e:	f043 0220 	orr.w	r2, r3, #32
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	e007      	b.n	80006a8 <RiCReactive_setShouldDelete+0x48>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	f023 0220 	bic.w	r2, r3, #32
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	e000      	b.n	80006a8 <RiCReactive_setShouldDelete+0x48>
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	0800d324 	.word	0x0800d324
 80006b4:	0800d39c 	.word	0x0800d39c
 80006b8:	0800d330 	.word	0x0800d330

080006bc <RiCReactive_setTask>:
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	4613      	mov	r3, r2
 80006c8:	71fb      	strb	r3, [r7, #7]
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d105      	bne.n	80006dc <RiCReactive_setTask+0x20>
 80006d0:	4b10      	ldr	r3, [pc, #64]	; (8000714 <RiCReactive_setTask+0x58>)
 80006d2:	4a11      	ldr	r2, [pc, #68]	; (8000718 <RiCReactive_setTask+0x5c>)
 80006d4:	21d2      	movs	r1, #210	; 0xd2
 80006d6:	4811      	ldr	r0, [pc, #68]	; (800071c <RiCReactive_setTask+0x60>)
 80006d8:	f00b fae4 	bl	800bca4 <__assert_func>
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d013      	beq.n	800070a <RiCReactive_setTask+0x4e>
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	68ba      	ldr	r2, [r7, #8]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d002      	beq.n	80006f2 <RiCReactive_setTask+0x36>
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	68ba      	ldr	r2, [r7, #8]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d104      	bne.n	8000704 <RiCReactive_setTask+0x48>
 80006fa:	f001 f8b8 	bl	800186e <RiCMainTask>
 80006fe:	4602      	mov	r2, r0
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	2b00      	cmp	r3, #0
 8000708:	e000      	b.n	800070c <RiCReactive_setTask+0x50>
 800070a:	bf00      	nop
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	0800d324 	.word	0x0800d324
 8000718:	0800d3b8 	.word	0x0800d3b8
 800071c:	0800d330 	.word	0x0800d330

08000720 <RiCReactive_startBehavior>:
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d105      	bne.n	800073a <RiCReactive_startBehavior+0x1a>
 800072e:	4b2e      	ldr	r3, [pc, #184]	; (80007e8 <RiCReactive_startBehavior+0xc8>)
 8000730:	4a2e      	ldr	r2, [pc, #184]	; (80007ec <RiCReactive_startBehavior+0xcc>)
 8000732:	21e9      	movs	r1, #233	; 0xe9
 8000734:	482e      	ldr	r0, [pc, #184]	; (80007f0 <RiCReactive_startBehavior+0xd0>)
 8000736:	f00b fab5 	bl	800bca4 <__assert_func>
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d003      	beq.n	8000748 <RiCReactive_startBehavior+0x28>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	695b      	ldr	r3, [r3, #20]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d101      	bne.n	800074c <RiCReactive_startBehavior+0x2c>
 8000748:	2300      	movs	r3, #0
 800074a:	e049      	b.n	80007e0 <RiCReactive_startBehavior+0xc0>
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f000 f95d 	bl	8000a0c <isBehaviorStarted>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d11d      	bne.n	8000794 <RiCReactive_startBehavior+0x74>
 8000758:	2101      	movs	r1, #1
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f000 f9d0 	bl	8000b00 <setBehaviorStarted>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	695b      	ldr	r3, [r3, #20]
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d006      	beq.n	8000778 <RiCReactive_startBehavior+0x58>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	68d2      	ldr	r2, [r2, #12]
 8000774:	4610      	mov	r0, r2
 8000776:	4798      	blx	r3
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f000 fa15 	bl	8000ba8 <shouldCompleteRun>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d007      	beq.n	8000794 <RiCReactive_startBehavior+0x74>
 8000784:	2101      	movs	r1, #1
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f000 f9d6 	bl	8000b38 <setCompleteStartBehavior>
 800078c:	4919      	ldr	r1, [pc, #100]	; (80007f4 <RiCReactive_startBehavior+0xd4>)
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f7ff fed3 	bl	800053a <RiCReactive_gen>
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 fa47 	bl	8000c28 <shouldTerminate>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d002      	beq.n	80007a6 <RiCReactive_startBehavior+0x86>
 80007a0:	2301      	movs	r3, #1
 80007a2:	73fb      	strb	r3, [r7, #15]
 80007a4:	e001      	b.n	80007aa <RiCReactive_startBehavior+0x8a>
 80007a6:	2300      	movs	r3, #0
 80007a8:	73fb      	strb	r3, [r7, #15]
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d011      	beq.n	80007d4 <RiCReactive_startBehavior+0xb4>
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f000 fa26 	bl	8000c02 <shouldDelete>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d00b      	beq.n	80007d4 <RiCReactive_startBehavior+0xb4>
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	695b      	ldr	r3, [r3, #20]
 80007c0:	689b      	ldr	r3, [r3, #8]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d006      	beq.n	80007d4 <RiCReactive_startBehavior+0xb4>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	689b      	ldr	r3, [r3, #8]
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	68d2      	ldr	r2, [r2, #12]
 80007d0:	4610      	mov	r0, r2
 80007d2:	4798      	blx	r3
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d101      	bne.n	80007de <RiCReactive_startBehavior+0xbe>
 80007da:	2301      	movs	r3, #1
 80007dc:	e000      	b.n	80007e0 <RiCReactive_startBehavior+0xc0>
 80007de:	2300      	movs	r3, #0
 80007e0:	4618      	mov	r0, r3
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	0800d324 	.word	0x0800d324
 80007ec:	0800d3cc 	.word	0x0800d3cc
 80007f0:	0800d330 	.word	0x0800d330
 80007f4:	200000c4 	.word	0x200000c4

080007f8 <RiCReactive_takeEvent>:
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d106      	bne.n	8000816 <RiCReactive_takeEvent+0x1e>
 8000808:	4b1c      	ldr	r3, [pc, #112]	; (800087c <RiCReactive_takeEvent+0x84>)
 800080a:	4a1d      	ldr	r2, [pc, #116]	; (8000880 <RiCReactive_takeEvent+0x88>)
 800080c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000810:	481c      	ldr	r0, [pc, #112]	; (8000884 <RiCReactive_takeEvent+0x8c>)
 8000812:	f00b fa47 	bl	800bca4 <__assert_func>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d101      	bne.n	8000820 <RiCReactive_takeEvent+0x28>
 800081c:	2305      	movs	r3, #5
 800081e:	e028      	b.n	8000872 <RiCReactive_takeEvent+0x7a>
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f000 f912 	bl	8000a4a <isInCleanup>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <RiCReactive_takeEvent+0x38>
 800082c:	2303      	movs	r3, #3
 800082e:	e020      	b.n	8000872 <RiCReactive_takeEvent+0x7a>
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f000 f9f9 	bl	8000c28 <shouldTerminate>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d007      	beq.n	800084c <RiCReactive_takeEvent+0x54>
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f000 f9e0 	bl	8000c02 <shouldDelete>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d101      	bne.n	800084c <RiCReactive_takeEvent+0x54>
 8000848:	2302      	movs	r3, #2
 800084a:	e012      	b.n	8000872 <RiCReactive_takeEvent+0x7a>
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	695b      	ldr	r3, [r3, #20]
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d003      	beq.n	8000860 <RiCReactive_takeEvent+0x68>
 8000858:	6839      	ldr	r1, [r7, #0]
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f000 f852 	bl	8000904 <consumeEvent>
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f000 f9e1 	bl	8000c28 <shouldTerminate>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <RiCReactive_takeEvent+0x78>
 800086c:	2304      	movs	r3, #4
 800086e:	e000      	b.n	8000872 <RiCReactive_takeEvent+0x7a>
 8000870:	2302      	movs	r3, #2
 8000872:	4618      	mov	r0, r3
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	0800d324 	.word	0x0800d324
 8000880:	0800d3e8 	.word	0x0800d3e8
 8000884:	0800d330 	.word	0x0800d330

08000888 <RiCReactive_takeTrigger>:
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d106      	bne.n	80008a6 <RiCReactive_takeTrigger+0x1e>
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <RiCReactive_takeTrigger+0x30>)
 800089a:	4a08      	ldr	r2, [pc, #32]	; (80008bc <RiCReactive_takeTrigger+0x34>)
 800089c:	f44f 719a 	mov.w	r1, #308	; 0x134
 80008a0:	4807      	ldr	r0, [pc, #28]	; (80008c0 <RiCReactive_takeTrigger+0x38>)
 80008a2:	f00b f9ff 	bl	800bca4 <__assert_func>
 80008a6:	6839      	ldr	r1, [r7, #0]
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff ffa5 	bl	80007f8 <RiCReactive_takeEvent>
 80008ae:	4603      	mov	r3, r0
 80008b0:	4618      	mov	r0, r3
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	0800d324 	.word	0x0800d324
 80008bc:	0800d400 	.word	0x0800d400
 80008c0:	0800d330 	.word	0x0800d330

080008c4 <RiCReactive_terminate>:
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d106      	bne.n	80008e0 <RiCReactive_terminate+0x1c>
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <RiCReactive_terminate+0x34>)
 80008d4:	4a09      	ldr	r2, [pc, #36]	; (80008fc <RiCReactive_terminate+0x38>)
 80008d6:	f44f 719e 	mov.w	r1, #316	; 0x13c
 80008da:	4809      	ldr	r0, [pc, #36]	; (8000900 <RiCReactive_terminate+0x3c>)
 80008dc:	f00b f9e2 	bl	800bca4 <__assert_func>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d003      	beq.n	80008ee <RiCReactive_terminate+0x2a>
 80008e6:	2101      	movs	r1, #1
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f000 f941 	bl	8000b70 <setShouldTerminate>
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	0800d324 	.word	0x0800d324
 80008fc:	0800d418 	.word	0x0800d418
 8000900:	0800d330 	.word	0x0800d330

08000904 <consumeEvent>:
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f000 f89b 	bl	8000a4a <isInCleanup>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d15e      	bne.n	80009d8 <consumeEvent+0xd4>
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d05d      	beq.n	80009dc <consumeEvent+0xd8>
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f000 f873 	bl	8000a0c <isBehaviorStarted>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d059      	beq.n	80009e0 <consumeEvent+0xdc>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	695b      	ldr	r3, [r3, #20]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d057      	beq.n	80009e4 <consumeEvent+0xe0>
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	695b      	ldr	r3, [r3, #20]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d052      	beq.n	80009e8 <consumeEvent+0xe4>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	683a      	ldr	r2, [r7, #0]
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f000 f94c 	bl	8000be6 <shouldCompleteStartBehavior>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d013      	beq.n	800097c <consumeEvent+0x78>
 8000954:	2100      	movs	r1, #0
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f000 f8ee 	bl	8000b38 <setCompleteStartBehavior>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2201      	movs	r2, #1
 8000960:	741a      	strb	r2, [r3, #16]
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f000 f884 	bl	8000a70 <runToCompletion>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d103      	bne.n	8000976 <consumeEvent+0x72>
 800096e:	2005      	movs	r0, #5
 8000970:	f001 fa12 	bl	8001d98 <RiCErrorManager_log>
 8000974:	e039      	b.n	80009ea <consumeEvent+0xe6>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2200      	movs	r2, #0
 800097a:	741a      	strb	r2, [r3, #16]
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000982:	f113 0f05 	cmn.w	r3, #5
 8000986:	d023      	beq.n	80009d0 <consumeEvent+0xcc>
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f000 f852 	bl	8000a32 <isBusy>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d11d      	bne.n	80009d0 <consumeEvent+0xcc>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2201      	movs	r2, #1
 8000998:	741a      	strb	r2, [r3, #16]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	68da      	ldr	r2, [r3, #12]
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	4610      	mov	r0, r2
 80009a8:	4798      	blx	r3
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f000 f8fc 	bl	8000ba8 <shouldCompleteRun>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d009      	beq.n	80009ca <consumeEvent+0xc6>
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f000 f85a 	bl	8000a70 <runToCompletion>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d103      	bne.n	80009ca <consumeEvent+0xc6>
 80009c2:	2005      	movs	r0, #5
 80009c4:	f001 f9e8 	bl	8001d98 <RiCErrorManager_log>
 80009c8:	e00f      	b.n	80009ea <consumeEvent+0xe6>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	741a      	strb	r2, [r3, #16]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	e008      	b.n	80009ea <consumeEvent+0xe6>
 80009d8:	bf00      	nop
 80009da:	e006      	b.n	80009ea <consumeEvent+0xe6>
 80009dc:	bf00      	nop
 80009de:	e004      	b.n	80009ea <consumeEvent+0xe6>
 80009e0:	bf00      	nop
 80009e2:	e002      	b.n	80009ea <consumeEvent+0xe6>
 80009e4:	bf00      	nop
 80009e6:	e000      	b.n	80009ea <consumeEvent+0xe6>
 80009e8:	bf00      	nop
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <inNullConfig>:
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	f003 0307 	and.w	r3, r3, #7
 8000a00:	4618      	mov	r0, r3
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <isBehaviorStarted>:
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <isBehaviorStarted+0x18>
 8000a20:	2301      	movs	r3, #1
 8000a22:	e000      	b.n	8000a26 <isBehaviorStarted+0x1a>
 8000a24:	2300      	movs	r3, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <isBusy>:
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	7c1b      	ldrb	r3, [r3, #16]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <isInCleanup>:
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	f003 0310 	and.w	r3, r3, #16
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <isInCleanup+0x18>
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e000      	b.n	8000a64 <isInCleanup+0x1a>
 8000a62:	2300      	movs	r3, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <runToCompletion>:
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	e025      	b.n	8000aca <runToCompletion+0x5a>
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	695b      	ldr	r3, [r3, #20]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <runToCompletion+0x28>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	617b      	str	r3, [r7, #20]
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	2b07      	cmp	r3, #7
 8000aa2:	dc19      	bgt.n	8000ad8 <runToCompletion+0x68>
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d101      	bne.n	8000aae <runToCompletion+0x3e>
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e024      	b.n	8000af8 <runToCompletion+0x88>
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff ffcb 	bl	8000a4a <isInCleanup>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d10f      	bne.n	8000ada <runToCompletion+0x6a>
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac0:	68f8      	ldr	r0, [r7, #12]
 8000ac2:	4798      	blx	r3
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d007      	beq.n	8000ada <runToCompletion+0x6a>
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff ff90 	bl	80009f0 <inNullConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d1d3      	bne.n	8000a7e <runToCompletion+0xe>
 8000ad6:	e000      	b.n	8000ada <runToCompletion+0x6a>
 8000ad8:	bf00      	nop
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	2b07      	cmp	r3, #7
 8000ade:	dd0a      	ble.n	8000af6 <runToCompletion+0x86>
 8000ae0:	2005      	movs	r0, #5
 8000ae2:	f001 f959 	bl	8001d98 <RiCErrorManager_log>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	f023 0207 	bic.w	r2, r3, #7
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	2300      	movs	r3, #0
 8000af4:	e000      	b.n	8000af8 <runToCompletion+0x88>
 8000af6:	2301      	movs	r3, #1
 8000af8:	4618      	mov	r0, r3
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <setBehaviorStarted>:
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	70fb      	strb	r3, [r7, #3]
 8000b0c:	78fb      	ldrb	r3, [r7, #3]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d006      	beq.n	8000b20 <setBehaviorStarted+0x20>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	e005      	b.n	8000b2c <setBehaviorStarted+0x2c>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <setCompleteStartBehavior>:
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	70fb      	strb	r3, [r7, #3]
 8000b44:	78fb      	ldrb	r3, [r7, #3]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d006      	beq.n	8000b58 <setCompleteStartBehavior+0x20>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	e005      	b.n	8000b64 <setCompleteStartBehavior+0x2c>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <setShouldTerminate>:
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	70fb      	strb	r3, [r7, #3]
 8000b7c:	78fb      	ldrb	r3, [r7, #3]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d006      	beq.n	8000b90 <setShouldTerminate+0x20>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	f043 0208 	orr.w	r2, r3, #8
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	e005      	b.n	8000b9c <setShouldTerminate+0x2c>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	f023 0208 	bic.w	r2, r3, #8
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <shouldCompleteRun>:
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d101      	bne.n	8000bba <shouldCompleteRun+0x12>
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e00f      	b.n	8000bda <shouldCompleteRun+0x32>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f023 0320 	bic.w	r3, r3, #32
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <shouldCompleteStartBehavior>:
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <shouldDelete>:
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	f003 0320 	and.w	r3, r3, #32
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <shouldDelete+0x18>
 8000c16:	2301      	movs	r3, #1
 8000c18:	e000      	b.n	8000c1c <shouldDelete+0x1a>
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <shouldTerminate>:
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	f003 0308 	and.w	r3, r3, #8
 8000c38:	4618      	mov	r0, r3
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <RiCTimeout_Init>:
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000c5e:	811a      	strh	r2, [r3, #8]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	815a      	strh	r2, [r3, #10]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <RiCTimeout_Cleanup>:
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f000 f890 	bl	8000dac <cleanUpRelations>
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <RiCTimeout_isExpired>:
 8000c94:	b590      	push	{r4, r7, lr}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	68dc      	ldr	r4, [r3, #12]
 8000ca0:	f000 fe1a 	bl	80018d8 <RiCGetSystemTick>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	1ae3      	subs	r3, r4, r3
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	bfd4      	ite	le
 8000cac:	2301      	movle	r3, #1
 8000cae:	2300      	movgt	r3, #0
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd90      	pop	{r4, r7, pc}

08000cba <RiCTimeout_getDestination>:
 8000cba:	b480      	push	{r7}
 8000cbc:	b083      	sub	sp, #12
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <RiCTimeout_setDestination>:
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
 8000cda:	6039      	str	r1, [r7, #0]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	683a      	ldr	r2, [r7, #0]
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <RiCTimeout_setLId>:
 8000cee:	b480      	push	{r7}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	807b      	strh	r3, [r7, #2]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	887a      	ldrh	r2, [r7, #2]
 8000cfe:	811a      	strh	r2, [r3, #8]
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <RiCTimeout_getTimeoutId>:
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <RiCTimeout_setTimeoutId>:
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
 8000d2e:	460b      	mov	r3, r1
 8000d30:	807b      	strh	r3, [r7, #2]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	887a      	ldrh	r2, [r7, #2]
 8000d36:	815a      	strh	r2, [r3, #10]
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <RiCTimeout_getDeliveryTicks>:
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	4618      	mov	r0, r3
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <RiCTimeout_setDeliveryTicks>:
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	683a      	ldr	r2, [r7, #0]
 8000d6a:	60da      	str	r2, [r3, #12]
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <RiCTimeout_getItsNextTimeout>:
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	691b      	ldr	r3, [r3, #16]
 8000d84:	4618      	mov	r0, r3
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <RiCTimeout_setItsNextTimeout>:
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	683a      	ldr	r2, [r7, #0]
 8000d9e:	611a      	str	r2, [r3, #16]
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <cleanUpRelations>:
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	691b      	ldr	r3, [r3, #16]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d002      	beq.n	8000dc2 <cleanUpRelations+0x16>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
	...

08000dd0 <RiCStartBehaviorEvent_Init>:
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <RiCStartBehaviorEvent_Cleanup>:
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <RiCStartBehaviorEvent_init>:
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d105      	bne.n	8000e18 <RiCStartBehaviorEvent_init+0x1c>
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <RiCStartBehaviorEvent_init+0x40>)
 8000e0e:	4a0c      	ldr	r2, [pc, #48]	; (8000e40 <RiCStartBehaviorEvent_init+0x44>)
 8000e10:	212f      	movs	r1, #47	; 0x2f
 8000e12:	480c      	ldr	r0, [pc, #48]	; (8000e44 <RiCStartBehaviorEvent_init+0x48>)
 8000e14:	f00a ff46 	bl	800bca4 <__assert_func>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d101      	bne.n	8000e22 <RiCStartBehaviorEvent_init+0x26>
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e007      	b.n	8000e32 <RiCStartBehaviorEvent_init+0x36>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8000e28:	811a      	strh	r2, [r3, #8]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	683a      	ldr	r2, [r7, #0]
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	2301      	movs	r3, #1
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	0800d430 	.word	0x0800d430
 8000e40:	0800d454 	.word	0x0800d454
 8000e44:	0800d43c 	.word	0x0800d43c

08000e48 <RiCStartBehaviorEvent_setDestination>:
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	683a      	ldr	r2, [r7, #0]
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <RiCStartBehaviorEvent_setLId>:
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	807b      	strh	r3, [r7, #2]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	887a      	ldrh	r2, [r7, #2]
 8000e74:	811a      	strh	r2, [r3, #8]
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <RiCTask_Init>:
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
 8000e90:	603b      	str	r3, [r7, #0]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2204      	movs	r2, #4
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e9e:	68f8      	ldr	r0, [r7, #12]
 8000ea0:	f000 f8b1 	bl	8001006 <initRelations>
 8000ea4:	bf00      	nop
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <RiCTask_Cleanup>:
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f000 f8b3 	bl	8001020 <cleanUpRelations>
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <RiCTask_cancelEvents>:
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	6039      	str	r1, [r7, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00b      	beq.n	8000eea <RiCTask_cancelEvents+0x28>
 8000ed2:	6838      	ldr	r0, [r7, #0]
 8000ed4:	f000 fe2a 	bl	8001b2c <RiCTmManager_cancelEvents>
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f000 f86e 	bl	8000fba <RiCTask_getItsRiCEvtQueue>
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	6839      	ldr	r1, [r7, #0]
 8000ee2:	68f8      	ldr	r0, [r7, #12]
 8000ee4:	f000 f8e1 	bl	80010aa <RiCEvtQueue_cancelEvents>
 8000ee8:	e000      	b.n	8000eec <RiCTask_cancelEvents+0x2a>
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <RiCTask_cleanup>:
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <RiCTask_getPriority>:
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <RiCTask_queueEvent>:
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b084      	sub	sp, #16
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	6039      	str	r1, [r7, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d008      	beq.n	8000f40 <RiCTask_queueEvent+0x22>
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f000 f843 	bl	8000fba <RiCTask_getItsRiCEvtQueue>
 8000f34:	60f8      	str	r0, [r7, #12]
 8000f36:	6839      	ldr	r1, [r7, #0]
 8000f38:	68f8      	ldr	r0, [r7, #12]
 8000f3a:	f000 f96b 	bl	8001214 <RiCEvtQueue_put>
 8000f3e:	e000      	b.n	8000f42 <RiCTask_queueEvent+0x24>
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <RiCTask_schedTm>:
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	4613      	mov	r3, r2
 8000f56:	80fb      	strh	r3, [r7, #6]
 8000f58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	4619      	mov	r1, r3
 8000f60:	68b8      	ldr	r0, [r7, #8]
 8000f62:	f000 ffed 	bl	8001f40 <theMainTask_schedTm>
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <RiCTask_setPriority>:
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	6039      	str	r1, [r7, #0]
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <RiCTask_start>:
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <RiCTask_unschedTm>:
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	607a      	str	r2, [r7, #4]
 8000fa4:	817b      	strh	r3, [r7, #10]
 8000fa6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f001 f861 	bl	8002074 <theMainTask_unschedTm>
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <RiCTask_getItsRiCEvtQueue>:
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <RiCTask_getNext>:
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fde:	4618      	mov	r0, r3
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <RiCTask_setNext>:
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
 8000ff2:	6039      	str	r1, [r7, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	683a      	ldr	r2, [r7, #0]
 8000ff8:	635a      	str	r2, [r3, #52]	; 0x34
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <initRelations>:
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3304      	adds	r3, #4
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f818 	bl	8001048 <RiCEvtQueue_Init>
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <cleanUpRelations>:
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3304      	adds	r3, #4
 800102c:	4618      	mov	r0, r3
 800102e:	f000 f831 	bl	8001094 <RiCEvtQueue_Cleanup>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001036:	2b00      	cmp	r3, #0
 8001038:	d002      	beq.n	8001040 <cleanUpRelations+0x20>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	635a      	str	r2, [r3, #52]	; 0x34
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <RiCEvtQueue_Init>:
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	e008      	b.n	8001080 <RiCEvtQueue_Init+0x38>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	3204      	adds	r2, #4
 8001074:	2100      	movs	r1, #0
 8001076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	3301      	adds	r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2b07      	cmp	r3, #7
 8001084:	ddf3      	ble.n	800106e <RiCEvtQueue_Init+0x26>
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <RiCEvtQueue_Cleanup>:
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 f98c 	bl	80013ba <cleanUpRelations>
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <RiCEvtQueue_cancelEvents>:
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	6039      	str	r1, [r7, #0]
 80010b4:	f107 0308 	add.w	r3, r7, #8
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 fbff 	bl	80018bc <RiCEnterCriticalRegion>
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 f886 	bl	80011d0 <RiCEvtQueue_isEmpty>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d13a      	bne.n	8001140 <RiCEvtQueue_cancelEvents+0x96>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	e02f      	b.n	8001136 <RiCEvtQueue_cancelEvents+0x8c>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	3204      	adds	r2, #4
 80010dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f7ff f8f0 	bl	80002c8 <RiCEvent_getDestination>
 80010e8:	4602      	mov	r2, r0
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d11a      	bne.n	8001126 <RiCEvtQueue_cancelEvents+0x7c>
 80010f0:	2100      	movs	r1, #0
 80010f2:	68f8      	ldr	r0, [r7, #12]
 80010f4:	f7ff f992 	bl	800041c <RiCEvent_setDestination>
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f7ff f963 	bl	80003c4 <RiCEvent_isTimeout>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d005      	beq.n	8001110 <RiCEvtQueue_cancelEvents+0x66>
 8001104:	f06f 0105 	mvn.w	r1, #5
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f7ff f995 	bl	8000438 <RiCEvent_setLId>
 800110e:	e00a      	b.n	8001126 <RiCEvtQueue_cancelEvents+0x7c>
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f7ff f93d 	bl	8000390 <RiCEvent_isDeleteAfterConsume>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d004      	beq.n	8001126 <RiCEvtQueue_cancelEvents+0x7c>
 800111c:	f06f 0102 	mvn.w	r1, #2
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f7ff f989 	bl	8000438 <RiCEvent_setLId>
 8001126:	6979      	ldr	r1, [r7, #20]
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f000 f8c5 	bl	80012b8 <next>
 800112e:	6178      	str	r0, [r7, #20]
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	3301      	adds	r3, #1
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	429a      	cmp	r2, r3
 800113e:	dbca      	blt.n	80010d6 <RiCEvtQueue_cancelEvents+0x2c>
 8001140:	f107 0308 	add.w	r3, r7, #8
 8001144:	4618      	mov	r0, r3
 8001146:	f000 fbc0 	bl	80018ca <RiCExitCriticalRegion>
 800114a:	bf00      	nop
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <RiCEvtQueue_get>:
 8001152:	b580      	push	{r7, lr}
 8001154:	b084      	sub	sp, #16
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	4618      	mov	r0, r3
 8001160:	f000 fbac 	bl	80018bc <RiCEnterCriticalRegion>
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f000 f833 	bl	80011d0 <RiCEvtQueue_isEmpty>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d009      	beq.n	8001184 <RiCEvtQueue_get+0x32>
 8001170:	f107 0308 	add.w	r3, r7, #8
 8001174:	4618      	mov	r0, r3
 8001176:	f000 fba8 	bl	80018ca <RiCExitCriticalRegion>
 800117a:	2002      	movs	r0, #2
 800117c:	f000 fe0c 	bl	8001d98 <RiCErrorManager_log>
 8001180:	2300      	movs	r3, #0
 8001182:	e021      	b.n	80011c8 <RiCEvtQueue_get+0x76>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3204      	adds	r2, #4
 800118c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3204      	adds	r2, #4
 800119a:	2100      	movs	r1, #0
 800119c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	4619      	mov	r1, r3
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f000 f886 	bl	80012b8 <next>
 80011ac:	4602      	mov	r2, r0
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	1e5a      	subs	r2, r3, #1
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	f107 0308 	add.w	r3, r7, #8
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 fb82 	bl	80018ca <RiCExitCriticalRegion>
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4618      	mov	r0, r3
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <RiCEvtQueue_isEmpty>:
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d101      	bne.n	80011e4 <RiCEvtQueue_isEmpty+0x14>
 80011e0:	2301      	movs	r3, #1
 80011e2:	e000      	b.n	80011e6 <RiCEvtQueue_isEmpty+0x16>
 80011e4:	2300      	movs	r3, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <RiCEvtQueue_isFull>:
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2b08      	cmp	r3, #8
 8001200:	d101      	bne.n	8001206 <RiCEvtQueue_isFull+0x14>
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <RiCEvtQueue_isFull+0x16>
 8001206:	2300      	movs	r3, #0
 8001208:	4618      	mov	r0, r3
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <RiCEvtQueue_put>:
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	f107 030c 	add.w	r3, r7, #12
 8001222:	4618      	mov	r0, r3
 8001224:	f000 fb4a 	bl	80018bc <RiCEnterCriticalRegion>
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ffe2 	bl	80011f2 <RiCEvtQueue_isFull>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d008      	beq.n	8001246 <RiCEvtQueue_put+0x32>
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	4618      	mov	r0, r3
 800123a:	f000 fb46 	bl	80018ca <RiCExitCriticalRegion>
 800123e:	2001      	movs	r0, #1
 8001240:	f000 fdaa 	bl	8001d98 <RiCErrorManager_log>
 8001244:	e023      	b.n	800128e <RiCEvtQueue_put+0x7a>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68da      	ldr	r2, [r3, #12]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3204      	adds	r2, #4
 800124e:	6839      	ldr	r1, [r7, #0]
 8001250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	4619      	mov	r1, r3
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f000 f82c 	bl	80012b8 <next>
 8001260:	4602      	mov	r2, r0
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	1c5a      	adds	r2, r3, #1
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	429a      	cmp	r2, r3
 800127a:	dd03      	ble.n	8001284 <RiCEvtQueue_put+0x70>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	4618      	mov	r0, r3
 800128a:	f000 fb1e 	bl	80018ca <RiCExitCriticalRegion>
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <RiCEvtQueue_usage>:
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6899      	ldr	r1, [r3, #8]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4803      	ldr	r0, [pc, #12]	; (80012b4 <RiCEvtQueue_usage+0x20>)
 80012a8:	f00b f906 	bl	800c4b8 <iprintf>
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	0800d470 	.word	0x0800d470

080012b8 <next>:
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	425a      	negs	r2, r3
 80012c8:	f003 0307 	and.w	r3, r3, #7
 80012cc:	f002 0207 	and.w	r2, r2, #7
 80012d0:	bf58      	it	pl
 80012d2:	4253      	negpl	r3, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <RiCEvtQueue_getItsEvent>:
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4618      	mov	r0, r3
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <RiCEvtQueue_addItsEvent>:
 80012fa:	b480      	push	{r7}
 80012fc:	b085      	sub	sp, #20
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	6039      	str	r1, [r7, #0]
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	e010      	b.n	800132c <RiCEvtQueue_addItsEvent+0x32>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	3204      	adds	r2, #4
 8001310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d106      	bne.n	8001326 <RiCEvtQueue_addItsEvent+0x2c>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	3204      	adds	r2, #4
 800131e:	6839      	ldr	r1, [r7, #0]
 8001320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001324:	e006      	b.n	8001334 <RiCEvtQueue_addItsEvent+0x3a>
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	3301      	adds	r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2b07      	cmp	r3, #7
 8001330:	ddeb      	ble.n	800130a <RiCEvtQueue_addItsEvent+0x10>
 8001332:	bf00      	nop
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <RiCEvtQueue_removeItsEvent>:
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	e010      	b.n	8001372 <RiCEvtQueue_removeItsEvent+0x32>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	3204      	adds	r2, #4
 8001356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	d105      	bne.n	800136c <RiCEvtQueue_removeItsEvent+0x2c>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	3204      	adds	r2, #4
 8001366:	2100      	movs	r1, #0
 8001368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	3301      	adds	r3, #1
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2b07      	cmp	r3, #7
 8001376:	ddeb      	ble.n	8001350 <RiCEvtQueue_removeItsEvent+0x10>
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <RiCEvtQueue_clearItsEvent>:
 8001386:	b480      	push	{r7}
 8001388:	b085      	sub	sp, #20
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	e008      	b.n	80013a6 <RiCEvtQueue_clearItsEvent+0x20>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	3204      	adds	r2, #4
 800139a:	2100      	movs	r1, #0
 800139c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	3301      	adds	r3, #1
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2b07      	cmp	r3, #7
 80013aa:	ddf3      	ble.n	8001394 <RiCEvtQueue_clearItsEvent+0xe>
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <cleanUpRelations>:
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop

080013d0 <RiC_MemoryAllocationPkg_OMInitializer_Init>:
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	f000 f809 	bl	80013ea <RiC_MemoryAllocationPkg_initRelations>
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}

080013dc <RiC_MemoryAllocationPkg_OMInitializer_Cleanup>:
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <RiC_MemoryAllocationPkg_initRelations>:
 80013ea:	b580      	push	{r7, lr}
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	f000 f829 	bl	8001444 <RiCAllocator_Init>
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <RiC_MemoryAllocationPkg_initRelations+0x42>)
 80013f4:	2240      	movs	r2, #64	; 0x40
 80013f6:	2101      	movs	r1, #1
 80013f8:	480d      	ldr	r0, [pc, #52]	; (8001430 <RiC_MemoryAllocationPkg_initRelations+0x46>)
 80013fa:	f000 f92b 	bl	8001654 <RiCMemoryPool_Init>
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <RiC_MemoryAllocationPkg_initRelations+0x4a>)
 8001400:	2220      	movs	r2, #32
 8001402:	2106      	movs	r1, #6
 8001404:	480c      	ldr	r0, [pc, #48]	; (8001438 <RiC_MemoryAllocationPkg_initRelations+0x4e>)
 8001406:	f000 f925 	bl	8001654 <RiCMemoryPool_Init>
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <RiC_MemoryAllocationPkg_initRelations+0x52>)
 800140c:	2210      	movs	r2, #16
 800140e:	210c      	movs	r1, #12
 8001410:	480b      	ldr	r0, [pc, #44]	; (8001440 <RiC_MemoryAllocationPkg_initRelations+0x56>)
 8001412:	f000 f91f 	bl	8001654 <RiCMemoryPool_Init>
 8001416:	480a      	ldr	r0, [pc, #40]	; (8001440 <RiC_MemoryAllocationPkg_initRelations+0x56>)
 8001418:	f000 f8ee 	bl	80015f8 <RiCAllocator_setItsSmallPool>
 800141c:	4806      	ldr	r0, [pc, #24]	; (8001438 <RiC_MemoryAllocationPkg_initRelations+0x4e>)
 800141e:	f000 f8cf 	bl	80015c0 <RiCAllocator_setItsMediumPool>
 8001422:	4803      	ldr	r0, [pc, #12]	; (8001430 <RiC_MemoryAllocationPkg_initRelations+0x46>)
 8001424:	f000 f8b0 	bl	8001588 <RiCAllocator_setItsLargePool>
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	200000d0 	.word	0x200000d0
 8001430:	200007dc 	.word	0x200007dc
 8001434:	200001d0 	.word	0x200001d0
 8001438:	200007ec 	.word	0x200007ec
 800143c:	200004d0 	.word	0x200004d0
 8001440:	200007fc 	.word	0x200007fc

08001444 <RiCAllocator_Init>:
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <RiCAllocator_Init+0x20>)
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <RiCAllocator_Init+0x20>)
 8001450:	2200      	movs	r2, #0
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	4b03      	ldr	r3, [pc, #12]	; (8001464 <RiCAllocator_Init+0x20>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	200007d0 	.word	0x200007d0

08001468 <RiCAllocator_Cleanup>:
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
 800146c:	f000 f8d4 	bl	8001618 <cleanUpRelations>
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}

08001474 <RiCAllocator_getMemory>:
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b10      	cmp	r3, #16
 8001480:	d806      	bhi.n	8001490 <RiCAllocator_getMemory+0x1c>
 8001482:	4b12      	ldr	r3, [pc, #72]	; (80014cc <RiCAllocator_getMemory+0x58>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	4618      	mov	r0, r3
 8001488:	f000 f92a 	bl	80016e0 <RiCMemoryPool_getMemory>
 800148c:	4603      	mov	r3, r0
 800148e:	e019      	b.n	80014c4 <RiCAllocator_getMemory+0x50>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b20      	cmp	r3, #32
 8001494:	d806      	bhi.n	80014a4 <RiCAllocator_getMemory+0x30>
 8001496:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <RiCAllocator_getMemory+0x58>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f920 	bl	80016e0 <RiCMemoryPool_getMemory>
 80014a0:	4603      	mov	r3, r0
 80014a2:	e00f      	b.n	80014c4 <RiCAllocator_getMemory+0x50>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b40      	cmp	r3, #64	; 0x40
 80014a8:	d806      	bhi.n	80014b8 <RiCAllocator_getMemory+0x44>
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <RiCAllocator_getMemory+0x58>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 f916 	bl	80016e0 <RiCMemoryPool_getMemory>
 80014b4:	4603      	mov	r3, r0
 80014b6:	e005      	b.n	80014c4 <RiCAllocator_getMemory+0x50>
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <RiCAllocator_getMemory+0x5c>)
 80014ba:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <RiCAllocator_getMemory+0x60>)
 80014bc:	2167      	movs	r1, #103	; 0x67
 80014be:	4806      	ldr	r0, [pc, #24]	; (80014d8 <RiCAllocator_getMemory+0x64>)
 80014c0:	f00a fbf0 	bl	800bca4 <__assert_func>
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200007d0 	.word	0x200007d0
 80014d0:	0800d4a4 	.word	0x0800d4a4
 80014d4:	0800d53c 	.word	0x0800d53c
 80014d8:	0800d4ac 	.word	0x0800d4ac

080014dc <RiCAllocator_returnMemory>:
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	2b10      	cmp	r3, #16
 80014ea:	d806      	bhi.n	80014fa <RiCAllocator_returnMemory+0x1e>
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <RiCAllocator_returnMemory+0x58>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f93e 	bl	8001774 <RiCMemoryPool_returnMemory>
 80014f8:	e019      	b.n	800152e <RiCAllocator_returnMemory+0x52>
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	2b20      	cmp	r3, #32
 80014fe:	d806      	bhi.n	800150e <RiCAllocator_returnMemory+0x32>
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <RiCAllocator_returnMemory+0x58>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	4618      	mov	r0, r3
 8001508:	f000 f934 	bl	8001774 <RiCMemoryPool_returnMemory>
 800150c:	e00f      	b.n	800152e <RiCAllocator_returnMemory+0x52>
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	2b40      	cmp	r3, #64	; 0x40
 8001512:	d806      	bhi.n	8001522 <RiCAllocator_returnMemory+0x46>
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <RiCAllocator_returnMemory+0x58>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f92a 	bl	8001774 <RiCMemoryPool_returnMemory>
 8001520:	e005      	b.n	800152e <RiCAllocator_returnMemory+0x52>
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <RiCAllocator_returnMemory+0x5c>)
 8001524:	4a05      	ldr	r2, [pc, #20]	; (800153c <RiCAllocator_returnMemory+0x60>)
 8001526:	2179      	movs	r1, #121	; 0x79
 8001528:	4805      	ldr	r0, [pc, #20]	; (8001540 <RiCAllocator_returnMemory+0x64>)
 800152a:	f00a fbbb 	bl	800bca4 <__assert_func>
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	200007d0 	.word	0x200007d0
 8001538:	0800d4a4 	.word	0x0800d4a4
 800153c:	0800d554 	.word	0x0800d554
 8001540:	0800d4ac 	.word	0x0800d4ac

08001544 <RiCAllocator_usage>:
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
 8001548:	4b08      	ldr	r3, [pc, #32]	; (800156c <RiCAllocator_usage+0x28>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	4618      	mov	r0, r3
 800154e:	f000 f957 	bl	8001800 <RiCMemoryPool_usage>
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <RiCAllocator_usage+0x28>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f952 	bl	8001800 <RiCMemoryPool_usage>
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <RiCAllocator_usage+0x28>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f000 f94d 	bl	8001800 <RiCMemoryPool_usage>
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200007d0 	.word	0x200007d0

08001570 <RiCAllocator_getItsLargePool>:
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
 8001574:	4b03      	ldr	r3, [pc, #12]	; (8001584 <RiCAllocator_getItsLargePool+0x14>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	200007d0 	.word	0x200007d0

08001588 <RiCAllocator_setItsLargePool>:
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <RiCAllocator_setItsLargePool+0x1c>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	200007d0 	.word	0x200007d0

080015a8 <RiCAllocator_getItsMediumPool>:
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	4b03      	ldr	r3, [pc, #12]	; (80015bc <RiCAllocator_getItsMediumPool+0x14>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	200007d0 	.word	0x200007d0

080015c0 <RiCAllocator_setItsMediumPool>:
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	4a04      	ldr	r2, [pc, #16]	; (80015dc <RiCAllocator_setItsMediumPool+0x1c>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6053      	str	r3, [r2, #4]
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	200007d0 	.word	0x200007d0

080015e0 <RiCAllocator_getItsSmallPool>:
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	4b03      	ldr	r3, [pc, #12]	; (80015f4 <RiCAllocator_getItsSmallPool+0x14>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	4618      	mov	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	200007d0 	.word	0x200007d0

080015f8 <RiCAllocator_setItsSmallPool>:
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	4a04      	ldr	r2, [pc, #16]	; (8001614 <RiCAllocator_setItsSmallPool+0x1c>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6093      	str	r3, [r2, #8]
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	200007d0 	.word	0x200007d0

08001618 <cleanUpRelations>:
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <cleanUpRelations+0x38>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d002      	beq.n	800162a <cleanUpRelations+0x12>
 8001624:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <cleanUpRelations+0x38>)
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <cleanUpRelations+0x38>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d002      	beq.n	8001638 <cleanUpRelations+0x20>
 8001632:	4b07      	ldr	r3, [pc, #28]	; (8001650 <cleanUpRelations+0x38>)
 8001634:	2200      	movs	r2, #0
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <cleanUpRelations+0x38>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d002      	beq.n	8001646 <cleanUpRelations+0x2e>
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <cleanUpRelations+0x38>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	200007d0 	.word	0x200007d0

08001654 <RiCMemoryPool_Init>:
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	; 0x24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	603b      	str	r3, [r7, #0]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2200      	movs	r2, #0
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2200      	movs	r2, #0
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	61fb      	str	r3, [r7, #28]
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	e013      	b.n	80016b0 <RiCMemoryPool_Init+0x5c>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	69fa      	ldr	r2, [r7, #28]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	61bb      	str	r3, [r7, #24]
 8001698:	69fa      	ldr	r2, [r7, #28]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	61fb      	str	r3, [r7, #28]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	3301      	adds	r3, #1
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	dbe7      	blt.n	8001688 <RiCMemoryPool_Init+0x34>
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
 80016bc:	3724      	adds	r7, #36	; 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <RiCMemoryPool_Cleanup>:
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <RiCMemoryPool_getMemory>:
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d105      	bne.n	80016fa <RiCMemoryPool_getMemory+0x1a>
 80016ee:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <RiCMemoryPool_getMemory+0x84>)
 80016f0:	4a1d      	ldr	r2, [pc, #116]	; (8001768 <RiCMemoryPool_getMemory+0x88>)
 80016f2:	21ec      	movs	r1, #236	; 0xec
 80016f4:	481d      	ldr	r0, [pc, #116]	; (800176c <RiCMemoryPool_getMemory+0x8c>)
 80016f6:	f00a fad5 	bl	800bca4 <__assert_func>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	dd03      	ble.n	800170a <RiCMemoryPool_getMemory+0x2a>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b40      	cmp	r3, #64	; 0x40
 8001708:	dd05      	ble.n	8001716 <RiCMemoryPool_getMemory+0x36>
 800170a:	4b19      	ldr	r3, [pc, #100]	; (8001770 <RiCMemoryPool_getMemory+0x90>)
 800170c:	4a16      	ldr	r2, [pc, #88]	; (8001768 <RiCMemoryPool_getMemory+0x88>)
 800170e:	21ed      	movs	r1, #237	; 0xed
 8001710:	4816      	ldr	r0, [pc, #88]	; (800176c <RiCMemoryPool_getMemory+0x8c>)
 8001712:	f00a fac7 	bl	800bca4 <__assert_func>
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f88a 	bl	8001830 <isEmpty>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00f      	beq.n	8001742 <RiCMemoryPool_getMemory+0x62>
 8001722:	200a      	movs	r0, #10
 8001724:	f000 fb38 	bl	8001d98 <RiCErrorManager_log>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f00a fb13 	bl	800bd58 <malloc>
 8001732:	4603      	mov	r3, r0
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	e006      	b.n	8001750 <RiCMemoryPool_getMemory+0x70>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	1c5a      	adds	r2, r3, #1
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4618      	mov	r0, r3
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	0800d4b8 	.word	0x0800d4b8
 8001768:	0800d570 	.word	0x0800d570
 800176c:	0800d4ac 	.word	0x0800d4ac
 8001770:	0800d4c4 	.word	0x0800d4c4

08001774 <RiCMemoryPool_returnMemory>:
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d106      	bne.n	8001792 <RiCMemoryPool_returnMemory+0x1e>
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <RiCMemoryPool_returnMemory+0x7c>)
 8001786:	4a1b      	ldr	r2, [pc, #108]	; (80017f4 <RiCMemoryPool_returnMemory+0x80>)
 8001788:	f44f 7183 	mov.w	r1, #262	; 0x106
 800178c:	481a      	ldr	r0, [pc, #104]	; (80017f8 <RiCMemoryPool_returnMemory+0x84>)
 800178e:	f00a fa89 	bl	800bca4 <__assert_func>
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d106      	bne.n	80017a6 <RiCMemoryPool_returnMemory+0x32>
 8001798:	4b18      	ldr	r3, [pc, #96]	; (80017fc <RiCMemoryPool_returnMemory+0x88>)
 800179a:	4a16      	ldr	r2, [pc, #88]	; (80017f4 <RiCMemoryPool_returnMemory+0x80>)
 800179c:	f240 1107 	movw	r1, #263	; 0x107
 80017a0:	4815      	ldr	r0, [pc, #84]	; (80017f8 <RiCMemoryPool_returnMemory+0x84>)
 80017a2:	f00a fa7f 	bl	800bca4 <__assert_func>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d103      	bne.n	80017b6 <RiCMemoryPool_returnMemory+0x42>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	e012      	b.n	80017dc <RiCMemoryPool_returnMemory+0x68>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	e006      	b.n	80017cc <RiCMemoryPool_returnMemory+0x58>
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d006      	beq.n	80017d4 <RiCMemoryPool_returnMemory+0x60>
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f5      	bne.n	80017be <RiCMemoryPool_returnMemory+0x4a>
 80017d2:	e000      	b.n	80017d6 <RiCMemoryPool_returnMemory+0x62>
 80017d4:	bf00      	nop
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	bf00      	nop
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	0800d4b8 	.word	0x0800d4b8
 80017f4:	0800d588 	.word	0x0800d588
 80017f8:	0800d4ac 	.word	0x0800d4ac
 80017fc:	0800d500 	.word	0x0800d500

08001800 <RiCMemoryPool_usage>:
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d009      	beq.n	8001822 <RiCMemoryPool_usage+0x22>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6819      	ldr	r1, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68da      	ldr	r2, [r3, #12]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	4804      	ldr	r0, [pc, #16]	; (800182c <RiCMemoryPool_usage+0x2c>)
 800181c:	f00a fe4c 	bl	800c4b8 <iprintf>
 8001820:	e000      	b.n	8001824 <RiCMemoryPool_usage+0x24>
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	0800d510 	.word	0x0800d510

08001830 <isEmpty>:
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <isEmpty+0x14>
 8001840:	2301      	movs	r3, #1
 8001842:	e000      	b.n	8001846 <isEmpty+0x16>
 8001844:	2300      	movs	r3, #0
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop

08001854 <RiC_RPkg_OMInitializer_Init>:
struct RiCTmManager_t RiCTmManager;

/*## classInstance theMainTask */
struct theMainTask_t theMainTask;

void RiC_RPkg_OMInitializer_Init() {
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
    RiC_RPkg_initRelations();
 8001858:	f000 f826 	bl	80018a8 <RiC_RPkg_initRelations>
}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}

08001860 <RiC_RPkg_OMInitializer_Cleanup>:

void RiC_RPkg_OMInitializer_Cleanup() {
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <RiCMainTask>:

/*## operation RiCMainTask() */
struct RiCTask* RiCMainTask() {
 800186e:	b580      	push	{r7, lr}
 8001870:	af00      	add	r7, sp, #0
    /*#[ operation RiCMainTask() */
    return theMainTask_getItsRiCTask();
 8001872:	f000 fc41 	bl	80020f8 <theMainTask_getItsRiCTask>
 8001876:	4603      	mov	r3, r0
    /*#]*/
}
 8001878:	4618      	mov	r0, r3
 800187a:	bd80      	pop	{r7, pc}

0800187c <RiCTicksToTime>:

/*## operation RiCTicksToTime(timeUnit) */
timeUnit RiCTicksToTime(timeUnit aTicks) {
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
    /*#[ operation RiCTicksToTime(timeUnit) */
    return ( aTicks * RIC_MS_PER_TICK );
 8001884:	687b      	ldr	r3, [r7, #4]
    /*#]*/
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <RiCTimeToTicks>:

/*## operation RiCTimeToTicks(timeUnit) */
timeUnit RiCTimeToTicks(timeUnit aTime) {
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
    /*#[ operation RiCTimeToTicks(timeUnit) */
    return ( aTime / RIC_MS_PER_TICK );
 800189a:	687b      	ldr	r3, [r7, #4]
    /*#]*/
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <RiC_RPkg_initRelations>:

void RiC_RPkg_initRelations() {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
    RiCErrorManager_Init();
 80018ac:	f000 fa64 	bl	8001d78 <RiCErrorManager_Init>
    RiCTmManager_Init();
 80018b0:	f000 f8ac 	bl	8001a0c <RiCTmManager_Init>
    theMainTask_Init();
 80018b4:	f000 fb22 	bl	8001efc <theMainTask_Init>
}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}

080018bc <RiCEnterCriticalRegion>:

/*#]*/


/*## operation RiCEnterCriticalRegion() */
void RiCEnterCriticalRegion() {
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
    asm("	mtspr	EID,r0");
    #endif
    
    
    /*#]*/
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <RiCExitCriticalRegion>:

/*## operation RiCExitCriticalRegion() */
void RiCExitCriticalRegion() {
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
    #endif
    
    
    
    /*#]*/
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <RiCGetSystemTick>:

/*## operation RiCGetSystemTick() */
timeUnit RiCGetSystemTick() {
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
      // Use the Windows Tick Count (updated about every 15ms?)
      return GetTickCount();
    #elif GREEN_IDF  
      return (0 - (getDecrementer()/1250));
    #else
      return RiCTicks;
 80018dc:	4b03      	ldr	r3, [pc, #12]	; (80018ec <RiCGetSystemTick+0x14>)
 80018de:	681b      	ldr	r3, [r3, #0]
    #endif
    
    /*#]*/
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	20000814 	.word	0x20000814

080018f0 <RiCInitTimer>:

/*## operation RiCInitTimer() */
void RiCInitTimer() {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
    /*#[ operation RiCInitTimer() */
    #ifdef ARM_IDF
    /* ARMEvaluator_configure(); */  
    Init_Timer();
 80018f4:	f001 fbaa 	bl	800304c <Init_Timer>
    #endif
    
    
    
    /*#]*/
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}

080018fc <RiCNotifyToOutput>:

/*## operation RiCNotifyToOutput(const char*) */
void RiCNotifyToOutput(const char* aMsg) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
    /*#[ operation RiCNotifyToOutput(const char*) */
    if ( aMsg == NULL ) return;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d004      	beq.n	8001914 <RiCNotifyToOutput+0x18>
    #ifndef NO_PRINT
    printf ( "%s", aMsg );
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	4803      	ldr	r0, [pc, #12]	; (800191c <RiCNotifyToOutput+0x20>)
 800190e:	f00a fdd3 	bl	800c4b8 <iprintf>
 8001912:	e000      	b.n	8001916 <RiCNotifyToOutput+0x1a>
    if ( aMsg == NULL ) return;
 8001914:	bf00      	nop
    #endif
    /*#]*/
}
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	0800d5a4 	.word	0x0800d5a4

08001920 <RiCOXFInit>:

/*## operation RiCOXFInit(int,char **,unsigned int,char*,unsigned int,RiCBoolean,unsigned int) */
int RiCOXFInit(int numProgArgs, char ** progArgs, unsigned int defaultPort, char* defaultHost, unsigned int tickTime, RiCBoolean b, unsigned int maxTm) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	603b      	str	r3, [r7, #0]
    /*#[ operation RiCOXFInit(int,char **,unsigned int,char*,unsigned int,RiCBoolean,unsigned int) */
    /* Initialise all the objects */
    RiC_RPkg_OMInitializer_Init();
 800192e:	f7ff ff91 	bl	8001854 <RiC_RPkg_OMInitializer_Init>
    #ifndef NO_POOLS
    RiC_MemoryAllocationPkg_OMInitializer_Init();
 8001932:	f7ff fd4d 	bl	80013d0 <RiC_MemoryAllocationPkg_OMInitializer_Init>
    #endif
    #ifdef ARM_IDF
    /* ArmEvaluatorPkg_OMInitializer_Init(); */
    #endif
    /* Initialise the timer, either a separate thread or a periodic interrupt */
    RiCInitTimer();
 8001936:	f7ff ffdb 	bl	80018f0 <RiCInitTimer>
    
    /* Do something with the non used arguments */
    if ( (numProgArgs == 0) ||
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d011      	beq.n	8001964 <RiCOXFInit+0x44>
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00e      	beq.n	8001964 <RiCOXFInit+0x44>
         (progArgs == NULL) ||
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00b      	beq.n	8001964 <RiCOXFInit+0x44>
         (defaultPort == 0) ||
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d008      	beq.n	8001964 <RiCOXFInit+0x44>
         (defaultHost == NULL) ||
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <RiCOXFInit+0x44>
         (tickTime == 0) || 
 8001958:	7f3b      	ldrb	r3, [r7, #28]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d002      	beq.n	8001964 <RiCOXFInit+0x44>
         (b == TRUE) ||
 800195e:	6a3b      	ldr	r3, [r7, #32]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <RiCOXFInit+0x48>
         (maxTm == 0) ) 
      return TRUE;
 8001964:	2301      	movs	r3, #1
 8001966:	e000      	b.n	800196a <RiCOXFInit+0x4a>
      
    return TRUE;
 8001968:	2301      	movs	r3, #1
    
    
    
    /*#]*/
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <RiCOXFSchedule>:

/*## operation RiCOXFSchedule() */
void RiCOXFSchedule() {
 8001972:	b580      	push	{r7, lr}
 8001974:	af00      	add	r7, sp, #0
    /*#[ operation RiCOXFSchedule() */
    theMainTask_schedule();
 8001976:	f000 faf5 	bl	8001f64 <theMainTask_schedule>
    /*#]*/
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}

0800197e <RiCOXFStart>:

/*## operation RiCOXFStart(int) */
void RiCOXFStart(int doFork) {
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
    /*#[ operation RiCOXFStart(int) */
    theMainTask_execute ( doFork );
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 facb 	bl	8001f22 <theMainTask_execute>
    /*#]*/
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <RiCOXF_pre71Settings>:

/*## operation RiCOXF_pre71Settings() */
void RiCOXF_pre71Settings() {
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
    /*#[ operation RiCOXF_pre71Settings() */
    /*#]*/
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <RiCSleep>:

/*## operation RiCSleep(unsigned long) */
void RiCSleep(unsigned long aTime) {
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
    /* The "wait" seems lethal to the I2C UART operation! */
    /* __asm("wait"); */
    #endif
    
    /*#]*/
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <RiCTick>:
#ifdef M16C_IDF
__interrupt(26)
#endif

/*#]*/
void RiCTick() {
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
    /*#[ operation RiCTick() */
    RiCTicks++;
 80019ba:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <RiCTick+0x1a>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	3301      	adds	r3, #1
 80019c0:	4a03      	ldr	r2, [pc, #12]	; (80019d0 <RiCTick+0x1a>)
 80019c2:	6013      	str	r3, [r2, #0]
    /*#]*/
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	20000814 	.word	0x20000814

080019d4 <RiCTickThread>:

/*## operation RiCTickThread() */
void RiCTickThread() {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
    /*#[ operation RiCTickThread() */
    while ( TRUE ) {
    #ifdef VxWorks
      taskDelay( RIC_MS_PER_TICK / 20 );
    #endif
      RiCTick();
 80019d8:	f7ff ffed 	bl	80019b6 <RiCTick>
 80019dc:	e7fc      	b.n	80019d8 <RiCTickThread+0x4>

080019de <RiCUsage>:
    }
    /*#]*/
}

/*## operation RiCUsage() */
void RiCUsage() {
 80019de:	b580      	push	{r7, lr}
 80019e0:	af00      	add	r7, sp, #0
    /*#[ operation RiCUsage() */
    #ifndef NO_PRINT
    printf ( "\n===== Resource Usage  IDF V %s =====\n", RIC_VERSION );
 80019e2:	4907      	ldr	r1, [pc, #28]	; (8001a00 <RiCUsage+0x22>)
 80019e4:	4807      	ldr	r0, [pc, #28]	; (8001a04 <RiCUsage+0x26>)
 80019e6:	f00a fd67 	bl	800c4b8 <iprintf>
    #ifndef NO_POOLS
    RiCAllocator_usage();
 80019ea:	f7ff fdab 	bl	8001544 <RiCAllocator_usage>
    #endif
    RiCTmManager_usage();
 80019ee:	f000 f9b3 	bl	8001d58 <RiCTmManager_usage>
    /*RiCEvtQueue_usage();*/
    RiCErrorManager_usage();
 80019f2:	f000 f9f5 	bl	8001de0 <RiCErrorManager_usage>
    printf ( "==================================================\n\n" );
 80019f6:	4804      	ldr	r0, [pc, #16]	; (8001a08 <RiCUsage+0x2a>)
 80019f8:	f00a fdfa 	bl	800c5f0 <puts>
    #endif
    /*#]*/
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	0800d5a8 	.word	0x0800d5a8
 8001a04:	0800d5c0 	.word	0x0800d5c0
 8001a08:	0800d5e8 	.word	0x0800d5e8

08001a0c <RiCTmManager_Init>:

/*#]*/


/*## operation Init() */
void RiCTmManager_Init() {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
    RiCTmManager.count=0;
 8001a12:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <RiCTmManager_Init+0x70>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
    RiCTmManager.maxCount=0;
 8001a18:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <RiCTmManager_Init+0x70>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	605a      	str	r2, [r3, #4]
    RiCTmManager.itsBusyList = NULL;
 8001a1e:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <RiCTmManager_Init+0x70>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
    RiCTmManager.itsFreeList = NULL;
 8001a24:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <RiCTmManager_Init+0x70>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	60da      	str	r2, [r3, #12]
    {
        /*#[ operation Init() */
        int i;
        for ( i=0; i<RIC_MAX_TIMEOUTS-1; i++ ) {
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	e014      	b.n	8001a5a <RiCTmManager_Init+0x4e>
          RiCTimeout_setItsNextTimeout( &itsTimeout[i], &itsTimeout[i+1] );
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4a11      	ldr	r2, [pc, #68]	; (8001a80 <RiCTmManager_Init+0x74>)
 8001a3c:	1898      	adds	r0, r3, r2
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4a0d      	ldr	r2, [pc, #52]	; (8001a80 <RiCTmManager_Init+0x74>)
 8001a4c:	4413      	add	r3, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f7ff f99e 	bl	8000d90 <RiCTimeout_setItsNextTimeout>
        for ( i=0; i<RIC_MAX_TIMEOUTS-1; i++ ) {
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3301      	adds	r3, #1
 8001a58:	607b      	str	r3, [r7, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b06      	cmp	r3, #6
 8001a5e:	dde7      	ble.n	8001a30 <RiCTmManager_Init+0x24>
        }
        RiCTimeout_setItsNextTimeout( &itsTimeout[RIC_MAX_TIMEOUTS-1], NULL );
 8001a60:	2100      	movs	r1, #0
 8001a62:	4808      	ldr	r0, [pc, #32]	; (8001a84 <RiCTmManager_Init+0x78>)
 8001a64:	f7ff f994 	bl	8000d90 <RiCTimeout_setItsNextTimeout>
        RiCTmManager.itsFreeList = &itsTimeout[0];
 8001a68:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <RiCTmManager_Init+0x70>)
 8001a6a:	4a05      	ldr	r2, [pc, #20]	; (8001a80 <RiCTmManager_Init+0x74>)
 8001a6c:	60da      	str	r2, [r3, #12]
        RiCTmManager.itsBusyList = NULL;
 8001a6e:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <RiCTmManager_Init+0x70>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
        /*#]*/
    }
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000820 	.word	0x20000820
 8001a80:	2000098c 	.word	0x2000098c
 8001a84:	20000a18 	.word	0x20000a18

08001a88 <RiCTmManager_add>:

/*## operation add(timeUnit,short,RiCReactive) */
void RiCTmManager_add(timeUnit aTime, short anId, struct RiCReactive* aDestination) {
 8001a88:	b590      	push	{r4, r7, lr}
 8001a8a:	b087      	sub	sp, #28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	460b      	mov	r3, r1
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	817b      	strh	r3, [r7, #10]
    /*#[ operation add(timeUnit,short,RiCReactive) */
    struct RiCTimeout* aTimeout;
    timeUnit ticks;
    
    /* Do we have a timeout available? */
    if ( RiCTmManager.itsFreeList == NULL ) {
 8001a96:	4b24      	ldr	r3, [pc, #144]	; (8001b28 <RiCTmManager_add+0xa0>)
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d103      	bne.n	8001aa6 <RiCTmManager_add+0x1e>
      NOTIFY ( RIC_TIMEOUT_HEAP_FULL );
 8001a9e:	2003      	movs	r0, #3
 8001aa0:	f000 f97a 	bl	8001d98 <RiCErrorManager_log>
      RiCTmManager.count++;
      if ( RiCTmManager.count > RiCTmManager.maxCount )
        RiCTmManager.maxCount = RiCTmManager.count;
    }
    /*#]*/
}
 8001aa4:	e03c      	b.n	8001b20 <RiCTmManager_add+0x98>
      aTimeout = RiCTmManager.itsFreeList;
 8001aa6:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <RiCTmManager_add+0xa0>)
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	617b      	str	r3, [r7, #20]
      RiCTmManager.itsFreeList = RiCTimeout_getItsNextTimeout( aTimeout );
 8001aac:	6978      	ldr	r0, [r7, #20]
 8001aae:	f7ff f963 	bl	8000d78 <RiCTimeout_getItsNextTimeout>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4a1c      	ldr	r2, [pc, #112]	; (8001b28 <RiCTmManager_add+0xa0>)
 8001ab6:	60d3      	str	r3, [r2, #12]
      ticks = RiCTimeToTicks( aTime ) + RiCGetSystemTick();
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f7ff feea 	bl	8001892 <RiCTimeToTicks>
 8001abe:	4604      	mov	r4, r0
 8001ac0:	f7ff ff0a 	bl	80018d8 <RiCGetSystemTick>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	4423      	add	r3, r4
 8001ac8:	613b      	str	r3, [r7, #16]
      RiCTimeout_setLId( aTimeout, RiCTimeout_id );
 8001aca:	f06f 0101 	mvn.w	r1, #1
 8001ace:	6978      	ldr	r0, [r7, #20]
 8001ad0:	f7ff f90d 	bl	8000cee <RiCTimeout_setLId>
      RiCTimeout_setTimeoutId( aTimeout, anId );
 8001ad4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	6978      	ldr	r0, [r7, #20]
 8001adc:	f7ff f923 	bl	8000d26 <RiCTimeout_setTimeoutId>
      RiCTimeout_setDestination( aTimeout, aDestination );
 8001ae0:	6879      	ldr	r1, [r7, #4]
 8001ae2:	6978      	ldr	r0, [r7, #20]
 8001ae4:	f7ff f8f5 	bl	8000cd2 <RiCTimeout_setDestination>
      RiCTimeout_setDeliveryTicks( aTimeout, ticks );
 8001ae8:	6939      	ldr	r1, [r7, #16]
 8001aea:	6978      	ldr	r0, [r7, #20]
 8001aec:	f7ff f936 	bl	8000d5c <RiCTimeout_setDeliveryTicks>
      RiCTimeout_setItsNextTimeout( aTimeout, RiCTmManager.itsBusyList );
 8001af0:	4b0d      	ldr	r3, [pc, #52]	; (8001b28 <RiCTmManager_add+0xa0>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	4619      	mov	r1, r3
 8001af6:	6978      	ldr	r0, [r7, #20]
 8001af8:	f7ff f94a 	bl	8000d90 <RiCTimeout_setItsNextTimeout>
      RiCTmManager.itsBusyList = aTimeout; 
 8001afc:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <RiCTmManager_add+0xa0>)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	6093      	str	r3, [r2, #8]
      RiCTmManager.count++;
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <RiCTmManager_add+0xa0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	3301      	adds	r3, #1
 8001b08:	4a07      	ldr	r2, [pc, #28]	; (8001b28 <RiCTmManager_add+0xa0>)
 8001b0a:	6013      	str	r3, [r2, #0]
      if ( RiCTmManager.count > RiCTmManager.maxCount )
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <RiCTmManager_add+0xa0>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <RiCTmManager_add+0xa0>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	dd03      	ble.n	8001b20 <RiCTmManager_add+0x98>
        RiCTmManager.maxCount = RiCTmManager.count;
 8001b18:	4b03      	ldr	r3, [pc, #12]	; (8001b28 <RiCTmManager_add+0xa0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a02      	ldr	r2, [pc, #8]	; (8001b28 <RiCTmManager_add+0xa0>)
 8001b1e:	6053      	str	r3, [r2, #4]
}
 8001b20:	bf00      	nop
 8001b22:	371c      	adds	r7, #28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd90      	pop	{r4, r7, pc}
 8001b28:	20000820 	.word	0x20000820

08001b2c <RiCTmManager_cancelEvents>:

/*## operation cancelEvents(RiCReactive) */
void RiCTmManager_cancelEvents(const struct RiCReactive* aDestination) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
    /*#[ operation cancelEvents(RiCReactive) */
    /* Iterate down the busy list looking for any timeouts with this destination */
    struct RiCTimeout* aTimeout = RiCTmManager.itsBusyList;
 8001b34:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <RiCTmManager_cancelEvents+0x88>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	60fb      	str	r3, [r7, #12]
    struct RiCTimeout* parent = NULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
    
    while ( aTimeout != NULL ) {
 8001b3e:	e030      	b.n	8001ba2 <RiCTmManager_cancelEvents+0x76>
      if ( ( RiCTimeout_getDestination( aTimeout ) == aDestination ) ) {
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f7ff f8ba 	bl	8000cba <RiCTimeout_getDestination>
 8001b46:	4602      	mov	r2, r0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d123      	bne.n	8001b96 <RiCTmManager_cancelEvents+0x6a>
        /* Found one so remove it */
        DEBUG_NOTIFY ( "Cancelling a timeout\n" );
        RiCTmManager.count--;
 8001b4e:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <RiCTmManager_cancelEvents+0x88>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	4a17      	ldr	r2, [pc, #92]	; (8001bb4 <RiCTmManager_cancelEvents+0x88>)
 8001b56:	6013      	str	r3, [r2, #0]
        if ( parent == NULL ) {
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d106      	bne.n	8001b6c <RiCTmManager_cancelEvents+0x40>
          RiCTmManager.itsBusyList = RiCTimeout_getItsNextTimeout( aTimeout );
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f7ff f90a 	bl	8000d78 <RiCTimeout_getItsNextTimeout>
 8001b64:	4603      	mov	r3, r0
 8001b66:	4a13      	ldr	r2, [pc, #76]	; (8001bb4 <RiCTmManager_cancelEvents+0x88>)
 8001b68:	6093      	str	r3, [r2, #8]
 8001b6a:	e007      	b.n	8001b7c <RiCTmManager_cancelEvents+0x50>
        } else {
          RiCTimeout_setItsNextTimeout( parent, RiCTimeout_getItsNextTimeout( aTimeout ) );
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f7ff f903 	bl	8000d78 <RiCTimeout_getItsNextTimeout>
 8001b72:	4603      	mov	r3, r0
 8001b74:	4619      	mov	r1, r3
 8001b76:	68b8      	ldr	r0, [r7, #8]
 8001b78:	f7ff f90a 	bl	8000d90 <RiCTimeout_setItsNextTimeout>
        }
        /* And add it to the free list */ 
        RiCTimeout_setItsNextTimeout( aTimeout, RiCTmManager.itsFreeList );
 8001b7c:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <RiCTmManager_cancelEvents+0x88>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	4619      	mov	r1, r3
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f7ff f904 	bl	8000d90 <RiCTimeout_setItsNextTimeout>
        RiCTmManager.itsFreeList = aTimeout;
 8001b88:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <RiCTmManager_cancelEvents+0x88>)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	60d3      	str	r3, [r2, #12]
        /* Recursive call to remove any other timeouts */
        RiCTmManager_cancelEvents( aDestination );
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ffcc 	bl	8001b2c <RiCTmManager_cancelEvents>
        break;
 8001b94:	e009      	b.n	8001baa <RiCTmManager_cancelEvents+0x7e>
      }
      parent = aTimeout;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	60bb      	str	r3, [r7, #8]
      aTimeout = RiCTimeout_getItsNextTimeout( aTimeout );
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f7ff f8ec 	bl	8000d78 <RiCTimeout_getItsNextTimeout>
 8001ba0:	60f8      	str	r0, [r7, #12]
    while ( aTimeout != NULL ) {
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1cb      	bne.n	8001b40 <RiCTmManager_cancelEvents+0x14>
    }
    /*#]*/
}
 8001ba8:	bf00      	nop
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000820 	.word	0x20000820

08001bb8 <RiCTmManager_getExpiredTimeout>:

/*## operation getExpiredTimeout() */
struct RiCTimeout* RiCTmManager_getExpiredTimeout() {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
    /*#[ operation getExpiredTimeout() */
    struct RiCTimeout* aTimeout;
    struct RiCTimeout* parent;              
    struct RiCTimeout* t;
    timeUnit currentTicks = RiCGetSystemTick();
 8001bbe:	f7ff fe8b 	bl	80018d8 <RiCGetSystemTick>
 8001bc2:	6038      	str	r0, [r7, #0]
    
    aTimeout = RiCTmManager.itsBusyList;
 8001bc4:	4b2f      	ldr	r3, [pc, #188]	; (8001c84 <RiCTmManager_getExpiredTimeout+0xcc>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	60fb      	str	r3, [r7, #12]
    parent = NULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60bb      	str	r3, [r7, #8]
    
    while ( aTimeout != NULL ) {
 8001bce:	e01e      	b.n	8001c0e <RiCTmManager_getExpiredTimeout+0x56>
      if ( RiCTimeout_isExpired( aTimeout ) ) {
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f7ff f85f 	bl	8000c94 <RiCTimeout_isExpired>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d012      	beq.n	8001c02 <RiCTmManager_getExpiredTimeout+0x4a>
        /* remove from the busy list */
        if ( NULL == parent ) {
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d106      	bne.n	8001bf0 <RiCTmManager_getExpiredTimeout+0x38>
          RiCTmManager.itsBusyList = RiCTimeout_getItsNextTimeout( aTimeout );
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f7ff f8c8 	bl	8000d78 <RiCTimeout_getItsNextTimeout>
 8001be8:	4603      	mov	r3, r0
 8001bea:	4a26      	ldr	r2, [pc, #152]	; (8001c84 <RiCTmManager_getExpiredTimeout+0xcc>)
 8001bec:	6093      	str	r3, [r2, #8]
        } else {
          RiCTimeout_setItsNextTimeout( parent, RiCTimeout_getItsNextTimeout( aTimeout ) );
        }
        /* But don't add it to the free list until it has been processed ! */
        break;
 8001bee:	e011      	b.n	8001c14 <RiCTmManager_getExpiredTimeout+0x5c>
          RiCTimeout_setItsNextTimeout( parent, RiCTimeout_getItsNextTimeout( aTimeout ) );
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f7ff f8c1 	bl	8000d78 <RiCTimeout_getItsNextTimeout>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	68b8      	ldr	r0, [r7, #8]
 8001bfc:	f7ff f8c8 	bl	8000d90 <RiCTimeout_setItsNextTimeout>
        break;
 8001c00:	e008      	b.n	8001c14 <RiCTmManager_getExpiredTimeout+0x5c>
      }
      parent = aTimeout;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	60bb      	str	r3, [r7, #8]
      aTimeout = RiCTimeout_getItsNextTimeout( aTimeout );  
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f7ff f8b6 	bl	8000d78 <RiCTimeout_getItsNextTimeout>
 8001c0c:	60f8      	str	r0, [r7, #12]
    while ( aTimeout != NULL ) {
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1dd      	bne.n	8001bd0 <RiCTmManager_getExpiredTimeout+0x18>
    }
    
    // Now find the next timeout that will expire and set OXFShortestTimer to the
    // relative time before then. If no timeouts exist, then set to 0.
    if ( aTimeout == NULL ) {
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d12f      	bne.n	8001c7a <RiCTmManager_getExpiredTimeout+0xc2>
      t = RiCTmManager.itsBusyList;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <RiCTmManager_getExpiredTimeout+0xcc>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	607b      	str	r3, [r7, #4]
      if ( t == NULL ) {
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d103      	bne.n	8001c2e <RiCTmManager_getExpiredTimeout+0x76>
        RiCShortestTimer = 0;
 8001c26:	4b18      	ldr	r3, [pc, #96]	; (8001c88 <RiCTmManager_getExpiredTimeout+0xd0>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	e025      	b.n	8001c7a <RiCTmManager_getExpiredTimeout+0xc2>
      } else {
        RiCShortestTimer = RiCTimeout_getDeliveryTicks(t) - currentTicks;
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff f888 	bl	8000d44 <RiCTimeout_getDeliveryTicks>
 8001c34:	4602      	mov	r2, r0
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	4a13      	ldr	r2, [pc, #76]	; (8001c88 <RiCTmManager_getExpiredTimeout+0xd0>)
 8001c3c:	6013      	str	r3, [r2, #0]
        t = RiCTimeout_getItsNextTimeout(t);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff f89a 	bl	8000d78 <RiCTimeout_getItsNextTimeout>
 8001c44:	6078      	str	r0, [r7, #4]
        while ( t != NULL ) {
 8001c46:	e015      	b.n	8001c74 <RiCTmManager_getExpiredTimeout+0xbc>
          if ( RiCTimeout_getDeliveryTicks(t) - currentTicks < RiCShortestTimer ) {
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff f87b 	bl	8000d44 <RiCTimeout_getDeliveryTicks>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	1ad2      	subs	r2, r2, r3
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <RiCTmManager_getExpiredTimeout+0xd0>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d207      	bcs.n	8001c6c <RiCTmManager_getExpiredTimeout+0xb4>
            RiCShortestTimer = RiCTimeout_getDeliveryTicks(t) - currentTicks;
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff f871 	bl	8000d44 <RiCTimeout_getDeliveryTicks>
 8001c62:	4602      	mov	r2, r0
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	4a07      	ldr	r2, [pc, #28]	; (8001c88 <RiCTmManager_getExpiredTimeout+0xd0>)
 8001c6a:	6013      	str	r3, [r2, #0]
          }
          t = RiCTimeout_getItsNextTimeout(t);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff f883 	bl	8000d78 <RiCTimeout_getItsNextTimeout>
 8001c72:	6078      	str	r0, [r7, #4]
        while ( t != NULL ) {
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1e6      	bne.n	8001c48 <RiCTmManager_getExpiredTimeout+0x90>
        }  
      }
    }
      
    return aTimeout;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
    /*#]*/
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000820 	.word	0x20000820
 8001c88:	20000810 	.word	0x20000810

08001c8c <RiCTmManager_putBack>:

/*## operation putBack(RiCTimeout) */
void RiCTmManager_putBack(struct RiCTimeout* aTimeout) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
    /*#[ operation putBack(RiCTimeout) */
    RiCTimeout_setItsNextTimeout ( aTimeout, RiCTmManager.itsFreeList );
 8001c94:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <RiCTmManager_putBack+0x2c>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff f878 	bl	8000d90 <RiCTimeout_setItsNextTimeout>
    RiCTmManager.itsFreeList = aTimeout;
 8001ca0:	4a05      	ldr	r2, [pc, #20]	; (8001cb8 <RiCTmManager_putBack+0x2c>)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	60d3      	str	r3, [r2, #12]
    RiCTmManager.count--;
 8001ca6:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <RiCTmManager_putBack+0x2c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	4a02      	ldr	r2, [pc, #8]	; (8001cb8 <RiCTmManager_putBack+0x2c>)
 8001cae:	6013      	str	r3, [r2, #0]
    /*#]*/
}
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000820 	.word	0x20000820

08001cbc <RiCTmManager_remove>:

/*## operation remove(short,RiCReactive) */
void RiCTmManager_remove(short anId, const struct RiCReactive* aDestination) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	6039      	str	r1, [r7, #0]
 8001cc6:	80fb      	strh	r3, [r7, #6]
    /*#[ operation remove(short,RiCReactive) */
    /* Iterate down the busy list looking for the requested timeout */
    struct RiCTimeout* aTimeout = RiCTmManager.itsBusyList;
 8001cc8:	4b22      	ldr	r3, [pc, #136]	; (8001d54 <RiCTmManager_remove+0x98>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	60fb      	str	r3, [r7, #12]
    struct RiCTimeout* parent = NULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60bb      	str	r3, [r7, #8]
    
    while ( aTimeout != NULL ) {
 8001cd2:	e036      	b.n	8001d42 <RiCTmManager_remove+0x86>
      if ( ( RiCTimeout_getDestination( aTimeout ) == aDestination ) &&
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f7fe fff0 	bl	8000cba <RiCTimeout_getDestination>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d129      	bne.n	8001d36 <RiCTmManager_remove+0x7a>
           ( RiCTimeout_getTimeoutId( aTimeout ) == anId ) ) {
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f7ff f812 	bl	8000d0c <RiCTimeout_getTimeoutId>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	461a      	mov	r2, r3
      if ( ( RiCTimeout_getDestination( aTimeout ) == aDestination ) &&
 8001cec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d120      	bne.n	8001d36 <RiCTmManager_remove+0x7a>
        /* Found it so remove it */
        RiCTmManager.count--;
 8001cf4:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <RiCTmManager_remove+0x98>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	4a16      	ldr	r2, [pc, #88]	; (8001d54 <RiCTmManager_remove+0x98>)
 8001cfc:	6013      	str	r3, [r2, #0]
        if ( parent == NULL ) {
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d106      	bne.n	8001d12 <RiCTmManager_remove+0x56>
          RiCTmManager.itsBusyList = RiCTimeout_getItsNextTimeout( aTimeout );
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f7ff f837 	bl	8000d78 <RiCTimeout_getItsNextTimeout>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	4a11      	ldr	r2, [pc, #68]	; (8001d54 <RiCTmManager_remove+0x98>)
 8001d0e:	6093      	str	r3, [r2, #8]
 8001d10:	e007      	b.n	8001d22 <RiCTmManager_remove+0x66>
        } else {
          RiCTimeout_setItsNextTimeout( parent, RiCTimeout_getItsNextTimeout( aTimeout ) );
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f7ff f830 	bl	8000d78 <RiCTimeout_getItsNextTimeout>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	68b8      	ldr	r0, [r7, #8]
 8001d1e:	f7ff f837 	bl	8000d90 <RiCTimeout_setItsNextTimeout>
        }
        /* And add it to the free list */ 
        RiCTimeout_setItsNextTimeout( aTimeout, RiCTmManager.itsFreeList );
 8001d22:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <RiCTmManager_remove+0x98>)
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	4619      	mov	r1, r3
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f7ff f831 	bl	8000d90 <RiCTimeout_setItsNextTimeout>
        RiCTmManager.itsFreeList = aTimeout;
 8001d2e:	4a09      	ldr	r2, [pc, #36]	; (8001d54 <RiCTmManager_remove+0x98>)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	60d3      	str	r3, [r2, #12]
        break;
 8001d34:	e009      	b.n	8001d4a <RiCTmManager_remove+0x8e>
      }
      parent = aTimeout;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	60bb      	str	r3, [r7, #8]
      aTimeout = RiCTimeout_getItsNextTimeout( aTimeout );
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f7ff f81c 	bl	8000d78 <RiCTimeout_getItsNextTimeout>
 8001d40:	60f8      	str	r0, [r7, #12]
    while ( aTimeout != NULL ) {
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1c5      	bne.n	8001cd4 <RiCTmManager_remove+0x18>
    }
    /*#]*/
}
 8001d48:	bf00      	nop
 8001d4a:	bf00      	nop
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000820 	.word	0x20000820

08001d58 <RiCTmManager_usage>:

/*#[ ignore */
#ifndef NO_PRINT

/*#]*/
void RiCTmManager_usage() {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
    /*#[ operation usage() const */
    printf ( "Max timeouts in Timeout Manager : %d  Current usage : %d\n", RiCTmManager.maxCount, RiCTmManager.count );
 8001d5c:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <RiCTmManager_usage+0x18>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	4a03      	ldr	r2, [pc, #12]	; (8001d70 <RiCTmManager_usage+0x18>)
 8001d62:	6812      	ldr	r2, [r2, #0]
 8001d64:	4619      	mov	r1, r3
 8001d66:	4803      	ldr	r0, [pc, #12]	; (8001d74 <RiCTmManager_usage+0x1c>)
 8001d68:	f00a fba6 	bl	800c4b8 <iprintf>
    /*#]*/
}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000820 	.word	0x20000820
 8001d74:	0800d61c 	.word	0x0800d61c

08001d78 <RiCErrorManager_Init>:
#endif

/*#]*/


void RiCErrorManager_Init() {
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
    RiCErrorManager.count = 0;
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <RiCErrorManager_Init+0x1c>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
    RiCErrorManager.lastError = RIC_NO_ERROR;
 8001d82:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <RiCErrorManager_Init+0x1c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	711a      	strb	r2, [r3, #4]
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	20000818 	.word	0x20000818

08001d98 <RiCErrorManager_log>:

/*## operation log(RIC_ERRORS) */
void RiCErrorManager_log(RIC_ERRORS anError) {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
    /*#[ operation log(RIC_ERRORS) */
    RiCErrorManager.count++;
 8001da2:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <RiCErrorManager_log+0x3c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	3301      	adds	r3, #1
 8001da8:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <RiCErrorManager_log+0x3c>)
 8001daa:	6013      	str	r3, [r2, #0]
    RiCErrorManager.lastError = anError;
 8001dac:	4a09      	ldr	r2, [pc, #36]	; (8001dd4 <RiCErrorManager_log+0x3c>)
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	7113      	strb	r3, [r2, #4]
    #ifndef NO_PRINT
    printf ( "<<<<<<  RIC ERROR %d : ", RiCErrorManager.count );
 8001db2:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <RiCErrorManager_log+0x3c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4619      	mov	r1, r3
 8001db8:	4807      	ldr	r0, [pc, #28]	; (8001dd8 <RiCErrorManager_log+0x40>)
 8001dba:	f00a fb7d 	bl	800c4b8 <iprintf>
    print ( anError );
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f000 f82d 	bl	8001e20 <print>
    printf ( " >>>>>>\n" );
 8001dc6:	4805      	ldr	r0, [pc, #20]	; (8001ddc <RiCErrorManager_log+0x44>)
 8001dc8:	f00a fc12 	bl	800c5f0 <puts>
    #endif
    /*#]*/
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000818 	.word	0x20000818
 8001dd8:	0800d658 	.word	0x0800d658
 8001ddc:	0800d670 	.word	0x0800d670

08001de0 <RiCErrorManager_usage>:

/*#[ ignore */
#ifndef NO_PRINT

/*#]*/
void RiCErrorManager_usage() {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
    /*#[ operation usage() const */
    printf ( "%d framework errors", RiCErrorManager.count );
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <RiCErrorManager_usage+0x34>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4619      	mov	r1, r3
 8001dea:	480b      	ldr	r0, [pc, #44]	; (8001e18 <RiCErrorManager_usage+0x38>)
 8001dec:	f00a fb64 	bl	800c4b8 <iprintf>
    if ( RiCErrorManager.count > 0 ) {
 8001df0:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <RiCErrorManager_usage+0x34>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	dd07      	ble.n	8001e08 <RiCErrorManager_usage+0x28>
      printf ( "  last error : " );
 8001df8:	4808      	ldr	r0, [pc, #32]	; (8001e1c <RiCErrorManager_usage+0x3c>)
 8001dfa:	f00a fb5d 	bl	800c4b8 <iprintf>
      print ( RiCErrorManager.lastError );
 8001dfe:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <RiCErrorManager_usage+0x34>)
 8001e00:	791b      	ldrb	r3, [r3, #4]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 f80c 	bl	8001e20 <print>
    }
    printf ( "\n" );
 8001e08:	200a      	movs	r0, #10
 8001e0a:	f00a fb6d 	bl	800c4e8 <putchar>
    /*#]*/
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000818 	.word	0x20000818
 8001e18:	0800d678 	.word	0x0800d678
 8001e1c:	0800d68c 	.word	0x0800d68c

08001e20 <print>:

/*#[ ignore */
#ifndef NO_PRINT

/*#]*/
static void print(RIC_ERRORS anError) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
    /*#[ operation print(RIC_ERRORS) */
    switch ( anError ) { 
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	2b0a      	cmp	r3, #10
 8001e2e:	d845      	bhi.n	8001ebc <print+0x9c>
 8001e30:	a201      	add	r2, pc, #4	; (adr r2, 8001e38 <print+0x18>)
 8001e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e36:	bf00      	nop
 8001e38:	08001e65 	.word	0x08001e65
 8001e3c:	08001e6d 	.word	0x08001e6d
 8001e40:	08001e75 	.word	0x08001e75
 8001e44:	08001e7d 	.word	0x08001e7d
 8001e48:	08001e85 	.word	0x08001e85
 8001e4c:	08001e8d 	.word	0x08001e8d
 8001e50:	08001e95 	.word	0x08001e95
 8001e54:	08001e9d 	.word	0x08001e9d
 8001e58:	08001ea5 	.word	0x08001ea5
 8001e5c:	08001ead 	.word	0x08001ead
 8001e60:	08001eb5 	.word	0x08001eb5
      case RIC_NO_ERROR                      : printf ( "No Error" );                       break;
 8001e64:	4819      	ldr	r0, [pc, #100]	; (8001ecc <print+0xac>)
 8001e66:	f00a fb27 	bl	800c4b8 <iprintf>
 8001e6a:	e02b      	b.n	8001ec4 <print+0xa4>
      case RIC_EVENT_QUEUE_FULL              : printf ( "Event queue is full" );            break;
 8001e6c:	4818      	ldr	r0, [pc, #96]	; (8001ed0 <print+0xb0>)
 8001e6e:	f00a fb23 	bl	800c4b8 <iprintf>
 8001e72:	e027      	b.n	8001ec4 <print+0xa4>
      case RIC_EVENT_QUEUE_EMPTY             : printf ( "Event queue is empty" );           break;
 8001e74:	4817      	ldr	r0, [pc, #92]	; (8001ed4 <print+0xb4>)
 8001e76:	f00a fb1f 	bl	800c4b8 <iprintf>
 8001e7a:	e023      	b.n	8001ec4 <print+0xa4>
      case RIC_TIMEOUT_HEAP_FULL             : printf ( "Timeout heap full" );              break;
 8001e7c:	4816      	ldr	r0, [pc, #88]	; (8001ed8 <print+0xb8>)
 8001e7e:	f00a fb1b 	bl	800c4b8 <iprintf>
 8001e82:	e01f      	b.n	8001ec4 <print+0xa4>
      case RIC_TIMEOUT_NOT_FOUND             : printf ( "Timeout not found" );              break;
 8001e84:	4815      	ldr	r0, [pc, #84]	; (8001edc <print+0xbc>)
 8001e86:	f00a fb17 	bl	800c4b8 <iprintf>
 8001e8a:	e01b      	b.n	8001ec4 <print+0xa4>
      case RIC_INFINITE_NULL_TRANSITIONS     : printf ( "Infinite null transitions" );      break;
 8001e8c:	4814      	ldr	r0, [pc, #80]	; (8001ee0 <print+0xc0>)
 8001e8e:	f00a fb13 	bl	800c4b8 <iprintf>
 8001e92:	e017      	b.n	8001ec4 <print+0xa4>
      case RIC_TOO_MANY_NULL_CONFIGS         : printf ( "Too many null configs" );          break;
 8001e94:	4813      	ldr	r0, [pc, #76]	; (8001ee4 <print+0xc4>)
 8001e96:	f00a fb0f 	bl	800c4b8 <iprintf>
 8001e9a:	e013      	b.n	8001ec4 <print+0xa4>
      case RIC_TOO_FEW_NULL_CONFIGS          : printf ( "Too few null configs" );           break;
 8001e9c:	4812      	ldr	r0, [pc, #72]	; (8001ee8 <print+0xc8>)
 8001e9e:	f00a fb0b 	bl	800c4b8 <iprintf>
 8001ea2:	e00f      	b.n	8001ec4 <print+0xa4>
      case RIC_NULL_DESTINATION              : printf ( "Null destination" );               break;
 8001ea4:	4811      	ldr	r0, [pc, #68]	; (8001eec <print+0xcc>)
 8001ea6:	f00a fb07 	bl	800c4b8 <iprintf>
 8001eaa:	e00b      	b.n	8001ec4 <print+0xa4>
      case RIC_EVENT_DISCARDED               : printf ( "Event discarded" );                break;
 8001eac:	4810      	ldr	r0, [pc, #64]	; (8001ef0 <print+0xd0>)
 8001eae:	f00a fb03 	bl	800c4b8 <iprintf>
 8001eb2:	e007      	b.n	8001ec4 <print+0xa4>
      case RIC_ALLOCATING_ANOTHER_MEMORYPOOL : printf ( "Allocating another memory pool" ); break;
 8001eb4:	480f      	ldr	r0, [pc, #60]	; (8001ef4 <print+0xd4>)
 8001eb6:	f00a faff 	bl	800c4b8 <iprintf>
 8001eba:	e003      	b.n	8001ec4 <print+0xa4>
      default                                : printf ( "Unknown error" );                  break;
 8001ebc:	480e      	ldr	r0, [pc, #56]	; (8001ef8 <print+0xd8>)
 8001ebe:	f00a fafb 	bl	800c4b8 <iprintf>
 8001ec2:	bf00      	nop
    }
    /*#]*/
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	0800d69c 	.word	0x0800d69c
 8001ed0:	0800d6a8 	.word	0x0800d6a8
 8001ed4:	0800d6bc 	.word	0x0800d6bc
 8001ed8:	0800d6d4 	.word	0x0800d6d4
 8001edc:	0800d6e8 	.word	0x0800d6e8
 8001ee0:	0800d6fc 	.word	0x0800d6fc
 8001ee4:	0800d718 	.word	0x0800d718
 8001ee8:	0800d730 	.word	0x0800d730
 8001eec:	0800d748 	.word	0x0800d748
 8001ef0:	0800d75c 	.word	0x0800d75c
 8001ef4:	0800d76c 	.word	0x0800d76c
 8001ef8:	0800d78c 	.word	0x0800d78c

08001efc <theMainTask_Init>:
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	4b03      	ldr	r3, [pc, #12]	; (8001f10 <theMainTask_Init+0x14>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	bf00      	nop
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	20000830 	.word	0x20000830

08001f14 <theMainTask_Cleanup>:
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <theMainTask_execute>:
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	e001      	b.n	8001f30 <theMainTask_execute+0xe>
 8001f2c:	f000 f81a 	bl	8001f64 <theMainTask_schedule>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0fa      	beq.n	8001f2c <theMainTask_execute+0xa>
 8001f36:	bf00      	nop
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <theMainTask_schedTm>:
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	607a      	str	r2, [r7, #4]
 8001f4c:	817b      	strh	r3, [r7, #10]
 8001f4e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	4619      	mov	r1, r3
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f7ff fd96 	bl	8001a88 <RiCTmManager_add>
 8001f5c:	bf00      	nop
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <theMainTask_schedule>:
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b088      	sub	sp, #32
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	2302      	movs	r3, #2
 8001f70:	76fb      	strb	r3, [r7, #27]
 8001f72:	f7ff fc7c 	bl	800186e <RiCMainTask>
 8001f76:	6178      	str	r0, [r7, #20]
 8001f78:	6978      	ldr	r0, [r7, #20]
 8001f7a:	f7ff f81e 	bl	8000fba <RiCTask_getItsRiCEvtQueue>
 8001f7e:	6138      	str	r0, [r7, #16]
 8001f80:	f7ff fcaa 	bl	80018d8 <RiCGetSystemTick>
 8001f84:	60f8      	str	r0, [r7, #12]
 8001f86:	4b39      	ldr	r3, [pc, #228]	; (800206c <theMainTask_schedule+0x108>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d005      	beq.n	8001fa2 <theMainTask_schedule+0x3e>
 8001f96:	6978      	ldr	r0, [r7, #20]
 8001f98:	f000 f87c 	bl	8002094 <tick>
 8001f9c:	4a33      	ldr	r2, [pc, #204]	; (800206c <theMainTask_schedule+0x108>)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	6938      	ldr	r0, [r7, #16]
 8001fa4:	f7ff f914 	bl	80011d0 <RiCEvtQueue_isEmpty>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d14f      	bne.n	800204e <theMainTask_schedule+0xea>
 8001fae:	6938      	ldr	r0, [r7, #16]
 8001fb0:	f7ff f8cf 	bl	8001152 <RiCEvtQueue_get>
 8001fb4:	61f8      	str	r0, [r7, #28]
 8001fb6:	69f8      	ldr	r0, [r7, #28]
 8001fb8:	f7fe f9a4 	bl	8000304 <RiCEvent_getlId>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	f113 0f03 	cmn.w	r3, #3
 8001fc2:	d031      	beq.n	8002028 <theMainTask_schedule+0xc4>
 8001fc4:	69f8      	ldr	r0, [r7, #28]
 8001fc6:	f7fe f99d 	bl	8000304 <RiCEvent_getlId>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	f113 0f06 	cmn.w	r3, #6
 8001fd0:	d02a      	beq.n	8002028 <theMainTask_schedule+0xc4>
 8001fd2:	69f8      	ldr	r0, [r7, #28]
 8001fd4:	f7fe f978 	bl	80002c8 <RiCEvent_getDestination>
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d103      	bne.n	8001fe8 <theMainTask_schedule+0x84>
 8001fe0:	2008      	movs	r0, #8
 8001fe2:	f7ff fed9 	bl	8001d98 <RiCErrorManager_log>
 8001fe6:	e01f      	b.n	8002028 <theMainTask_schedule+0xc4>
 8001fe8:	69f9      	ldr	r1, [r7, #28]
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7fe fc04 	bl	80007f8 <RiCReactive_takeEvent>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	76fb      	strb	r3, [r7, #27]
 8001ff4:	7efb      	ldrb	r3, [r7, #27]
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d116      	bne.n	8002028 <theMainTask_schedule+0xc4>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d010      	beq.n	8002022 <theMainTask_schedule+0xbe>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00c      	beq.n	8002022 <theMainTask_schedule+0xbe>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d007      	beq.n	8002022 <theMainTask_schedule+0xbe>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	68d2      	ldr	r2, [r2, #12]
 800201c:	4610      	mov	r0, r2
 800201e:	4798      	blx	r3
 8002020:	e002      	b.n	8002028 <theMainTask_schedule+0xc4>
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7fe fa78 	bl	8000518 <RiCReactive_destroy>
 8002028:	69f8      	ldr	r0, [r7, #28]
 800202a:	f7fe f9cb 	bl	80003c4 <RiCEvent_isTimeout>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <theMainTask_schedule+0xd8>
 8002034:	69f8      	ldr	r0, [r7, #28]
 8002036:	f7ff fe29 	bl	8001c8c <RiCTmManager_putBack>
 800203a:	e008      	b.n	800204e <theMainTask_schedule+0xea>
 800203c:	69f8      	ldr	r0, [r7, #28]
 800203e:	f7fe f9a7 	bl	8000390 <RiCEvent_isDeleteAfterConsume>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d002      	beq.n	800204e <theMainTask_schedule+0xea>
 8002048:	69f8      	ldr	r0, [r7, #28]
 800204a:	f7fe f913 	bl	8000274 <RiCEvent_destroy>
 800204e:	6938      	ldr	r0, [r7, #16]
 8002050:	f7ff f8be 	bl	80011d0 <RiCEvtQueue_isEmpty>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d004      	beq.n	8002064 <theMainTask_schedule+0x100>
 800205a:	4b05      	ldr	r3, [pc, #20]	; (8002070 <theMainTask_schedule+0x10c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff fc9f 	bl	80019a2 <RiCSleep>
 8002064:	bf00      	nop
 8002066:	3720      	adds	r7, #32
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	2000080c 	.word	0x2000080c
 8002070:	20000810 	.word	0x20000810

08002074 <theMainTask_unschedTm>:
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	6039      	str	r1, [r7, #0]
 800207e:	80fb      	strh	r3, [r7, #6]
 8002080:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002084:	6839      	ldr	r1, [r7, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff fe18 	bl	8001cbc <RiCTmManager_remove>
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <tick>:
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	f7ff fd8c 	bl	8001bb8 <RiCTmManager_getExpiredTimeout>
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	e006      	b.n	80020b2 <tick+0x1e>
 80020a4:	68f9      	ldr	r1, [r7, #12]
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7fe ff39 	bl	8000f1e <RiCTask_queueEvent>
 80020ac:	f7ff fd84 	bl	8001bb8 <RiCTmManager_getExpiredTimeout>
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1f5      	bne.n	80020a4 <tick+0x10>
 80020b8:	bf00      	nop
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <theMainTask_getHead>:
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <theMainTask_getHead+0x12>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	20000830 	.word	0x20000830

080020d8 <theMainTask_setHead>:
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	4a04      	ldr	r2, [pc, #16]	; (80020f4 <theMainTask_setHead+0x1c>)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20000830 	.word	0x20000830

080020f8 <theMainTask_getItsRiCTask>:
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	4b02      	ldr	r3, [pc, #8]	; (8002108 <theMainTask_getItsRiCTask+0x10>)
 80020fe:	4618      	mov	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	20000834 	.word	0x20000834
 800210c:	00000000 	.word	0x00000000

08002110 <memchr>:
 8002110:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8002114:	2a10      	cmp	r2, #16
 8002116:	db2b      	blt.n	8002170 <memchr+0x60>
 8002118:	f010 0f07 	tst.w	r0, #7
 800211c:	d008      	beq.n	8002130 <memchr+0x20>
 800211e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002122:	3a01      	subs	r2, #1
 8002124:	428b      	cmp	r3, r1
 8002126:	d02d      	beq.n	8002184 <memchr+0x74>
 8002128:	f010 0f07 	tst.w	r0, #7
 800212c:	b342      	cbz	r2, 8002180 <memchr+0x70>
 800212e:	d1f6      	bne.n	800211e <memchr+0xe>
 8002130:	b4f0      	push	{r4, r5, r6, r7}
 8002132:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8002136:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800213a:	f022 0407 	bic.w	r4, r2, #7
 800213e:	f07f 0700 	mvns.w	r7, #0
 8002142:	2300      	movs	r3, #0
 8002144:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8002148:	3c08      	subs	r4, #8
 800214a:	ea85 0501 	eor.w	r5, r5, r1
 800214e:	ea86 0601 	eor.w	r6, r6, r1
 8002152:	fa85 f547 	uadd8	r5, r5, r7
 8002156:	faa3 f587 	sel	r5, r3, r7
 800215a:	fa86 f647 	uadd8	r6, r6, r7
 800215e:	faa5 f687 	sel	r6, r5, r7
 8002162:	b98e      	cbnz	r6, 8002188 <memchr+0x78>
 8002164:	d1ee      	bne.n	8002144 <memchr+0x34>
 8002166:	bcf0      	pop	{r4, r5, r6, r7}
 8002168:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800216c:	f002 0207 	and.w	r2, r2, #7
 8002170:	b132      	cbz	r2, 8002180 <memchr+0x70>
 8002172:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002176:	3a01      	subs	r2, #1
 8002178:	ea83 0301 	eor.w	r3, r3, r1
 800217c:	b113      	cbz	r3, 8002184 <memchr+0x74>
 800217e:	d1f8      	bne.n	8002172 <memchr+0x62>
 8002180:	2000      	movs	r0, #0
 8002182:	4770      	bx	lr
 8002184:	3801      	subs	r0, #1
 8002186:	4770      	bx	lr
 8002188:	2d00      	cmp	r5, #0
 800218a:	bf06      	itte	eq
 800218c:	4635      	moveq	r5, r6
 800218e:	3803      	subeq	r0, #3
 8002190:	3807      	subne	r0, #7
 8002192:	f015 0f01 	tst.w	r5, #1
 8002196:	d107      	bne.n	80021a8 <memchr+0x98>
 8002198:	3001      	adds	r0, #1
 800219a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800219e:	bf02      	ittt	eq
 80021a0:	3001      	addeq	r0, #1
 80021a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80021a6:	3001      	addeq	r0, #1
 80021a8:	bcf0      	pop	{r4, r5, r6, r7}
 80021aa:	3801      	subs	r0, #1
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop

080021b0 <__aeabi_uldivmod>:
 80021b0:	b953      	cbnz	r3, 80021c8 <__aeabi_uldivmod+0x18>
 80021b2:	b94a      	cbnz	r2, 80021c8 <__aeabi_uldivmod+0x18>
 80021b4:	2900      	cmp	r1, #0
 80021b6:	bf08      	it	eq
 80021b8:	2800      	cmpeq	r0, #0
 80021ba:	bf1c      	itt	ne
 80021bc:	f04f 31ff 	movne.w	r1, #4294967295
 80021c0:	f04f 30ff 	movne.w	r0, #4294967295
 80021c4:	f000 b96e 	b.w	80024a4 <__aeabi_idiv0>
 80021c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80021cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80021d0:	f000 f806 	bl	80021e0 <__udivmoddi4>
 80021d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80021d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80021dc:	b004      	add	sp, #16
 80021de:	4770      	bx	lr

080021e0 <__udivmoddi4>:
 80021e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021e4:	9d08      	ldr	r5, [sp, #32]
 80021e6:	4604      	mov	r4, r0
 80021e8:	468c      	mov	ip, r1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f040 8083 	bne.w	80022f6 <__udivmoddi4+0x116>
 80021f0:	428a      	cmp	r2, r1
 80021f2:	4617      	mov	r7, r2
 80021f4:	d947      	bls.n	8002286 <__udivmoddi4+0xa6>
 80021f6:	fab2 f282 	clz	r2, r2
 80021fa:	b142      	cbz	r2, 800220e <__udivmoddi4+0x2e>
 80021fc:	f1c2 0020 	rsb	r0, r2, #32
 8002200:	fa24 f000 	lsr.w	r0, r4, r0
 8002204:	4091      	lsls	r1, r2
 8002206:	4097      	lsls	r7, r2
 8002208:	ea40 0c01 	orr.w	ip, r0, r1
 800220c:	4094      	lsls	r4, r2
 800220e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8002212:	0c23      	lsrs	r3, r4, #16
 8002214:	fbbc f6f8 	udiv	r6, ip, r8
 8002218:	fa1f fe87 	uxth.w	lr, r7
 800221c:	fb08 c116 	mls	r1, r8, r6, ip
 8002220:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002224:	fb06 f10e 	mul.w	r1, r6, lr
 8002228:	4299      	cmp	r1, r3
 800222a:	d909      	bls.n	8002240 <__udivmoddi4+0x60>
 800222c:	18fb      	adds	r3, r7, r3
 800222e:	f106 30ff 	add.w	r0, r6, #4294967295
 8002232:	f080 8119 	bcs.w	8002468 <__udivmoddi4+0x288>
 8002236:	4299      	cmp	r1, r3
 8002238:	f240 8116 	bls.w	8002468 <__udivmoddi4+0x288>
 800223c:	3e02      	subs	r6, #2
 800223e:	443b      	add	r3, r7
 8002240:	1a5b      	subs	r3, r3, r1
 8002242:	b2a4      	uxth	r4, r4
 8002244:	fbb3 f0f8 	udiv	r0, r3, r8
 8002248:	fb08 3310 	mls	r3, r8, r0, r3
 800224c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8002250:	fb00 fe0e 	mul.w	lr, r0, lr
 8002254:	45a6      	cmp	lr, r4
 8002256:	d909      	bls.n	800226c <__udivmoddi4+0x8c>
 8002258:	193c      	adds	r4, r7, r4
 800225a:	f100 33ff 	add.w	r3, r0, #4294967295
 800225e:	f080 8105 	bcs.w	800246c <__udivmoddi4+0x28c>
 8002262:	45a6      	cmp	lr, r4
 8002264:	f240 8102 	bls.w	800246c <__udivmoddi4+0x28c>
 8002268:	3802      	subs	r0, #2
 800226a:	443c      	add	r4, r7
 800226c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8002270:	eba4 040e 	sub.w	r4, r4, lr
 8002274:	2600      	movs	r6, #0
 8002276:	b11d      	cbz	r5, 8002280 <__udivmoddi4+0xa0>
 8002278:	40d4      	lsrs	r4, r2
 800227a:	2300      	movs	r3, #0
 800227c:	e9c5 4300 	strd	r4, r3, [r5]
 8002280:	4631      	mov	r1, r6
 8002282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002286:	b902      	cbnz	r2, 800228a <__udivmoddi4+0xaa>
 8002288:	deff      	udf	#255	; 0xff
 800228a:	fab2 f282 	clz	r2, r2
 800228e:	2a00      	cmp	r2, #0
 8002290:	d150      	bne.n	8002334 <__udivmoddi4+0x154>
 8002292:	1bcb      	subs	r3, r1, r7
 8002294:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8002298:	fa1f f887 	uxth.w	r8, r7
 800229c:	2601      	movs	r6, #1
 800229e:	fbb3 fcfe 	udiv	ip, r3, lr
 80022a2:	0c21      	lsrs	r1, r4, #16
 80022a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80022a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80022ac:	fb08 f30c 	mul.w	r3, r8, ip
 80022b0:	428b      	cmp	r3, r1
 80022b2:	d907      	bls.n	80022c4 <__udivmoddi4+0xe4>
 80022b4:	1879      	adds	r1, r7, r1
 80022b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80022ba:	d202      	bcs.n	80022c2 <__udivmoddi4+0xe2>
 80022bc:	428b      	cmp	r3, r1
 80022be:	f200 80e9 	bhi.w	8002494 <__udivmoddi4+0x2b4>
 80022c2:	4684      	mov	ip, r0
 80022c4:	1ac9      	subs	r1, r1, r3
 80022c6:	b2a3      	uxth	r3, r4
 80022c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80022cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80022d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80022d4:	fb08 f800 	mul.w	r8, r8, r0
 80022d8:	45a0      	cmp	r8, r4
 80022da:	d907      	bls.n	80022ec <__udivmoddi4+0x10c>
 80022dc:	193c      	adds	r4, r7, r4
 80022de:	f100 33ff 	add.w	r3, r0, #4294967295
 80022e2:	d202      	bcs.n	80022ea <__udivmoddi4+0x10a>
 80022e4:	45a0      	cmp	r8, r4
 80022e6:	f200 80d9 	bhi.w	800249c <__udivmoddi4+0x2bc>
 80022ea:	4618      	mov	r0, r3
 80022ec:	eba4 0408 	sub.w	r4, r4, r8
 80022f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80022f4:	e7bf      	b.n	8002276 <__udivmoddi4+0x96>
 80022f6:	428b      	cmp	r3, r1
 80022f8:	d909      	bls.n	800230e <__udivmoddi4+0x12e>
 80022fa:	2d00      	cmp	r5, #0
 80022fc:	f000 80b1 	beq.w	8002462 <__udivmoddi4+0x282>
 8002300:	2600      	movs	r6, #0
 8002302:	e9c5 0100 	strd	r0, r1, [r5]
 8002306:	4630      	mov	r0, r6
 8002308:	4631      	mov	r1, r6
 800230a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800230e:	fab3 f683 	clz	r6, r3
 8002312:	2e00      	cmp	r6, #0
 8002314:	d14a      	bne.n	80023ac <__udivmoddi4+0x1cc>
 8002316:	428b      	cmp	r3, r1
 8002318:	d302      	bcc.n	8002320 <__udivmoddi4+0x140>
 800231a:	4282      	cmp	r2, r0
 800231c:	f200 80b8 	bhi.w	8002490 <__udivmoddi4+0x2b0>
 8002320:	1a84      	subs	r4, r0, r2
 8002322:	eb61 0103 	sbc.w	r1, r1, r3
 8002326:	2001      	movs	r0, #1
 8002328:	468c      	mov	ip, r1
 800232a:	2d00      	cmp	r5, #0
 800232c:	d0a8      	beq.n	8002280 <__udivmoddi4+0xa0>
 800232e:	e9c5 4c00 	strd	r4, ip, [r5]
 8002332:	e7a5      	b.n	8002280 <__udivmoddi4+0xa0>
 8002334:	f1c2 0320 	rsb	r3, r2, #32
 8002338:	fa20 f603 	lsr.w	r6, r0, r3
 800233c:	4097      	lsls	r7, r2
 800233e:	fa01 f002 	lsl.w	r0, r1, r2
 8002342:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8002346:	40d9      	lsrs	r1, r3
 8002348:	4330      	orrs	r0, r6
 800234a:	0c03      	lsrs	r3, r0, #16
 800234c:	fbb1 f6fe 	udiv	r6, r1, lr
 8002350:	fa1f f887 	uxth.w	r8, r7
 8002354:	fb0e 1116 	mls	r1, lr, r6, r1
 8002358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800235c:	fb06 f108 	mul.w	r1, r6, r8
 8002360:	4299      	cmp	r1, r3
 8002362:	fa04 f402 	lsl.w	r4, r4, r2
 8002366:	d909      	bls.n	800237c <__udivmoddi4+0x19c>
 8002368:	18fb      	adds	r3, r7, r3
 800236a:	f106 3cff 	add.w	ip, r6, #4294967295
 800236e:	f080 808d 	bcs.w	800248c <__udivmoddi4+0x2ac>
 8002372:	4299      	cmp	r1, r3
 8002374:	f240 808a 	bls.w	800248c <__udivmoddi4+0x2ac>
 8002378:	3e02      	subs	r6, #2
 800237a:	443b      	add	r3, r7
 800237c:	1a5b      	subs	r3, r3, r1
 800237e:	b281      	uxth	r1, r0
 8002380:	fbb3 f0fe 	udiv	r0, r3, lr
 8002384:	fb0e 3310 	mls	r3, lr, r0, r3
 8002388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800238c:	fb00 f308 	mul.w	r3, r0, r8
 8002390:	428b      	cmp	r3, r1
 8002392:	d907      	bls.n	80023a4 <__udivmoddi4+0x1c4>
 8002394:	1879      	adds	r1, r7, r1
 8002396:	f100 3cff 	add.w	ip, r0, #4294967295
 800239a:	d273      	bcs.n	8002484 <__udivmoddi4+0x2a4>
 800239c:	428b      	cmp	r3, r1
 800239e:	d971      	bls.n	8002484 <__udivmoddi4+0x2a4>
 80023a0:	3802      	subs	r0, #2
 80023a2:	4439      	add	r1, r7
 80023a4:	1acb      	subs	r3, r1, r3
 80023a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80023aa:	e778      	b.n	800229e <__udivmoddi4+0xbe>
 80023ac:	f1c6 0c20 	rsb	ip, r6, #32
 80023b0:	fa03 f406 	lsl.w	r4, r3, r6
 80023b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80023b8:	431c      	orrs	r4, r3
 80023ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80023be:	fa01 f306 	lsl.w	r3, r1, r6
 80023c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80023c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80023ca:	431f      	orrs	r7, r3
 80023cc:	0c3b      	lsrs	r3, r7, #16
 80023ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80023d2:	fa1f f884 	uxth.w	r8, r4
 80023d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80023da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80023de:	fb09 fa08 	mul.w	sl, r9, r8
 80023e2:	458a      	cmp	sl, r1
 80023e4:	fa02 f206 	lsl.w	r2, r2, r6
 80023e8:	fa00 f306 	lsl.w	r3, r0, r6
 80023ec:	d908      	bls.n	8002400 <__udivmoddi4+0x220>
 80023ee:	1861      	adds	r1, r4, r1
 80023f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80023f4:	d248      	bcs.n	8002488 <__udivmoddi4+0x2a8>
 80023f6:	458a      	cmp	sl, r1
 80023f8:	d946      	bls.n	8002488 <__udivmoddi4+0x2a8>
 80023fa:	f1a9 0902 	sub.w	r9, r9, #2
 80023fe:	4421      	add	r1, r4
 8002400:	eba1 010a 	sub.w	r1, r1, sl
 8002404:	b2bf      	uxth	r7, r7
 8002406:	fbb1 f0fe 	udiv	r0, r1, lr
 800240a:	fb0e 1110 	mls	r1, lr, r0, r1
 800240e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8002412:	fb00 f808 	mul.w	r8, r0, r8
 8002416:	45b8      	cmp	r8, r7
 8002418:	d907      	bls.n	800242a <__udivmoddi4+0x24a>
 800241a:	19e7      	adds	r7, r4, r7
 800241c:	f100 31ff 	add.w	r1, r0, #4294967295
 8002420:	d22e      	bcs.n	8002480 <__udivmoddi4+0x2a0>
 8002422:	45b8      	cmp	r8, r7
 8002424:	d92c      	bls.n	8002480 <__udivmoddi4+0x2a0>
 8002426:	3802      	subs	r0, #2
 8002428:	4427      	add	r7, r4
 800242a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800242e:	eba7 0708 	sub.w	r7, r7, r8
 8002432:	fba0 8902 	umull	r8, r9, r0, r2
 8002436:	454f      	cmp	r7, r9
 8002438:	46c6      	mov	lr, r8
 800243a:	4649      	mov	r1, r9
 800243c:	d31a      	bcc.n	8002474 <__udivmoddi4+0x294>
 800243e:	d017      	beq.n	8002470 <__udivmoddi4+0x290>
 8002440:	b15d      	cbz	r5, 800245a <__udivmoddi4+0x27a>
 8002442:	ebb3 020e 	subs.w	r2, r3, lr
 8002446:	eb67 0701 	sbc.w	r7, r7, r1
 800244a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800244e:	40f2      	lsrs	r2, r6
 8002450:	ea4c 0202 	orr.w	r2, ip, r2
 8002454:	40f7      	lsrs	r7, r6
 8002456:	e9c5 2700 	strd	r2, r7, [r5]
 800245a:	2600      	movs	r6, #0
 800245c:	4631      	mov	r1, r6
 800245e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002462:	462e      	mov	r6, r5
 8002464:	4628      	mov	r0, r5
 8002466:	e70b      	b.n	8002280 <__udivmoddi4+0xa0>
 8002468:	4606      	mov	r6, r0
 800246a:	e6e9      	b.n	8002240 <__udivmoddi4+0x60>
 800246c:	4618      	mov	r0, r3
 800246e:	e6fd      	b.n	800226c <__udivmoddi4+0x8c>
 8002470:	4543      	cmp	r3, r8
 8002472:	d2e5      	bcs.n	8002440 <__udivmoddi4+0x260>
 8002474:	ebb8 0e02 	subs.w	lr, r8, r2
 8002478:	eb69 0104 	sbc.w	r1, r9, r4
 800247c:	3801      	subs	r0, #1
 800247e:	e7df      	b.n	8002440 <__udivmoddi4+0x260>
 8002480:	4608      	mov	r0, r1
 8002482:	e7d2      	b.n	800242a <__udivmoddi4+0x24a>
 8002484:	4660      	mov	r0, ip
 8002486:	e78d      	b.n	80023a4 <__udivmoddi4+0x1c4>
 8002488:	4681      	mov	r9, r0
 800248a:	e7b9      	b.n	8002400 <__udivmoddi4+0x220>
 800248c:	4666      	mov	r6, ip
 800248e:	e775      	b.n	800237c <__udivmoddi4+0x19c>
 8002490:	4630      	mov	r0, r6
 8002492:	e74a      	b.n	800232a <__udivmoddi4+0x14a>
 8002494:	f1ac 0c02 	sub.w	ip, ip, #2
 8002498:	4439      	add	r1, r7
 800249a:	e713      	b.n	80022c4 <__udivmoddi4+0xe4>
 800249c:	3802      	subs	r0, #2
 800249e:	443c      	add	r4, r7
 80024a0:	e724      	b.n	80022ec <__udivmoddi4+0x10c>
 80024a2:	bf00      	nop

080024a4 <__aeabi_idiv0>:
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop

080024a8 <Button_Init>:
static RiCTakeEventStatus rootState_dispatchEvent(void * const void_me, short id);

/*## statechart_method */
static void held_entDef(struct Button_t* const me);

void Button_Init(struct Button_t* const me, RiCTask * p_task) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
    static const RiCReactive_Vtbl Button_reactiveVtbl = {
        rootState_dispatchEvent,
        rootState_entDef,
        NULL
    };
    RiCReactive_init(&(me->ric_reactive), (void*)me, p_task, &Button_reactiveVtbl);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	4b09      	ldr	r3, [pc, #36]	; (80024dc <Button_Init+0x34>)
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	f7fe f86f 	bl	800059c <RiCReactive_init>
    RiCReactive_setActive(&(me->ric_reactive), RiCFALSE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2100      	movs	r1, #0
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe f8ba 	bl	800063c <RiCReactive_setActive>
    me->itsTimer = NULL;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	61da      	str	r2, [r3, #28]
    initStatechart(me);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f817 	bl	8002502 <initStatechart>
}
 80024d4:	bf00      	nop
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	0800d79c 	.word	0x0800d79c

080024e0 <Button_startBehavior>:
void Button_Cleanup(struct Button_t* const me) {
    RiCReactive_cleanup(&(me->ric_reactive));
    cleanUpRelations(me);
}

RiCBoolean Button_startBehavior(struct Button_t* const me) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
    RiCBoolean done = RiCFALSE;
 80024e8:	2300      	movs	r3, #0
 80024ea:	73fb      	strb	r3, [r7, #15]
    done = RiCReactive_startBehavior(&(me->ric_reactive));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe f916 	bl	8000720 <RiCReactive_startBehavior>
 80024f4:	4603      	mov	r3, r0
 80024f6:	73fb      	strb	r3, [r7, #15]
    return done;
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <initStatechart>:

static void initStatechart(struct Button_t* const me) {
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
    me->rootState_subState = Button_RiCNonState;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2020 	strb.w	r2, [r3, #32]
    me->rootState_active = Button_RiCNonState;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    me->held_subState = Button_RiCNonState;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <Button_setItsTimer>:

struct Timer_t* Button_getItsTimer(const struct Button_t* const me) {
    return (struct Timer_t*)me->itsTimer;
}

void Button_setItsTimer(struct Button_t* const me, struct Timer_t* p_Timer) {
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	6039      	str	r1, [r7, #0]
    me->itsTimer = p_Timer;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	61da      	str	r2, [r3, #28]
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <Button_held_exit>:

void Button_held_exit(struct Button_t* const me) {
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
    if(me->held_subState == Button_pressed)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002558:	2b03      	cmp	r3, #3
 800255a:	d106      	bne.n	800256a <Button_held_exit+0x20>
        {
            RiCTask_unschedTm(me->ric_reactive.myTask, Button_Timeout_pressed_id, &(me->ric_reactive));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	2102      	movs	r1, #2
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe fd17 	bl	8000f98 <RiCTask_unschedTm>
        }
    me->held_subState = Button_RiCNonState;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    RiCTask_unschedTm(me->ric_reactive.myTask, Button_Timeout_held_id, &(me->ric_reactive));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	2101      	movs	r1, #1
 800257a:	4618      	mov	r0, r3
 800257c:	f7fe fd0c 	bl	8000f98 <RiCTask_unschedTm>
}
 8002580:	bf00      	nop
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <Button_held_takeEvent>:

RiCTakeEventStatus Button_held_takeEvent(struct Button_t* const me, short id) {
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	807b      	strh	r3, [r7, #2]
    RiCTakeEventStatus res = eventNotConsumed;
 8002594:	2300      	movs	r3, #0
 8002596:	75fb      	strb	r3, [r7, #23]
    if(id == Timeout_id)
 8002598:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800259c:	f113 0f02 	cmn.w	r3, #2
 80025a0:	d123      	bne.n	80025ea <Button_held_takeEvent+0x62>
        {
            if(RiCTimeout_getTimeoutId((RiCTimeout*) me->ric_reactive.current_event) == Button_Timeout_held_id)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe fbb0 	bl	8000d0c <RiCTimeout_getTimeoutId>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d11b      	bne.n	80025ea <Button_held_takeEvent+0x62>
                {
                    Button_held_exit(me);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff ffc9 	bl	800254a <Button_held_exit>
                    {
                        /*#[ transition 3 */
                        
                        CGEN(me->itsTimer, evReset());
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00a      	beq.n	80025d6 <Button_held_takeEvent+0x4e>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	f000 fb39 	bl	8002c3c <RiC_Create_evReset>
 80025ca:	4603      	mov	r3, r0
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	68f9      	ldr	r1, [r7, #12]
 80025d0:	6938      	ldr	r0, [r7, #16]
 80025d2:	f7fd ffb2 	bl	800053a <RiCReactive_gen>
                        /*#]*/
                    }
                    me->rootState_subState = Button_idle;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2020 	strb.w	r2, [r3, #32]
                    me->rootState_active = Button_idle;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                    res = eventConsumed;
 80025e6:	2301      	movs	r3, #1
 80025e8:	75fb      	strb	r3, [r7, #23]
                }
        }
    return res;
 80025ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <rootState_entDef>:

static void rootState_entDef(void * const void_me) {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
    
    struct Button_t * const me = (struct Button_t *)void_me;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	60fb      	str	r3, [r7, #12]
    {
        {
            /*#[ transition 4 */
            ssd1306_Init(); ssd1306_Fill(Black);
 8002600:	f001 f816 	bl	8003630 <ssd1306_Init>
 8002604:	2000      	movs	r0, #0
 8002606:	f001 f87f 	bl	8003708 <ssd1306_Fill>
            /*#]*/
        }
        me->rootState_subState = Button_idle;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2020 	strb.w	r2, [r3, #32]
        me->rootState_active = Button_idle;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
}
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <rootState_dispatchEvent>:

static RiCTakeEventStatus rootState_dispatchEvent(void * const void_me, short id) {
 8002622:	b580      	push	{r7, lr}
 8002624:	b08a      	sub	sp, #40	; 0x28
 8002626:	af02      	add	r7, sp, #8
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	460b      	mov	r3, r1
 800262c:	807b      	strh	r3, [r7, #2]
    
    struct Button_t * const me = (struct Button_t *)void_me;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	61bb      	str	r3, [r7, #24]
    RiCTakeEventStatus res = eventNotConsumed;
 8002632:	2300      	movs	r3, #0
 8002634:	77fb      	strb	r3, [r7, #31]
    switch (me->rootState_active) {
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800263c:	2b01      	cmp	r3, #1
 800263e:	d002      	beq.n	8002646 <rootState_dispatchEvent+0x24>
 8002640:	2b03      	cmp	r3, #3
 8002642:	d01b      	beq.n	800267c <rootState_dispatchEvent+0x5a>
                    res = Button_held_takeEvent(me, id);
                }
        }
        break;
        default:
            break;
 8002644:	e077      	b.n	8002736 <rootState_dispatchEvent+0x114>
            if(id == evPress_StopwatchPkg_id)
 8002646:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800264a:	f642 02a1 	movw	r2, #10401	; 0x28a1
 800264e:	4293      	cmp	r3, r2
 8002650:	d16e      	bne.n	8002730 <rootState_dispatchEvent+0x10e>
                        CGEN(me->itsTimer, evStartStop());
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00a      	beq.n	8002670 <rootState_dispatchEvent+0x4e>
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	f000 faa8 	bl	8002bb4 <RiC_Create_evStartStop>
 8002664:	4603      	mov	r3, r0
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	68b9      	ldr	r1, [r7, #8]
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f7fd ff65 	bl	800053a <RiCReactive_gen>
                    held_entDef(me);
 8002670:	69b8      	ldr	r0, [r7, #24]
 8002672:	f000 f865 	bl	8002740 <held_entDef>
                    res = eventConsumed;
 8002676:	2301      	movs	r3, #1
 8002678:	77fb      	strb	r3, [r7, #31]
        break;
 800267a:	e059      	b.n	8002730 <rootState_dispatchEvent+0x10e>
            switch (id) {
 800267c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002680:	f113 0f02 	cmn.w	r3, #2
 8002684:	d004      	beq.n	8002690 <rootState_dispatchEvent+0x6e>
 8002686:	f642 02a5 	movw	r2, #10405	; 0x28a5
 800268a:	4293      	cmp	r3, r2
 800268c:	d035      	beq.n	80026fa <rootState_dispatchEvent+0xd8>
                    break;
 800268e:	e043      	b.n	8002718 <rootState_dispatchEvent+0xf6>
                    if(RiCTimeout_getTimeoutId((RiCTimeout*) me->ric_reactive.current_event) == Button_Timeout_pressed_id)
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7fe fb39 	bl	8000d0c <RiCTimeout_getTimeoutId>
 800269a:	4603      	mov	r3, r0
 800269c:	2b02      	cmp	r3, #2
 800269e:	d13a      	bne.n	8002716 <rootState_dispatchEvent+0xf4>
                            RiCTask_unschedTm(me->ric_reactive.myTask, Button_Timeout_pressed_id, &(me->ric_reactive));
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	2102      	movs	r1, #2
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fe fc75 	bl	8000f98 <RiCTask_unschedTm>
                            me->held_subState = Button_pressed;
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	2203      	movs	r2, #3
 80026b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                            me->rootState_active = Button_pressed;
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	2203      	movs	r2, #3
 80026ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                                if(!ReadButton()) CGEN(me, evRelease());
 80026be:	f000 fccf 	bl	8003060 <ReadButton>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10c      	bne.n	80026e2 <rootState_dispatchEvent+0xc0>
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d009      	beq.n	80026e2 <rootState_dispatchEvent+0xc0>
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	f000 faf7 	bl	8002cc4 <RiC_Create_evRelease>
 80026d6:	4603      	mov	r3, r0
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	6939      	ldr	r1, [r7, #16]
 80026dc:	6978      	ldr	r0, [r7, #20]
 80026de:	f7fd ff2c 	bl	800053a <RiCReactive_gen>
                            RiCTask_schedTm(me->ric_reactive.myTask, 30, Button_Timeout_pressed_id, &(me->ric_reactive), NULL);
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	6858      	ldr	r0, [r3, #4]
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	2200      	movs	r2, #0
 80026ea:	9200      	str	r2, [sp, #0]
 80026ec:	2202      	movs	r2, #2
 80026ee:	211e      	movs	r1, #30
 80026f0:	f7fe fc2a 	bl	8000f48 <RiCTask_schedTm>
                            res = eventConsumed;
 80026f4:	2301      	movs	r3, #1
 80026f6:	77fb      	strb	r3, [r7, #31]
                break;
 80026f8:	e00d      	b.n	8002716 <rootState_dispatchEvent+0xf4>
                    Button_held_exit(me);
 80026fa:	69b8      	ldr	r0, [r7, #24]
 80026fc:	f7ff ff25 	bl	800254a <Button_held_exit>
                    me->rootState_subState = Button_idle;
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2020 	strb.w	r2, [r3, #32]
                    me->rootState_active = Button_idle;
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                    res = eventConsumed;
 8002710:	2301      	movs	r3, #1
 8002712:	77fb      	strb	r3, [r7, #31]
                break;
 8002714:	e000      	b.n	8002718 <rootState_dispatchEvent+0xf6>
                break;
 8002716:	bf00      	nop
            if(res == eventNotConsumed)
 8002718:	7ffb      	ldrb	r3, [r7, #31]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10a      	bne.n	8002734 <rootState_dispatchEvent+0x112>
                    res = Button_held_takeEvent(me, id);
 800271e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002722:	4619      	mov	r1, r3
 8002724:	69b8      	ldr	r0, [r7, #24]
 8002726:	f7ff ff2f 	bl	8002588 <Button_held_takeEvent>
 800272a:	4603      	mov	r3, r0
 800272c:	77fb      	strb	r3, [r7, #31]
        break;
 800272e:	e001      	b.n	8002734 <rootState_dispatchEvent+0x112>
        break;
 8002730:	bf00      	nop
 8002732:	e000      	b.n	8002736 <rootState_dispatchEvent+0x114>
        break;
 8002734:	bf00      	nop
    }
    return res;
 8002736:	7ffb      	ldrb	r3, [r7, #31]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3720      	adds	r7, #32
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <held_entDef>:

static void held_entDef(struct Button_t* const me) {
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af02      	add	r7, sp, #8
 8002746:	6078      	str	r0, [r7, #4]
    me->rootState_subState = Button_held;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2202      	movs	r2, #2
 800274c:	f883 2020 	strb.w	r2, [r3, #32]
    RiCTask_schedTm(me->ric_reactive.myTask, 3000, Button_Timeout_held_id, &(me->ric_reactive), NULL);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6858      	ldr	r0, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	9200      	str	r2, [sp, #0]
 800275a:	2201      	movs	r2, #1
 800275c:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002760:	f7fe fbf2 	bl	8000f48 <RiCTask_schedTm>
    me->held_subState = Button_pressed;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2203      	movs	r2, #3
 8002768:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    me->rootState_active = Button_pressed;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2203      	movs	r2, #3
 8002770:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    {
        /*#[ state ROOT.held.pressed.(Entry) */
        if(!ReadButton()) CGEN(me, evRelease());
 8002774:	f000 fc74 	bl	8003060 <ReadButton>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10c      	bne.n	8002798 <held_entDef+0x58>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d009      	beq.n	8002798 <held_entDef+0x58>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	f000 fa9c 	bl	8002cc4 <RiC_Create_evRelease>
 800278c:	4603      	mov	r3, r0
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	68b9      	ldr	r1, [r7, #8]
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f7fd fed1 	bl	800053a <RiCReactive_gen>
        /*#]*/
    }
    RiCTask_schedTm(me->ric_reactive.myTask, 30, Button_Timeout_pressed_id, &(me->ric_reactive), NULL);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6858      	ldr	r0, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	9200      	str	r2, [sp, #0]
 80027a2:	2202      	movs	r2, #2
 80027a4:	211e      	movs	r1, #30
 80027a6:	f7fe fbcf 	bl	8000f48 <RiCTask_schedTm>
}
 80027aa:	bf00      	nop
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <Display_Init>:

/*## class TopLevel::Display */

extern void ssd1306_UpdateScreen(void); extern uint8_t ssd1306_Init(void); extern char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color); extern void ssd1306_SetCursor(uint8_t x, uint8_t y);

void Display_Init(struct Display_t* const me) {
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
	...

080027c8 <Display_print>:

void Display_Cleanup(struct Display_t* const me) {
}

/*## operation print(int,int) */
void Display_print(struct Display_t* const me, int min, int sec) {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b088      	sub	sp, #32
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
    /*#[ operation print(int,int) */
    printf("%d:%d\r\n",min,sec);      
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	68b9      	ldr	r1, [r7, #8]
 80027d8:	4810      	ldr	r0, [pc, #64]	; (800281c <Display_print+0x54>)
 80027da:	f009 fe6d 	bl	800c4b8 <iprintf>
    
    char string[10];
    ssd1306_Fill(Black);
 80027de:	2000      	movs	r0, #0
 80027e0:	f000 ff92 	bl	8003708 <ssd1306_Fill>
    ssd1306_SetCursor(40, 20);
 80027e4:	2114      	movs	r1, #20
 80027e6:	2028      	movs	r0, #40	; 0x28
 80027e8:	f001 f8e8 	bl	80039bc <ssd1306_SetCursor>
    sprintf(string, "%d:%d", min,sec);
 80027ec:	f107 0014 	add.w	r0, r7, #20
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	490a      	ldr	r1, [pc, #40]	; (8002820 <Display_print+0x58>)
 80027f6:	f009 ff13 	bl	800c620 <siprintf>
    ssd1306_WriteString(string, Font_16x26, White);
 80027fa:	4a0a      	ldr	r2, [pc, #40]	; (8002824 <Display_print+0x5c>)
 80027fc:	f107 0014 	add.w	r0, r7, #20
 8002800:	2301      	movs	r3, #1
 8002802:	ca06      	ldmia	r2, {r1, r2}
 8002804:	f001 f8b4 	bl	8003970 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8002808:	f000 ffa2 	bl	8003750 <ssd1306_UpdateScreen>
    HAL_Delay(10);
 800280c:	200a      	movs	r0, #10
 800280e:	f001 fc2f 	bl	8004070 <HAL_Delay>
    /*#]*/
}
 8002812:	bf00      	nop
 8002814:	3720      	adds	r7, #32
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	0800d230 	.word	0x0800d230
 8002820:	0800d238 	.word	0x0800d238
 8002824:	20000010 	.word	0x20000010

08002828 <StopwatchTest_Init>:

/*## auto_generated */
#include "MainStopwatchTest.h"
/*## auto_generated */
#include "StopwatchPkg.h"
void StopwatchTest_Init(void) {
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
    StopwatchPkg_initRelations();
 800282c:	f000 f906 	bl	8002a3c <StopwatchPkg_initRelations>
    StopwatchPkg_startBehavior();
 8002830:	f000 f934 	bl	8002a9c <StopwatchPkg_startBehavior>
}
 8002834:	bf00      	nop
 8002836:	bd80      	pop	{r7, pc}

08002838 <StopwatchTest_Cleanup>:

void StopwatchTest_Cleanup(void) {
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
    StopwatchPkg_OMInitializer_Cleanup();
 800283c:	f000 f8f7 	bl	8002a2e <StopwatchPkg_OMInitializer_Cleanup>
}
 8002840:	bf00      	nop
 8002842:	bd80      	pop	{r7, pc}

08002844 <Cortex_main>:

int Cortex_main(int argc, char* argv[]) {
 8002844:	b580      	push	{r7, lr}
 8002846:	b088      	sub	sp, #32
 8002848:	af04      	add	r7, sp, #16
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
    int status = 0;
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
    if(RiCOXFInit(argc, argv, 6423, "", 0, 0, RiCTRUE))
 8002852:	2301      	movs	r3, #1
 8002854:	9302      	str	r3, [sp, #8]
 8002856:	2300      	movs	r3, #0
 8002858:	9301      	str	r3, [sp, #4]
 800285a:	2300      	movs	r3, #0
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	4b0d      	ldr	r3, [pc, #52]	; (8002894 <Cortex_main+0x50>)
 8002860:	f641 1217 	movw	r2, #6423	; 0x1917
 8002864:	6839      	ldr	r1, [r7, #0]
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff f85a 	bl	8001920 <RiCOXFInit>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d009      	beq.n	8002886 <Cortex_main+0x42>
        {
            StopwatchTest_Init();
 8002872:	f7ff ffd9 	bl	8002828 <StopwatchTest_Init>
            /*#[ configuration StopwatchTest::Arm_Cortex */
            /*#]*/
            RiCOXFStart(FALSE);
 8002876:	2000      	movs	r0, #0
 8002878:	f7ff f881 	bl	800197e <RiCOXFStart>
            StopwatchTest_Cleanup();
 800287c:	f7ff ffdc 	bl	8002838 <StopwatchTest_Cleanup>
            status = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	e001      	b.n	800288a <Cortex_main+0x46>
        }
    else
        {
            status = 1;
 8002886:	2301      	movs	r3, #1
 8002888:	60fb      	str	r3, [r7, #12]
        }
    return status;
 800288a:	68fb      	ldr	r3, [r7, #12]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	0800d240 	.word	0x0800d240

08002898 <PushSwitch_Init>:
static void rootState_entDef(void * const void_me);

/*## statechart_method */
static RiCTakeEventStatus rootState_dispatchEvent(void * const void_me, short id);

void PushSwitch_Init(struct PushSwitch_t* const me, RiCTask * p_task) {
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
    static const RiCReactive_Vtbl PushSwitch_reactiveVtbl = {
        rootState_dispatchEvent,
        rootState_entDef,
        NULL
    };
    RiCReactive_init(&(me->ric_reactive), (void*)me, p_task, &PushSwitch_reactiveVtbl);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	4b09      	ldr	r3, [pc, #36]	; (80028cc <PushSwitch_Init+0x34>)
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	f7fd fe77 	bl	800059c <RiCReactive_init>
    RiCReactive_setActive(&(me->ric_reactive), RiCFALSE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2100      	movs	r1, #0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fd fec2 	bl	800063c <RiCReactive_setActive>
    me->itsButton = NULL;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	61da      	str	r2, [r3, #28]
    initStatechart(me);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f825 	bl	800290e <initStatechart>
}
 80028c4:	bf00      	nop
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	0800d7a8 	.word	0x0800d7a8

080028d0 <PushSwitch_setItsButton>:

struct Button_t* PushSwitch_getItsButton(const struct PushSwitch_t* const me) {
    return (struct Button_t*)me->itsButton;
}

void PushSwitch_setItsButton(struct PushSwitch_t* const me, struct Button_t* p_Button) {
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
    me->itsButton = p_Button;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	61da      	str	r2, [r3, #28]
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <PushSwitch_startBehavior>:

RiCBoolean PushSwitch_startBehavior(struct PushSwitch_t* const me) {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
    RiCBoolean done = RiCFALSE;
 80028f4:	2300      	movs	r3, #0
 80028f6:	73fb      	strb	r3, [r7, #15]
    done = RiCReactive_startBehavior(&(me->ric_reactive));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fd ff10 	bl	8000720 <RiCReactive_startBehavior>
 8002900:	4603      	mov	r3, r0
 8002902:	73fb      	strb	r3, [r7, #15]
    return done;
 8002904:	7bfb      	ldrb	r3, [r7, #15]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <initStatechart>:

static void initStatechart(struct PushSwitch_t* const me) {
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
    me->rootState_subState = PushSwitch_RiCNonState;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2020 	strb.w	r2, [r3, #32]
    me->rootState_active = PushSwitch_RiCNonState;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <rootState_entDef>:
        {
            me->itsButton = NULL;
        }
}

static void rootState_entDef(void * const void_me) {
 8002932:	b580      	push	{r7, lr}
 8002934:	b088      	sub	sp, #32
 8002936:	af02      	add	r7, sp, #8
 8002938:	6078      	str	r0, [r7, #4]
    
    struct PushSwitch_t * const me = (struct PushSwitch_t *)void_me;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	617b      	str	r3, [r7, #20]
    {
        me->rootState_subState = PushSwitch_ReadSwitch;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2020 	strb.w	r2, [r3, #32]
        me->rootState_active = PushSwitch_ReadSwitch;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        {
            /*#[ state ROOT.ReadSwitch.(Entry) */
            if(ReadButton()) CGEN(me->itsButton, evPress());
 800294e:	f000 fb87 	bl	8003060 <ReadButton>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00e      	beq.n	8002976 <rootState_entDef+0x44>
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00a      	beq.n	8002976 <rootState_entDef+0x44>
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	f000 f8e1 	bl	8002b2c <RiC_Create_evPress>
 800296a:	4603      	mov	r3, r0
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	68f9      	ldr	r1, [r7, #12]
 8002970:	6938      	ldr	r0, [r7, #16]
 8002972:	f7fd fde2 	bl	800053a <RiCReactive_gen>
            /*#]*/
        }
        RiCTask_schedTm(me->ric_reactive.myTask, 30, PushSwitch_Timeout_ReadSwitch_id, &(me->ric_reactive), NULL);
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	6858      	ldr	r0, [r3, #4]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2200      	movs	r2, #0
 800297e:	9200      	str	r2, [sp, #0]
 8002980:	2201      	movs	r2, #1
 8002982:	211e      	movs	r1, #30
 8002984:	f7fe fae0 	bl	8000f48 <RiCTask_schedTm>
    }
}
 8002988:	bf00      	nop
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <rootState_dispatchEvent>:

static RiCTakeEventStatus rootState_dispatchEvent(void * const void_me, short id) {
 8002990:	b580      	push	{r7, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af02      	add	r7, sp, #8
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	807b      	strh	r3, [r7, #2]
    
    struct PushSwitch_t * const me = (struct PushSwitch_t *)void_me;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	613b      	str	r3, [r7, #16]
    RiCTakeEventStatus res = eventNotConsumed;
 80029a0:	2300      	movs	r3, #0
 80029a2:	75fb      	strb	r3, [r7, #23]
    if(me->rootState_active == PushSwitch_ReadSwitch)
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d13a      	bne.n	8002a24 <rootState_dispatchEvent+0x94>
        {
            if(id == Timeout_id)
 80029ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80029b2:	f113 0f02 	cmn.w	r3, #2
 80029b6:	d135      	bne.n	8002a24 <rootState_dispatchEvent+0x94>
                {
                    if(RiCTimeout_getTimeoutId((RiCTimeout*) me->ric_reactive.current_event) == PushSwitch_Timeout_ReadSwitch_id)
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fe f9a5 	bl	8000d0c <RiCTimeout_getTimeoutId>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d12d      	bne.n	8002a24 <rootState_dispatchEvent+0x94>
                        {
                            RiCTask_unschedTm(me->ric_reactive.myTask, PushSwitch_Timeout_ReadSwitch_id, &(me->ric_reactive));
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	2101      	movs	r1, #1
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fe fae1 	bl	8000f98 <RiCTask_unschedTm>
                            me->rootState_subState = PushSwitch_ReadSwitch;
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2020 	strb.w	r2, [r3, #32]
                            me->rootState_active = PushSwitch_ReadSwitch;
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                            {
                                /*#[ state ROOT.ReadSwitch.(Entry) */
                                if(ReadButton()) CGEN(me->itsButton, evPress());
 80029e6:	f000 fb3b 	bl	8003060 <ReadButton>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00e      	beq.n	8002a0e <rootState_dispatchEvent+0x7e>
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00a      	beq.n	8002a0e <rootState_dispatchEvent+0x7e>
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	f000 f895 	bl	8002b2c <RiC_Create_evPress>
 8002a02:	4603      	mov	r3, r0
 8002a04:	60bb      	str	r3, [r7, #8]
 8002a06:	68b9      	ldr	r1, [r7, #8]
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f7fd fd96 	bl	800053a <RiCReactive_gen>
                                /*#]*/
                            }
                            RiCTask_schedTm(me->ric_reactive.myTask, 30, PushSwitch_Timeout_ReadSwitch_id, &(me->ric_reactive), NULL);
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	6858      	ldr	r0, [r3, #4]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	2200      	movs	r2, #0
 8002a16:	9200      	str	r2, [sp, #0]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	211e      	movs	r1, #30
 8002a1c:	f7fe fa94 	bl	8000f48 <RiCTask_schedTm>
                            res = eventConsumed;
 8002a20:	2301      	movs	r3, #1
 8002a22:	75fb      	strb	r3, [r7, #23]
                        }
                }
        }
    return res;
 8002a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <StopwatchPkg_OMInitializer_Cleanup>:
void StopwatchPkg_OMInitializer_Init(void) {
    StopwatchPkg_initRelations();
    StopwatchPkg_startBehavior();
}

void StopwatchPkg_OMInitializer_Cleanup(void) {
 8002a2e:	b480      	push	{r7}
 8002a30:	af00      	add	r7, sp, #0
}
 8002a32:	bf00      	nop
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <StopwatchPkg_initRelations>:

void StopwatchPkg_initRelations(void) {
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
    Button_Init(&(Button), RiCMainTask());
 8002a40:	f7fe ff15 	bl	800186e <RiCMainTask>
 8002a44:	4603      	mov	r3, r0
 8002a46:	4619      	mov	r1, r3
 8002a48:	4810      	ldr	r0, [pc, #64]	; (8002a8c <StopwatchPkg_initRelations+0x50>)
 8002a4a:	f7ff fd2d 	bl	80024a8 <Button_Init>
    Display_Init(&(Display));
 8002a4e:	4810      	ldr	r0, [pc, #64]	; (8002a90 <StopwatchPkg_initRelations+0x54>)
 8002a50:	f7ff feaf 	bl	80027b2 <Display_Init>
    PushSwitch_Init(&(PushSwitch), RiCMainTask());
 8002a54:	f7fe ff0b 	bl	800186e <RiCMainTask>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	480d      	ldr	r0, [pc, #52]	; (8002a94 <StopwatchPkg_initRelations+0x58>)
 8002a5e:	f7ff ff1b 	bl	8002898 <PushSwitch_Init>
    Timer_Init(&(Timer), RiCMainTask());
 8002a62:	f7fe ff04 	bl	800186e <RiCMainTask>
 8002a66:	4603      	mov	r3, r0
 8002a68:	4619      	mov	r1, r3
 8002a6a:	480b      	ldr	r0, [pc, #44]	; (8002a98 <StopwatchPkg_initRelations+0x5c>)
 8002a6c:	f000 f98a 	bl	8002d84 <Timer_Init>
    Button_setItsTimer(&(Button), &(Timer));
 8002a70:	4909      	ldr	r1, [pc, #36]	; (8002a98 <StopwatchPkg_initRelations+0x5c>)
 8002a72:	4806      	ldr	r0, [pc, #24]	; (8002a8c <StopwatchPkg_initRelations+0x50>)
 8002a74:	f7ff fd5b 	bl	800252e <Button_setItsTimer>
    Timer_setItsDisplay(&(Timer), &(Display));
 8002a78:	4905      	ldr	r1, [pc, #20]	; (8002a90 <StopwatchPkg_initRelations+0x54>)
 8002a7a:	4807      	ldr	r0, [pc, #28]	; (8002a98 <StopwatchPkg_initRelations+0x5c>)
 8002a7c:	f000 f9a4 	bl	8002dc8 <Timer_setItsDisplay>
    PushSwitch_setItsButton(&(PushSwitch), &(Button));
 8002a80:	4902      	ldr	r1, [pc, #8]	; (8002a8c <StopwatchPkg_initRelations+0x50>)
 8002a82:	4804      	ldr	r0, [pc, #16]	; (8002a94 <StopwatchPkg_initRelations+0x58>)
 8002a84:	f7ff ff24 	bl	80028d0 <PushSwitch_setItsButton>
}
 8002a88:	bf00      	nop
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	20000e44 	.word	0x20000e44
 8002a90:	20000eb8 	.word	0x20000eb8
 8002a94:	20000e94 	.word	0x20000e94
 8002a98:	20000e68 	.word	0x20000e68

08002a9c <StopwatchPkg_startBehavior>:

RiCBoolean StopwatchPkg_startBehavior(void) {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
    RiCBoolean done = RiCTRUE;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	71fb      	strb	r3, [r7, #7]
    done &= Button_startBehavior(&(Button));
 8002aa6:	480e      	ldr	r0, [pc, #56]	; (8002ae0 <StopwatchPkg_startBehavior+0x44>)
 8002aa8:	f7ff fd1a 	bl	80024e0 <Button_startBehavior>
 8002aac:	4603      	mov	r3, r0
 8002aae:	461a      	mov	r2, r3
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	71fb      	strb	r3, [r7, #7]
    done &= PushSwitch_startBehavior(&(PushSwitch));
 8002ab6:	480b      	ldr	r0, [pc, #44]	; (8002ae4 <StopwatchPkg_startBehavior+0x48>)
 8002ab8:	f7ff ff18 	bl	80028ec <PushSwitch_startBehavior>
 8002abc:	4603      	mov	r3, r0
 8002abe:	461a      	mov	r2, r3
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	71fb      	strb	r3, [r7, #7]
    done &= Timer_startBehavior(&(Timer));
 8002ac6:	4808      	ldr	r0, [pc, #32]	; (8002ae8 <StopwatchPkg_startBehavior+0x4c>)
 8002ac8:	f000 f98c 	bl	8002de4 <Timer_startBehavior>
 8002acc:	4603      	mov	r3, r0
 8002ace:	461a      	mov	r2, r3
 8002ad0:	79fb      	ldrb	r3, [r7, #7]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	71fb      	strb	r3, [r7, #7]
    return done;
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	20000e44 	.word	0x20000e44
 8002ae4:	20000e94 	.word	0x20000e94
 8002ae8:	20000e68 	.word	0x20000e68

08002aec <evPress_Init>:

RIC_IMPLEMENT_MEMORY_ALLOCATOR(evPress, 9, 0, TRUE)

void evPress_Init(evPress* const me) {
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
    RiCEvent_init(&(me->ric_event), evPress_StopwatchPkg_id, NULL);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f642 01a1 	movw	r1, #10401	; 0x28a1
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fd fc21 	bl	8000344 <RiCEvent_init>
    RIC_SET_EVENT_DESTROY_OP(me, evPress);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a02      	ldr	r2, [pc, #8]	; (8002b10 <evPress_Init+0x24>)
 8002b06:	605a      	str	r2, [r3, #4]
}
 8002b08:	bf00      	nop
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	08002b51 	.word	0x08002b51

08002b14 <evPress_Cleanup>:

void evPress_Cleanup(evPress* const me) {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
    RiCEvent_cleanup(&(me->ric_event));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fd fb86 	bl	8000230 <RiCEvent_cleanup>
}
 8002b24:	bf00      	nop
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <RiC_Create_evPress>:

/*#[ ignore */
evPress * RiC_Create_evPress(void) {
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
    evPress* me = RIC_MEMORY_ALLOCATOR_GET(evPress);
 8002b32:	200c      	movs	r0, #12
 8002b34:	f7fe fc9e 	bl	8001474 <RiCAllocator_getMemory>
 8002b38:	6078      	str	r0, [r7, #4]
    if(me!=NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d002      	beq.n	8002b46 <RiC_Create_evPress+0x1a>
        {
            evPress_Init(me);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7ff ffd3 	bl	8002aec <evPress_Init>
        }
    return me;
 8002b46:	687b      	ldr	r3, [r7, #4]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <RiC_Destroy_evPress>:

void RiC_Destroy_evPress(evPress* const me) {
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
    if(me!=NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d002      	beq.n	8002b64 <RiC_Destroy_evPress+0x14>
        {
            evPress_Cleanup(me);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff ffd8 	bl	8002b14 <evPress_Cleanup>
        }
    RIC_MEMORY_ALLOCATOR_RETURN(me, evPress);
 8002b64:	210c      	movs	r1, #12
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7fe fcb8 	bl	80014dc <RiCAllocator_returnMemory>
}
 8002b6c:	bf00      	nop
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <evStartStop_Init>:
}
/*#]*/

RIC_IMPLEMENT_MEMORY_ALLOCATOR(evStartStop, 9, 0, TRUE)

void evStartStop_Init(evStartStop* const me) {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
    RiCEvent_init(&(me->ric_event), evStartStop_StopwatchPkg_id, NULL);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f642 01a3 	movw	r1, #10403	; 0x28a3
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fd fbdd 	bl	8000344 <RiCEvent_init>
    RIC_SET_EVENT_DESTROY_OP(me, evStartStop);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a02      	ldr	r2, [pc, #8]	; (8002b98 <evStartStop_Init+0x24>)
 8002b8e:	605a      	str	r2, [r3, #4]
}
 8002b90:	bf00      	nop
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	08002bd9 	.word	0x08002bd9

08002b9c <evStartStop_Cleanup>:

void evStartStop_Cleanup(evStartStop* const me) {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
    RiCEvent_cleanup(&(me->ric_event));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fd fb42 	bl	8000230 <RiCEvent_cleanup>
}
 8002bac:	bf00      	nop
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <RiC_Create_evStartStop>:

/*#[ ignore */
evStartStop * RiC_Create_evStartStop(void) {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
    evStartStop* me = RIC_MEMORY_ALLOCATOR_GET(evStartStop);
 8002bba:	200c      	movs	r0, #12
 8002bbc:	f7fe fc5a 	bl	8001474 <RiCAllocator_getMemory>
 8002bc0:	6078      	str	r0, [r7, #4]
    if(me!=NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d002      	beq.n	8002bce <RiC_Create_evStartStop+0x1a>
        {
            evStartStop_Init(me);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7ff ffd3 	bl	8002b74 <evStartStop_Init>
        }
    return me;
 8002bce:	687b      	ldr	r3, [r7, #4]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <RiC_Destroy_evStartStop>:

void RiC_Destroy_evStartStop(evStartStop* const me) {
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
    if(me!=NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d002      	beq.n	8002bec <RiC_Destroy_evStartStop+0x14>
        {
            evStartStop_Cleanup(me);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff ffd8 	bl	8002b9c <evStartStop_Cleanup>
        }
    RIC_MEMORY_ALLOCATOR_RETURN(me, evStartStop);
 8002bec:	210c      	movs	r1, #12
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7fe fc74 	bl	80014dc <RiCAllocator_returnMemory>
}
 8002bf4:	bf00      	nop
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <evReset_Init>:
/*#]*/

RIC_IMPLEMENT_MEMORY_ALLOCATOR(evReset, 9, 0, TRUE)

void evReset_Init(evReset* const me) {
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
    RiCEvent_init(&(me->ric_event), evReset_StopwatchPkg_id, NULL);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f642 01a4 	movw	r1, #10404	; 0x28a4
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fd fb99 	bl	8000344 <RiCEvent_init>
    RIC_SET_EVENT_DESTROY_OP(me, evReset);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a02      	ldr	r2, [pc, #8]	; (8002c20 <evReset_Init+0x24>)
 8002c16:	605a      	str	r2, [r3, #4]
}
 8002c18:	bf00      	nop
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	08002c61 	.word	0x08002c61

08002c24 <evReset_Cleanup>:

void evReset_Cleanup(evReset* const me) {
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
    RiCEvent_cleanup(&(me->ric_event));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fd fafe 	bl	8000230 <RiCEvent_cleanup>
}
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <RiC_Create_evReset>:

/*#[ ignore */
evReset * RiC_Create_evReset(void) {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
    evReset* me = RIC_MEMORY_ALLOCATOR_GET(evReset);
 8002c42:	200c      	movs	r0, #12
 8002c44:	f7fe fc16 	bl	8001474 <RiCAllocator_getMemory>
 8002c48:	6078      	str	r0, [r7, #4]
    if(me!=NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <RiC_Create_evReset+0x1a>
        {
            evReset_Init(me);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7ff ffd3 	bl	8002bfc <evReset_Init>
        }
    return me;
 8002c56:	687b      	ldr	r3, [r7, #4]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <RiC_Destroy_evReset>:

void RiC_Destroy_evReset(evReset* const me) {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
    if(me!=NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d002      	beq.n	8002c74 <RiC_Destroy_evReset+0x14>
        {
            evReset_Cleanup(me);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff ffd8 	bl	8002c24 <evReset_Cleanup>
        }
    RIC_MEMORY_ALLOCATOR_RETURN(me, evReset);
 8002c74:	210c      	movs	r1, #12
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7fe fc30 	bl	80014dc <RiCAllocator_returnMemory>
}
 8002c7c:	bf00      	nop
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <evRelease_Init>:
/*#]*/

RIC_IMPLEMENT_MEMORY_ALLOCATOR(evRelease, 9, 0, TRUE)

void evRelease_Init(evRelease* const me) {
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
    RiCEvent_init(&(me->ric_event), evRelease_StopwatchPkg_id, NULL);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f642 01a5 	movw	r1, #10405	; 0x28a5
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fd fb55 	bl	8000344 <RiCEvent_init>
    RIC_SET_EVENT_DESTROY_OP(me, evRelease);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a02      	ldr	r2, [pc, #8]	; (8002ca8 <evRelease_Init+0x24>)
 8002c9e:	605a      	str	r2, [r3, #4]
}
 8002ca0:	bf00      	nop
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	08002ce9 	.word	0x08002ce9

08002cac <evRelease_Cleanup>:

void evRelease_Cleanup(evRelease* const me) {
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
    RiCEvent_cleanup(&(me->ric_event));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fd faba 	bl	8000230 <RiCEvent_cleanup>
}
 8002cbc:	bf00      	nop
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <RiC_Create_evRelease>:

/*#[ ignore */
evRelease * RiC_Create_evRelease(void) {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
    evRelease* me = RIC_MEMORY_ALLOCATOR_GET(evRelease);
 8002cca:	200c      	movs	r0, #12
 8002ccc:	f7fe fbd2 	bl	8001474 <RiCAllocator_getMemory>
 8002cd0:	6078      	str	r0, [r7, #4]
    if(me!=NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d002      	beq.n	8002cde <RiC_Create_evRelease+0x1a>
        {
            evRelease_Init(me);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff ffd3 	bl	8002c84 <evRelease_Init>
        }
    return me;
 8002cde:	687b      	ldr	r3, [r7, #4]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <RiC_Destroy_evRelease>:

void RiC_Destroy_evRelease(evRelease* const me) {
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
    if(me!=NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <RiC_Destroy_evRelease+0x14>
        {
            evRelease_Cleanup(me);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7ff ffd8 	bl	8002cac <evRelease_Cleanup>
        }
    RIC_MEMORY_ALLOCATOR_RETURN(me, evRelease);
 8002cfc:	210c      	movs	r1, #12
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fe fbec 	bl	80014dc <RiCAllocator_returnMemory>
}
 8002d04:	bf00      	nop
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <print>:

/*## operation tick() */
static void tick(struct Timer_t* const me);

/*## operation print() */
static void print(struct Timer_t* const me) {
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
    /*#[ operation print() */
    Display_print(me->itsDisplay,me->minutes,me->seconds);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69d9      	ldr	r1, [r3, #28]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	461a      	mov	r2, r3
 8002d22:	f7ff fd51 	bl	80027c8 <Display_print>
    /*#]*/
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <reset>:

/*## operation reset() */
static void reset(struct Timer_t* const me) {
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
    /*#[ operation reset() */
    me->seconds=0;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	621a      	str	r2, [r3, #32]
    me->minutes=0;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	61da      	str	r2, [r3, #28]
    /*#]*/
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <tick>:

/*## operation tick() */
static void tick(struct Timer_t* const me) {
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
    /*#[ operation tick() */
    me->seconds++;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	1c5a      	adds	r2, r3, #1
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	621a      	str	r2, [r3, #32]
    if (me->seconds > 59) {
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	2b3b      	cmp	r3, #59	; 0x3b
 8002d66:	dd07      	ble.n	8002d78 <tick+0x2a>
    	me->seconds=0;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	621a      	str	r2, [r3, #32]
    	me->minutes++;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	61da      	str	r2, [r3, #28]
    }
    /*#]*/
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <Timer_Init>:

void Timer_Init(struct Timer_t* const me, RiCTask * p_task) {
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
    static const RiCReactive_Vtbl Timer_reactiveVtbl = {
        rootState_dispatchEvent,
        rootState_entDef,
        NULL
    };
    me->minutes = 0;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	61da      	str	r2, [r3, #28]
    me->seconds = 0;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	621a      	str	r2, [r3, #32]
    RiCReactive_init(&(me->ric_reactive), (void*)me, p_task, &Timer_reactiveVtbl);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <Timer_Init+0x40>)
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	f7fd fbfb 	bl	800059c <RiCReactive_init>
    RiCReactive_setActive(&(me->ric_reactive), RiCFALSE);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2100      	movs	r1, #0
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fd fc46 	bl	800063c <RiCReactive_setActive>
    me->itsDisplay = NULL;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	625a      	str	r2, [r3, #36]	; 0x24
    initStatechart(me);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f825 	bl	8002e06 <initStatechart>
}
 8002dbc:	bf00      	nop
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	0800d7b4 	.word	0x0800d7b4

08002dc8 <Timer_setItsDisplay>:

struct Display_t* Timer_getItsDisplay(const struct Timer_t* const me) {
    return (struct Display_t*)me->itsDisplay;
}

void Timer_setItsDisplay(struct Timer_t* const me, struct Display_t* p_Display) {
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
    me->itsDisplay = p_Display;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <Timer_startBehavior>:

RiCBoolean Timer_startBehavior(struct Timer_t* const me) {
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
    RiCBoolean done = RiCFALSE;
 8002dec:	2300      	movs	r3, #0
 8002dee:	73fb      	strb	r3, [r7, #15]
    done = RiCReactive_startBehavior(&(me->ric_reactive));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fd fc94 	bl	8000720 <RiCReactive_startBehavior>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	73fb      	strb	r3, [r7, #15]
    return done;
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <initStatechart>:

static void initStatechart(struct Timer_t* const me) {
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
    me->rootState_subState = Timer_RiCNonState;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    me->rootState_active = Timer_RiCNonState;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    me->running_subState = Timer_RiCNonState;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <Timer_running_takeEvent>:
        {
            me->itsDisplay = NULL;
        }
}

RiCTakeEventStatus Timer_running_takeEvent(struct Timer_t* const me, short id) {
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b084      	sub	sp, #16
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	807b      	strh	r3, [r7, #2]
    RiCTakeEventStatus res = eventNotConsumed;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	73fb      	strb	r3, [r7, #15]
    if(id == evReset_StopwatchPkg_id)
 8002e42:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002e46:	f642 02a4 	movw	r2, #10404	; 0x28a4
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d11c      	bne.n	8002e88 <Timer_running_takeEvent+0x56>
        {
            switch (me->running_subState) {
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d107      	bne.n	8002e68 <Timer_running_takeEvent+0x36>
                case Timer_on:
                {
                    RiCTask_unschedTm(me->ric_reactive.myTask, Timer_Timeout_on_id, &(me->ric_reactive));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	2101      	movs	r1, #1
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fe f899 	bl	8000f98 <RiCTask_unschedTm>
                }
                break;
 8002e66:	e000      	b.n	8002e6a <Timer_running_takeEvent+0x38>
                default:
                    break;
 8002e68:	bf00      	nop
            }
            me->running_subState = Timer_RiCNonState;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
            {
                /*#[ transition 3 */
                
                reset(me);print(me);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff ff5b 	bl	8002d2e <reset>
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f7ff ff47 	bl	8002d0c <print>
                /*#]*/
            }
            running_entDef(me);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f8a8 	bl	8002fd4 <running_entDef>
            res = eventConsumed;
 8002e84:	2301      	movs	r3, #1
 8002e86:	73fb      	strb	r3, [r7, #15]
        }
    return res;
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <rootState_entDef>:

static void rootState_entDef(void * const void_me) {
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b084      	sub	sp, #16
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
    
    struct Timer_t * const me = (struct Timer_t *)void_me;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	60fb      	str	r3, [r7, #12]
    {
        running_entDef(me);
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f898 	bl	8002fd4 <running_entDef>
    }
}
 8002ea4:	bf00      	nop
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <rootState_dispatchEvent>:

static RiCTakeEventStatus rootState_dispatchEvent(void * const void_me, short id) {
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af02      	add	r7, sp, #8
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	807b      	strh	r3, [r7, #2]
    
    struct Timer_t * const me = (struct Timer_t *)void_me;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	60bb      	str	r3, [r7, #8]
    RiCTakeEventStatus res = eventNotConsumed;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	73fb      	strb	r3, [r7, #15]
    switch (me->rootState_active) {
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d027      	beq.n	8002f1a <rootState_dispatchEvent+0x6e>
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d178      	bne.n	8002fc0 <rootState_dispatchEvent+0x114>
        case Timer_off:
        {
            if(id == evStartStop_StopwatchPkg_id)
 8002ece:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002ed2:	f642 02a3 	movw	r2, #10403	; 0x28a3
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d113      	bne.n	8002f02 <rootState_dispatchEvent+0x56>
                {
                    me->running_subState = Timer_on;
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2202      	movs	r2, #2
 8002ede:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
                    me->rootState_active = Timer_on;
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                    RiCTask_schedTm(me->ric_reactive.myTask, 1000, Timer_Timeout_on_id, &(me->ric_reactive), NULL);
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	6858      	ldr	r0, [r3, #4]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	9200      	str	r2, [sp, #0]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002efa:	f7fe f825 	bl	8000f48 <RiCTask_schedTm>
                    res = eventConsumed;
 8002efe:	2301      	movs	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
                }
            if(res == eventNotConsumed)
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d15d      	bne.n	8002fc4 <rootState_dispatchEvent+0x118>
                {
                    res = Timer_running_takeEvent(me, id);
 8002f08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	68b8      	ldr	r0, [r7, #8]
 8002f10:	f7ff ff8f 	bl	8002e32 <Timer_running_takeEvent>
 8002f14:	4603      	mov	r3, r0
 8002f16:	73fb      	strb	r3, [r7, #15]
                }
        }
        break;
 8002f18:	e054      	b.n	8002fc4 <rootState_dispatchEvent+0x118>
        case Timer_on:
        {
            switch (id) {
 8002f1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f1e:	f113 0f02 	cmn.w	r3, #2
 8002f22:	d004      	beq.n	8002f2e <rootState_dispatchEvent+0x82>
 8002f24:	f642 02a3 	movw	r2, #10403	; 0x28a3
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d02a      	beq.n	8002f82 <rootState_dispatchEvent+0xd6>
                    me->rootState_active = Timer_off;
                    res = eventConsumed;
                }
                break;
                default:
                    break;
 8002f2c:	e03c      	b.n	8002fa8 <rootState_dispatchEvent+0xfc>
                    if(RiCTimeout_getTimeoutId((RiCTimeout*) me->ric_reactive.current_event) == Timer_Timeout_on_id)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fd feea 	bl	8000d0c <RiCTimeout_getTimeoutId>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d133      	bne.n	8002fa6 <rootState_dispatchEvent+0xfa>
                            RiCTask_unschedTm(me->ric_reactive.myTask, Timer_Timeout_on_id, &(me->ric_reactive));
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	2101      	movs	r1, #1
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fe f826 	bl	8000f98 <RiCTask_unschedTm>
                                tick(me);print(me);
 8002f4c:	68b8      	ldr	r0, [r7, #8]
 8002f4e:	f7ff fefe 	bl	8002d4e <tick>
 8002f52:	68b8      	ldr	r0, [r7, #8]
 8002f54:	f7ff feda 	bl	8002d0c <print>
                            me->running_subState = Timer_on;
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
                            me->rootState_active = Timer_on;
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                            RiCTask_schedTm(me->ric_reactive.myTask, 1000, Timer_Timeout_on_id, &(me->ric_reactive), NULL);
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	6858      	ldr	r0, [r3, #4]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	9200      	str	r2, [sp, #0]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f78:	f7fd ffe6 	bl	8000f48 <RiCTask_schedTm>
                            res = eventConsumed;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	73fb      	strb	r3, [r7, #15]
                break;
 8002f80:	e011      	b.n	8002fa6 <rootState_dispatchEvent+0xfa>
                    RiCTask_unschedTm(me->ric_reactive.myTask, Timer_Timeout_on_id, &(me->ric_reactive));
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	2101      	movs	r1, #1
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fe f804 	bl	8000f98 <RiCTask_unschedTm>
                    me->running_subState = Timer_off;
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2203      	movs	r2, #3
 8002f94:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
                    me->rootState_active = Timer_off;
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2203      	movs	r2, #3
 8002f9c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                    res = eventConsumed;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	73fb      	strb	r3, [r7, #15]
                break;
 8002fa4:	e000      	b.n	8002fa8 <rootState_dispatchEvent+0xfc>
                break;
 8002fa6:	bf00      	nop
            }
            if(res == eventNotConsumed)
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10c      	bne.n	8002fc8 <rootState_dispatchEvent+0x11c>
                {
                    res = Timer_running_takeEvent(me, id);
 8002fae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	68b8      	ldr	r0, [r7, #8]
 8002fb6:	f7ff ff3c 	bl	8002e32 <Timer_running_takeEvent>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	73fb      	strb	r3, [r7, #15]
                }
        }
        break;
 8002fbe:	e003      	b.n	8002fc8 <rootState_dispatchEvent+0x11c>
        default:
            break;
 8002fc0:	bf00      	nop
 8002fc2:	e002      	b.n	8002fca <rootState_dispatchEvent+0x11e>
        break;
 8002fc4:	bf00      	nop
 8002fc6:	e000      	b.n	8002fca <rootState_dispatchEvent+0x11e>
        break;
 8002fc8:	bf00      	nop
    }
    return res;
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <running_entDef>:

static void running_entDef(struct Timer_t* const me) {
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af02      	add	r7, sp, #8
 8002fda:	6078      	str	r0, [r7, #4]
    me->rootState_subState = Timer_running;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        /*#[ transition 0 */
        reset(me);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7ff fea2 	bl	8002d2e <reset>
        print(me);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7ff fe8e 	bl	8002d0c <print>
        /*#]*/
    }
    me->running_subState = Timer_on;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    me->rootState_active = Timer_on;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    RiCTask_schedTm(me->ric_reactive.myTask, 1000, Timer_Timeout_on_id, &(me->ric_reactive), NULL);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6858      	ldr	r0, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	9200      	str	r2, [sp, #0]
 800300a:	2201      	movs	r2, #1
 800300c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003010:	f7fd ff9a 	bl	8000f48 <RiCTask_schedTm>
}
 8003014:	bf00      	nop
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
	while((USART2->SR&(1<<7)) == 0);
 8003024:	bf00      	nop
 8003026:	4b08      	ldr	r3, [pc, #32]	; (8003048 <__io_putchar+0x2c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0f9      	beq.n	8003026 <__io_putchar+0xa>
	USART2->DR = ch;
 8003032:	4a05      	ldr	r2, [pc, #20]	; (8003048 <__io_putchar+0x2c>)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6053      	str	r3, [r2, #4]
  return ch;
 8003038:	687b      	ldr	r3, [r7, #4]
}
 800303a:	4618      	mov	r0, r3
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40004400 	.word	0x40004400

0800304c <Init_Timer>:
void Init_Timer(){
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim10);
 8003050:	4802      	ldr	r0, [pc, #8]	; (800305c <Init_Timer+0x10>)
 8003052:	f005 f809 	bl	8008068 <HAL_TIM_Base_Start_IT>
}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	20000f10 	.word	0x20000f10

08003060 <ReadButton>:
int ReadButton(){
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8003064:	2101      	movs	r1, #1
 8003066:	4803      	ldr	r0, [pc, #12]	; (8003074 <ReadButton+0x14>)
 8003068:	f001 fad4 	bl	8004614 <HAL_GPIO_ReadPin>
 800306c:	4603      	mov	r3, r0
}
 800306e:	4618      	mov	r0, r3
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40020000 	.word	0x40020000

08003078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800307e:	f000 ff85 	bl	8003f8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003082:	f000 f843 	bl	800310c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003086:	f000 f9a5 	bl	80033d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800308a:	f000 f8c1 	bl	8003210 <MX_I2C1_Init>
  MX_I2S3_Init();
 800308e:	f000 f8ed 	bl	800326c <MX_I2S3_Init>
  MX_SPI1_Init();
 8003092:	f000 f91b 	bl	80032cc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8003096:	f008 fafd 	bl	800b694 <MX_USB_HOST_Init>
  MX_TIM10_Init();
 800309a:	f000 f94d 	bl	8003338 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 800309e:	f000 f96f 	bl	8003380 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Cortex_main(0, NULL);
 80030a2:	2100      	movs	r1, #0
 80030a4:	2000      	movs	r0, #0
 80030a6:	f7ff fbcd 	bl	8002844 <Cortex_main>

  ssd1306_Init();
 80030aa:	f000 fac1 	bl	8003630 <ssd1306_Init>
  HAL_Delay(1000);
 80030ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030b2:	f000 ffdd 	bl	8004070 <HAL_Delay>
  ssd1306_Fill(Black);
 80030b6:	2000      	movs	r0, #0
 80030b8:	f000 fb26 	bl	8003708 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 80030bc:	f000 fb48 	bl	8003750 <ssd1306_UpdateScreen>
  HAL_Delay(1000);
 80030c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030c4:	f000 ffd4 	bl	8004070 <HAL_Delay>
  ssd1306_SetCursor(0, 0);
 80030c8:	2100      	movs	r1, #0
 80030ca:	2000      	movs	r0, #0
 80030cc:	f000 fc76 	bl	80039bc <ssd1306_SetCursor>
  ssd1306_WriteString("Hello World", Font_11x18, White);
 80030d0:	4a0a      	ldr	r2, [pc, #40]	; (80030fc <main+0x84>)
 80030d2:	2301      	movs	r3, #1
 80030d4:	ca06      	ldmia	r2, {r1, r2}
 80030d6:	480a      	ldr	r0, [pc, #40]	; (8003100 <main+0x88>)
 80030d8:	f000 fc4a 	bl	8003970 <ssd1306_WriteString>
  ssd1306_SetCursor(0, 50);
 80030dc:	2132      	movs	r1, #50	; 0x32
 80030de:	2000      	movs	r0, #0
 80030e0:	f000 fc6c 	bl	80039bc <ssd1306_SetCursor>
  ssd1306_WriteString("ARM Cortex-M3", Font_7x10, White);
 80030e4:	4a07      	ldr	r2, [pc, #28]	; (8003104 <main+0x8c>)
 80030e6:	2301      	movs	r3, #1
 80030e8:	ca06      	ldmia	r2, {r1, r2}
 80030ea:	4807      	ldr	r0, [pc, #28]	; (8003108 <main+0x90>)
 80030ec:	f000 fc40 	bl	8003970 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80030f0:	f000 fb2e 	bl	8003750 <ssd1306_UpdateScreen>
  int counter;
  unsigned char string[10];
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80030f4:	f008 faf4 	bl	800b6e0 <MX_USB_HOST_Process>
 80030f8:	e7fc      	b.n	80030f4 <main+0x7c>
 80030fa:	bf00      	nop
 80030fc:	20000008 	.word	0x20000008
 8003100:	0800d244 	.word	0x0800d244
 8003104:	20000000 	.word	0x20000000
 8003108:	0800d250 	.word	0x0800d250

0800310c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b098      	sub	sp, #96	; 0x60
 8003110:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003112:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003116:	2230      	movs	r2, #48	; 0x30
 8003118:	2100      	movs	r1, #0
 800311a:	4618      	mov	r0, r3
 800311c:	f008 fe2c 	bl	800bd78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003120:	f107 031c 	add.w	r3, r7, #28
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	609a      	str	r2, [r3, #8]
 800312c:	60da      	str	r2, [r3, #12]
 800312e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003130:	f107 030c 	add.w	r3, r7, #12
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	605a      	str	r2, [r3, #4]
 800313a:	609a      	str	r2, [r3, #8]
 800313c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	4b31      	ldr	r3, [pc, #196]	; (8003208 <SystemClock_Config+0xfc>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	4a30      	ldr	r2, [pc, #192]	; (8003208 <SystemClock_Config+0xfc>)
 8003148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800314c:	6413      	str	r3, [r2, #64]	; 0x40
 800314e:	4b2e      	ldr	r3, [pc, #184]	; (8003208 <SystemClock_Config+0xfc>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003156:	60bb      	str	r3, [r7, #8]
 8003158:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800315a:	2300      	movs	r3, #0
 800315c:	607b      	str	r3, [r7, #4]
 800315e:	4b2b      	ldr	r3, [pc, #172]	; (800320c <SystemClock_Config+0x100>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a2a      	ldr	r2, [pc, #168]	; (800320c <SystemClock_Config+0x100>)
 8003164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	4b28      	ldr	r3, [pc, #160]	; (800320c <SystemClock_Config+0x100>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003172:	607b      	str	r3, [r7, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003176:	2301      	movs	r3, #1
 8003178:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800317a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800317e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003180:	2302      	movs	r3, #2
 8003182:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003184:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003188:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800318a:	2308      	movs	r3, #8
 800318c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800318e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003192:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003194:	2302      	movs	r3, #2
 8003196:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003198:	2307      	movs	r3, #7
 800319a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800319c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031a0:	4618      	mov	r0, r3
 80031a2:	f004 f8d5 	bl	8007350 <HAL_RCC_OscConfig>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80031ac:	f000 fa22 	bl	80035f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031b0:	230f      	movs	r3, #15
 80031b2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031b4:	2302      	movs	r3, #2
 80031b6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031b8:	2300      	movs	r3, #0
 80031ba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80031bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80031c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80031c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80031c8:	f107 031c 	add.w	r3, r7, #28
 80031cc:	2105      	movs	r1, #5
 80031ce:	4618      	mov	r0, r3
 80031d0:	f004 fb36 	bl	8007840 <HAL_RCC_ClockConfig>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80031da:	f000 fa0b 	bl	80035f4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80031de:	2301      	movs	r3, #1
 80031e0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80031e2:	23c0      	movs	r3, #192	; 0xc0
 80031e4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80031e6:	2302      	movs	r3, #2
 80031e8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031ea:	f107 030c 	add.w	r3, r7, #12
 80031ee:	4618      	mov	r0, r3
 80031f0:	f004 fd22 	bl	8007c38 <HAL_RCCEx_PeriphCLKConfig>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80031fa:	f000 f9fb 	bl	80035f4 <Error_Handler>
  }
}
 80031fe:	bf00      	nop
 8003200:	3760      	adds	r7, #96	; 0x60
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40023800 	.word	0x40023800
 800320c:	40007000 	.word	0x40007000

08003210 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003214:	4b12      	ldr	r3, [pc, #72]	; (8003260 <MX_I2C1_Init+0x50>)
 8003216:	4a13      	ldr	r2, [pc, #76]	; (8003264 <MX_I2C1_Init+0x54>)
 8003218:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800321a:	4b11      	ldr	r3, [pc, #68]	; (8003260 <MX_I2C1_Init+0x50>)
 800321c:	4a12      	ldr	r2, [pc, #72]	; (8003268 <MX_I2C1_Init+0x58>)
 800321e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003220:	4b0f      	ldr	r3, [pc, #60]	; (8003260 <MX_I2C1_Init+0x50>)
 8003222:	2200      	movs	r2, #0
 8003224:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003226:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <MX_I2C1_Init+0x50>)
 8003228:	2200      	movs	r2, #0
 800322a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800322c:	4b0c      	ldr	r3, [pc, #48]	; (8003260 <MX_I2C1_Init+0x50>)
 800322e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003232:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003234:	4b0a      	ldr	r3, [pc, #40]	; (8003260 <MX_I2C1_Init+0x50>)
 8003236:	2200      	movs	r2, #0
 8003238:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800323a:	4b09      	ldr	r3, [pc, #36]	; (8003260 <MX_I2C1_Init+0x50>)
 800323c:	2200      	movs	r2, #0
 800323e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003240:	4b07      	ldr	r3, [pc, #28]	; (8003260 <MX_I2C1_Init+0x50>)
 8003242:	2200      	movs	r2, #0
 8003244:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003246:	4b06      	ldr	r3, [pc, #24]	; (8003260 <MX_I2C1_Init+0x50>)
 8003248:	2200      	movs	r2, #0
 800324a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800324c:	4804      	ldr	r0, [pc, #16]	; (8003260 <MX_I2C1_Init+0x50>)
 800324e:	f002 ff83 	bl	8006158 <HAL_I2C_Init>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003258:	f000 f9cc 	bl	80035f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800325c:	bf00      	nop
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20000ebc 	.word	0x20000ebc
 8003264:	40005400 	.word	0x40005400
 8003268:	000186a0 	.word	0x000186a0

0800326c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8003270:	4b13      	ldr	r3, [pc, #76]	; (80032c0 <MX_I2S3_Init+0x54>)
 8003272:	4a14      	ldr	r2, [pc, #80]	; (80032c4 <MX_I2S3_Init+0x58>)
 8003274:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8003276:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <MX_I2S3_Init+0x54>)
 8003278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800327c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800327e:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <MX_I2S3_Init+0x54>)
 8003280:	2200      	movs	r2, #0
 8003282:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8003284:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <MX_I2S3_Init+0x54>)
 8003286:	2200      	movs	r2, #0
 8003288:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800328a:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <MX_I2S3_Init+0x54>)
 800328c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003290:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8003292:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <MX_I2S3_Init+0x54>)
 8003294:	4a0c      	ldr	r2, [pc, #48]	; (80032c8 <MX_I2S3_Init+0x5c>)
 8003296:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8003298:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <MX_I2S3_Init+0x54>)
 800329a:	2200      	movs	r2, #0
 800329c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800329e:	4b08      	ldr	r3, [pc, #32]	; (80032c0 <MX_I2S3_Init+0x54>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80032a4:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <MX_I2S3_Init+0x54>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80032aa:	4805      	ldr	r0, [pc, #20]	; (80032c0 <MX_I2S3_Init+0x54>)
 80032ac:	f003 fbb0 	bl	8006a10 <HAL_I2S_Init>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80032b6:	f000 f99d 	bl	80035f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80032ba:	bf00      	nop
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	20000ff4 	.word	0x20000ff4
 80032c4:	40003c00 	.word	0x40003c00
 80032c8:	00017700 	.word	0x00017700

080032cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80032d0:	4b17      	ldr	r3, [pc, #92]	; (8003330 <MX_SPI1_Init+0x64>)
 80032d2:	4a18      	ldr	r2, [pc, #96]	; (8003334 <MX_SPI1_Init+0x68>)
 80032d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80032d6:	4b16      	ldr	r3, [pc, #88]	; (8003330 <MX_SPI1_Init+0x64>)
 80032d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80032dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80032de:	4b14      	ldr	r3, [pc, #80]	; (8003330 <MX_SPI1_Init+0x64>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80032e4:	4b12      	ldr	r3, [pc, #72]	; (8003330 <MX_SPI1_Init+0x64>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032ea:	4b11      	ldr	r3, [pc, #68]	; (8003330 <MX_SPI1_Init+0x64>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80032f0:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <MX_SPI1_Init+0x64>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80032f6:	4b0e      	ldr	r3, [pc, #56]	; (8003330 <MX_SPI1_Init+0x64>)
 80032f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032fe:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <MX_SPI1_Init+0x64>)
 8003300:	2200      	movs	r2, #0
 8003302:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003304:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <MX_SPI1_Init+0x64>)
 8003306:	2200      	movs	r2, #0
 8003308:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800330a:	4b09      	ldr	r3, [pc, #36]	; (8003330 <MX_SPI1_Init+0x64>)
 800330c:	2200      	movs	r2, #0
 800330e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003310:	4b07      	ldr	r3, [pc, #28]	; (8003330 <MX_SPI1_Init+0x64>)
 8003312:	2200      	movs	r2, #0
 8003314:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003316:	4b06      	ldr	r3, [pc, #24]	; (8003330 <MX_SPI1_Init+0x64>)
 8003318:	220a      	movs	r2, #10
 800331a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800331c:	4804      	ldr	r0, [pc, #16]	; (8003330 <MX_SPI1_Init+0x64>)
 800331e:	f004 fdcb 	bl	8007eb8 <HAL_SPI_Init>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003328:	f000 f964 	bl	80035f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800332c:	bf00      	nop
 800332e:	bd80      	pop	{r7, pc}
 8003330:	20000f58 	.word	0x20000f58
 8003334:	40013000 	.word	0x40013000

08003338 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800333c:	4b0e      	ldr	r3, [pc, #56]	; (8003378 <MX_TIM10_Init+0x40>)
 800333e:	4a0f      	ldr	r2, [pc, #60]	; (800337c <MX_TIM10_Init+0x44>)
 8003340:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16799;
 8003342:	4b0d      	ldr	r3, [pc, #52]	; (8003378 <MX_TIM10_Init+0x40>)
 8003344:	f244 129f 	movw	r2, #16799	; 0x419f
 8003348:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800334a:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <MX_TIM10_Init+0x40>)
 800334c:	2200      	movs	r2, #0
 800334e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9;
 8003350:	4b09      	ldr	r3, [pc, #36]	; (8003378 <MX_TIM10_Init+0x40>)
 8003352:	2209      	movs	r2, #9
 8003354:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003356:	4b08      	ldr	r3, [pc, #32]	; (8003378 <MX_TIM10_Init+0x40>)
 8003358:	2200      	movs	r2, #0
 800335a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800335c:	4b06      	ldr	r3, [pc, #24]	; (8003378 <MX_TIM10_Init+0x40>)
 800335e:	2200      	movs	r2, #0
 8003360:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003362:	4805      	ldr	r0, [pc, #20]	; (8003378 <MX_TIM10_Init+0x40>)
 8003364:	f004 fe31 	bl	8007fca <HAL_TIM_Base_Init>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800336e:	f000 f941 	bl	80035f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003372:	bf00      	nop
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	20000f10 	.word	0x20000f10
 800337c:	40014400 	.word	0x40014400

08003380 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003384:	4b11      	ldr	r3, [pc, #68]	; (80033cc <MX_USART2_UART_Init+0x4c>)
 8003386:	4a12      	ldr	r2, [pc, #72]	; (80033d0 <MX_USART2_UART_Init+0x50>)
 8003388:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800338a:	4b10      	ldr	r3, [pc, #64]	; (80033cc <MX_USART2_UART_Init+0x4c>)
 800338c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003390:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003392:	4b0e      	ldr	r3, [pc, #56]	; (80033cc <MX_USART2_UART_Init+0x4c>)
 8003394:	2200      	movs	r2, #0
 8003396:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003398:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <MX_USART2_UART_Init+0x4c>)
 800339a:	2200      	movs	r2, #0
 800339c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800339e:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <MX_USART2_UART_Init+0x4c>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033a4:	4b09      	ldr	r3, [pc, #36]	; (80033cc <MX_USART2_UART_Init+0x4c>)
 80033a6:	220c      	movs	r2, #12
 80033a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033aa:	4b08      	ldr	r3, [pc, #32]	; (80033cc <MX_USART2_UART_Init+0x4c>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80033b0:	4b06      	ldr	r3, [pc, #24]	; (80033cc <MX_USART2_UART_Init+0x4c>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80033b6:	4805      	ldr	r0, [pc, #20]	; (80033cc <MX_USART2_UART_Init+0x4c>)
 80033b8:	f005 f8aa 	bl	8008510 <HAL_UART_Init>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80033c2:	f000 f917 	bl	80035f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000fb0 	.word	0x20000fb0
 80033d0:	40004400 	.word	0x40004400

080033d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08c      	sub	sp, #48	; 0x30
 80033d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033da:	f107 031c 	add.w	r3, r7, #28
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	605a      	str	r2, [r3, #4]
 80033e4:	609a      	str	r2, [r3, #8]
 80033e6:	60da      	str	r2, [r3, #12]
 80033e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	61bb      	str	r3, [r7, #24]
 80033ee:	4b72      	ldr	r3, [pc, #456]	; (80035b8 <MX_GPIO_Init+0x1e4>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	4a71      	ldr	r2, [pc, #452]	; (80035b8 <MX_GPIO_Init+0x1e4>)
 80033f4:	f043 0310 	orr.w	r3, r3, #16
 80033f8:	6313      	str	r3, [r2, #48]	; 0x30
 80033fa:	4b6f      	ldr	r3, [pc, #444]	; (80035b8 <MX_GPIO_Init+0x1e4>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	61bb      	str	r3, [r7, #24]
 8003404:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003406:	2300      	movs	r3, #0
 8003408:	617b      	str	r3, [r7, #20]
 800340a:	4b6b      	ldr	r3, [pc, #428]	; (80035b8 <MX_GPIO_Init+0x1e4>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	4a6a      	ldr	r2, [pc, #424]	; (80035b8 <MX_GPIO_Init+0x1e4>)
 8003410:	f043 0304 	orr.w	r3, r3, #4
 8003414:	6313      	str	r3, [r2, #48]	; 0x30
 8003416:	4b68      	ldr	r3, [pc, #416]	; (80035b8 <MX_GPIO_Init+0x1e4>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	f003 0304 	and.w	r3, r3, #4
 800341e:	617b      	str	r3, [r7, #20]
 8003420:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003422:	2300      	movs	r3, #0
 8003424:	613b      	str	r3, [r7, #16]
 8003426:	4b64      	ldr	r3, [pc, #400]	; (80035b8 <MX_GPIO_Init+0x1e4>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	4a63      	ldr	r2, [pc, #396]	; (80035b8 <MX_GPIO_Init+0x1e4>)
 800342c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003430:	6313      	str	r3, [r2, #48]	; 0x30
 8003432:	4b61      	ldr	r3, [pc, #388]	; (80035b8 <MX_GPIO_Init+0x1e4>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343a:	613b      	str	r3, [r7, #16]
 800343c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	4b5d      	ldr	r3, [pc, #372]	; (80035b8 <MX_GPIO_Init+0x1e4>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	4a5c      	ldr	r2, [pc, #368]	; (80035b8 <MX_GPIO_Init+0x1e4>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	6313      	str	r3, [r2, #48]	; 0x30
 800344e:	4b5a      	ldr	r3, [pc, #360]	; (80035b8 <MX_GPIO_Init+0x1e4>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800345a:	2300      	movs	r3, #0
 800345c:	60bb      	str	r3, [r7, #8]
 800345e:	4b56      	ldr	r3, [pc, #344]	; (80035b8 <MX_GPIO_Init+0x1e4>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	4a55      	ldr	r2, [pc, #340]	; (80035b8 <MX_GPIO_Init+0x1e4>)
 8003464:	f043 0302 	orr.w	r3, r3, #2
 8003468:	6313      	str	r3, [r2, #48]	; 0x30
 800346a:	4b53      	ldr	r3, [pc, #332]	; (80035b8 <MX_GPIO_Init+0x1e4>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	60bb      	str	r3, [r7, #8]
 8003474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003476:	2300      	movs	r3, #0
 8003478:	607b      	str	r3, [r7, #4]
 800347a:	4b4f      	ldr	r3, [pc, #316]	; (80035b8 <MX_GPIO_Init+0x1e4>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	4a4e      	ldr	r2, [pc, #312]	; (80035b8 <MX_GPIO_Init+0x1e4>)
 8003480:	f043 0308 	orr.w	r3, r3, #8
 8003484:	6313      	str	r3, [r2, #48]	; 0x30
 8003486:	4b4c      	ldr	r3, [pc, #304]	; (80035b8 <MX_GPIO_Init+0x1e4>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	607b      	str	r3, [r7, #4]
 8003490:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8003492:	2200      	movs	r2, #0
 8003494:	2108      	movs	r1, #8
 8003496:	4849      	ldr	r0, [pc, #292]	; (80035bc <MX_GPIO_Init+0x1e8>)
 8003498:	f001 f8d4 	bl	8004644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800349c:	2201      	movs	r2, #1
 800349e:	2101      	movs	r1, #1
 80034a0:	4847      	ldr	r0, [pc, #284]	; (80035c0 <MX_GPIO_Init+0x1ec>)
 80034a2:	f001 f8cf 	bl	8004644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80034a6:	2200      	movs	r2, #0
 80034a8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80034ac:	4845      	ldr	r0, [pc, #276]	; (80035c4 <MX_GPIO_Init+0x1f0>)
 80034ae:	f001 f8c9 	bl	8004644 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80034b2:	2308      	movs	r3, #8
 80034b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034b6:	2301      	movs	r3, #1
 80034b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034be:	2300      	movs	r3, #0
 80034c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80034c2:	f107 031c 	add.w	r3, r7, #28
 80034c6:	4619      	mov	r1, r3
 80034c8:	483c      	ldr	r0, [pc, #240]	; (80035bc <MX_GPIO_Init+0x1e8>)
 80034ca:	f000 ff07 	bl	80042dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80034ce:	2301      	movs	r3, #1
 80034d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034d2:	2301      	movs	r3, #1
 80034d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d6:	2300      	movs	r3, #0
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034da:	2300      	movs	r3, #0
 80034dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80034de:	f107 031c 	add.w	r3, r7, #28
 80034e2:	4619      	mov	r1, r3
 80034e4:	4836      	ldr	r0, [pc, #216]	; (80035c0 <MX_GPIO_Init+0x1ec>)
 80034e6:	f000 fef9 	bl	80042dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80034ea:	2308      	movs	r3, #8
 80034ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ee:	2302      	movs	r3, #2
 80034f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f6:	2300      	movs	r3, #0
 80034f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034fa:	2305      	movs	r3, #5
 80034fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80034fe:	f107 031c 	add.w	r3, r7, #28
 8003502:	4619      	mov	r1, r3
 8003504:	482e      	ldr	r0, [pc, #184]	; (80035c0 <MX_GPIO_Init+0x1ec>)
 8003506:	f000 fee9 	bl	80042dc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800350a:	2301      	movs	r3, #1
 800350c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800350e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003512:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003514:	2300      	movs	r3, #0
 8003516:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003518:	f107 031c 	add.w	r3, r7, #28
 800351c:	4619      	mov	r1, r3
 800351e:	482a      	ldr	r0, [pc, #168]	; (80035c8 <MX_GPIO_Init+0x1f4>)
 8003520:	f000 fedc 	bl	80042dc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003524:	2304      	movs	r3, #4
 8003526:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003528:	2300      	movs	r3, #0
 800352a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352c:	2300      	movs	r3, #0
 800352e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003530:	f107 031c 	add.w	r3, r7, #28
 8003534:	4619      	mov	r1, r3
 8003536:	4825      	ldr	r0, [pc, #148]	; (80035cc <MX_GPIO_Init+0x1f8>)
 8003538:	f000 fed0 	bl	80042dc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800353c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003540:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003542:	2302      	movs	r3, #2
 8003544:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003546:	2300      	movs	r3, #0
 8003548:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800354a:	2300      	movs	r3, #0
 800354c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800354e:	2305      	movs	r3, #5
 8003550:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8003552:	f107 031c 	add.w	r3, r7, #28
 8003556:	4619      	mov	r1, r3
 8003558:	481c      	ldr	r0, [pc, #112]	; (80035cc <MX_GPIO_Init+0x1f8>)
 800355a:	f000 febf 	bl	80042dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800355e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8003562:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003564:	2301      	movs	r3, #1
 8003566:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003568:	2300      	movs	r3, #0
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356c:	2300      	movs	r3, #0
 800356e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003570:	f107 031c 	add.w	r3, r7, #28
 8003574:	4619      	mov	r1, r3
 8003576:	4813      	ldr	r0, [pc, #76]	; (80035c4 <MX_GPIO_Init+0x1f0>)
 8003578:	f000 feb0 	bl	80042dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800357c:	2320      	movs	r3, #32
 800357e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003580:	2300      	movs	r3, #0
 8003582:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003584:	2300      	movs	r3, #0
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003588:	f107 031c 	add.w	r3, r7, #28
 800358c:	4619      	mov	r1, r3
 800358e:	480d      	ldr	r0, [pc, #52]	; (80035c4 <MX_GPIO_Init+0x1f0>)
 8003590:	f000 fea4 	bl	80042dc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8003594:	2302      	movs	r3, #2
 8003596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003598:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800359c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359e:	2300      	movs	r3, #0
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80035a2:	f107 031c 	add.w	r3, r7, #28
 80035a6:	4619      	mov	r1, r3
 80035a8:	4804      	ldr	r0, [pc, #16]	; (80035bc <MX_GPIO_Init+0x1e8>)
 80035aa:	f000 fe97 	bl	80042dc <HAL_GPIO_Init>

}
 80035ae:	bf00      	nop
 80035b0:	3730      	adds	r7, #48	; 0x30
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40023800 	.word	0x40023800
 80035bc:	40021000 	.word	0x40021000
 80035c0:	40020800 	.word	0x40020800
 80035c4:	40020c00 	.word	0x40020c00
 80035c8:	40020000 	.word	0x40020000
 80035cc:	40020400 	.word	0x40020400

080035d0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10) {
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a04      	ldr	r2, [pc, #16]	; (80035f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d101      	bne.n	80035e6 <HAL_TIM_PeriodElapsedCallback+0x16>
		RiCTick();
 80035e2:	f7fe f9e8 	bl	80019b6 <RiCTick>
	  }
}
 80035e6:	bf00      	nop
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40014400 	.word	0x40014400

080035f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035f8:	b672      	cpsid	i
}
 80035fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035fc:	e7fe      	b.n	80035fc <Error_Handler+0x8>
	...

08003600 <ssd1306_WriteCommand>:
//
//	Een byte sturen naar het commando register
//	Kan niet gebruikt worden buiten deze file
//
void ssd1306_WriteCommand(uint8_t command)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af04      	add	r7, sp, #16
 8003606:	4603      	mov	r3, r0
 8003608:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 800360a:	230a      	movs	r3, #10
 800360c:	9302      	str	r3, [sp, #8]
 800360e:	2301      	movs	r3, #1
 8003610:	9301      	str	r3, [sp, #4]
 8003612:	1dfb      	adds	r3, r7, #7
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	2301      	movs	r3, #1
 8003618:	2200      	movs	r2, #0
 800361a:	2178      	movs	r1, #120	; 0x78
 800361c:	4803      	ldr	r0, [pc, #12]	; (800362c <ssd1306_WriteCommand+0x2c>)
 800361e:	f002 fedf 	bl	80063e0 <HAL_I2C_Mem_Write>
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	20000ebc 	.word	0x20000ebc

08003630 <ssd1306_Init>:
//
//	Het scherm initialiseren voor gebruik
//
uint8_t ssd1306_Init(void)
{	
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
	// Even wachten zodat het scherm zeker opgestart is
	HAL_Delay(100);
 8003634:	2064      	movs	r0, #100	; 0x64
 8003636:	f000 fd1b 	bl	8004070 <HAL_Delay>
	
	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 800363a:	20ae      	movs	r0, #174	; 0xae
 800363c:	f7ff ffe0 	bl	8003600 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8003640:	2020      	movs	r0, #32
 8003642:	f7ff ffdd 	bl	8003600 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003646:	2010      	movs	r0, #16
 8003648:	f7ff ffda 	bl	8003600 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800364c:	20b0      	movs	r0, #176	; 0xb0
 800364e:	f7ff ffd7 	bl	8003600 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003652:	20c8      	movs	r0, #200	; 0xc8
 8003654:	f7ff ffd4 	bl	8003600 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8003658:	2000      	movs	r0, #0
 800365a:	f7ff ffd1 	bl	8003600 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 800365e:	2010      	movs	r0, #16
 8003660:	f7ff ffce 	bl	8003600 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8003664:	2040      	movs	r0, #64	; 0x40
 8003666:	f7ff ffcb 	bl	8003600 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 800366a:	2081      	movs	r0, #129	; 0x81
 800366c:	f7ff ffc8 	bl	8003600 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8003670:	20ff      	movs	r0, #255	; 0xff
 8003672:	f7ff ffc5 	bl	8003600 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8003676:	20a1      	movs	r0, #161	; 0xa1
 8003678:	f7ff ffc2 	bl	8003600 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 800367c:	20a6      	movs	r0, #166	; 0xa6
 800367e:	f7ff ffbf 	bl	8003600 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8003682:	20a8      	movs	r0, #168	; 0xa8
 8003684:	f7ff ffbc 	bl	8003600 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8003688:	203f      	movs	r0, #63	; 0x3f
 800368a:	f7ff ffb9 	bl	8003600 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800368e:	20a4      	movs	r0, #164	; 0xa4
 8003690:	f7ff ffb6 	bl	8003600 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8003694:	20d3      	movs	r0, #211	; 0xd3
 8003696:	f7ff ffb3 	bl	8003600 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 800369a:	2000      	movs	r0, #0
 800369c:	f7ff ffb0 	bl	8003600 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80036a0:	20d5      	movs	r0, #213	; 0xd5
 80036a2:	f7ff ffad 	bl	8003600 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 80036a6:	20f0      	movs	r0, #240	; 0xf0
 80036a8:	f7ff ffaa 	bl	8003600 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80036ac:	20d9      	movs	r0, #217	; 0xd9
 80036ae:	f7ff ffa7 	bl	8003600 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 80036b2:	2022      	movs	r0, #34	; 0x22
 80036b4:	f7ff ffa4 	bl	8003600 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 80036b8:	20da      	movs	r0, #218	; 0xda
 80036ba:	f7ff ffa1 	bl	8003600 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 80036be:	2012      	movs	r0, #18
 80036c0:	f7ff ff9e 	bl	8003600 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 80036c4:	20db      	movs	r0, #219	; 0xdb
 80036c6:	f7ff ff9b 	bl	8003600 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80036ca:	2020      	movs	r0, #32
 80036cc:	f7ff ff98 	bl	8003600 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80036d0:	208d      	movs	r0, #141	; 0x8d
 80036d2:	f7ff ff95 	bl	8003600 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 80036d6:	2014      	movs	r0, #20
 80036d8:	f7ff ff92 	bl	8003600 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 80036dc:	20af      	movs	r0, #175	; 0xaf
 80036de:	f7ff ff8f 	bl	8003600 <ssd1306_WriteCommand>
	
	/* Clearen scherm */
	ssd1306_Fill(Black);
 80036e2:	2000      	movs	r0, #0
 80036e4:	f000 f810 	bl	8003708 <ssd1306_Fill>
	
	/* Update screen */
	ssd1306_UpdateScreen();
 80036e8:	f000 f832 	bl	8003750 <ssd1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80036ec:	4b05      	ldr	r3, [pc, #20]	; (8003704 <ssd1306_Init+0xd4>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80036f2:	4b04      	ldr	r3, [pc, #16]	; (8003704 <ssd1306_Init+0xd4>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80036f8:	4b02      	ldr	r3, [pc, #8]	; (8003704 <ssd1306_Init+0xd4>)
 80036fa:	2201      	movs	r2, #1
 80036fc:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80036fe:	2301      	movs	r3, #1
}
 8003700:	4618      	mov	r0, r3
 8003702:	bd80      	pop	{r7, pc}
 8003704:	20000e2c 	.word	0x20000e2c

08003708 <ssd1306_Fill>:
//
//	We zetten de hele buffer op een bepaalde kleur
// 	color 	=> de kleur waarin alles moet
//
void ssd1306_Fill(SSD1306_COLOR color) 
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	4603      	mov	r3, r0
 8003710:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8003712:	2300      	movs	r3, #0
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	e00d      	b.n	8003734 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8003718:	79fb      	ldrb	r3, [r7, #7]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <ssd1306_Fill+0x1a>
 800371e:	2100      	movs	r1, #0
 8003720:	e000      	b.n	8003724 <ssd1306_Fill+0x1c>
 8003722:	21ff      	movs	r1, #255	; 0xff
 8003724:	4a09      	ldr	r2, [pc, #36]	; (800374c <ssd1306_Fill+0x44>)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4413      	add	r3, r2
 800372a:	460a      	mov	r2, r1
 800372c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	3301      	adds	r3, #1
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800373a:	d3ed      	bcc.n	8003718 <ssd1306_Fill+0x10>
	}
}
 800373c:	bf00      	nop
 800373e:	bf00      	nop
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	20000a2c 	.word	0x20000a2c

08003750 <ssd1306_UpdateScreen>:

//
//	Alle weizigingen in de buffer naar het scherm sturen
//
void ssd1306_UpdateScreen(void) 
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af04      	add	r7, sp, #16
	uint8_t i;
	
	for (i = 0; i < 8; i++) {
 8003756:	2300      	movs	r3, #0
 8003758:	71fb      	strb	r3, [r7, #7]
 800375a:	e01d      	b.n	8003798 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 800375c:	79fb      	ldrb	r3, [r7, #7]
 800375e:	3b50      	subs	r3, #80	; 0x50
 8003760:	b2db      	uxtb	r3, r3
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff ff4c 	bl	8003600 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8003768:	2000      	movs	r0, #0
 800376a:	f7ff ff49 	bl	8003600 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 800376e:	2010      	movs	r0, #16
 8003770:	f7ff ff46 	bl	8003600 <ssd1306_WriteCommand>

		// We schrijven alles map per map weg
		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 8003774:	79fb      	ldrb	r3, [r7, #7]
 8003776:	01db      	lsls	r3, r3, #7
 8003778:	4a0b      	ldr	r2, [pc, #44]	; (80037a8 <ssd1306_UpdateScreen+0x58>)
 800377a:	4413      	add	r3, r2
 800377c:	2264      	movs	r2, #100	; 0x64
 800377e:	9202      	str	r2, [sp, #8]
 8003780:	2280      	movs	r2, #128	; 0x80
 8003782:	9201      	str	r2, [sp, #4]
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	2301      	movs	r3, #1
 8003788:	2240      	movs	r2, #64	; 0x40
 800378a:	2178      	movs	r1, #120	; 0x78
 800378c:	4807      	ldr	r0, [pc, #28]	; (80037ac <ssd1306_UpdateScreen+0x5c>)
 800378e:	f002 fe27 	bl	80063e0 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	3301      	adds	r3, #1
 8003796:	71fb      	strb	r3, [r7, #7]
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	2b07      	cmp	r3, #7
 800379c:	d9de      	bls.n	800375c <ssd1306_UpdateScreen+0xc>
	}
}
 800379e:	bf00      	nop
 80037a0:	bf00      	nop
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	20000a2c 	.word	0x20000a2c
 80037ac:	20000ebc 	.word	0x20000ebc

080037b0 <ssd1306_DrawPixel>:
//	X => X coordinaat
//	Y => Y coordinaat
//	color => kleur die pixel moet krijgen
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	71fb      	strb	r3, [r7, #7]
 80037ba:	460b      	mov	r3, r1
 80037bc:	71bb      	strb	r3, [r7, #6]
 80037be:	4613      	mov	r3, r2
 80037c0:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 80037c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	db48      	blt.n	800385c <ssd1306_DrawPixel+0xac>
 80037ca:	79bb      	ldrb	r3, [r7, #6]
 80037cc:	2b3f      	cmp	r3, #63	; 0x3f
 80037ce:	d845      	bhi.n	800385c <ssd1306_DrawPixel+0xac>
		// We gaan niet buiten het scherm schrijven
		return;
	}
	
	// Kijken of de pixel geinverteerd moet worden
	if (SSD1306.Inverted) 
 80037d0:	4b25      	ldr	r3, [pc, #148]	; (8003868 <ssd1306_DrawPixel+0xb8>)
 80037d2:	791b      	ldrb	r3, [r3, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d006      	beq.n	80037e6 <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 80037d8:	797b      	ldrb	r3, [r7, #5]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	bf0c      	ite	eq
 80037de:	2301      	moveq	r3, #1
 80037e0:	2300      	movne	r3, #0
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	717b      	strb	r3, [r7, #5]
	}
	
	// We zetten de juiste kleur voor de pixel
	if (color == White)
 80037e6:	797b      	ldrb	r3, [r7, #5]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d11a      	bne.n	8003822 <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80037ec:	79fa      	ldrb	r2, [r7, #7]
 80037ee:	79bb      	ldrb	r3, [r7, #6]
 80037f0:	08db      	lsrs	r3, r3, #3
 80037f2:	b2d8      	uxtb	r0, r3
 80037f4:	4603      	mov	r3, r0
 80037f6:	01db      	lsls	r3, r3, #7
 80037f8:	4413      	add	r3, r2
 80037fa:	4a1c      	ldr	r2, [pc, #112]	; (800386c <ssd1306_DrawPixel+0xbc>)
 80037fc:	5cd3      	ldrb	r3, [r2, r3]
 80037fe:	b25a      	sxtb	r2, r3
 8003800:	79bb      	ldrb	r3, [r7, #6]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	2101      	movs	r1, #1
 8003808:	fa01 f303 	lsl.w	r3, r1, r3
 800380c:	b25b      	sxtb	r3, r3
 800380e:	4313      	orrs	r3, r2
 8003810:	b259      	sxtb	r1, r3
 8003812:	79fa      	ldrb	r2, [r7, #7]
 8003814:	4603      	mov	r3, r0
 8003816:	01db      	lsls	r3, r3, #7
 8003818:	4413      	add	r3, r2
 800381a:	b2c9      	uxtb	r1, r1
 800381c:	4a13      	ldr	r2, [pc, #76]	; (800386c <ssd1306_DrawPixel+0xbc>)
 800381e:	54d1      	strb	r1, [r2, r3]
 8003820:	e01d      	b.n	800385e <ssd1306_DrawPixel+0xae>
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003822:	79fa      	ldrb	r2, [r7, #7]
 8003824:	79bb      	ldrb	r3, [r7, #6]
 8003826:	08db      	lsrs	r3, r3, #3
 8003828:	b2d8      	uxtb	r0, r3
 800382a:	4603      	mov	r3, r0
 800382c:	01db      	lsls	r3, r3, #7
 800382e:	4413      	add	r3, r2
 8003830:	4a0e      	ldr	r2, [pc, #56]	; (800386c <ssd1306_DrawPixel+0xbc>)
 8003832:	5cd3      	ldrb	r3, [r2, r3]
 8003834:	b25a      	sxtb	r2, r3
 8003836:	79bb      	ldrb	r3, [r7, #6]
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	2101      	movs	r1, #1
 800383e:	fa01 f303 	lsl.w	r3, r1, r3
 8003842:	b25b      	sxtb	r3, r3
 8003844:	43db      	mvns	r3, r3
 8003846:	b25b      	sxtb	r3, r3
 8003848:	4013      	ands	r3, r2
 800384a:	b259      	sxtb	r1, r3
 800384c:	79fa      	ldrb	r2, [r7, #7]
 800384e:	4603      	mov	r3, r0
 8003850:	01db      	lsls	r3, r3, #7
 8003852:	4413      	add	r3, r2
 8003854:	b2c9      	uxtb	r1, r1
 8003856:	4a05      	ldr	r2, [pc, #20]	; (800386c <ssd1306_DrawPixel+0xbc>)
 8003858:	54d1      	strb	r1, [r2, r3]
 800385a:	e000      	b.n	800385e <ssd1306_DrawPixel+0xae>
		return;
 800385c:	bf00      	nop
	}
}
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	20000e2c 	.word	0x20000e2c
 800386c:	20000a2c 	.word	0x20000a2c

08003870 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8003870:	b590      	push	{r4, r7, lr}
 8003872:	b089      	sub	sp, #36	; 0x24
 8003874:	af00      	add	r7, sp, #0
 8003876:	4604      	mov	r4, r0
 8003878:	1d38      	adds	r0, r7, #4
 800387a:	e880 0006 	stmia.w	r0, {r1, r2}
 800387e:	461a      	mov	r2, r3
 8003880:	4623      	mov	r3, r4
 8003882:	73fb      	strb	r3, [r7, #15]
 8003884:	4613      	mov	r3, r2
 8003886:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;
	
	// Kijken of er nog plaats is op deze lijn
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8003888:	4b38      	ldr	r3, [pc, #224]	; (800396c <ssd1306_WriteChar+0xfc>)
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	793b      	ldrb	r3, [r7, #4]
 8003890:	4413      	add	r3, r2
 8003892:	2b7f      	cmp	r3, #127	; 0x7f
 8003894:	dc06      	bgt.n	80038a4 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8003896:	4b35      	ldr	r3, [pc, #212]	; (800396c <ssd1306_WriteChar+0xfc>)
 8003898:	885b      	ldrh	r3, [r3, #2]
 800389a:	461a      	mov	r2, r3
 800389c:	797b      	ldrb	r3, [r7, #5]
 800389e:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80038a0:	2b3f      	cmp	r3, #63	; 0x3f
 80038a2:	dd01      	ble.n	80038a8 <ssd1306_WriteChar+0x38>
	{
		// Er is geen plaats meer
		return 0;
 80038a4:	2300      	movs	r3, #0
 80038a6:	e05d      	b.n	8003964 <ssd1306_WriteChar+0xf4>
	}
	
	// We gaan door het font
	for (i = 0; i < Font.FontHeight; i++)
 80038a8:	2300      	movs	r3, #0
 80038aa:	61fb      	str	r3, [r7, #28]
 80038ac:	e04c      	b.n	8003948 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
 80038b2:	3b20      	subs	r3, #32
 80038b4:	7979      	ldrb	r1, [r7, #5]
 80038b6:	fb01 f303 	mul.w	r3, r1, r3
 80038ba:	4619      	mov	r1, r3
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	440b      	add	r3, r1
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	4413      	add	r3, r2
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 80038c8:	2300      	movs	r3, #0
 80038ca:	61bb      	str	r3, [r7, #24]
 80038cc:	e034      	b.n	8003938 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000) 
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d012      	beq.n	8003904 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80038de:	4b23      	ldr	r3, [pc, #140]	; (800396c <ssd1306_WriteChar+0xfc>)
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	4413      	add	r3, r2
 80038ea:	b2d8      	uxtb	r0, r3
 80038ec:	4b1f      	ldr	r3, [pc, #124]	; (800396c <ssd1306_WriteChar+0xfc>)
 80038ee:	885b      	ldrh	r3, [r3, #2]
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	4413      	add	r3, r2
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	7bba      	ldrb	r2, [r7, #14]
 80038fc:	4619      	mov	r1, r3
 80038fe:	f7ff ff57 	bl	80037b0 <ssd1306_DrawPixel>
 8003902:	e016      	b.n	8003932 <ssd1306_WriteChar+0xc2>
			} 
			else 
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003904:	4b19      	ldr	r3, [pc, #100]	; (800396c <ssd1306_WriteChar+0xfc>)
 8003906:	881b      	ldrh	r3, [r3, #0]
 8003908:	b2da      	uxtb	r2, r3
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	b2db      	uxtb	r3, r3
 800390e:	4413      	add	r3, r2
 8003910:	b2d8      	uxtb	r0, r3
 8003912:	4b16      	ldr	r3, [pc, #88]	; (800396c <ssd1306_WriteChar+0xfc>)
 8003914:	885b      	ldrh	r3, [r3, #2]
 8003916:	b2da      	uxtb	r2, r3
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	b2db      	uxtb	r3, r3
 800391c:	4413      	add	r3, r2
 800391e:	b2d9      	uxtb	r1, r3
 8003920:	7bbb      	ldrb	r3, [r7, #14]
 8003922:	2b00      	cmp	r3, #0
 8003924:	bf0c      	ite	eq
 8003926:	2301      	moveq	r3, #1
 8003928:	2300      	movne	r3, #0
 800392a:	b2db      	uxtb	r3, r3
 800392c:	461a      	mov	r2, r3
 800392e:	f7ff ff3f 	bl	80037b0 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	3301      	adds	r3, #1
 8003936:	61bb      	str	r3, [r7, #24]
 8003938:	793b      	ldrb	r3, [r7, #4]
 800393a:	461a      	mov	r2, r3
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	4293      	cmp	r3, r2
 8003940:	d3c5      	bcc.n	80038ce <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	3301      	adds	r3, #1
 8003946:	61fb      	str	r3, [r7, #28]
 8003948:	797b      	ldrb	r3, [r7, #5]
 800394a:	461a      	mov	r2, r3
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	4293      	cmp	r3, r2
 8003950:	d3ad      	bcc.n	80038ae <ssd1306_WriteChar+0x3e>
			}
		}
	}
	
	// De huidige positie is nu verplaatst
	SSD1306.CurrentX += Font.FontWidth;
 8003952:	4b06      	ldr	r3, [pc, #24]	; (800396c <ssd1306_WriteChar+0xfc>)
 8003954:	881a      	ldrh	r2, [r3, #0]
 8003956:	793b      	ldrb	r3, [r7, #4]
 8003958:	b29b      	uxth	r3, r3
 800395a:	4413      	add	r3, r2
 800395c:	b29a      	uxth	r2, r3
 800395e:	4b03      	ldr	r3, [pc, #12]	; (800396c <ssd1306_WriteChar+0xfc>)
 8003960:	801a      	strh	r2, [r3, #0]
	
	// We geven het geschreven char terug voor validatie
	return ch;
 8003962:	7bfb      	ldrb	r3, [r7, #15]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3724      	adds	r7, #36	; 0x24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd90      	pop	{r4, r7, pc}
 800396c:	20000e2c 	.word	0x20000e2c

08003970 <ssd1306_WriteString>:
// 	str => string om op het scherm te schrijven
//	Font => Het font dat gebruikt moet worden
//	color => Black or White
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	1d38      	adds	r0, r7, #4
 800397a:	e880 0006 	stmia.w	r0, {r1, r2}
 800397e:	70fb      	strb	r3, [r7, #3]
	// We schrijven alle char tot een nulbyte
	while (*str) 
 8003980:	e012      	b.n	80039a8 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	7818      	ldrb	r0, [r3, #0]
 8003986:	78fb      	ldrb	r3, [r7, #3]
 8003988:	1d3a      	adds	r2, r7, #4
 800398a:	ca06      	ldmia	r2, {r1, r2}
 800398c:	f7ff ff70 	bl	8003870 <ssd1306_WriteChar>
 8003990:	4603      	mov	r3, r0
 8003992:	461a      	mov	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d002      	beq.n	80039a2 <ssd1306_WriteString+0x32>
		{
			// Het karakter is niet juist weggeschreven
			return *str;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	e008      	b.n	80039b4 <ssd1306_WriteString+0x44>
		}
		
		// Volgende char
		str++;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	3301      	adds	r3, #1
 80039a6:	60fb      	str	r3, [r7, #12]
	while (*str) 
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1e8      	bne.n	8003982 <ssd1306_WriteString+0x12>
	}
	
	// Alles gelukt, we sturen dus 0 terug
	return *str;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	781b      	ldrb	r3, [r3, #0]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <ssd1306_SetCursor>:

//
//	Zet de cursor op een coordinaat
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	460a      	mov	r2, r1
 80039c6:	71fb      	strb	r3, [r7, #7]
 80039c8:	4613      	mov	r3, r2
 80039ca:	71bb      	strb	r3, [r7, #6]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80039cc:	79fb      	ldrb	r3, [r7, #7]
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <ssd1306_SetCursor+0x2c>)
 80039d2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 80039d4:	79bb      	ldrb	r3, [r7, #6]
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	4b03      	ldr	r3, [pc, #12]	; (80039e8 <ssd1306_SetCursor+0x2c>)
 80039da:	805a      	strh	r2, [r3, #2]
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	20000e2c 	.word	0x20000e2c

080039ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039f2:	2300      	movs	r3, #0
 80039f4:	607b      	str	r3, [r7, #4]
 80039f6:	4b10      	ldr	r3, [pc, #64]	; (8003a38 <HAL_MspInit+0x4c>)
 80039f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fa:	4a0f      	ldr	r2, [pc, #60]	; (8003a38 <HAL_MspInit+0x4c>)
 80039fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a00:	6453      	str	r3, [r2, #68]	; 0x44
 8003a02:	4b0d      	ldr	r3, [pc, #52]	; (8003a38 <HAL_MspInit+0x4c>)
 8003a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a0a:	607b      	str	r3, [r7, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a0e:	2300      	movs	r3, #0
 8003a10:	603b      	str	r3, [r7, #0]
 8003a12:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <HAL_MspInit+0x4c>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	4a08      	ldr	r2, [pc, #32]	; (8003a38 <HAL_MspInit+0x4c>)
 8003a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a1e:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <HAL_MspInit+0x4c>)
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003a2a:	2007      	movs	r0, #7
 8003a2c:	f000 fc14 	bl	8004258 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a30:	bf00      	nop
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40023800 	.word	0x40023800

08003a3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08a      	sub	sp, #40	; 0x28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a44:	f107 0314 	add.w	r3, r7, #20
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	605a      	str	r2, [r3, #4]
 8003a4e:	609a      	str	r2, [r3, #8]
 8003a50:	60da      	str	r2, [r3, #12]
 8003a52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a19      	ldr	r2, [pc, #100]	; (8003ac0 <HAL_I2C_MspInit+0x84>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d12c      	bne.n	8003ab8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a5e:	2300      	movs	r3, #0
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	4b18      	ldr	r3, [pc, #96]	; (8003ac4 <HAL_I2C_MspInit+0x88>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	4a17      	ldr	r2, [pc, #92]	; (8003ac4 <HAL_I2C_MspInit+0x88>)
 8003a68:	f043 0302 	orr.w	r3, r3, #2
 8003a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a6e:	4b15      	ldr	r3, [pc, #84]	; (8003ac4 <HAL_I2C_MspInit+0x88>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	613b      	str	r3, [r7, #16]
 8003a78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8003a7a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a80:	2312      	movs	r3, #18
 8003a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a84:	2301      	movs	r3, #1
 8003a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003a8c:	2304      	movs	r3, #4
 8003a8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a90:	f107 0314 	add.w	r3, r7, #20
 8003a94:	4619      	mov	r1, r3
 8003a96:	480c      	ldr	r0, [pc, #48]	; (8003ac8 <HAL_I2C_MspInit+0x8c>)
 8003a98:	f000 fc20 	bl	80042dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	4b08      	ldr	r3, [pc, #32]	; (8003ac4 <HAL_I2C_MspInit+0x88>)
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	4a07      	ldr	r2, [pc, #28]	; (8003ac4 <HAL_I2C_MspInit+0x88>)
 8003aa6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8003aac:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <HAL_I2C_MspInit+0x88>)
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003ab8:	bf00      	nop
 8003aba:	3728      	adds	r7, #40	; 0x28
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40005400 	.word	0x40005400
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	40020400 	.word	0x40020400

08003acc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08a      	sub	sp, #40	; 0x28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ad4:	f107 0314 	add.w	r3, r7, #20
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	605a      	str	r2, [r3, #4]
 8003ade:	609a      	str	r2, [r3, #8]
 8003ae0:	60da      	str	r2, [r3, #12]
 8003ae2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a28      	ldr	r2, [pc, #160]	; (8003b8c <HAL_I2S_MspInit+0xc0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d14a      	bne.n	8003b84 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003aee:	2300      	movs	r3, #0
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	4b27      	ldr	r3, [pc, #156]	; (8003b90 <HAL_I2S_MspInit+0xc4>)
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	4a26      	ldr	r2, [pc, #152]	; (8003b90 <HAL_I2S_MspInit+0xc4>)
 8003af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003afc:	6413      	str	r3, [r2, #64]	; 0x40
 8003afe:	4b24      	ldr	r3, [pc, #144]	; (8003b90 <HAL_I2S_MspInit+0xc4>)
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	4b20      	ldr	r3, [pc, #128]	; (8003b90 <HAL_I2S_MspInit+0xc4>)
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	4a1f      	ldr	r2, [pc, #124]	; (8003b90 <HAL_I2S_MspInit+0xc4>)
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	6313      	str	r3, [r2, #48]	; 0x30
 8003b1a:	4b1d      	ldr	r3, [pc, #116]	; (8003b90 <HAL_I2S_MspInit+0xc4>)
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b26:	2300      	movs	r3, #0
 8003b28:	60bb      	str	r3, [r7, #8]
 8003b2a:	4b19      	ldr	r3, [pc, #100]	; (8003b90 <HAL_I2S_MspInit+0xc4>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	4a18      	ldr	r2, [pc, #96]	; (8003b90 <HAL_I2S_MspInit+0xc4>)
 8003b30:	f043 0304 	orr.w	r3, r3, #4
 8003b34:	6313      	str	r3, [r2, #48]	; 0x30
 8003b36:	4b16      	ldr	r3, [pc, #88]	; (8003b90 <HAL_I2S_MspInit+0xc4>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	f003 0304 	and.w	r3, r3, #4
 8003b3e:	60bb      	str	r3, [r7, #8]
 8003b40:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003b42:	2310      	movs	r3, #16
 8003b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b46:	2302      	movs	r3, #2
 8003b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003b52:	2306      	movs	r3, #6
 8003b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003b56:	f107 0314 	add.w	r3, r7, #20
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	480d      	ldr	r0, [pc, #52]	; (8003b94 <HAL_I2S_MspInit+0xc8>)
 8003b5e:	f000 fbbd 	bl	80042dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003b62:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b68:	2302      	movs	r3, #2
 8003b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b70:	2300      	movs	r3, #0
 8003b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003b74:	2306      	movs	r3, #6
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b78:	f107 0314 	add.w	r3, r7, #20
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4806      	ldr	r0, [pc, #24]	; (8003b98 <HAL_I2S_MspInit+0xcc>)
 8003b80:	f000 fbac 	bl	80042dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003b84:	bf00      	nop
 8003b86:	3728      	adds	r7, #40	; 0x28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40003c00 	.word	0x40003c00
 8003b90:	40023800 	.word	0x40023800
 8003b94:	40020000 	.word	0x40020000
 8003b98:	40020800 	.word	0x40020800

08003b9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b08a      	sub	sp, #40	; 0x28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ba4:	f107 0314 	add.w	r3, r7, #20
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	605a      	str	r2, [r3, #4]
 8003bae:	609a      	str	r2, [r3, #8]
 8003bb0:	60da      	str	r2, [r3, #12]
 8003bb2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a19      	ldr	r2, [pc, #100]	; (8003c20 <HAL_SPI_MspInit+0x84>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d12b      	bne.n	8003c16 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	613b      	str	r3, [r7, #16]
 8003bc2:	4b18      	ldr	r3, [pc, #96]	; (8003c24 <HAL_SPI_MspInit+0x88>)
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc6:	4a17      	ldr	r2, [pc, #92]	; (8003c24 <HAL_SPI_MspInit+0x88>)
 8003bc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8003bce:	4b15      	ldr	r3, [pc, #84]	; (8003c24 <HAL_SPI_MspInit+0x88>)
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bd6:	613b      	str	r3, [r7, #16]
 8003bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	4b11      	ldr	r3, [pc, #68]	; (8003c24 <HAL_SPI_MspInit+0x88>)
 8003be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be2:	4a10      	ldr	r2, [pc, #64]	; (8003c24 <HAL_SPI_MspInit+0x88>)
 8003be4:	f043 0301 	orr.w	r3, r3, #1
 8003be8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bea:	4b0e      	ldr	r3, [pc, #56]	; (8003c24 <HAL_SPI_MspInit+0x88>)
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003bf6:	23e0      	movs	r3, #224	; 0xe0
 8003bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c02:	2300      	movs	r3, #0
 8003c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c06:	2305      	movs	r3, #5
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c0a:	f107 0314 	add.w	r3, r7, #20
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4805      	ldr	r0, [pc, #20]	; (8003c28 <HAL_SPI_MspInit+0x8c>)
 8003c12:	f000 fb63 	bl	80042dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003c16:	bf00      	nop
 8003c18:	3728      	adds	r7, #40	; 0x28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40013000 	.word	0x40013000
 8003c24:	40023800 	.word	0x40023800
 8003c28:	40020000 	.word	0x40020000

08003c2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a0e      	ldr	r2, [pc, #56]	; (8003c74 <HAL_TIM_Base_MspInit+0x48>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d115      	bne.n	8003c6a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	4b0d      	ldr	r3, [pc, #52]	; (8003c78 <HAL_TIM_Base_MspInit+0x4c>)
 8003c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c46:	4a0c      	ldr	r2, [pc, #48]	; (8003c78 <HAL_TIM_Base_MspInit+0x4c>)
 8003c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c4e:	4b0a      	ldr	r3, [pc, #40]	; (8003c78 <HAL_TIM_Base_MspInit+0x4c>)
 8003c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	2019      	movs	r0, #25
 8003c60:	f000 fb05 	bl	800426e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003c64:	2019      	movs	r0, #25
 8003c66:	f000 fb1e 	bl	80042a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8003c6a:	bf00      	nop
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40014400 	.word	0x40014400
 8003c78:	40023800 	.word	0x40023800

08003c7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b08a      	sub	sp, #40	; 0x28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c84:	f107 0314 	add.w	r3, r7, #20
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	605a      	str	r2, [r3, #4]
 8003c8e:	609a      	str	r2, [r3, #8]
 8003c90:	60da      	str	r2, [r3, #12]
 8003c92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a19      	ldr	r2, [pc, #100]	; (8003d00 <HAL_UART_MspInit+0x84>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d12b      	bne.n	8003cf6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	613b      	str	r3, [r7, #16]
 8003ca2:	4b18      	ldr	r3, [pc, #96]	; (8003d04 <HAL_UART_MspInit+0x88>)
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	4a17      	ldr	r2, [pc, #92]	; (8003d04 <HAL_UART_MspInit+0x88>)
 8003ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cac:	6413      	str	r3, [r2, #64]	; 0x40
 8003cae:	4b15      	ldr	r3, [pc, #84]	; (8003d04 <HAL_UART_MspInit+0x88>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb6:	613b      	str	r3, [r7, #16]
 8003cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	4b11      	ldr	r3, [pc, #68]	; (8003d04 <HAL_UART_MspInit+0x88>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	4a10      	ldr	r2, [pc, #64]	; (8003d04 <HAL_UART_MspInit+0x88>)
 8003cc4:	f043 0301 	orr.w	r3, r3, #1
 8003cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cca:	4b0e      	ldr	r3, [pc, #56]	; (8003d04 <HAL_UART_MspInit+0x88>)
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003cd6:	230c      	movs	r3, #12
 8003cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cda:	2302      	movs	r3, #2
 8003cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ce6:	2307      	movs	r3, #7
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cea:	f107 0314 	add.w	r3, r7, #20
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4805      	ldr	r0, [pc, #20]	; (8003d08 <HAL_UART_MspInit+0x8c>)
 8003cf2:	f000 faf3 	bl	80042dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003cf6:	bf00      	nop
 8003cf8:	3728      	adds	r7, #40	; 0x28
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	40004400 	.word	0x40004400
 8003d04:	40023800 	.word	0x40023800
 8003d08:	40020000 	.word	0x40020000

08003d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d10:	e7fe      	b.n	8003d10 <NMI_Handler+0x4>

08003d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d12:	b480      	push	{r7}
 8003d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d16:	e7fe      	b.n	8003d16 <HardFault_Handler+0x4>

08003d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d1c:	e7fe      	b.n	8003d1c <MemManage_Handler+0x4>

08003d1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d22:	e7fe      	b.n	8003d22 <BusFault_Handler+0x4>

08003d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d28:	e7fe      	b.n	8003d28 <UsageFault_Handler+0x4>

08003d2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d2e:	bf00      	nop
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d3c:	bf00      	nop
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d46:	b480      	push	{r7}
 8003d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d4a:	bf00      	nop
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d58:	f000 f96a 	bl	8004030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d5c:	bf00      	nop
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003d64:	4802      	ldr	r0, [pc, #8]	; (8003d70 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003d66:	f004 f9ef 	bl	8008148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003d6a:	bf00      	nop
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	20000f10 	.word	0x20000f10

08003d74 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003d78:	4802      	ldr	r0, [pc, #8]	; (8003d84 <OTG_FS_IRQHandler+0x10>)
 8003d7a:	f000 fee7 	bl	8004b4c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003d7e:	bf00      	nop
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	20001418 	.word	0x20001418

08003d88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
	return 1;
 8003d8c:	2301      	movs	r3, #1
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <_kill>:

int _kill(int pid, int sig)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003da2:	f007 ff9d 	bl	800bce0 <__errno>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2216      	movs	r2, #22
 8003daa:	601a      	str	r2, [r3, #0]
	return -1;
 8003dac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <_exit>:

void _exit (int status)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7ff ffe7 	bl	8003d98 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003dca:	e7fe      	b.n	8003dca <_exit+0x12>

08003dcc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	e00a      	b.n	8003df4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003dde:	f3af 8000 	nop.w
 8003de2:	4601      	mov	r1, r0
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	60ba      	str	r2, [r7, #8]
 8003dea:	b2ca      	uxtb	r2, r1
 8003dec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	3301      	adds	r3, #1
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	dbf0      	blt.n	8003dde <_read+0x12>
	}

return len;
 8003dfc:	687b      	ldr	r3, [r7, #4]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b086      	sub	sp, #24
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	60f8      	str	r0, [r7, #12]
 8003e0e:	60b9      	str	r1, [r7, #8]
 8003e10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]
 8003e16:	e009      	b.n	8003e2c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	1c5a      	adds	r2, r3, #1
 8003e1c:	60ba      	str	r2, [r7, #8]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff f8fb 	bl	800301c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	dbf1      	blt.n	8003e18 <_write+0x12>
	}
	return len;
 8003e34:	687b      	ldr	r3, [r7, #4]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <_close>:

int _close(int file)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
	return -1;
 8003e46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
 8003e5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e66:	605a      	str	r2, [r3, #4]
	return 0;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <_isatty>:

int _isatty(int file)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
	return 1;
 8003e7e:	2301      	movs	r3, #1
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
	return 0;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
	...

08003ea8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003eb0:	4a14      	ldr	r2, [pc, #80]	; (8003f04 <_sbrk+0x5c>)
 8003eb2:	4b15      	ldr	r3, [pc, #84]	; (8003f08 <_sbrk+0x60>)
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ebc:	4b13      	ldr	r3, [pc, #76]	; (8003f0c <_sbrk+0x64>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d102      	bne.n	8003eca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ec4:	4b11      	ldr	r3, [pc, #68]	; (8003f0c <_sbrk+0x64>)
 8003ec6:	4a12      	ldr	r2, [pc, #72]	; (8003f10 <_sbrk+0x68>)
 8003ec8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003eca:	4b10      	ldr	r3, [pc, #64]	; (8003f0c <_sbrk+0x64>)
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d207      	bcs.n	8003ee8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ed8:	f007 ff02 	bl	800bce0 <__errno>
 8003edc:	4603      	mov	r3, r0
 8003ede:	220c      	movs	r2, #12
 8003ee0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee6:	e009      	b.n	8003efc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ee8:	4b08      	ldr	r3, [pc, #32]	; (8003f0c <_sbrk+0x64>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003eee:	4b07      	ldr	r3, [pc, #28]	; (8003f0c <_sbrk+0x64>)
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	4a05      	ldr	r2, [pc, #20]	; (8003f0c <_sbrk+0x64>)
 8003ef8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003efa:	68fb      	ldr	r3, [r7, #12]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3718      	adds	r7, #24
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	20020000 	.word	0x20020000
 8003f08:	00000400 	.word	0x00000400
 8003f0c:	20000e34 	.word	0x20000e34
 8003f10:	20001730 	.word	0x20001730

08003f14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f18:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <SystemInit+0x20>)
 8003f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1e:	4a05      	ldr	r2, [pc, #20]	; (8003f34 <SystemInit+0x20>)
 8003f20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f28:	bf00      	nop
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	e000ed00 	.word	0xe000ed00

08003f38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003f38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f3c:	480d      	ldr	r0, [pc, #52]	; (8003f74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003f3e:	490e      	ldr	r1, [pc, #56]	; (8003f78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003f40:	4a0e      	ldr	r2, [pc, #56]	; (8003f7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f44:	e002      	b.n	8003f4c <LoopCopyDataInit>

08003f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f4a:	3304      	adds	r3, #4

08003f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f50:	d3f9      	bcc.n	8003f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f52:	4a0b      	ldr	r2, [pc, #44]	; (8003f80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003f54:	4c0b      	ldr	r4, [pc, #44]	; (8003f84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f58:	e001      	b.n	8003f5e <LoopFillZerobss>

08003f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f5c:	3204      	adds	r2, #4

08003f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f60:	d3fb      	bcc.n	8003f5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003f62:	f7ff ffd7 	bl	8003f14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f66:	f007 fed3 	bl	800bd10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f6a:	f7ff f885 	bl	8003078 <main>
  bx  lr    
 8003f6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003f70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f78:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8003f7c:	080100d0 	.word	0x080100d0
  ldr r2, =_sbss
 8003f80:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8003f84:	2000172c 	.word	0x2000172c

08003f88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f88:	e7fe      	b.n	8003f88 <ADC_IRQHandler>
	...

08003f8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f90:	4b0e      	ldr	r3, [pc, #56]	; (8003fcc <HAL_Init+0x40>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a0d      	ldr	r2, [pc, #52]	; (8003fcc <HAL_Init+0x40>)
 8003f96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f9c:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <HAL_Init+0x40>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a0a      	ldr	r2, [pc, #40]	; (8003fcc <HAL_Init+0x40>)
 8003fa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003fa8:	4b08      	ldr	r3, [pc, #32]	; (8003fcc <HAL_Init+0x40>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a07      	ldr	r2, [pc, #28]	; (8003fcc <HAL_Init+0x40>)
 8003fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fb4:	2003      	movs	r0, #3
 8003fb6:	f000 f94f 	bl	8004258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fba:	2000      	movs	r0, #0
 8003fbc:	f000 f808 	bl	8003fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fc0:	f7ff fd14 	bl	80039ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	40023c00 	.word	0x40023c00

08003fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003fd8:	4b12      	ldr	r3, [pc, #72]	; (8004024 <HAL_InitTick+0x54>)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	4b12      	ldr	r3, [pc, #72]	; (8004028 <HAL_InitTick+0x58>)
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 f967 	bl	80042c2 <HAL_SYSTICK_Config>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e00e      	b.n	800401c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b0f      	cmp	r3, #15
 8004002:	d80a      	bhi.n	800401a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004004:	2200      	movs	r2, #0
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	f04f 30ff 	mov.w	r0, #4294967295
 800400c:	f000 f92f 	bl	800426e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004010:	4a06      	ldr	r2, [pc, #24]	; (800402c <HAL_InitTick+0x5c>)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
 8004018:	e000      	b.n	800401c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
}
 800401c:	4618      	mov	r0, r3
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	20000018 	.word	0x20000018
 8004028:	20000020 	.word	0x20000020
 800402c:	2000001c 	.word	0x2000001c

08004030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004034:	4b06      	ldr	r3, [pc, #24]	; (8004050 <HAL_IncTick+0x20>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	461a      	mov	r2, r3
 800403a:	4b06      	ldr	r3, [pc, #24]	; (8004054 <HAL_IncTick+0x24>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4413      	add	r3, r2
 8004040:	4a04      	ldr	r2, [pc, #16]	; (8004054 <HAL_IncTick+0x24>)
 8004042:	6013      	str	r3, [r2, #0]
}
 8004044:	bf00      	nop
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	20000020 	.word	0x20000020
 8004054:	2000103c 	.word	0x2000103c

08004058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
  return uwTick;
 800405c:	4b03      	ldr	r3, [pc, #12]	; (800406c <HAL_GetTick+0x14>)
 800405e:	681b      	ldr	r3, [r3, #0]
}
 8004060:	4618      	mov	r0, r3
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	2000103c 	.word	0x2000103c

08004070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004078:	f7ff ffee 	bl	8004058 <HAL_GetTick>
 800407c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004088:	d005      	beq.n	8004096 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800408a:	4b0a      	ldr	r3, [pc, #40]	; (80040b4 <HAL_Delay+0x44>)
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4413      	add	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004096:	bf00      	nop
 8004098:	f7ff ffde 	bl	8004058 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d8f7      	bhi.n	8004098 <HAL_Delay+0x28>
  {
  }
}
 80040a8:	bf00      	nop
 80040aa:	bf00      	nop
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	20000020 	.word	0x20000020

080040b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040c8:	4b0c      	ldr	r3, [pc, #48]	; (80040fc <__NVIC_SetPriorityGrouping+0x44>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040d4:	4013      	ands	r3, r2
 80040d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040ea:	4a04      	ldr	r2, [pc, #16]	; (80040fc <__NVIC_SetPriorityGrouping+0x44>)
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	60d3      	str	r3, [r2, #12]
}
 80040f0:	bf00      	nop
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	e000ed00 	.word	0xe000ed00

08004100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004104:	4b04      	ldr	r3, [pc, #16]	; (8004118 <__NVIC_GetPriorityGrouping+0x18>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	0a1b      	lsrs	r3, r3, #8
 800410a:	f003 0307 	and.w	r3, r3, #7
}
 800410e:	4618      	mov	r0, r3
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	e000ed00 	.word	0xe000ed00

0800411c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	4603      	mov	r3, r0
 8004124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800412a:	2b00      	cmp	r3, #0
 800412c:	db0b      	blt.n	8004146 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800412e:	79fb      	ldrb	r3, [r7, #7]
 8004130:	f003 021f 	and.w	r2, r3, #31
 8004134:	4907      	ldr	r1, [pc, #28]	; (8004154 <__NVIC_EnableIRQ+0x38>)
 8004136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800413a:	095b      	lsrs	r3, r3, #5
 800413c:	2001      	movs	r0, #1
 800413e:	fa00 f202 	lsl.w	r2, r0, r2
 8004142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	e000e100 	.word	0xe000e100

08004158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	6039      	str	r1, [r7, #0]
 8004162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004168:	2b00      	cmp	r3, #0
 800416a:	db0a      	blt.n	8004182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	b2da      	uxtb	r2, r3
 8004170:	490c      	ldr	r1, [pc, #48]	; (80041a4 <__NVIC_SetPriority+0x4c>)
 8004172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004176:	0112      	lsls	r2, r2, #4
 8004178:	b2d2      	uxtb	r2, r2
 800417a:	440b      	add	r3, r1
 800417c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004180:	e00a      	b.n	8004198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	b2da      	uxtb	r2, r3
 8004186:	4908      	ldr	r1, [pc, #32]	; (80041a8 <__NVIC_SetPriority+0x50>)
 8004188:	79fb      	ldrb	r3, [r7, #7]
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	3b04      	subs	r3, #4
 8004190:	0112      	lsls	r2, r2, #4
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	440b      	add	r3, r1
 8004196:	761a      	strb	r2, [r3, #24]
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	e000e100 	.word	0xe000e100
 80041a8:	e000ed00 	.word	0xe000ed00

080041ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b089      	sub	sp, #36	; 0x24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f1c3 0307 	rsb	r3, r3, #7
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	bf28      	it	cs
 80041ca:	2304      	movcs	r3, #4
 80041cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	3304      	adds	r3, #4
 80041d2:	2b06      	cmp	r3, #6
 80041d4:	d902      	bls.n	80041dc <NVIC_EncodePriority+0x30>
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	3b03      	subs	r3, #3
 80041da:	e000      	b.n	80041de <NVIC_EncodePriority+0x32>
 80041dc:	2300      	movs	r3, #0
 80041de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041e0:	f04f 32ff 	mov.w	r2, #4294967295
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ea:	43da      	mvns	r2, r3
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	401a      	ands	r2, r3
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041f4:	f04f 31ff 	mov.w	r1, #4294967295
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	fa01 f303 	lsl.w	r3, r1, r3
 80041fe:	43d9      	mvns	r1, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004204:	4313      	orrs	r3, r2
         );
}
 8004206:	4618      	mov	r0, r3
 8004208:	3724      	adds	r7, #36	; 0x24
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
	...

08004214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3b01      	subs	r3, #1
 8004220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004224:	d301      	bcc.n	800422a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004226:	2301      	movs	r3, #1
 8004228:	e00f      	b.n	800424a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800422a:	4a0a      	ldr	r2, [pc, #40]	; (8004254 <SysTick_Config+0x40>)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3b01      	subs	r3, #1
 8004230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004232:	210f      	movs	r1, #15
 8004234:	f04f 30ff 	mov.w	r0, #4294967295
 8004238:	f7ff ff8e 	bl	8004158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800423c:	4b05      	ldr	r3, [pc, #20]	; (8004254 <SysTick_Config+0x40>)
 800423e:	2200      	movs	r2, #0
 8004240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004242:	4b04      	ldr	r3, [pc, #16]	; (8004254 <SysTick_Config+0x40>)
 8004244:	2207      	movs	r2, #7
 8004246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	e000e010 	.word	0xe000e010

08004258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7ff ff29 	bl	80040b8 <__NVIC_SetPriorityGrouping>
}
 8004266:	bf00      	nop
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800426e:	b580      	push	{r7, lr}
 8004270:	b086      	sub	sp, #24
 8004272:	af00      	add	r7, sp, #0
 8004274:	4603      	mov	r3, r0
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	607a      	str	r2, [r7, #4]
 800427a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800427c:	2300      	movs	r3, #0
 800427e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004280:	f7ff ff3e 	bl	8004100 <__NVIC_GetPriorityGrouping>
 8004284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	68b9      	ldr	r1, [r7, #8]
 800428a:	6978      	ldr	r0, [r7, #20]
 800428c:	f7ff ff8e 	bl	80041ac <NVIC_EncodePriority>
 8004290:	4602      	mov	r2, r0
 8004292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004296:	4611      	mov	r1, r2
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff ff5d 	bl	8004158 <__NVIC_SetPriority>
}
 800429e:	bf00      	nop
 80042a0:	3718      	adds	r7, #24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b082      	sub	sp, #8
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	4603      	mov	r3, r0
 80042ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff ff31 	bl	800411c <__NVIC_EnableIRQ>
}
 80042ba:	bf00      	nop
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b082      	sub	sp, #8
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7ff ffa2 	bl	8004214 <SysTick_Config>
 80042d0:	4603      	mov	r3, r0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042dc:	b480      	push	{r7}
 80042de:	b089      	sub	sp, #36	; 0x24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042f2:	2300      	movs	r3, #0
 80042f4:	61fb      	str	r3, [r7, #28]
 80042f6:	e16b      	b.n	80045d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042f8:	2201      	movs	r2, #1
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	4013      	ands	r3, r2
 800430a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	429a      	cmp	r2, r3
 8004312:	f040 815a 	bne.w	80045ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	2b01      	cmp	r3, #1
 8004320:	d005      	beq.n	800432e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800432a:	2b02      	cmp	r3, #2
 800432c:	d130      	bne.n	8004390 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	2203      	movs	r2, #3
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	43db      	mvns	r3, r3
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	4013      	ands	r3, r2
 8004344:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	4313      	orrs	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004364:	2201      	movs	r2, #1
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	43db      	mvns	r3, r3
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	4013      	ands	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	091b      	lsrs	r3, r3, #4
 800437a:	f003 0201 	and.w	r2, r3, #1
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4313      	orrs	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f003 0303 	and.w	r3, r3, #3
 8004398:	2b03      	cmp	r3, #3
 800439a:	d017      	beq.n	80043cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	2203      	movs	r2, #3
 80043a8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ac:	43db      	mvns	r3, r3
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	4013      	ands	r3, r2
 80043b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f003 0303 	and.w	r3, r3, #3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d123      	bne.n	8004420 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	08da      	lsrs	r2, r3, #3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3208      	adds	r2, #8
 80043e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	220f      	movs	r2, #15
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	43db      	mvns	r3, r3
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	4013      	ands	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	4313      	orrs	r3, r2
 8004410:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	08da      	lsrs	r2, r3, #3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	3208      	adds	r2, #8
 800441a:	69b9      	ldr	r1, [r7, #24]
 800441c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	2203      	movs	r2, #3
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	43db      	mvns	r3, r3
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	4013      	ands	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f003 0203 	and.w	r2, r3, #3
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4313      	orrs	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 80b4 	beq.w	80045ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004462:	2300      	movs	r3, #0
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	4b60      	ldr	r3, [pc, #384]	; (80045e8 <HAL_GPIO_Init+0x30c>)
 8004468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446a:	4a5f      	ldr	r2, [pc, #380]	; (80045e8 <HAL_GPIO_Init+0x30c>)
 800446c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004470:	6453      	str	r3, [r2, #68]	; 0x44
 8004472:	4b5d      	ldr	r3, [pc, #372]	; (80045e8 <HAL_GPIO_Init+0x30c>)
 8004474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800447e:	4a5b      	ldr	r2, [pc, #364]	; (80045ec <HAL_GPIO_Init+0x310>)
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	089b      	lsrs	r3, r3, #2
 8004484:	3302      	adds	r3, #2
 8004486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800448a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	220f      	movs	r2, #15
 8004496:	fa02 f303 	lsl.w	r3, r2, r3
 800449a:	43db      	mvns	r3, r3
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	4013      	ands	r3, r2
 80044a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a52      	ldr	r2, [pc, #328]	; (80045f0 <HAL_GPIO_Init+0x314>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d02b      	beq.n	8004502 <HAL_GPIO_Init+0x226>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a51      	ldr	r2, [pc, #324]	; (80045f4 <HAL_GPIO_Init+0x318>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d025      	beq.n	80044fe <HAL_GPIO_Init+0x222>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a50      	ldr	r2, [pc, #320]	; (80045f8 <HAL_GPIO_Init+0x31c>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d01f      	beq.n	80044fa <HAL_GPIO_Init+0x21e>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a4f      	ldr	r2, [pc, #316]	; (80045fc <HAL_GPIO_Init+0x320>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d019      	beq.n	80044f6 <HAL_GPIO_Init+0x21a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a4e      	ldr	r2, [pc, #312]	; (8004600 <HAL_GPIO_Init+0x324>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d013      	beq.n	80044f2 <HAL_GPIO_Init+0x216>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a4d      	ldr	r2, [pc, #308]	; (8004604 <HAL_GPIO_Init+0x328>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d00d      	beq.n	80044ee <HAL_GPIO_Init+0x212>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a4c      	ldr	r2, [pc, #304]	; (8004608 <HAL_GPIO_Init+0x32c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d007      	beq.n	80044ea <HAL_GPIO_Init+0x20e>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a4b      	ldr	r2, [pc, #300]	; (800460c <HAL_GPIO_Init+0x330>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d101      	bne.n	80044e6 <HAL_GPIO_Init+0x20a>
 80044e2:	2307      	movs	r3, #7
 80044e4:	e00e      	b.n	8004504 <HAL_GPIO_Init+0x228>
 80044e6:	2308      	movs	r3, #8
 80044e8:	e00c      	b.n	8004504 <HAL_GPIO_Init+0x228>
 80044ea:	2306      	movs	r3, #6
 80044ec:	e00a      	b.n	8004504 <HAL_GPIO_Init+0x228>
 80044ee:	2305      	movs	r3, #5
 80044f0:	e008      	b.n	8004504 <HAL_GPIO_Init+0x228>
 80044f2:	2304      	movs	r3, #4
 80044f4:	e006      	b.n	8004504 <HAL_GPIO_Init+0x228>
 80044f6:	2303      	movs	r3, #3
 80044f8:	e004      	b.n	8004504 <HAL_GPIO_Init+0x228>
 80044fa:	2302      	movs	r3, #2
 80044fc:	e002      	b.n	8004504 <HAL_GPIO_Init+0x228>
 80044fe:	2301      	movs	r3, #1
 8004500:	e000      	b.n	8004504 <HAL_GPIO_Init+0x228>
 8004502:	2300      	movs	r3, #0
 8004504:	69fa      	ldr	r2, [r7, #28]
 8004506:	f002 0203 	and.w	r2, r2, #3
 800450a:	0092      	lsls	r2, r2, #2
 800450c:	4093      	lsls	r3, r2
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	4313      	orrs	r3, r2
 8004512:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004514:	4935      	ldr	r1, [pc, #212]	; (80045ec <HAL_GPIO_Init+0x310>)
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	089b      	lsrs	r3, r3, #2
 800451a:	3302      	adds	r3, #2
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004522:	4b3b      	ldr	r3, [pc, #236]	; (8004610 <HAL_GPIO_Init+0x334>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	43db      	mvns	r3, r3
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	4013      	ands	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	4313      	orrs	r3, r2
 8004544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004546:	4a32      	ldr	r2, [pc, #200]	; (8004610 <HAL_GPIO_Init+0x334>)
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800454c:	4b30      	ldr	r3, [pc, #192]	; (8004610 <HAL_GPIO_Init+0x334>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	43db      	mvns	r3, r3
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	4013      	ands	r3, r2
 800455a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	4313      	orrs	r3, r2
 800456e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004570:	4a27      	ldr	r2, [pc, #156]	; (8004610 <HAL_GPIO_Init+0x334>)
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004576:	4b26      	ldr	r3, [pc, #152]	; (8004610 <HAL_GPIO_Init+0x334>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	43db      	mvns	r3, r3
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	4013      	ands	r3, r2
 8004584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	4313      	orrs	r3, r2
 8004598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800459a:	4a1d      	ldr	r2, [pc, #116]	; (8004610 <HAL_GPIO_Init+0x334>)
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045a0:	4b1b      	ldr	r3, [pc, #108]	; (8004610 <HAL_GPIO_Init+0x334>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	43db      	mvns	r3, r3
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	4013      	ands	r3, r2
 80045ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d003      	beq.n	80045c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045c4:	4a12      	ldr	r2, [pc, #72]	; (8004610 <HAL_GPIO_Init+0x334>)
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	3301      	adds	r3, #1
 80045ce:	61fb      	str	r3, [r7, #28]
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	2b0f      	cmp	r3, #15
 80045d4:	f67f ae90 	bls.w	80042f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045d8:	bf00      	nop
 80045da:	bf00      	nop
 80045dc:	3724      	adds	r7, #36	; 0x24
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40023800 	.word	0x40023800
 80045ec:	40013800 	.word	0x40013800
 80045f0:	40020000 	.word	0x40020000
 80045f4:	40020400 	.word	0x40020400
 80045f8:	40020800 	.word	0x40020800
 80045fc:	40020c00 	.word	0x40020c00
 8004600:	40021000 	.word	0x40021000
 8004604:	40021400 	.word	0x40021400
 8004608:	40021800 	.word	0x40021800
 800460c:	40021c00 	.word	0x40021c00
 8004610:	40013c00 	.word	0x40013c00

08004614 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	887b      	ldrh	r3, [r7, #2]
 8004626:	4013      	ands	r3, r2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800462c:	2301      	movs	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
 8004630:	e001      	b.n	8004636 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004632:	2300      	movs	r3, #0
 8004634:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004636:	7bfb      	ldrb	r3, [r7, #15]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	460b      	mov	r3, r1
 800464e:	807b      	strh	r3, [r7, #2]
 8004650:	4613      	mov	r3, r2
 8004652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004654:	787b      	ldrb	r3, [r7, #1]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800465a:	887a      	ldrh	r2, [r7, #2]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004660:	e003      	b.n	800466a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004662:	887b      	ldrh	r3, [r7, #2]
 8004664:	041a      	lsls	r2, r3, #16
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	619a      	str	r2, [r3, #24]
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004676:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004678:	b08f      	sub	sp, #60	; 0x3c
 800467a:	af0a      	add	r7, sp, #40	; 0x28
 800467c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e054      	b.n	8004732 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d106      	bne.n	80046a8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f007 f854 	bl	800b750 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2203      	movs	r2, #3
 80046ac:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d102      	bne.n	80046c2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f004 f9aa 	bl	8008a20 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	603b      	str	r3, [r7, #0]
 80046d2:	687e      	ldr	r6, [r7, #4]
 80046d4:	466d      	mov	r5, sp
 80046d6:	f106 0410 	add.w	r4, r6, #16
 80046da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80046ea:	1d33      	adds	r3, r6, #4
 80046ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046ee:	6838      	ldr	r0, [r7, #0]
 80046f0:	f004 f924 	bl	800893c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2101      	movs	r1, #1
 80046fa:	4618      	mov	r0, r3
 80046fc:	f004 f9a1 	bl	8008a42 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	603b      	str	r3, [r7, #0]
 8004706:	687e      	ldr	r6, [r7, #4]
 8004708:	466d      	mov	r5, sp
 800470a:	f106 0410 	add.w	r4, r6, #16
 800470e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004710:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004712:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004714:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004716:	e894 0003 	ldmia.w	r4, {r0, r1}
 800471a:	e885 0003 	stmia.w	r5, {r0, r1}
 800471e:	1d33      	adds	r3, r6, #4
 8004720:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004722:	6838      	ldr	r0, [r7, #0]
 8004724:	f004 fb08 	bl	8008d38 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800473a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800473a:	b590      	push	{r4, r7, lr}
 800473c:	b089      	sub	sp, #36	; 0x24
 800473e:	af04      	add	r7, sp, #16
 8004740:	6078      	str	r0, [r7, #4]
 8004742:	4608      	mov	r0, r1
 8004744:	4611      	mov	r1, r2
 8004746:	461a      	mov	r2, r3
 8004748:	4603      	mov	r3, r0
 800474a:	70fb      	strb	r3, [r7, #3]
 800474c:	460b      	mov	r3, r1
 800474e:	70bb      	strb	r3, [r7, #2]
 8004750:	4613      	mov	r3, r2
 8004752:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800475a:	2b01      	cmp	r3, #1
 800475c:	d101      	bne.n	8004762 <HAL_HCD_HC_Init+0x28>
 800475e:	2302      	movs	r3, #2
 8004760:	e076      	b.n	8004850 <HAL_HCD_HC_Init+0x116>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800476a:	78fb      	ldrb	r3, [r7, #3]
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	212c      	movs	r1, #44	; 0x2c
 8004770:	fb01 f303 	mul.w	r3, r1, r3
 8004774:	4413      	add	r3, r2
 8004776:	333d      	adds	r3, #61	; 0x3d
 8004778:	2200      	movs	r2, #0
 800477a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800477c:	78fb      	ldrb	r3, [r7, #3]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	212c      	movs	r1, #44	; 0x2c
 8004782:	fb01 f303 	mul.w	r3, r1, r3
 8004786:	4413      	add	r3, r2
 8004788:	3338      	adds	r3, #56	; 0x38
 800478a:	787a      	ldrb	r2, [r7, #1]
 800478c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800478e:	78fb      	ldrb	r3, [r7, #3]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	212c      	movs	r1, #44	; 0x2c
 8004794:	fb01 f303 	mul.w	r3, r1, r3
 8004798:	4413      	add	r3, r2
 800479a:	3340      	adds	r3, #64	; 0x40
 800479c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800479e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80047a0:	78fb      	ldrb	r3, [r7, #3]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	212c      	movs	r1, #44	; 0x2c
 80047a6:	fb01 f303 	mul.w	r3, r1, r3
 80047aa:	4413      	add	r3, r2
 80047ac:	3339      	adds	r3, #57	; 0x39
 80047ae:	78fa      	ldrb	r2, [r7, #3]
 80047b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80047b2:	78fb      	ldrb	r3, [r7, #3]
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	212c      	movs	r1, #44	; 0x2c
 80047b8:	fb01 f303 	mul.w	r3, r1, r3
 80047bc:	4413      	add	r3, r2
 80047be:	333f      	adds	r3, #63	; 0x3f
 80047c0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80047c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80047c6:	78fb      	ldrb	r3, [r7, #3]
 80047c8:	78ba      	ldrb	r2, [r7, #2]
 80047ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047ce:	b2d0      	uxtb	r0, r2
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	212c      	movs	r1, #44	; 0x2c
 80047d4:	fb01 f303 	mul.w	r3, r1, r3
 80047d8:	4413      	add	r3, r2
 80047da:	333a      	adds	r3, #58	; 0x3a
 80047dc:	4602      	mov	r2, r0
 80047de:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80047e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	da09      	bge.n	80047fc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	212c      	movs	r1, #44	; 0x2c
 80047ee:	fb01 f303 	mul.w	r3, r1, r3
 80047f2:	4413      	add	r3, r2
 80047f4:	333b      	adds	r3, #59	; 0x3b
 80047f6:	2201      	movs	r2, #1
 80047f8:	701a      	strb	r2, [r3, #0]
 80047fa:	e008      	b.n	800480e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80047fc:	78fb      	ldrb	r3, [r7, #3]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	212c      	movs	r1, #44	; 0x2c
 8004802:	fb01 f303 	mul.w	r3, r1, r3
 8004806:	4413      	add	r3, r2
 8004808:	333b      	adds	r3, #59	; 0x3b
 800480a:	2200      	movs	r2, #0
 800480c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800480e:	78fb      	ldrb	r3, [r7, #3]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	212c      	movs	r1, #44	; 0x2c
 8004814:	fb01 f303 	mul.w	r3, r1, r3
 8004818:	4413      	add	r3, r2
 800481a:	333c      	adds	r3, #60	; 0x3c
 800481c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004820:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	787c      	ldrb	r4, [r7, #1]
 8004828:	78ba      	ldrb	r2, [r7, #2]
 800482a:	78f9      	ldrb	r1, [r7, #3]
 800482c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800482e:	9302      	str	r3, [sp, #8]
 8004830:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004834:	9301      	str	r3, [sp, #4]
 8004836:	f897 3020 	ldrb.w	r3, [r7, #32]
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	4623      	mov	r3, r4
 800483e:	f004 fbf5 	bl	800902c <USB_HC_Init>
 8004842:	4603      	mov	r3, r0
 8004844:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800484e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	bd90      	pop	{r4, r7, pc}

08004858 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	460b      	mov	r3, r1
 8004862:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004864:	2300      	movs	r3, #0
 8004866:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800486e:	2b01      	cmp	r3, #1
 8004870:	d101      	bne.n	8004876 <HAL_HCD_HC_Halt+0x1e>
 8004872:	2302      	movs	r3, #2
 8004874:	e00f      	b.n	8004896 <HAL_HCD_HC_Halt+0x3e>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	78fa      	ldrb	r2, [r7, #3]
 8004884:	4611      	mov	r1, r2
 8004886:	4618      	mov	r0, r3
 8004888:	f004 fe31 	bl	80094ee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004894:	7bfb      	ldrb	r3, [r7, #15]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	4608      	mov	r0, r1
 80048aa:	4611      	mov	r1, r2
 80048ac:	461a      	mov	r2, r3
 80048ae:	4603      	mov	r3, r0
 80048b0:	70fb      	strb	r3, [r7, #3]
 80048b2:	460b      	mov	r3, r1
 80048b4:	70bb      	strb	r3, [r7, #2]
 80048b6:	4613      	mov	r3, r2
 80048b8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80048ba:	78fb      	ldrb	r3, [r7, #3]
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	212c      	movs	r1, #44	; 0x2c
 80048c0:	fb01 f303 	mul.w	r3, r1, r3
 80048c4:	4413      	add	r3, r2
 80048c6:	333b      	adds	r3, #59	; 0x3b
 80048c8:	78ba      	ldrb	r2, [r7, #2]
 80048ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80048cc:	78fb      	ldrb	r3, [r7, #3]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	212c      	movs	r1, #44	; 0x2c
 80048d2:	fb01 f303 	mul.w	r3, r1, r3
 80048d6:	4413      	add	r3, r2
 80048d8:	333f      	adds	r3, #63	; 0x3f
 80048da:	787a      	ldrb	r2, [r7, #1]
 80048dc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80048de:	7c3b      	ldrb	r3, [r7, #16]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d112      	bne.n	800490a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80048e4:	78fb      	ldrb	r3, [r7, #3]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	212c      	movs	r1, #44	; 0x2c
 80048ea:	fb01 f303 	mul.w	r3, r1, r3
 80048ee:	4413      	add	r3, r2
 80048f0:	3342      	adds	r3, #66	; 0x42
 80048f2:	2203      	movs	r2, #3
 80048f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80048f6:	78fb      	ldrb	r3, [r7, #3]
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	212c      	movs	r1, #44	; 0x2c
 80048fc:	fb01 f303 	mul.w	r3, r1, r3
 8004900:	4413      	add	r3, r2
 8004902:	333d      	adds	r3, #61	; 0x3d
 8004904:	7f3a      	ldrb	r2, [r7, #28]
 8004906:	701a      	strb	r2, [r3, #0]
 8004908:	e008      	b.n	800491c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800490a:	78fb      	ldrb	r3, [r7, #3]
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	212c      	movs	r1, #44	; 0x2c
 8004910:	fb01 f303 	mul.w	r3, r1, r3
 8004914:	4413      	add	r3, r2
 8004916:	3342      	adds	r3, #66	; 0x42
 8004918:	2202      	movs	r2, #2
 800491a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800491c:	787b      	ldrb	r3, [r7, #1]
 800491e:	2b03      	cmp	r3, #3
 8004920:	f200 80c6 	bhi.w	8004ab0 <HAL_HCD_HC_SubmitRequest+0x210>
 8004924:	a201      	add	r2, pc, #4	; (adr r2, 800492c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492a:	bf00      	nop
 800492c:	0800493d 	.word	0x0800493d
 8004930:	08004a9d 	.word	0x08004a9d
 8004934:	080049a1 	.word	0x080049a1
 8004938:	08004a1f 	.word	0x08004a1f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800493c:	7c3b      	ldrb	r3, [r7, #16]
 800493e:	2b01      	cmp	r3, #1
 8004940:	f040 80b8 	bne.w	8004ab4 <HAL_HCD_HC_SubmitRequest+0x214>
 8004944:	78bb      	ldrb	r3, [r7, #2]
 8004946:	2b00      	cmp	r3, #0
 8004948:	f040 80b4 	bne.w	8004ab4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800494c:	8b3b      	ldrh	r3, [r7, #24]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d108      	bne.n	8004964 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004952:	78fb      	ldrb	r3, [r7, #3]
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	212c      	movs	r1, #44	; 0x2c
 8004958:	fb01 f303 	mul.w	r3, r1, r3
 800495c:	4413      	add	r3, r2
 800495e:	3355      	adds	r3, #85	; 0x55
 8004960:	2201      	movs	r2, #1
 8004962:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004964:	78fb      	ldrb	r3, [r7, #3]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	212c      	movs	r1, #44	; 0x2c
 800496a:	fb01 f303 	mul.w	r3, r1, r3
 800496e:	4413      	add	r3, r2
 8004970:	3355      	adds	r3, #85	; 0x55
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d109      	bne.n	800498c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004978:	78fb      	ldrb	r3, [r7, #3]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	212c      	movs	r1, #44	; 0x2c
 800497e:	fb01 f303 	mul.w	r3, r1, r3
 8004982:	4413      	add	r3, r2
 8004984:	3342      	adds	r3, #66	; 0x42
 8004986:	2200      	movs	r2, #0
 8004988:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800498a:	e093      	b.n	8004ab4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800498c:	78fb      	ldrb	r3, [r7, #3]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	212c      	movs	r1, #44	; 0x2c
 8004992:	fb01 f303 	mul.w	r3, r1, r3
 8004996:	4413      	add	r3, r2
 8004998:	3342      	adds	r3, #66	; 0x42
 800499a:	2202      	movs	r2, #2
 800499c:	701a      	strb	r2, [r3, #0]
      break;
 800499e:	e089      	b.n	8004ab4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80049a0:	78bb      	ldrb	r3, [r7, #2]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d11d      	bne.n	80049e2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80049a6:	78fb      	ldrb	r3, [r7, #3]
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	212c      	movs	r1, #44	; 0x2c
 80049ac:	fb01 f303 	mul.w	r3, r1, r3
 80049b0:	4413      	add	r3, r2
 80049b2:	3355      	adds	r3, #85	; 0x55
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d109      	bne.n	80049ce <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80049ba:	78fb      	ldrb	r3, [r7, #3]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	212c      	movs	r1, #44	; 0x2c
 80049c0:	fb01 f303 	mul.w	r3, r1, r3
 80049c4:	4413      	add	r3, r2
 80049c6:	3342      	adds	r3, #66	; 0x42
 80049c8:	2200      	movs	r2, #0
 80049ca:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80049cc:	e073      	b.n	8004ab6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80049ce:	78fb      	ldrb	r3, [r7, #3]
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	212c      	movs	r1, #44	; 0x2c
 80049d4:	fb01 f303 	mul.w	r3, r1, r3
 80049d8:	4413      	add	r3, r2
 80049da:	3342      	adds	r3, #66	; 0x42
 80049dc:	2202      	movs	r2, #2
 80049de:	701a      	strb	r2, [r3, #0]
      break;
 80049e0:	e069      	b.n	8004ab6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80049e2:	78fb      	ldrb	r3, [r7, #3]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	212c      	movs	r1, #44	; 0x2c
 80049e8:	fb01 f303 	mul.w	r3, r1, r3
 80049ec:	4413      	add	r3, r2
 80049ee:	3354      	adds	r3, #84	; 0x54
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d109      	bne.n	8004a0a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80049f6:	78fb      	ldrb	r3, [r7, #3]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	212c      	movs	r1, #44	; 0x2c
 80049fc:	fb01 f303 	mul.w	r3, r1, r3
 8004a00:	4413      	add	r3, r2
 8004a02:	3342      	adds	r3, #66	; 0x42
 8004a04:	2200      	movs	r2, #0
 8004a06:	701a      	strb	r2, [r3, #0]
      break;
 8004a08:	e055      	b.n	8004ab6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004a0a:	78fb      	ldrb	r3, [r7, #3]
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	212c      	movs	r1, #44	; 0x2c
 8004a10:	fb01 f303 	mul.w	r3, r1, r3
 8004a14:	4413      	add	r3, r2
 8004a16:	3342      	adds	r3, #66	; 0x42
 8004a18:	2202      	movs	r2, #2
 8004a1a:	701a      	strb	r2, [r3, #0]
      break;
 8004a1c:	e04b      	b.n	8004ab6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004a1e:	78bb      	ldrb	r3, [r7, #2]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d11d      	bne.n	8004a60 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004a24:	78fb      	ldrb	r3, [r7, #3]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	212c      	movs	r1, #44	; 0x2c
 8004a2a:	fb01 f303 	mul.w	r3, r1, r3
 8004a2e:	4413      	add	r3, r2
 8004a30:	3355      	adds	r3, #85	; 0x55
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d109      	bne.n	8004a4c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004a38:	78fb      	ldrb	r3, [r7, #3]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	212c      	movs	r1, #44	; 0x2c
 8004a3e:	fb01 f303 	mul.w	r3, r1, r3
 8004a42:	4413      	add	r3, r2
 8004a44:	3342      	adds	r3, #66	; 0x42
 8004a46:	2200      	movs	r2, #0
 8004a48:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004a4a:	e034      	b.n	8004ab6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004a4c:	78fb      	ldrb	r3, [r7, #3]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	212c      	movs	r1, #44	; 0x2c
 8004a52:	fb01 f303 	mul.w	r3, r1, r3
 8004a56:	4413      	add	r3, r2
 8004a58:	3342      	adds	r3, #66	; 0x42
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	701a      	strb	r2, [r3, #0]
      break;
 8004a5e:	e02a      	b.n	8004ab6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004a60:	78fb      	ldrb	r3, [r7, #3]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	212c      	movs	r1, #44	; 0x2c
 8004a66:	fb01 f303 	mul.w	r3, r1, r3
 8004a6a:	4413      	add	r3, r2
 8004a6c:	3354      	adds	r3, #84	; 0x54
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d109      	bne.n	8004a88 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	212c      	movs	r1, #44	; 0x2c
 8004a7a:	fb01 f303 	mul.w	r3, r1, r3
 8004a7e:	4413      	add	r3, r2
 8004a80:	3342      	adds	r3, #66	; 0x42
 8004a82:	2200      	movs	r2, #0
 8004a84:	701a      	strb	r2, [r3, #0]
      break;
 8004a86:	e016      	b.n	8004ab6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004a88:	78fb      	ldrb	r3, [r7, #3]
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	212c      	movs	r1, #44	; 0x2c
 8004a8e:	fb01 f303 	mul.w	r3, r1, r3
 8004a92:	4413      	add	r3, r2
 8004a94:	3342      	adds	r3, #66	; 0x42
 8004a96:	2202      	movs	r2, #2
 8004a98:	701a      	strb	r2, [r3, #0]
      break;
 8004a9a:	e00c      	b.n	8004ab6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	212c      	movs	r1, #44	; 0x2c
 8004aa2:	fb01 f303 	mul.w	r3, r1, r3
 8004aa6:	4413      	add	r3, r2
 8004aa8:	3342      	adds	r3, #66	; 0x42
 8004aaa:	2200      	movs	r2, #0
 8004aac:	701a      	strb	r2, [r3, #0]
      break;
 8004aae:	e002      	b.n	8004ab6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004ab0:	bf00      	nop
 8004ab2:	e000      	b.n	8004ab6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004ab4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004ab6:	78fb      	ldrb	r3, [r7, #3]
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	212c      	movs	r1, #44	; 0x2c
 8004abc:	fb01 f303 	mul.w	r3, r1, r3
 8004ac0:	4413      	add	r3, r2
 8004ac2:	3344      	adds	r3, #68	; 0x44
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004ac8:	78fb      	ldrb	r3, [r7, #3]
 8004aca:	8b3a      	ldrh	r2, [r7, #24]
 8004acc:	6879      	ldr	r1, [r7, #4]
 8004ace:	202c      	movs	r0, #44	; 0x2c
 8004ad0:	fb00 f303 	mul.w	r3, r0, r3
 8004ad4:	440b      	add	r3, r1
 8004ad6:	334c      	adds	r3, #76	; 0x4c
 8004ad8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004ada:	78fb      	ldrb	r3, [r7, #3]
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	212c      	movs	r1, #44	; 0x2c
 8004ae0:	fb01 f303 	mul.w	r3, r1, r3
 8004ae4:	4413      	add	r3, r2
 8004ae6:	3360      	adds	r3, #96	; 0x60
 8004ae8:	2200      	movs	r2, #0
 8004aea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004aec:	78fb      	ldrb	r3, [r7, #3]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	212c      	movs	r1, #44	; 0x2c
 8004af2:	fb01 f303 	mul.w	r3, r1, r3
 8004af6:	4413      	add	r3, r2
 8004af8:	3350      	adds	r3, #80	; 0x50
 8004afa:	2200      	movs	r2, #0
 8004afc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004afe:	78fb      	ldrb	r3, [r7, #3]
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	212c      	movs	r1, #44	; 0x2c
 8004b04:	fb01 f303 	mul.w	r3, r1, r3
 8004b08:	4413      	add	r3, r2
 8004b0a:	3339      	adds	r3, #57	; 0x39
 8004b0c:	78fa      	ldrb	r2, [r7, #3]
 8004b0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004b10:	78fb      	ldrb	r3, [r7, #3]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	212c      	movs	r1, #44	; 0x2c
 8004b16:	fb01 f303 	mul.w	r3, r1, r3
 8004b1a:	4413      	add	r3, r2
 8004b1c:	3361      	adds	r3, #97	; 0x61
 8004b1e:	2200      	movs	r2, #0
 8004b20:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6818      	ldr	r0, [r3, #0]
 8004b26:	78fb      	ldrb	r3, [r7, #3]
 8004b28:	222c      	movs	r2, #44	; 0x2c
 8004b2a:	fb02 f303 	mul.w	r3, r2, r3
 8004b2e:	3338      	adds	r3, #56	; 0x38
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	18d1      	adds	r1, r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	f004 fb84 	bl	8009248 <USB_HC_StartXfer>
 8004b40:	4603      	mov	r3, r0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop

08004b4c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f004 f8a7 	bl	8008cb6 <USB_GetMode>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	f040 80f6 	bne.w	8004d5c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f004 f88b 	bl	8008c90 <USB_ReadInterrupts>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 80ec 	beq.w	8004d5a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f004 f882 	bl	8008c90 <USB_ReadInterrupts>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b96:	d104      	bne.n	8004ba2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004ba0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f004 f872 	bl	8008c90 <USB_ReadInterrupts>
 8004bac:	4603      	mov	r3, r0
 8004bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bb6:	d104      	bne.n	8004bc2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004bc0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f004 f862 	bl	8008c90 <USB_ReadInterrupts>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bd6:	d104      	bne.n	8004be2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004be0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f004 f852 	bl	8008c90 <USB_ReadInterrupts>
 8004bec:	4603      	mov	r3, r0
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d103      	bne.n	8004bfe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f004 f844 	bl	8008c90 <USB_ReadInterrupts>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c12:	d11c      	bne.n	8004c4e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004c1c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10f      	bne.n	8004c4e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004c2e:	2110      	movs	r1, #16
 8004c30:	6938      	ldr	r0, [r7, #16]
 8004c32:	f003 ff53 	bl	8008adc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004c36:	6938      	ldr	r0, [r7, #16]
 8004c38:	f003 ff74 	bl	8008b24 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2101      	movs	r1, #1
 8004c42:	4618      	mov	r0, r3
 8004c44:	f004 f92c 	bl	8008ea0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f006 fdff 	bl	800b84c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f004 f81c 	bl	8008c90 <USB_ReadInterrupts>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c62:	d102      	bne.n	8004c6a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f001 fa03 	bl	8006070 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f004 f80e 	bl	8008c90 <USB_ReadInterrupts>
 8004c74:	4603      	mov	r3, r0
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	2b08      	cmp	r3, #8
 8004c7c:	d106      	bne.n	8004c8c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f006 fdc8 	bl	800b814 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2208      	movs	r2, #8
 8004c8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f003 fffd 	bl	8008c90 <USB_ReadInterrupts>
 8004c96:	4603      	mov	r3, r0
 8004c98:	f003 0310 	and.w	r3, r3, #16
 8004c9c:	2b10      	cmp	r3, #16
 8004c9e:	d101      	bne.n	8004ca4 <HAL_HCD_IRQHandler+0x158>
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e000      	b.n	8004ca6 <HAL_HCD_IRQHandler+0x15a>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d012      	beq.n	8004cd0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	699a      	ldr	r2, [r3, #24]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0210 	bic.w	r2, r2, #16
 8004cb8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f001 f906 	bl	8005ecc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699a      	ldr	r2, [r3, #24]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0210 	orr.w	r2, r2, #16
 8004cce:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f003 ffdb 	bl	8008c90 <USB_ReadInterrupts>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ce4:	d13a      	bne.n	8004d5c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f004 fbee 	bl	80094cc <USB_HC_ReadInterrupt>
 8004cf0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	617b      	str	r3, [r7, #20]
 8004cf6:	e025      	b.n	8004d44 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f003 030f 	and.w	r3, r3, #15
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	fa22 f303 	lsr.w	r3, r2, r3
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d018      	beq.n	8004d3e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d22:	d106      	bne.n	8004d32 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	4619      	mov	r1, r3
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f8ab 	bl	8004e86 <HCD_HC_IN_IRQHandler>
 8004d30:	e005      	b.n	8004d3e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	4619      	mov	r1, r3
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 fcc6 	bl	80056ca <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	3301      	adds	r3, #1
 8004d42:	617b      	str	r3, [r7, #20]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d3d4      	bcc.n	8004cf8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d56:	615a      	str	r2, [r3, #20]
 8004d58:	e000      	b.n	8004d5c <HAL_HCD_IRQHandler+0x210>
      return;
 8004d5a:	bf00      	nop
    }
  }
}
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b082      	sub	sp, #8
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_HCD_Start+0x16>
 8004d74:	2302      	movs	r3, #2
 8004d76:	e013      	b.n	8004da0 <HAL_HCD_Start+0x3e>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2101      	movs	r1, #1
 8004d86:	4618      	mov	r0, r3
 8004d88:	f004 f8ee 	bl	8008f68 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f003 fe34 	bl	80089fe <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d101      	bne.n	8004dbe <HAL_HCD_Stop+0x16>
 8004dba:	2302      	movs	r3, #2
 8004dbc:	e00d      	b.n	8004dda <HAL_HCD_Stop+0x32>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f004 fce8 	bl	80097a0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b082      	sub	sp, #8
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f004 f890 	bl	8008f14 <USB_ResetPort>
 8004df4:	4603      	mov	r3, r0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
 8004e06:	460b      	mov	r3, r1
 8004e08:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004e0a:	78fb      	ldrb	r3, [r7, #3]
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	212c      	movs	r1, #44	; 0x2c
 8004e10:	fb01 f303 	mul.w	r3, r1, r3
 8004e14:	4413      	add	r3, r2
 8004e16:	3360      	adds	r3, #96	; 0x60
 8004e18:	781b      	ldrb	r3, [r3, #0]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004e32:	78fb      	ldrb	r3, [r7, #3]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	212c      	movs	r1, #44	; 0x2c
 8004e38:	fb01 f303 	mul.w	r3, r1, r3
 8004e3c:	4413      	add	r3, r2
 8004e3e:	3350      	adds	r3, #80	; 0x50
 8004e40:	681b      	ldr	r3, [r3, #0]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b082      	sub	sp, #8
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f004 f8d4 	bl	8009008 <USB_GetCurrentFrame>
 8004e60:	4603      	mov	r3, r0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b082      	sub	sp, #8
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f004 f8af 	bl	8008fda <USB_GetHostSpeed>
 8004e7c:	4603      	mov	r3, r0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b086      	sub	sp, #24
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	460b      	mov	r3, r1
 8004e90:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004e9c:	78fb      	ldrb	r3, [r7, #3]
 8004e9e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 0304 	and.w	r3, r3, #4
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	d119      	bne.n	8004eea <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	2304      	movs	r3, #4
 8004ec6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	0151      	lsls	r1, r2, #5
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	440a      	add	r2, r1
 8004ede:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ee2:	f043 0302 	orr.w	r3, r3, #2
 8004ee6:	60d3      	str	r3, [r2, #12]
 8004ee8:	e101      	b.n	80050ee <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f00:	d12b      	bne.n	8004f5a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f0e:	461a      	mov	r2, r3
 8004f10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f14:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	212c      	movs	r1, #44	; 0x2c
 8004f1c:	fb01 f303 	mul.w	r3, r1, r3
 8004f20:	4413      	add	r3, r2
 8004f22:	3361      	adds	r3, #97	; 0x61
 8004f24:	2207      	movs	r2, #7
 8004f26:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	0151      	lsls	r1, r2, #5
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	440a      	add	r2, r1
 8004f3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f42:	f043 0302 	orr.w	r3, r3, #2
 8004f46:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	b2d2      	uxtb	r2, r2
 8004f50:	4611      	mov	r1, r2
 8004f52:	4618      	mov	r0, r3
 8004f54:	f004 facb 	bl	80094ee <USB_HC_Halt>
 8004f58:	e0c9      	b.n	80050ee <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	015a      	lsls	r2, r3, #5
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f003 0320 	and.w	r3, r3, #32
 8004f6c:	2b20      	cmp	r3, #32
 8004f6e:	d109      	bne.n	8004f84 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	2320      	movs	r3, #32
 8004f80:	6093      	str	r3, [r2, #8]
 8004f82:	e0b4      	b.n	80050ee <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f003 0308 	and.w	r3, r3, #8
 8004f96:	2b08      	cmp	r3, #8
 8004f98:	d133      	bne.n	8005002 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	0151      	lsls	r1, r2, #5
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	440a      	add	r2, r1
 8004fb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fb4:	f043 0302 	orr.w	r3, r3, #2
 8004fb8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	212c      	movs	r1, #44	; 0x2c
 8004fc0:	fb01 f303 	mul.w	r3, r1, r3
 8004fc4:	4413      	add	r3, r2
 8004fc6:	3361      	adds	r3, #97	; 0x61
 8004fc8:	2205      	movs	r2, #5
 8004fca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd8:	461a      	mov	r2, r3
 8004fda:	2310      	movs	r3, #16
 8004fdc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	015a      	lsls	r2, r3, #5
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fea:	461a      	mov	r2, r3
 8004fec:	2308      	movs	r3, #8
 8004fee:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	b2d2      	uxtb	r2, r2
 8004ff8:	4611      	mov	r1, r2
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f004 fa77 	bl	80094ee <USB_HC_Halt>
 8005000:	e075      	b.n	80050ee <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	4413      	add	r3, r2
 800500a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005018:	d134      	bne.n	8005084 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	4413      	add	r3, r2
 8005022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	0151      	lsls	r1, r2, #5
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	440a      	add	r2, r1
 8005030:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005034:	f043 0302 	orr.w	r3, r3, #2
 8005038:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	212c      	movs	r1, #44	; 0x2c
 8005040:	fb01 f303 	mul.w	r3, r1, r3
 8005044:	4413      	add	r3, r2
 8005046:	3361      	adds	r3, #97	; 0x61
 8005048:	2208      	movs	r2, #8
 800504a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	4413      	add	r3, r2
 8005054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005058:	461a      	mov	r2, r3
 800505a:	2310      	movs	r3, #16
 800505c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	4413      	add	r3, r2
 8005066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800506a:	461a      	mov	r2, r3
 800506c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005070:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	b2d2      	uxtb	r2, r2
 800507a:	4611      	mov	r1, r2
 800507c:	4618      	mov	r0, r3
 800507e:	f004 fa36 	bl	80094ee <USB_HC_Halt>
 8005082:	e034      	b.n	80050ee <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	4413      	add	r3, r2
 800508c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005096:	2b80      	cmp	r3, #128	; 0x80
 8005098:	d129      	bne.n	80050ee <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	015a      	lsls	r2, r3, #5
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	4413      	add	r3, r2
 80050a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	0151      	lsls	r1, r2, #5
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	440a      	add	r2, r1
 80050b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050b4:	f043 0302 	orr.w	r3, r3, #2
 80050b8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	212c      	movs	r1, #44	; 0x2c
 80050c0:	fb01 f303 	mul.w	r3, r1, r3
 80050c4:	4413      	add	r3, r2
 80050c6:	3361      	adds	r3, #97	; 0x61
 80050c8:	2206      	movs	r2, #6
 80050ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	4611      	mov	r1, r2
 80050d6:	4618      	mov	r0, r3
 80050d8:	f004 fa09 	bl	80094ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e8:	461a      	mov	r2, r3
 80050ea:	2380      	movs	r3, #128	; 0x80
 80050ec:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005104:	d122      	bne.n	800514c <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	4413      	add	r3, r2
 800510e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	0151      	lsls	r1, r2, #5
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	440a      	add	r2, r1
 800511c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005120:	f043 0302 	orr.w	r3, r3, #2
 8005124:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	b2d2      	uxtb	r2, r2
 800512e:	4611      	mov	r1, r2
 8005130:	4618      	mov	r0, r3
 8005132:	f004 f9dc 	bl	80094ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	4413      	add	r3, r2
 800513e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005142:	461a      	mov	r2, r3
 8005144:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005148:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800514a:	e2ba      	b.n	80056c2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	4413      	add	r3, r2
 8005154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	2b01      	cmp	r3, #1
 8005160:	f040 811b 	bne.w	800539a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d019      	beq.n	80051a0 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	212c      	movs	r1, #44	; 0x2c
 8005172:	fb01 f303 	mul.w	r3, r1, r3
 8005176:	4413      	add	r3, r2
 8005178:	3348      	adds	r3, #72	; 0x48
 800517a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	0159      	lsls	r1, r3, #5
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	440b      	add	r3, r1
 8005184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800518e:	1ad2      	subs	r2, r2, r3
 8005190:	6879      	ldr	r1, [r7, #4]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	202c      	movs	r0, #44	; 0x2c
 8005196:	fb00 f303 	mul.w	r3, r0, r3
 800519a:	440b      	add	r3, r1
 800519c:	3350      	adds	r3, #80	; 0x50
 800519e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	212c      	movs	r1, #44	; 0x2c
 80051a6:	fb01 f303 	mul.w	r3, r1, r3
 80051aa:	4413      	add	r3, r2
 80051ac:	3361      	adds	r3, #97	; 0x61
 80051ae:	2201      	movs	r2, #1
 80051b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	212c      	movs	r1, #44	; 0x2c
 80051b8:	fb01 f303 	mul.w	r3, r1, r3
 80051bc:	4413      	add	r3, r2
 80051be:	335c      	adds	r3, #92	; 0x5c
 80051c0:	2200      	movs	r2, #0
 80051c2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d0:	461a      	mov	r2, r3
 80051d2:	2301      	movs	r3, #1
 80051d4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	212c      	movs	r1, #44	; 0x2c
 80051dc:	fb01 f303 	mul.w	r3, r1, r3
 80051e0:	4413      	add	r3, r2
 80051e2:	333f      	adds	r3, #63	; 0x3f
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d009      	beq.n	80051fe <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	212c      	movs	r1, #44	; 0x2c
 80051f0:	fb01 f303 	mul.w	r3, r1, r3
 80051f4:	4413      	add	r3, r2
 80051f6:	333f      	adds	r3, #63	; 0x3f
 80051f8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d121      	bne.n	8005242 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	4413      	add	r3, r2
 8005206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	0151      	lsls	r1, r2, #5
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	440a      	add	r2, r1
 8005214:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005218:	f043 0302 	orr.w	r3, r3, #2
 800521c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	b2d2      	uxtb	r2, r2
 8005226:	4611      	mov	r1, r2
 8005228:	4618      	mov	r0, r3
 800522a:	f004 f960 	bl	80094ee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	4413      	add	r3, r2
 8005236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800523a:	461a      	mov	r2, r3
 800523c:	2310      	movs	r3, #16
 800523e:	6093      	str	r3, [r2, #8]
 8005240:	e066      	b.n	8005310 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	212c      	movs	r1, #44	; 0x2c
 8005248:	fb01 f303 	mul.w	r3, r1, r3
 800524c:	4413      	add	r3, r2
 800524e:	333f      	adds	r3, #63	; 0x3f
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	2b03      	cmp	r3, #3
 8005254:	d127      	bne.n	80052a6 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	4413      	add	r3, r2
 800525e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	0151      	lsls	r1, r2, #5
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	440a      	add	r2, r1
 800526c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005270:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005274:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	212c      	movs	r1, #44	; 0x2c
 800527c:	fb01 f303 	mul.w	r3, r1, r3
 8005280:	4413      	add	r3, r2
 8005282:	3360      	adds	r3, #96	; 0x60
 8005284:	2201      	movs	r2, #1
 8005286:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	b2d9      	uxtb	r1, r3
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	202c      	movs	r0, #44	; 0x2c
 8005292:	fb00 f303 	mul.w	r3, r0, r3
 8005296:	4413      	add	r3, r2
 8005298:	3360      	adds	r3, #96	; 0x60
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	461a      	mov	r2, r3
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f006 fae2 	bl	800b868 <HAL_HCD_HC_NotifyURBChange_Callback>
 80052a4:	e034      	b.n	8005310 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	212c      	movs	r1, #44	; 0x2c
 80052ac:	fb01 f303 	mul.w	r3, r1, r3
 80052b0:	4413      	add	r3, r2
 80052b2:	333f      	adds	r3, #63	; 0x3f
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d12a      	bne.n	8005310 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	212c      	movs	r1, #44	; 0x2c
 80052c0:	fb01 f303 	mul.w	r3, r1, r3
 80052c4:	4413      	add	r3, r2
 80052c6:	3360      	adds	r3, #96	; 0x60
 80052c8:	2201      	movs	r2, #1
 80052ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	212c      	movs	r1, #44	; 0x2c
 80052d2:	fb01 f303 	mul.w	r3, r1, r3
 80052d6:	4413      	add	r3, r2
 80052d8:	3354      	adds	r3, #84	; 0x54
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	f083 0301 	eor.w	r3, r3, #1
 80052e0:	b2d8      	uxtb	r0, r3
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	212c      	movs	r1, #44	; 0x2c
 80052e8:	fb01 f303 	mul.w	r3, r1, r3
 80052ec:	4413      	add	r3, r2
 80052ee:	3354      	adds	r3, #84	; 0x54
 80052f0:	4602      	mov	r2, r0
 80052f2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	b2d9      	uxtb	r1, r3
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	202c      	movs	r0, #44	; 0x2c
 80052fe:	fb00 f303 	mul.w	r3, r0, r3
 8005302:	4413      	add	r3, r2
 8005304:	3360      	adds	r3, #96	; 0x60
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	461a      	mov	r2, r3
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f006 faac 	bl	800b868 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d12b      	bne.n	8005370 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	212c      	movs	r1, #44	; 0x2c
 800531e:	fb01 f303 	mul.w	r3, r1, r3
 8005322:	4413      	add	r3, r2
 8005324:	3348      	adds	r3, #72	; 0x48
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6879      	ldr	r1, [r7, #4]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	202c      	movs	r0, #44	; 0x2c
 800532e:	fb00 f202 	mul.w	r2, r0, r2
 8005332:	440a      	add	r2, r1
 8005334:	3240      	adds	r2, #64	; 0x40
 8005336:	8812      	ldrh	r2, [r2, #0]
 8005338:	fbb3 f3f2 	udiv	r3, r3, r2
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 81be 	beq.w	80056c2 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	212c      	movs	r1, #44	; 0x2c
 800534c:	fb01 f303 	mul.w	r3, r1, r3
 8005350:	4413      	add	r3, r2
 8005352:	3354      	adds	r3, #84	; 0x54
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	f083 0301 	eor.w	r3, r3, #1
 800535a:	b2d8      	uxtb	r0, r3
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	212c      	movs	r1, #44	; 0x2c
 8005362:	fb01 f303 	mul.w	r3, r1, r3
 8005366:	4413      	add	r3, r2
 8005368:	3354      	adds	r3, #84	; 0x54
 800536a:	4602      	mov	r2, r0
 800536c:	701a      	strb	r2, [r3, #0]
}
 800536e:	e1a8      	b.n	80056c2 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	212c      	movs	r1, #44	; 0x2c
 8005376:	fb01 f303 	mul.w	r3, r1, r3
 800537a:	4413      	add	r3, r2
 800537c:	3354      	adds	r3, #84	; 0x54
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	f083 0301 	eor.w	r3, r3, #1
 8005384:	b2d8      	uxtb	r0, r3
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	212c      	movs	r1, #44	; 0x2c
 800538c:	fb01 f303 	mul.w	r3, r1, r3
 8005390:	4413      	add	r3, r2
 8005392:	3354      	adds	r3, #84	; 0x54
 8005394:	4602      	mov	r2, r0
 8005396:	701a      	strb	r2, [r3, #0]
}
 8005398:	e193      	b.n	80056c2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	f040 8106 	bne.w	80055be <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	0151      	lsls	r1, r2, #5
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	440a      	add	r2, r1
 80053c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053cc:	f023 0302 	bic.w	r3, r3, #2
 80053d0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	212c      	movs	r1, #44	; 0x2c
 80053d8:	fb01 f303 	mul.w	r3, r1, r3
 80053dc:	4413      	add	r3, r2
 80053de:	3361      	adds	r3, #97	; 0x61
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d109      	bne.n	80053fa <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	212c      	movs	r1, #44	; 0x2c
 80053ec:	fb01 f303 	mul.w	r3, r1, r3
 80053f0:	4413      	add	r3, r2
 80053f2:	3360      	adds	r3, #96	; 0x60
 80053f4:	2201      	movs	r2, #1
 80053f6:	701a      	strb	r2, [r3, #0]
 80053f8:	e0c9      	b.n	800558e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	212c      	movs	r1, #44	; 0x2c
 8005400:	fb01 f303 	mul.w	r3, r1, r3
 8005404:	4413      	add	r3, r2
 8005406:	3361      	adds	r3, #97	; 0x61
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	2b05      	cmp	r3, #5
 800540c:	d109      	bne.n	8005422 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	212c      	movs	r1, #44	; 0x2c
 8005414:	fb01 f303 	mul.w	r3, r1, r3
 8005418:	4413      	add	r3, r2
 800541a:	3360      	adds	r3, #96	; 0x60
 800541c:	2205      	movs	r2, #5
 800541e:	701a      	strb	r2, [r3, #0]
 8005420:	e0b5      	b.n	800558e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	212c      	movs	r1, #44	; 0x2c
 8005428:	fb01 f303 	mul.w	r3, r1, r3
 800542c:	4413      	add	r3, r2
 800542e:	3361      	adds	r3, #97	; 0x61
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	2b06      	cmp	r3, #6
 8005434:	d009      	beq.n	800544a <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	212c      	movs	r1, #44	; 0x2c
 800543c:	fb01 f303 	mul.w	r3, r1, r3
 8005440:	4413      	add	r3, r2
 8005442:	3361      	adds	r3, #97	; 0x61
 8005444:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005446:	2b08      	cmp	r3, #8
 8005448:	d150      	bne.n	80054ec <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	212c      	movs	r1, #44	; 0x2c
 8005450:	fb01 f303 	mul.w	r3, r1, r3
 8005454:	4413      	add	r3, r2
 8005456:	335c      	adds	r3, #92	; 0x5c
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	1c5a      	adds	r2, r3, #1
 800545c:	6879      	ldr	r1, [r7, #4]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	202c      	movs	r0, #44	; 0x2c
 8005462:	fb00 f303 	mul.w	r3, r0, r3
 8005466:	440b      	add	r3, r1
 8005468:	335c      	adds	r3, #92	; 0x5c
 800546a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	212c      	movs	r1, #44	; 0x2c
 8005472:	fb01 f303 	mul.w	r3, r1, r3
 8005476:	4413      	add	r3, r2
 8005478:	335c      	adds	r3, #92	; 0x5c
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b02      	cmp	r3, #2
 800547e:	d912      	bls.n	80054a6 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	212c      	movs	r1, #44	; 0x2c
 8005486:	fb01 f303 	mul.w	r3, r1, r3
 800548a:	4413      	add	r3, r2
 800548c:	335c      	adds	r3, #92	; 0x5c
 800548e:	2200      	movs	r2, #0
 8005490:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	212c      	movs	r1, #44	; 0x2c
 8005498:	fb01 f303 	mul.w	r3, r1, r3
 800549c:	4413      	add	r3, r2
 800549e:	3360      	adds	r3, #96	; 0x60
 80054a0:	2204      	movs	r2, #4
 80054a2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80054a4:	e073      	b.n	800558e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	212c      	movs	r1, #44	; 0x2c
 80054ac:	fb01 f303 	mul.w	r3, r1, r3
 80054b0:	4413      	add	r3, r2
 80054b2:	3360      	adds	r3, #96	; 0x60
 80054b4:	2202      	movs	r2, #2
 80054b6:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054ce:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054d6:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054e4:	461a      	mov	r2, r3
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80054ea:	e050      	b.n	800558e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	212c      	movs	r1, #44	; 0x2c
 80054f2:	fb01 f303 	mul.w	r3, r1, r3
 80054f6:	4413      	add	r3, r2
 80054f8:	3361      	adds	r3, #97	; 0x61
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d122      	bne.n	8005546 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	212c      	movs	r1, #44	; 0x2c
 8005506:	fb01 f303 	mul.w	r3, r1, r3
 800550a:	4413      	add	r3, r2
 800550c:	3360      	adds	r3, #96	; 0x60
 800550e:	2202      	movs	r2, #2
 8005510:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	4413      	add	r3, r2
 800551a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005528:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005530:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	015a      	lsls	r2, r3, #5
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	4413      	add	r3, r2
 800553a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800553e:	461a      	mov	r2, r3
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	e023      	b.n	800558e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	212c      	movs	r1, #44	; 0x2c
 800554c:	fb01 f303 	mul.w	r3, r1, r3
 8005550:	4413      	add	r3, r2
 8005552:	3361      	adds	r3, #97	; 0x61
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b07      	cmp	r3, #7
 8005558:	d119      	bne.n	800558e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	212c      	movs	r1, #44	; 0x2c
 8005560:	fb01 f303 	mul.w	r3, r1, r3
 8005564:	4413      	add	r3, r2
 8005566:	335c      	adds	r3, #92	; 0x5c
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	6879      	ldr	r1, [r7, #4]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	202c      	movs	r0, #44	; 0x2c
 8005572:	fb00 f303 	mul.w	r3, r0, r3
 8005576:	440b      	add	r3, r1
 8005578:	335c      	adds	r3, #92	; 0x5c
 800557a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	212c      	movs	r1, #44	; 0x2c
 8005582:	fb01 f303 	mul.w	r3, r1, r3
 8005586:	4413      	add	r3, r2
 8005588:	3360      	adds	r3, #96	; 0x60
 800558a:	2204      	movs	r2, #4
 800558c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	4413      	add	r3, r2
 8005596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800559a:	461a      	mov	r2, r3
 800559c:	2302      	movs	r3, #2
 800559e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	b2d9      	uxtb	r1, r3
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	202c      	movs	r0, #44	; 0x2c
 80055aa:	fb00 f303 	mul.w	r3, r0, r3
 80055ae:	4413      	add	r3, r2
 80055b0:	3360      	adds	r3, #96	; 0x60
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	461a      	mov	r2, r3
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f006 f956 	bl	800b868 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80055bc:	e081      	b.n	80056c2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f003 0310 	and.w	r3, r3, #16
 80055d0:	2b10      	cmp	r3, #16
 80055d2:	d176      	bne.n	80056c2 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	212c      	movs	r1, #44	; 0x2c
 80055da:	fb01 f303 	mul.w	r3, r1, r3
 80055de:	4413      	add	r3, r2
 80055e0:	333f      	adds	r3, #63	; 0x3f
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	2b03      	cmp	r3, #3
 80055e6:	d121      	bne.n	800562c <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	212c      	movs	r1, #44	; 0x2c
 80055ee:	fb01 f303 	mul.w	r3, r1, r3
 80055f2:	4413      	add	r3, r2
 80055f4:	335c      	adds	r3, #92	; 0x5c
 80055f6:	2200      	movs	r2, #0
 80055f8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	4413      	add	r3, r2
 8005602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	0151      	lsls	r1, r2, #5
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	440a      	add	r2, r1
 8005610:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005614:	f043 0302 	orr.w	r3, r3, #2
 8005618:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	b2d2      	uxtb	r2, r2
 8005622:	4611      	mov	r1, r2
 8005624:	4618      	mov	r0, r3
 8005626:	f003 ff62 	bl	80094ee <USB_HC_Halt>
 800562a:	e041      	b.n	80056b0 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	212c      	movs	r1, #44	; 0x2c
 8005632:	fb01 f303 	mul.w	r3, r1, r3
 8005636:	4413      	add	r3, r2
 8005638:	333f      	adds	r3, #63	; 0x3f
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d009      	beq.n	8005654 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	212c      	movs	r1, #44	; 0x2c
 8005646:	fb01 f303 	mul.w	r3, r1, r3
 800564a:	4413      	add	r3, r2
 800564c:	333f      	adds	r3, #63	; 0x3f
 800564e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005650:	2b02      	cmp	r3, #2
 8005652:	d12d      	bne.n	80056b0 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	212c      	movs	r1, #44	; 0x2c
 800565a:	fb01 f303 	mul.w	r3, r1, r3
 800565e:	4413      	add	r3, r2
 8005660:	335c      	adds	r3, #92	; 0x5c
 8005662:	2200      	movs	r2, #0
 8005664:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d120      	bne.n	80056b0 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	212c      	movs	r1, #44	; 0x2c
 8005674:	fb01 f303 	mul.w	r3, r1, r3
 8005678:	4413      	add	r3, r2
 800567a:	3361      	adds	r3, #97	; 0x61
 800567c:	2203      	movs	r2, #3
 800567e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	4413      	add	r3, r2
 8005688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	0151      	lsls	r1, r2, #5
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	440a      	add	r2, r1
 8005696:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800569a:	f043 0302 	orr.w	r3, r3, #2
 800569e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	b2d2      	uxtb	r2, r2
 80056a8:	4611      	mov	r1, r2
 80056aa:	4618      	mov	r0, r3
 80056ac:	f003 ff1f 	bl	80094ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056bc:	461a      	mov	r2, r3
 80056be:	2310      	movs	r3, #16
 80056c0:	6093      	str	r3, [r2, #8]
}
 80056c2:	bf00      	nop
 80056c4:	3718      	adds	r7, #24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b088      	sub	sp, #32
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	460b      	mov	r3, r1
 80056d4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80056e0:	78fb      	ldrb	r3, [r7, #3]
 80056e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f003 0304 	and.w	r3, r3, #4
 80056f6:	2b04      	cmp	r3, #4
 80056f8:	d119      	bne.n	800572e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	015a      	lsls	r2, r3, #5
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	4413      	add	r3, r2
 8005702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005706:	461a      	mov	r2, r3
 8005708:	2304      	movs	r3, #4
 800570a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	4413      	add	r3, r2
 8005714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	0151      	lsls	r1, r2, #5
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	440a      	add	r2, r1
 8005722:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005726:	f043 0302 	orr.w	r3, r3, #2
 800572a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800572c:	e3ca      	b.n	8005ec4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	4413      	add	r3, r2
 8005736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f003 0320 	and.w	r3, r3, #32
 8005740:	2b20      	cmp	r3, #32
 8005742:	d13e      	bne.n	80057c2 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	4413      	add	r3, r2
 800574c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005750:	461a      	mov	r2, r3
 8005752:	2320      	movs	r3, #32
 8005754:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	212c      	movs	r1, #44	; 0x2c
 800575c:	fb01 f303 	mul.w	r3, r1, r3
 8005760:	4413      	add	r3, r2
 8005762:	333d      	adds	r3, #61	; 0x3d
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	2b01      	cmp	r3, #1
 8005768:	f040 83ac 	bne.w	8005ec4 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	212c      	movs	r1, #44	; 0x2c
 8005772:	fb01 f303 	mul.w	r3, r1, r3
 8005776:	4413      	add	r3, r2
 8005778:	333d      	adds	r3, #61	; 0x3d
 800577a:	2200      	movs	r2, #0
 800577c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	212c      	movs	r1, #44	; 0x2c
 8005784:	fb01 f303 	mul.w	r3, r1, r3
 8005788:	4413      	add	r3, r2
 800578a:	3360      	adds	r3, #96	; 0x60
 800578c:	2202      	movs	r2, #2
 800578e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	4413      	add	r3, r2
 8005798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	0151      	lsls	r1, r2, #5
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	440a      	add	r2, r1
 80057a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057aa:	f043 0302 	orr.w	r3, r3, #2
 80057ae:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	4611      	mov	r1, r2
 80057ba:	4618      	mov	r0, r3
 80057bc:	f003 fe97 	bl	80094ee <USB_HC_Halt>
}
 80057c0:	e380      	b.n	8005ec4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	015a      	lsls	r2, r3, #5
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	4413      	add	r3, r2
 80057ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057d8:	d122      	bne.n	8005820 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	015a      	lsls	r2, r3, #5
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	0151      	lsls	r1, r2, #5
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	440a      	add	r2, r1
 80057f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057f4:	f043 0302 	orr.w	r3, r3, #2
 80057f8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	b2d2      	uxtb	r2, r2
 8005802:	4611      	mov	r1, r2
 8005804:	4618      	mov	r0, r3
 8005806:	f003 fe72 	bl	80094ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	4413      	add	r3, r2
 8005812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005816:	461a      	mov	r2, r3
 8005818:	f44f 7300 	mov.w	r3, #512	; 0x200
 800581c:	6093      	str	r3, [r2, #8]
}
 800581e:	e351      	b.n	8005ec4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	4413      	add	r3, r2
 8005828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b01      	cmp	r3, #1
 8005834:	d150      	bne.n	80058d8 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	212c      	movs	r1, #44	; 0x2c
 800583c:	fb01 f303 	mul.w	r3, r1, r3
 8005840:	4413      	add	r3, r2
 8005842:	335c      	adds	r3, #92	; 0x5c
 8005844:	2200      	movs	r2, #0
 8005846:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	4413      	add	r3, r2
 8005850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800585a:	2b40      	cmp	r3, #64	; 0x40
 800585c:	d111      	bne.n	8005882 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	212c      	movs	r1, #44	; 0x2c
 8005864:	fb01 f303 	mul.w	r3, r1, r3
 8005868:	4413      	add	r3, r2
 800586a:	333d      	adds	r3, #61	; 0x3d
 800586c:	2201      	movs	r2, #1
 800586e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	4413      	add	r3, r2
 8005878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800587c:	461a      	mov	r2, r3
 800587e:	2340      	movs	r3, #64	; 0x40
 8005880:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	015a      	lsls	r2, r3, #5
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	4413      	add	r3, r2
 800588a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	0151      	lsls	r1, r2, #5
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	440a      	add	r2, r1
 8005898:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800589c:	f043 0302 	orr.w	r3, r3, #2
 80058a0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	b2d2      	uxtb	r2, r2
 80058aa:	4611      	mov	r1, r2
 80058ac:	4618      	mov	r0, r3
 80058ae:	f003 fe1e 	bl	80094ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058be:	461a      	mov	r2, r3
 80058c0:	2301      	movs	r3, #1
 80058c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	212c      	movs	r1, #44	; 0x2c
 80058ca:	fb01 f303 	mul.w	r3, r1, r3
 80058ce:	4413      	add	r3, r2
 80058d0:	3361      	adds	r3, #97	; 0x61
 80058d2:	2201      	movs	r2, #1
 80058d4:	701a      	strb	r2, [r3, #0]
}
 80058d6:	e2f5      	b.n	8005ec4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ea:	2b40      	cmp	r3, #64	; 0x40
 80058ec:	d13c      	bne.n	8005968 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	212c      	movs	r1, #44	; 0x2c
 80058f4:	fb01 f303 	mul.w	r3, r1, r3
 80058f8:	4413      	add	r3, r2
 80058fa:	3361      	adds	r3, #97	; 0x61
 80058fc:	2204      	movs	r2, #4
 80058fe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	212c      	movs	r1, #44	; 0x2c
 8005906:	fb01 f303 	mul.w	r3, r1, r3
 800590a:	4413      	add	r3, r2
 800590c:	333d      	adds	r3, #61	; 0x3d
 800590e:	2201      	movs	r2, #1
 8005910:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	212c      	movs	r1, #44	; 0x2c
 8005918:	fb01 f303 	mul.w	r3, r1, r3
 800591c:	4413      	add	r3, r2
 800591e:	335c      	adds	r3, #92	; 0x5c
 8005920:	2200      	movs	r2, #0
 8005922:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	4413      	add	r3, r2
 800592c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	0151      	lsls	r1, r2, #5
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	440a      	add	r2, r1
 800593a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800593e:	f043 0302 	orr.w	r3, r3, #2
 8005942:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	b2d2      	uxtb	r2, r2
 800594c:	4611      	mov	r1, r2
 800594e:	4618      	mov	r0, r3
 8005950:	f003 fdcd 	bl	80094ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	4413      	add	r3, r2
 800595c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005960:	461a      	mov	r2, r3
 8005962:	2340      	movs	r3, #64	; 0x40
 8005964:	6093      	str	r3, [r2, #8]
}
 8005966:	e2ad      	b.n	8005ec4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	015a      	lsls	r2, r3, #5
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	4413      	add	r3, r2
 8005970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f003 0308 	and.w	r3, r3, #8
 800597a:	2b08      	cmp	r3, #8
 800597c:	d12a      	bne.n	80059d4 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	4413      	add	r3, r2
 8005986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598a:	461a      	mov	r2, r3
 800598c:	2308      	movs	r3, #8
 800598e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	4413      	add	r3, r2
 8005998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	0151      	lsls	r1, r2, #5
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	440a      	add	r2, r1
 80059a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059aa:	f043 0302 	orr.w	r3, r3, #2
 80059ae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	697a      	ldr	r2, [r7, #20]
 80059b6:	b2d2      	uxtb	r2, r2
 80059b8:	4611      	mov	r1, r2
 80059ba:	4618      	mov	r0, r3
 80059bc:	f003 fd97 	bl	80094ee <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	212c      	movs	r1, #44	; 0x2c
 80059c6:	fb01 f303 	mul.w	r3, r1, r3
 80059ca:	4413      	add	r3, r2
 80059cc:	3361      	adds	r3, #97	; 0x61
 80059ce:	2205      	movs	r2, #5
 80059d0:	701a      	strb	r2, [r3, #0]
}
 80059d2:	e277      	b.n	8005ec4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f003 0310 	and.w	r3, r3, #16
 80059e6:	2b10      	cmp	r3, #16
 80059e8:	d150      	bne.n	8005a8c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	212c      	movs	r1, #44	; 0x2c
 80059f0:	fb01 f303 	mul.w	r3, r1, r3
 80059f4:	4413      	add	r3, r2
 80059f6:	335c      	adds	r3, #92	; 0x5c
 80059f8:	2200      	movs	r2, #0
 80059fa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	212c      	movs	r1, #44	; 0x2c
 8005a02:	fb01 f303 	mul.w	r3, r1, r3
 8005a06:	4413      	add	r3, r2
 8005a08:	3361      	adds	r3, #97	; 0x61
 8005a0a:	2203      	movs	r2, #3
 8005a0c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	212c      	movs	r1, #44	; 0x2c
 8005a14:	fb01 f303 	mul.w	r3, r1, r3
 8005a18:	4413      	add	r3, r2
 8005a1a:	333d      	adds	r3, #61	; 0x3d
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d112      	bne.n	8005a48 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	212c      	movs	r1, #44	; 0x2c
 8005a28:	fb01 f303 	mul.w	r3, r1, r3
 8005a2c:	4413      	add	r3, r2
 8005a2e:	333c      	adds	r3, #60	; 0x3c
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d108      	bne.n	8005a48 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	212c      	movs	r1, #44	; 0x2c
 8005a3c:	fb01 f303 	mul.w	r3, r1, r3
 8005a40:	4413      	add	r3, r2
 8005a42:	333d      	adds	r3, #61	; 0x3d
 8005a44:	2201      	movs	r2, #1
 8005a46:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	0151      	lsls	r1, r2, #5
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	440a      	add	r2, r1
 8005a5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a62:	f043 0302 	orr.w	r3, r3, #2
 8005a66:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	b2d2      	uxtb	r2, r2
 8005a70:	4611      	mov	r1, r2
 8005a72:	4618      	mov	r0, r3
 8005a74:	f003 fd3b 	bl	80094ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a84:	461a      	mov	r2, r3
 8005a86:	2310      	movs	r3, #16
 8005a88:	6093      	str	r3, [r2, #8]
}
 8005a8a:	e21b      	b.n	8005ec4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9e:	2b80      	cmp	r3, #128	; 0x80
 8005aa0:	d174      	bne.n	8005b8c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d121      	bne.n	8005aee <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	212c      	movs	r1, #44	; 0x2c
 8005ab0:	fb01 f303 	mul.w	r3, r1, r3
 8005ab4:	4413      	add	r3, r2
 8005ab6:	3361      	adds	r3, #97	; 0x61
 8005ab8:	2206      	movs	r2, #6
 8005aba:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	0151      	lsls	r1, r2, #5
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	440a      	add	r2, r1
 8005ad2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ad6:	f043 0302 	orr.w	r3, r3, #2
 8005ada:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	4611      	mov	r1, r2
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f003 fd01 	bl	80094ee <USB_HC_Halt>
 8005aec:	e044      	b.n	8005b78 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	212c      	movs	r1, #44	; 0x2c
 8005af4:	fb01 f303 	mul.w	r3, r1, r3
 8005af8:	4413      	add	r3, r2
 8005afa:	335c      	adds	r3, #92	; 0x5c
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	6879      	ldr	r1, [r7, #4]
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	202c      	movs	r0, #44	; 0x2c
 8005b06:	fb00 f303 	mul.w	r3, r0, r3
 8005b0a:	440b      	add	r3, r1
 8005b0c:	335c      	adds	r3, #92	; 0x5c
 8005b0e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	212c      	movs	r1, #44	; 0x2c
 8005b16:	fb01 f303 	mul.w	r3, r1, r3
 8005b1a:	4413      	add	r3, r2
 8005b1c:	335c      	adds	r3, #92	; 0x5c
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d920      	bls.n	8005b66 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	212c      	movs	r1, #44	; 0x2c
 8005b2a:	fb01 f303 	mul.w	r3, r1, r3
 8005b2e:	4413      	add	r3, r2
 8005b30:	335c      	adds	r3, #92	; 0x5c
 8005b32:	2200      	movs	r2, #0
 8005b34:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	212c      	movs	r1, #44	; 0x2c
 8005b3c:	fb01 f303 	mul.w	r3, r1, r3
 8005b40:	4413      	add	r3, r2
 8005b42:	3360      	adds	r3, #96	; 0x60
 8005b44:	2204      	movs	r2, #4
 8005b46:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	b2d9      	uxtb	r1, r3
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	202c      	movs	r0, #44	; 0x2c
 8005b52:	fb00 f303 	mul.w	r3, r0, r3
 8005b56:	4413      	add	r3, r2
 8005b58:	3360      	adds	r3, #96	; 0x60
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f005 fe82 	bl	800b868 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005b64:	e008      	b.n	8005b78 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	212c      	movs	r1, #44	; 0x2c
 8005b6c:	fb01 f303 	mul.w	r3, r1, r3
 8005b70:	4413      	add	r3, r2
 8005b72:	3360      	adds	r3, #96	; 0x60
 8005b74:	2202      	movs	r2, #2
 8005b76:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b84:	461a      	mov	r2, r3
 8005b86:	2380      	movs	r3, #128	; 0x80
 8005b88:	6093      	str	r3, [r2, #8]
}
 8005b8a:	e19b      	b.n	8005ec4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ba2:	d134      	bne.n	8005c0e <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	0151      	lsls	r1, r2, #5
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	440a      	add	r2, r1
 8005bba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bbe:	f043 0302 	orr.w	r3, r3, #2
 8005bc2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	b2d2      	uxtb	r2, r2
 8005bcc:	4611      	mov	r1, r2
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f003 fc8d 	bl	80094ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be0:	461a      	mov	r2, r3
 8005be2:	2310      	movs	r3, #16
 8005be4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	015a      	lsls	r2, r3, #5
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	4413      	add	r3, r2
 8005bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bf8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	212c      	movs	r1, #44	; 0x2c
 8005c00:	fb01 f303 	mul.w	r3, r1, r3
 8005c04:	4413      	add	r3, r2
 8005c06:	3361      	adds	r3, #97	; 0x61
 8005c08:	2208      	movs	r2, #8
 8005c0a:	701a      	strb	r2, [r3, #0]
}
 8005c0c:	e15a      	b.n	8005ec4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	f040 814f 	bne.w	8005ec4 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	0151      	lsls	r1, r2, #5
 8005c38:	69ba      	ldr	r2, [r7, #24]
 8005c3a:	440a      	add	r2, r1
 8005c3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c40:	f023 0302 	bic.w	r3, r3, #2
 8005c44:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	212c      	movs	r1, #44	; 0x2c
 8005c4c:	fb01 f303 	mul.w	r3, r1, r3
 8005c50:	4413      	add	r3, r2
 8005c52:	3361      	adds	r3, #97	; 0x61
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d17d      	bne.n	8005d56 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	212c      	movs	r1, #44	; 0x2c
 8005c60:	fb01 f303 	mul.w	r3, r1, r3
 8005c64:	4413      	add	r3, r2
 8005c66:	3360      	adds	r3, #96	; 0x60
 8005c68:	2201      	movs	r2, #1
 8005c6a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	212c      	movs	r1, #44	; 0x2c
 8005c72:	fb01 f303 	mul.w	r3, r1, r3
 8005c76:	4413      	add	r3, r2
 8005c78:	333f      	adds	r3, #63	; 0x3f
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d00a      	beq.n	8005c96 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	212c      	movs	r1, #44	; 0x2c
 8005c86:	fb01 f303 	mul.w	r3, r1, r3
 8005c8a:	4413      	add	r3, r2
 8005c8c:	333f      	adds	r3, #63	; 0x3f
 8005c8e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005c90:	2b03      	cmp	r3, #3
 8005c92:	f040 8100 	bne.w	8005e96 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d113      	bne.n	8005cc6 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	212c      	movs	r1, #44	; 0x2c
 8005ca4:	fb01 f303 	mul.w	r3, r1, r3
 8005ca8:	4413      	add	r3, r2
 8005caa:	3355      	adds	r3, #85	; 0x55
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	f083 0301 	eor.w	r3, r3, #1
 8005cb2:	b2d8      	uxtb	r0, r3
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	212c      	movs	r1, #44	; 0x2c
 8005cba:	fb01 f303 	mul.w	r3, r1, r3
 8005cbe:	4413      	add	r3, r2
 8005cc0:	3355      	adds	r3, #85	; 0x55
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	f040 80e3 	bne.w	8005e96 <HCD_HC_OUT_IRQHandler+0x7cc>
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	212c      	movs	r1, #44	; 0x2c
 8005cd6:	fb01 f303 	mul.w	r3, r1, r3
 8005cda:	4413      	add	r3, r2
 8005cdc:	334c      	adds	r3, #76	; 0x4c
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 80d8 	beq.w	8005e96 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	212c      	movs	r1, #44	; 0x2c
 8005cec:	fb01 f303 	mul.w	r3, r1, r3
 8005cf0:	4413      	add	r3, r2
 8005cf2:	334c      	adds	r3, #76	; 0x4c
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6879      	ldr	r1, [r7, #4]
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	202c      	movs	r0, #44	; 0x2c
 8005cfc:	fb00 f202 	mul.w	r2, r0, r2
 8005d00:	440a      	add	r2, r1
 8005d02:	3240      	adds	r2, #64	; 0x40
 8005d04:	8812      	ldrh	r2, [r2, #0]
 8005d06:	4413      	add	r3, r2
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	6879      	ldr	r1, [r7, #4]
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	202c      	movs	r0, #44	; 0x2c
 8005d10:	fb00 f202 	mul.w	r2, r0, r2
 8005d14:	440a      	add	r2, r1
 8005d16:	3240      	adds	r2, #64	; 0x40
 8005d18:	8812      	ldrh	r2, [r2, #0]
 8005d1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f000 80b5 	beq.w	8005e96 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	212c      	movs	r1, #44	; 0x2c
 8005d32:	fb01 f303 	mul.w	r3, r1, r3
 8005d36:	4413      	add	r3, r2
 8005d38:	3355      	adds	r3, #85	; 0x55
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	f083 0301 	eor.w	r3, r3, #1
 8005d40:	b2d8      	uxtb	r0, r3
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	212c      	movs	r1, #44	; 0x2c
 8005d48:	fb01 f303 	mul.w	r3, r1, r3
 8005d4c:	4413      	add	r3, r2
 8005d4e:	3355      	adds	r3, #85	; 0x55
 8005d50:	4602      	mov	r2, r0
 8005d52:	701a      	strb	r2, [r3, #0]
 8005d54:	e09f      	b.n	8005e96 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	212c      	movs	r1, #44	; 0x2c
 8005d5c:	fb01 f303 	mul.w	r3, r1, r3
 8005d60:	4413      	add	r3, r2
 8005d62:	3361      	adds	r3, #97	; 0x61
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	2b03      	cmp	r3, #3
 8005d68:	d109      	bne.n	8005d7e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	212c      	movs	r1, #44	; 0x2c
 8005d70:	fb01 f303 	mul.w	r3, r1, r3
 8005d74:	4413      	add	r3, r2
 8005d76:	3360      	adds	r3, #96	; 0x60
 8005d78:	2202      	movs	r2, #2
 8005d7a:	701a      	strb	r2, [r3, #0]
 8005d7c:	e08b      	b.n	8005e96 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	212c      	movs	r1, #44	; 0x2c
 8005d84:	fb01 f303 	mul.w	r3, r1, r3
 8005d88:	4413      	add	r3, r2
 8005d8a:	3361      	adds	r3, #97	; 0x61
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	2b04      	cmp	r3, #4
 8005d90:	d109      	bne.n	8005da6 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	212c      	movs	r1, #44	; 0x2c
 8005d98:	fb01 f303 	mul.w	r3, r1, r3
 8005d9c:	4413      	add	r3, r2
 8005d9e:	3360      	adds	r3, #96	; 0x60
 8005da0:	2202      	movs	r2, #2
 8005da2:	701a      	strb	r2, [r3, #0]
 8005da4:	e077      	b.n	8005e96 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	212c      	movs	r1, #44	; 0x2c
 8005dac:	fb01 f303 	mul.w	r3, r1, r3
 8005db0:	4413      	add	r3, r2
 8005db2:	3361      	adds	r3, #97	; 0x61
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	2b05      	cmp	r3, #5
 8005db8:	d109      	bne.n	8005dce <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	212c      	movs	r1, #44	; 0x2c
 8005dc0:	fb01 f303 	mul.w	r3, r1, r3
 8005dc4:	4413      	add	r3, r2
 8005dc6:	3360      	adds	r3, #96	; 0x60
 8005dc8:	2205      	movs	r2, #5
 8005dca:	701a      	strb	r2, [r3, #0]
 8005dcc:	e063      	b.n	8005e96 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	212c      	movs	r1, #44	; 0x2c
 8005dd4:	fb01 f303 	mul.w	r3, r1, r3
 8005dd8:	4413      	add	r3, r2
 8005dda:	3361      	adds	r3, #97	; 0x61
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	2b06      	cmp	r3, #6
 8005de0:	d009      	beq.n	8005df6 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	212c      	movs	r1, #44	; 0x2c
 8005de8:	fb01 f303 	mul.w	r3, r1, r3
 8005dec:	4413      	add	r3, r2
 8005dee:	3361      	adds	r3, #97	; 0x61
 8005df0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005df2:	2b08      	cmp	r3, #8
 8005df4:	d14f      	bne.n	8005e96 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	212c      	movs	r1, #44	; 0x2c
 8005dfc:	fb01 f303 	mul.w	r3, r1, r3
 8005e00:	4413      	add	r3, r2
 8005e02:	335c      	adds	r3, #92	; 0x5c
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	1c5a      	adds	r2, r3, #1
 8005e08:	6879      	ldr	r1, [r7, #4]
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	202c      	movs	r0, #44	; 0x2c
 8005e0e:	fb00 f303 	mul.w	r3, r0, r3
 8005e12:	440b      	add	r3, r1
 8005e14:	335c      	adds	r3, #92	; 0x5c
 8005e16:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	212c      	movs	r1, #44	; 0x2c
 8005e1e:	fb01 f303 	mul.w	r3, r1, r3
 8005e22:	4413      	add	r3, r2
 8005e24:	335c      	adds	r3, #92	; 0x5c
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d912      	bls.n	8005e52 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	212c      	movs	r1, #44	; 0x2c
 8005e32:	fb01 f303 	mul.w	r3, r1, r3
 8005e36:	4413      	add	r3, r2
 8005e38:	335c      	adds	r3, #92	; 0x5c
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	212c      	movs	r1, #44	; 0x2c
 8005e44:	fb01 f303 	mul.w	r3, r1, r3
 8005e48:	4413      	add	r3, r2
 8005e4a:	3360      	adds	r3, #96	; 0x60
 8005e4c:	2204      	movs	r2, #4
 8005e4e:	701a      	strb	r2, [r3, #0]
 8005e50:	e021      	b.n	8005e96 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	212c      	movs	r1, #44	; 0x2c
 8005e58:	fb01 f303 	mul.w	r3, r1, r3
 8005e5c:	4413      	add	r3, r2
 8005e5e:	3360      	adds	r3, #96	; 0x60
 8005e60:	2202      	movs	r2, #2
 8005e62:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e7a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e82:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e90:	461a      	mov	r2, r3
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	b2d9      	uxtb	r1, r3
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	202c      	movs	r0, #44	; 0x2c
 8005eb2:	fb00 f303 	mul.w	r3, r0, r3
 8005eb6:	4413      	add	r3, r2
 8005eb8:	3360      	adds	r3, #96	; 0x60
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f005 fcd2 	bl	800b868 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005ec4:	bf00      	nop
 8005ec6:	3720      	adds	r7, #32
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b08a      	sub	sp, #40	; 0x28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	f003 030f 	and.w	r3, r3, #15
 8005eec:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	0c5b      	lsrs	r3, r3, #17
 8005ef2:	f003 030f 	and.w	r3, r3, #15
 8005ef6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	091b      	lsrs	r3, r3, #4
 8005efc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f00:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d004      	beq.n	8005f12 <HCD_RXQLVL_IRQHandler+0x46>
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	2b05      	cmp	r3, #5
 8005f0c:	f000 80a9 	beq.w	8006062 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005f10:	e0aa      	b.n	8006068 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 80a6 	beq.w	8006066 <HCD_RXQLVL_IRQHandler+0x19a>
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	212c      	movs	r1, #44	; 0x2c
 8005f20:	fb01 f303 	mul.w	r3, r1, r3
 8005f24:	4413      	add	r3, r2
 8005f26:	3344      	adds	r3, #68	; 0x44
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 809b 	beq.w	8006066 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	212c      	movs	r1, #44	; 0x2c
 8005f36:	fb01 f303 	mul.w	r3, r1, r3
 8005f3a:	4413      	add	r3, r2
 8005f3c:	3350      	adds	r3, #80	; 0x50
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	441a      	add	r2, r3
 8005f44:	6879      	ldr	r1, [r7, #4]
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	202c      	movs	r0, #44	; 0x2c
 8005f4a:	fb00 f303 	mul.w	r3, r0, r3
 8005f4e:	440b      	add	r3, r1
 8005f50:	334c      	adds	r3, #76	; 0x4c
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d87a      	bhi.n	800604e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6818      	ldr	r0, [r3, #0]
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	212c      	movs	r1, #44	; 0x2c
 8005f62:	fb01 f303 	mul.w	r3, r1, r3
 8005f66:	4413      	add	r3, r2
 8005f68:	3344      	adds	r3, #68	; 0x44
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	b292      	uxth	r2, r2
 8005f70:	4619      	mov	r1, r3
 8005f72:	f002 fe35 	bl	8008be0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	212c      	movs	r1, #44	; 0x2c
 8005f7c:	fb01 f303 	mul.w	r3, r1, r3
 8005f80:	4413      	add	r3, r2
 8005f82:	3344      	adds	r3, #68	; 0x44
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	441a      	add	r2, r3
 8005f8a:	6879      	ldr	r1, [r7, #4]
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	202c      	movs	r0, #44	; 0x2c
 8005f90:	fb00 f303 	mul.w	r3, r0, r3
 8005f94:	440b      	add	r3, r1
 8005f96:	3344      	adds	r3, #68	; 0x44
 8005f98:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	212c      	movs	r1, #44	; 0x2c
 8005fa0:	fb01 f303 	mul.w	r3, r1, r3
 8005fa4:	4413      	add	r3, r2
 8005fa6:	3350      	adds	r3, #80	; 0x50
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	441a      	add	r2, r3
 8005fae:	6879      	ldr	r1, [r7, #4]
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	202c      	movs	r0, #44	; 0x2c
 8005fb4:	fb00 f303 	mul.w	r3, r0, r3
 8005fb8:	440b      	add	r3, r1
 8005fba:	3350      	adds	r3, #80	; 0x50
 8005fbc:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	0cdb      	lsrs	r3, r3, #19
 8005fce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fd2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	212c      	movs	r1, #44	; 0x2c
 8005fda:	fb01 f303 	mul.w	r3, r1, r3
 8005fde:	4413      	add	r3, r2
 8005fe0:	3340      	adds	r3, #64	; 0x40
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d13c      	bne.n	8006066 <HCD_RXQLVL_IRQHandler+0x19a>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d039      	beq.n	8006066 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006008:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006010:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	4413      	add	r3, r2
 800601a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800601e:	461a      	mov	r2, r3
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	212c      	movs	r1, #44	; 0x2c
 800602a:	fb01 f303 	mul.w	r3, r1, r3
 800602e:	4413      	add	r3, r2
 8006030:	3354      	adds	r3, #84	; 0x54
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	f083 0301 	eor.w	r3, r3, #1
 8006038:	b2d8      	uxtb	r0, r3
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	212c      	movs	r1, #44	; 0x2c
 8006040:	fb01 f303 	mul.w	r3, r1, r3
 8006044:	4413      	add	r3, r2
 8006046:	3354      	adds	r3, #84	; 0x54
 8006048:	4602      	mov	r2, r0
 800604a:	701a      	strb	r2, [r3, #0]
      break;
 800604c:	e00b      	b.n	8006066 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	212c      	movs	r1, #44	; 0x2c
 8006054:	fb01 f303 	mul.w	r3, r1, r3
 8006058:	4413      	add	r3, r2
 800605a:	3360      	adds	r3, #96	; 0x60
 800605c:	2204      	movs	r2, #4
 800605e:	701a      	strb	r2, [r3, #0]
      break;
 8006060:	e001      	b.n	8006066 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8006062:	bf00      	nop
 8006064:	e000      	b.n	8006068 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006066:	bf00      	nop
  }
}
 8006068:	bf00      	nop
 800606a:	3728      	adds	r7, #40	; 0x28
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800609c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f003 0302 	and.w	r3, r3, #2
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d10b      	bne.n	80060c0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d102      	bne.n	80060b8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f005 fbbc 	bl	800b830 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	f043 0302 	orr.w	r3, r3, #2
 80060be:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f003 0308 	and.w	r3, r3, #8
 80060c6:	2b08      	cmp	r3, #8
 80060c8:	d132      	bne.n	8006130 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f043 0308 	orr.w	r3, r3, #8
 80060d0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f003 0304 	and.w	r3, r3, #4
 80060d8:	2b04      	cmp	r3, #4
 80060da:	d126      	bne.n	800612a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d113      	bne.n	800610c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80060ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060ee:	d106      	bne.n	80060fe <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2102      	movs	r1, #2
 80060f6:	4618      	mov	r0, r3
 80060f8:	f002 fed2 	bl	8008ea0 <USB_InitFSLSPClkSel>
 80060fc:	e011      	b.n	8006122 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2101      	movs	r1, #1
 8006104:	4618      	mov	r0, r3
 8006106:	f002 fecb 	bl	8008ea0 <USB_InitFSLSPClkSel>
 800610a:	e00a      	b.n	8006122 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d106      	bne.n	8006122 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800611a:	461a      	mov	r2, r3
 800611c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006120:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f005 fbae 	bl	800b884 <HAL_HCD_PortEnabled_Callback>
 8006128:	e002      	b.n	8006130 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f005 fbb8 	bl	800b8a0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f003 0320 	and.w	r3, r3, #32
 8006136:	2b20      	cmp	r3, #32
 8006138:	d103      	bne.n	8006142 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	f043 0320 	orr.w	r3, r3, #32
 8006140:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006148:	461a      	mov	r2, r3
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	6013      	str	r3, [r2, #0]
}
 800614e:	bf00      	nop
 8006150:	3718      	adds	r7, #24
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
	...

08006158 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e12b      	b.n	80063c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d106      	bne.n	8006184 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7fd fc5c 	bl	8003a3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2224      	movs	r2, #36	; 0x24
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0201 	bic.w	r2, r2, #1
 800619a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80061bc:	f001 fd14 	bl	8007be8 <HAL_RCC_GetPCLK1Freq>
 80061c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	4a81      	ldr	r2, [pc, #516]	; (80063cc <HAL_I2C_Init+0x274>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d807      	bhi.n	80061dc <HAL_I2C_Init+0x84>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4a80      	ldr	r2, [pc, #512]	; (80063d0 <HAL_I2C_Init+0x278>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	bf94      	ite	ls
 80061d4:	2301      	movls	r3, #1
 80061d6:	2300      	movhi	r3, #0
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	e006      	b.n	80061ea <HAL_I2C_Init+0x92>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4a7d      	ldr	r2, [pc, #500]	; (80063d4 <HAL_I2C_Init+0x27c>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	bf94      	ite	ls
 80061e4:	2301      	movls	r3, #1
 80061e6:	2300      	movhi	r3, #0
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d001      	beq.n	80061f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e0e7      	b.n	80063c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	4a78      	ldr	r2, [pc, #480]	; (80063d8 <HAL_I2C_Init+0x280>)
 80061f6:	fba2 2303 	umull	r2, r3, r2, r3
 80061fa:	0c9b      	lsrs	r3, r3, #18
 80061fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	430a      	orrs	r2, r1
 8006210:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	4a6a      	ldr	r2, [pc, #424]	; (80063cc <HAL_I2C_Init+0x274>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d802      	bhi.n	800622c <HAL_I2C_Init+0xd4>
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	3301      	adds	r3, #1
 800622a:	e009      	b.n	8006240 <HAL_I2C_Init+0xe8>
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006232:	fb02 f303 	mul.w	r3, r2, r3
 8006236:	4a69      	ldr	r2, [pc, #420]	; (80063dc <HAL_I2C_Init+0x284>)
 8006238:	fba2 2303 	umull	r2, r3, r2, r3
 800623c:	099b      	lsrs	r3, r3, #6
 800623e:	3301      	adds	r3, #1
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	6812      	ldr	r2, [r2, #0]
 8006244:	430b      	orrs	r3, r1
 8006246:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006252:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	495c      	ldr	r1, [pc, #368]	; (80063cc <HAL_I2C_Init+0x274>)
 800625c:	428b      	cmp	r3, r1
 800625e:	d819      	bhi.n	8006294 <HAL_I2C_Init+0x13c>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	1e59      	subs	r1, r3, #1
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	005b      	lsls	r3, r3, #1
 800626a:	fbb1 f3f3 	udiv	r3, r1, r3
 800626e:	1c59      	adds	r1, r3, #1
 8006270:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006274:	400b      	ands	r3, r1
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00a      	beq.n	8006290 <HAL_I2C_Init+0x138>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	1e59      	subs	r1, r3, #1
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	005b      	lsls	r3, r3, #1
 8006284:	fbb1 f3f3 	udiv	r3, r1, r3
 8006288:	3301      	adds	r3, #1
 800628a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800628e:	e051      	b.n	8006334 <HAL_I2C_Init+0x1dc>
 8006290:	2304      	movs	r3, #4
 8006292:	e04f      	b.n	8006334 <HAL_I2C_Init+0x1dc>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d111      	bne.n	80062c0 <HAL_I2C_Init+0x168>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	1e58      	subs	r0, r3, #1
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6859      	ldr	r1, [r3, #4]
 80062a4:	460b      	mov	r3, r1
 80062a6:	005b      	lsls	r3, r3, #1
 80062a8:	440b      	add	r3, r1
 80062aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80062ae:	3301      	adds	r3, #1
 80062b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	bf0c      	ite	eq
 80062b8:	2301      	moveq	r3, #1
 80062ba:	2300      	movne	r3, #0
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	e012      	b.n	80062e6 <HAL_I2C_Init+0x18e>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	1e58      	subs	r0, r3, #1
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6859      	ldr	r1, [r3, #4]
 80062c8:	460b      	mov	r3, r1
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	440b      	add	r3, r1
 80062ce:	0099      	lsls	r1, r3, #2
 80062d0:	440b      	add	r3, r1
 80062d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80062d6:	3301      	adds	r3, #1
 80062d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062dc:	2b00      	cmp	r3, #0
 80062de:	bf0c      	ite	eq
 80062e0:	2301      	moveq	r3, #1
 80062e2:	2300      	movne	r3, #0
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <HAL_I2C_Init+0x196>
 80062ea:	2301      	movs	r3, #1
 80062ec:	e022      	b.n	8006334 <HAL_I2C_Init+0x1dc>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10e      	bne.n	8006314 <HAL_I2C_Init+0x1bc>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	1e58      	subs	r0, r3, #1
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6859      	ldr	r1, [r3, #4]
 80062fe:	460b      	mov	r3, r1
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	440b      	add	r3, r1
 8006304:	fbb0 f3f3 	udiv	r3, r0, r3
 8006308:	3301      	adds	r3, #1
 800630a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800630e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006312:	e00f      	b.n	8006334 <HAL_I2C_Init+0x1dc>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	1e58      	subs	r0, r3, #1
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6859      	ldr	r1, [r3, #4]
 800631c:	460b      	mov	r3, r1
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	440b      	add	r3, r1
 8006322:	0099      	lsls	r1, r3, #2
 8006324:	440b      	add	r3, r1
 8006326:	fbb0 f3f3 	udiv	r3, r0, r3
 800632a:	3301      	adds	r3, #1
 800632c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006330:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006334:	6879      	ldr	r1, [r7, #4]
 8006336:	6809      	ldr	r1, [r1, #0]
 8006338:	4313      	orrs	r3, r2
 800633a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	69da      	ldr	r2, [r3, #28]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	431a      	orrs	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	430a      	orrs	r2, r1
 8006356:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006362:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	6911      	ldr	r1, [r2, #16]
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	68d2      	ldr	r2, [r2, #12]
 800636e:	4311      	orrs	r1, r2
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6812      	ldr	r2, [r2, #0]
 8006374:	430b      	orrs	r3, r1
 8006376:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	695a      	ldr	r2, [r3, #20]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	431a      	orrs	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	430a      	orrs	r2, r1
 8006392:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f042 0201 	orr.w	r2, r2, #1
 80063a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2220      	movs	r2, #32
 80063ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	000186a0 	.word	0x000186a0
 80063d0:	001e847f 	.word	0x001e847f
 80063d4:	003d08ff 	.word	0x003d08ff
 80063d8:	431bde83 	.word	0x431bde83
 80063dc:	10624dd3 	.word	0x10624dd3

080063e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b088      	sub	sp, #32
 80063e4:	af02      	add	r7, sp, #8
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	4608      	mov	r0, r1
 80063ea:	4611      	mov	r1, r2
 80063ec:	461a      	mov	r2, r3
 80063ee:	4603      	mov	r3, r0
 80063f0:	817b      	strh	r3, [r7, #10]
 80063f2:	460b      	mov	r3, r1
 80063f4:	813b      	strh	r3, [r7, #8]
 80063f6:	4613      	mov	r3, r2
 80063f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063fa:	f7fd fe2d 	bl	8004058 <HAL_GetTick>
 80063fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b20      	cmp	r3, #32
 800640a:	f040 80d9 	bne.w	80065c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	2319      	movs	r3, #25
 8006414:	2201      	movs	r2, #1
 8006416:	496d      	ldr	r1, [pc, #436]	; (80065cc <HAL_I2C_Mem_Write+0x1ec>)
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 f971 	bl	8006700 <I2C_WaitOnFlagUntilTimeout>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006424:	2302      	movs	r3, #2
 8006426:	e0cc      	b.n	80065c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800642e:	2b01      	cmp	r3, #1
 8006430:	d101      	bne.n	8006436 <HAL_I2C_Mem_Write+0x56>
 8006432:	2302      	movs	r3, #2
 8006434:	e0c5      	b.n	80065c2 <HAL_I2C_Mem_Write+0x1e2>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0301 	and.w	r3, r3, #1
 8006448:	2b01      	cmp	r3, #1
 800644a:	d007      	beq.n	800645c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f042 0201 	orr.w	r2, r2, #1
 800645a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800646a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2221      	movs	r2, #33	; 0x21
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2240      	movs	r2, #64	; 0x40
 8006478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6a3a      	ldr	r2, [r7, #32]
 8006486:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800648c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006492:	b29a      	uxth	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4a4d      	ldr	r2, [pc, #308]	; (80065d0 <HAL_I2C_Mem_Write+0x1f0>)
 800649c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800649e:	88f8      	ldrh	r0, [r7, #6]
 80064a0:	893a      	ldrh	r2, [r7, #8]
 80064a2:	8979      	ldrh	r1, [r7, #10]
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	9301      	str	r3, [sp, #4]
 80064a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	4603      	mov	r3, r0
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f000 f890 	bl	80065d4 <I2C_RequestMemoryWrite>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d052      	beq.n	8006560 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e081      	b.n	80065c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f000 f9f2 	bl	80068ac <I2C_WaitOnTXEFlagUntilTimeout>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00d      	beq.n	80064ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d2:	2b04      	cmp	r3, #4
 80064d4:	d107      	bne.n	80064e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e06b      	b.n	80065c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ee:	781a      	ldrb	r2, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fa:	1c5a      	adds	r2, r3, #1
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006504:	3b01      	subs	r3, #1
 8006506:	b29a      	uxth	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006510:	b29b      	uxth	r3, r3
 8006512:	3b01      	subs	r3, #1
 8006514:	b29a      	uxth	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b04      	cmp	r3, #4
 8006526:	d11b      	bne.n	8006560 <HAL_I2C_Mem_Write+0x180>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800652c:	2b00      	cmp	r3, #0
 800652e:	d017      	beq.n	8006560 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	781a      	ldrb	r2, [r3, #0]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006540:	1c5a      	adds	r2, r3, #1
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800654a:	3b01      	subs	r3, #1
 800654c:	b29a      	uxth	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006556:	b29b      	uxth	r3, r3
 8006558:	3b01      	subs	r3, #1
 800655a:	b29a      	uxth	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1aa      	bne.n	80064be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f000 f9de 	bl	800692e <I2C_WaitOnBTFFlagUntilTimeout>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00d      	beq.n	8006594 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657c:	2b04      	cmp	r3, #4
 800657e:	d107      	bne.n	8006590 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800658e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e016      	b.n	80065c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2220      	movs	r2, #32
 80065a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80065bc:	2300      	movs	r3, #0
 80065be:	e000      	b.n	80065c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80065c0:	2302      	movs	r3, #2
  }
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3718      	adds	r7, #24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	00100002 	.word	0x00100002
 80065d0:	ffff0000 	.word	0xffff0000

080065d4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b088      	sub	sp, #32
 80065d8:	af02      	add	r7, sp, #8
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	4608      	mov	r0, r1
 80065de:	4611      	mov	r1, r2
 80065e0:	461a      	mov	r2, r3
 80065e2:	4603      	mov	r3, r0
 80065e4:	817b      	strh	r3, [r7, #10]
 80065e6:	460b      	mov	r3, r1
 80065e8:	813b      	strh	r3, [r7, #8]
 80065ea:	4613      	mov	r3, r2
 80065ec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	6a3b      	ldr	r3, [r7, #32]
 8006604:	2200      	movs	r2, #0
 8006606:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 f878 	bl	8006700 <I2C_WaitOnFlagUntilTimeout>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00d      	beq.n	8006632 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006624:	d103      	bne.n	800662e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800662c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e05f      	b.n	80066f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006632:	897b      	ldrh	r3, [r7, #10]
 8006634:	b2db      	uxtb	r3, r3
 8006636:	461a      	mov	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006640:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006644:	6a3a      	ldr	r2, [r7, #32]
 8006646:	492d      	ldr	r1, [pc, #180]	; (80066fc <I2C_RequestMemoryWrite+0x128>)
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 f8b0 	bl	80067ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e04c      	b.n	80066f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006658:	2300      	movs	r3, #0
 800665a:	617b      	str	r3, [r7, #20]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	617b      	str	r3, [r7, #20]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	617b      	str	r3, [r7, #20]
 800666c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800666e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006670:	6a39      	ldr	r1, [r7, #32]
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f000 f91a 	bl	80068ac <I2C_WaitOnTXEFlagUntilTimeout>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00d      	beq.n	800669a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006682:	2b04      	cmp	r3, #4
 8006684:	d107      	bne.n	8006696 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006694:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e02b      	b.n	80066f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800669a:	88fb      	ldrh	r3, [r7, #6]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d105      	bne.n	80066ac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066a0:	893b      	ldrh	r3, [r7, #8]
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	611a      	str	r2, [r3, #16]
 80066aa:	e021      	b.n	80066f0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80066ac:	893b      	ldrh	r3, [r7, #8]
 80066ae:	0a1b      	lsrs	r3, r3, #8
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066bc:	6a39      	ldr	r1, [r7, #32]
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f000 f8f4 	bl	80068ac <I2C_WaitOnTXEFlagUntilTimeout>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00d      	beq.n	80066e6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ce:	2b04      	cmp	r3, #4
 80066d0:	d107      	bne.n	80066e2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e005      	b.n	80066f2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066e6:	893b      	ldrh	r3, [r7, #8]
 80066e8:	b2da      	uxtb	r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3718      	adds	r7, #24
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	00010002 	.word	0x00010002

08006700 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	603b      	str	r3, [r7, #0]
 800670c:	4613      	mov	r3, r2
 800670e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006710:	e025      	b.n	800675e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006718:	d021      	beq.n	800675e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800671a:	f7fd fc9d 	bl	8004058 <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	683a      	ldr	r2, [r7, #0]
 8006726:	429a      	cmp	r2, r3
 8006728:	d302      	bcc.n	8006730 <I2C_WaitOnFlagUntilTimeout+0x30>
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d116      	bne.n	800675e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2220      	movs	r2, #32
 800673a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674a:	f043 0220 	orr.w	r2, r3, #32
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e023      	b.n	80067a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	0c1b      	lsrs	r3, r3, #16
 8006762:	b2db      	uxtb	r3, r3
 8006764:	2b01      	cmp	r3, #1
 8006766:	d10d      	bne.n	8006784 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	43da      	mvns	r2, r3
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	4013      	ands	r3, r2
 8006774:	b29b      	uxth	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	bf0c      	ite	eq
 800677a:	2301      	moveq	r3, #1
 800677c:	2300      	movne	r3, #0
 800677e:	b2db      	uxtb	r3, r3
 8006780:	461a      	mov	r2, r3
 8006782:	e00c      	b.n	800679e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	43da      	mvns	r2, r3
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	4013      	ands	r3, r2
 8006790:	b29b      	uxth	r3, r3
 8006792:	2b00      	cmp	r3, #0
 8006794:	bf0c      	ite	eq
 8006796:	2301      	moveq	r3, #1
 8006798:	2300      	movne	r3, #0
 800679a:	b2db      	uxtb	r3, r3
 800679c:	461a      	mov	r2, r3
 800679e:	79fb      	ldrb	r3, [r7, #7]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d0b6      	beq.n	8006712 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b084      	sub	sp, #16
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	60f8      	str	r0, [r7, #12]
 80067b6:	60b9      	str	r1, [r7, #8]
 80067b8:	607a      	str	r2, [r7, #4]
 80067ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067bc:	e051      	b.n	8006862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	695b      	ldr	r3, [r3, #20]
 80067c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067cc:	d123      	bne.n	8006816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2220      	movs	r2, #32
 80067f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006802:	f043 0204 	orr.w	r2, r3, #4
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e046      	b.n	80068a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681c:	d021      	beq.n	8006862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800681e:	f7fd fc1b 	bl	8004058 <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	429a      	cmp	r2, r3
 800682c:	d302      	bcc.n	8006834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d116      	bne.n	8006862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2220      	movs	r2, #32
 800683e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684e:	f043 0220 	orr.w	r2, r3, #32
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e020      	b.n	80068a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	0c1b      	lsrs	r3, r3, #16
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b01      	cmp	r3, #1
 800686a:	d10c      	bne.n	8006886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	43da      	mvns	r2, r3
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	4013      	ands	r3, r2
 8006878:	b29b      	uxth	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	bf14      	ite	ne
 800687e:	2301      	movne	r3, #1
 8006880:	2300      	moveq	r3, #0
 8006882:	b2db      	uxtb	r3, r3
 8006884:	e00b      	b.n	800689e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	43da      	mvns	r2, r3
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	4013      	ands	r3, r2
 8006892:	b29b      	uxth	r3, r3
 8006894:	2b00      	cmp	r3, #0
 8006896:	bf14      	ite	ne
 8006898:	2301      	movne	r3, #1
 800689a:	2300      	moveq	r3, #0
 800689c:	b2db      	uxtb	r3, r3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d18d      	bne.n	80067be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068b8:	e02d      	b.n	8006916 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f000 f878 	bl	80069b0 <I2C_IsAcknowledgeFailed>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e02d      	b.n	8006926 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d0:	d021      	beq.n	8006916 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068d2:	f7fd fbc1 	bl	8004058 <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d302      	bcc.n	80068e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d116      	bne.n	8006916 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2220      	movs	r2, #32
 80068f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006902:	f043 0220 	orr.w	r2, r3, #32
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e007      	b.n	8006926 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006920:	2b80      	cmp	r3, #128	; 0x80
 8006922:	d1ca      	bne.n	80068ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b084      	sub	sp, #16
 8006932:	af00      	add	r7, sp, #0
 8006934:	60f8      	str	r0, [r7, #12]
 8006936:	60b9      	str	r1, [r7, #8]
 8006938:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800693a:	e02d      	b.n	8006998 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f000 f837 	bl	80069b0 <I2C_IsAcknowledgeFailed>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d001      	beq.n	800694c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e02d      	b.n	80069a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006952:	d021      	beq.n	8006998 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006954:	f7fd fb80 	bl	8004058 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	429a      	cmp	r2, r3
 8006962:	d302      	bcc.n	800696a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d116      	bne.n	8006998 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2220      	movs	r2, #32
 8006974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006984:	f043 0220 	orr.w	r2, r3, #32
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e007      	b.n	80069a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	f003 0304 	and.w	r3, r3, #4
 80069a2:	2b04      	cmp	r3, #4
 80069a4:	d1ca      	bne.n	800693c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069c6:	d11b      	bne.n	8006a00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2220      	movs	r2, #32
 80069dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ec:	f043 0204 	orr.w	r2, r3, #4
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e000      	b.n	8006a02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
	...

08006a10 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b088      	sub	sp, #32
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e128      	b.n	8006c74 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d109      	bne.n	8006a42 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a90      	ldr	r2, [pc, #576]	; (8006c7c <HAL_I2S_Init+0x26c>)
 8006a3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f7fd f845 	bl	8003acc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2202      	movs	r2, #2
 8006a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	69db      	ldr	r3, [r3, #28]
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	6812      	ldr	r2, [r2, #0]
 8006a54:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006a58:	f023 030f 	bic.w	r3, r3, #15
 8006a5c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2202      	movs	r2, #2
 8006a64:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d060      	beq.n	8006b30 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d102      	bne.n	8006a7c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006a76:	2310      	movs	r3, #16
 8006a78:	617b      	str	r3, [r7, #20]
 8006a7a:	e001      	b.n	8006a80 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006a7c:	2320      	movs	r3, #32
 8006a7e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	2b20      	cmp	r3, #32
 8006a86:	d802      	bhi.n	8006a8e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	005b      	lsls	r3, r3, #1
 8006a8c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006a8e:	2001      	movs	r0, #1
 8006a90:	f001 f9b4 	bl	8007dfc <HAL_RCCEx_GetPeriphCLKFreq>
 8006a94:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a9e:	d125      	bne.n	8006aec <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d010      	beq.n	8006aca <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	461a      	mov	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac4:	3305      	adds	r3, #5
 8006ac6:	613b      	str	r3, [r7, #16]
 8006ac8:	e01f      	b.n	8006b0a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	00db      	lsls	r3, r3, #3
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	005b      	lsls	r3, r3, #1
 8006adc:	461a      	mov	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ae6:	3305      	adds	r3, #5
 8006ae8:	613b      	str	r3, [r7, #16]
 8006aea:	e00e      	b.n	8006b0a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	fbb2 f2f3 	udiv	r2, r2, r3
 8006af4:	4613      	mov	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	005b      	lsls	r3, r3, #1
 8006afc:	461a      	mov	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b06:	3305      	adds	r3, #5
 8006b08:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	4a5c      	ldr	r2, [pc, #368]	; (8006c80 <HAL_I2S_Init+0x270>)
 8006b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b12:	08db      	lsrs	r3, r3, #3
 8006b14:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f003 0301 	and.w	r3, r3, #1
 8006b1c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	085b      	lsrs	r3, r3, #1
 8006b26:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	021b      	lsls	r3, r3, #8
 8006b2c:	61bb      	str	r3, [r7, #24]
 8006b2e:	e003      	b.n	8006b38 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006b30:	2302      	movs	r3, #2
 8006b32:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006b34:	2300      	movs	r3, #0
 8006b36:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d902      	bls.n	8006b44 <HAL_I2S_Init+0x134>
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	2bff      	cmp	r3, #255	; 0xff
 8006b42:	d907      	bls.n	8006b54 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b48:	f043 0210 	orr.w	r2, r3, #16
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e08f      	b.n	8006c74 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	691a      	ldr	r2, [r3, #16]
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	ea42 0103 	orr.w	r1, r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	69fa      	ldr	r2, [r7, #28]
 8006b64:	430a      	orrs	r2, r1
 8006b66:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006b72:	f023 030f 	bic.w	r3, r3, #15
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	6851      	ldr	r1, [r2, #4]
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	6892      	ldr	r2, [r2, #8]
 8006b7e:	4311      	orrs	r1, r2
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	68d2      	ldr	r2, [r2, #12]
 8006b84:	4311      	orrs	r1, r2
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	6992      	ldr	r2, [r2, #24]
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b96:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a1b      	ldr	r3, [r3, #32]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d161      	bne.n	8006c64 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a38      	ldr	r2, [pc, #224]	; (8006c84 <HAL_I2S_Init+0x274>)
 8006ba4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a37      	ldr	r2, [pc, #220]	; (8006c88 <HAL_I2S_Init+0x278>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d101      	bne.n	8006bb4 <HAL_I2S_Init+0x1a4>
 8006bb0:	4b36      	ldr	r3, [pc, #216]	; (8006c8c <HAL_I2S_Init+0x27c>)
 8006bb2:	e001      	b.n	8006bb8 <HAL_I2S_Init+0x1a8>
 8006bb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bb8:	69db      	ldr	r3, [r3, #28]
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	6812      	ldr	r2, [r2, #0]
 8006bbe:	4932      	ldr	r1, [pc, #200]	; (8006c88 <HAL_I2S_Init+0x278>)
 8006bc0:	428a      	cmp	r2, r1
 8006bc2:	d101      	bne.n	8006bc8 <HAL_I2S_Init+0x1b8>
 8006bc4:	4a31      	ldr	r2, [pc, #196]	; (8006c8c <HAL_I2S_Init+0x27c>)
 8006bc6:	e001      	b.n	8006bcc <HAL_I2S_Init+0x1bc>
 8006bc8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006bcc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006bd0:	f023 030f 	bic.w	r3, r3, #15
 8006bd4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a2b      	ldr	r2, [pc, #172]	; (8006c88 <HAL_I2S_Init+0x278>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d101      	bne.n	8006be4 <HAL_I2S_Init+0x1d4>
 8006be0:	4b2a      	ldr	r3, [pc, #168]	; (8006c8c <HAL_I2S_Init+0x27c>)
 8006be2:	e001      	b.n	8006be8 <HAL_I2S_Init+0x1d8>
 8006be4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006be8:	2202      	movs	r2, #2
 8006bea:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a25      	ldr	r2, [pc, #148]	; (8006c88 <HAL_I2S_Init+0x278>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d101      	bne.n	8006bfa <HAL_I2S_Init+0x1ea>
 8006bf6:	4b25      	ldr	r3, [pc, #148]	; (8006c8c <HAL_I2S_Init+0x27c>)
 8006bf8:	e001      	b.n	8006bfe <HAL_I2S_Init+0x1ee>
 8006bfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c0a:	d003      	beq.n	8006c14 <HAL_I2S_Init+0x204>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d103      	bne.n	8006c1c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006c14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c18:	613b      	str	r3, [r7, #16]
 8006c1a:	e001      	b.n	8006c20 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006c34:	4313      	orrs	r3, r2
 8006c36:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	699b      	ldr	r3, [r3, #24]
 8006c3c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	897b      	ldrh	r3, [r7, #10]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006c4c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a0d      	ldr	r2, [pc, #52]	; (8006c88 <HAL_I2S_Init+0x278>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d101      	bne.n	8006c5c <HAL_I2S_Init+0x24c>
 8006c58:	4b0c      	ldr	r3, [pc, #48]	; (8006c8c <HAL_I2S_Init+0x27c>)
 8006c5a:	e001      	b.n	8006c60 <HAL_I2S_Init+0x250>
 8006c5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c60:	897a      	ldrh	r2, [r7, #10]
 8006c62:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3720      	adds	r7, #32
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	08006d87 	.word	0x08006d87
 8006c80:	cccccccd 	.word	0xcccccccd
 8006c84:	08006e9d 	.word	0x08006e9d
 8006c88:	40003800 	.word	0x40003800
 8006c8c:	40003400 	.word	0x40003400

08006c90 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd8:	881a      	ldrh	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce4:	1c9a      	adds	r2, r3, #2
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10e      	bne.n	8006d20 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	685a      	ldr	r2, [r3, #4]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006d10:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7ff ffb8 	bl	8006c90 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006d20:	bf00      	nop
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68da      	ldr	r2, [r3, #12]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3a:	b292      	uxth	r2, r2
 8006d3c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d42:	1c9a      	adds	r2, r3, #2
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d10e      	bne.n	8006d7e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	685a      	ldr	r2, [r3, #4]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006d6e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f7ff ff93 	bl	8006ca4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006d7e:	bf00      	nop
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b086      	sub	sp, #24
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b04      	cmp	r3, #4
 8006da0:	d13a      	bne.n	8006e18 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f003 0301 	and.w	r3, r3, #1
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d109      	bne.n	8006dc0 <I2S_IRQHandler+0x3a>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db6:	2b40      	cmp	r3, #64	; 0x40
 8006db8:	d102      	bne.n	8006dc0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f7ff ffb4 	bl	8006d28 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc6:	2b40      	cmp	r3, #64	; 0x40
 8006dc8:	d126      	bne.n	8006e18 <I2S_IRQHandler+0x92>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f003 0320 	and.w	r3, r3, #32
 8006dd4:	2b20      	cmp	r3, #32
 8006dd6:	d11f      	bne.n	8006e18 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006de6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006de8:	2300      	movs	r3, #0
 8006dea:	613b      	str	r3, [r7, #16]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	613b      	str	r3, [r7, #16]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	613b      	str	r3, [r7, #16]
 8006dfc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e0a:	f043 0202 	orr.w	r2, r3, #2
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7ff ff50 	bl	8006cb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b03      	cmp	r3, #3
 8006e22:	d136      	bne.n	8006e92 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	f003 0302 	and.w	r3, r3, #2
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d109      	bne.n	8006e42 <I2S_IRQHandler+0xbc>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e38:	2b80      	cmp	r3, #128	; 0x80
 8006e3a:	d102      	bne.n	8006e42 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f7ff ff45 	bl	8006ccc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	f003 0308 	and.w	r3, r3, #8
 8006e48:	2b08      	cmp	r3, #8
 8006e4a:	d122      	bne.n	8006e92 <I2S_IRQHandler+0x10c>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f003 0320 	and.w	r3, r3, #32
 8006e56:	2b20      	cmp	r3, #32
 8006e58:	d11b      	bne.n	8006e92 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	685a      	ldr	r2, [r3, #4]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006e68:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	60fb      	str	r3, [r7, #12]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	60fb      	str	r3, [r7, #12]
 8006e76:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e84:	f043 0204 	orr.w	r2, r3, #4
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7ff ff13 	bl	8006cb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006e92:	bf00      	nop
 8006e94:	3718      	adds	r7, #24
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
	...

08006e9c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b088      	sub	sp, #32
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4aa2      	ldr	r2, [pc, #648]	; (800713c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d101      	bne.n	8006eba <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006eb6:	4ba2      	ldr	r3, [pc, #648]	; (8007140 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006eb8:	e001      	b.n	8006ebe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006eba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a9b      	ldr	r2, [pc, #620]	; (800713c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d101      	bne.n	8006ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006ed4:	4b9a      	ldr	r3, [pc, #616]	; (8007140 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006ed6:	e001      	b.n	8006edc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006ed8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ee8:	d004      	beq.n	8006ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f040 8099 	bne.w	8007026 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d107      	bne.n	8006f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d002      	beq.n	8006f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f925 	bl	8007158 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	f003 0301 	and.w	r3, r3, #1
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d107      	bne.n	8006f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d002      	beq.n	8006f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 f9c8 	bl	80072b8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2e:	2b40      	cmp	r3, #64	; 0x40
 8006f30:	d13a      	bne.n	8006fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	f003 0320 	and.w	r3, r3, #32
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d035      	beq.n	8006fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a7e      	ldr	r2, [pc, #504]	; (800713c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d101      	bne.n	8006f4a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006f46:	4b7e      	ldr	r3, [pc, #504]	; (8007140 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006f48:	e001      	b.n	8006f4e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006f4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4979      	ldr	r1, [pc, #484]	; (800713c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006f56:	428b      	cmp	r3, r1
 8006f58:	d101      	bne.n	8006f5e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006f5a:	4b79      	ldr	r3, [pc, #484]	; (8007140 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006f5c:	e001      	b.n	8006f62 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006f5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006f66:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	685a      	ldr	r2, [r3, #4]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006f76:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006f78:	2300      	movs	r3, #0
 8006f7a:	60fb      	str	r3, [r7, #12]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	60fb      	str	r3, [r7, #12]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	60fb      	str	r3, [r7, #12]
 8006f8c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2201      	movs	r2, #1
 8006f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f9a:	f043 0202 	orr.w	r2, r3, #2
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f7ff fe88 	bl	8006cb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	f003 0308 	and.w	r3, r3, #8
 8006fae:	2b08      	cmp	r3, #8
 8006fb0:	f040 80be 	bne.w	8007130 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	f003 0320 	and.w	r3, r3, #32
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f000 80b8 	beq.w	8007130 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	685a      	ldr	r2, [r3, #4]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006fce:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a59      	ldr	r2, [pc, #356]	; (800713c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d101      	bne.n	8006fde <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006fda:	4b59      	ldr	r3, [pc, #356]	; (8007140 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006fdc:	e001      	b.n	8006fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006fde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006fe2:	685a      	ldr	r2, [r3, #4]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4954      	ldr	r1, [pc, #336]	; (800713c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006fea:	428b      	cmp	r3, r1
 8006fec:	d101      	bne.n	8006ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006fee:	4b54      	ldr	r3, [pc, #336]	; (8007140 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006ff0:	e001      	b.n	8006ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006ff2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ff6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006ffa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	60bb      	str	r3, [r7, #8]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	60bb      	str	r3, [r7, #8]
 8007008:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2201      	movs	r2, #1
 800700e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007016:	f043 0204 	orr.w	r2, r3, #4
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7ff fe4a 	bl	8006cb8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007024:	e084      	b.n	8007130 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	f003 0302 	and.w	r3, r3, #2
 800702c:	2b02      	cmp	r3, #2
 800702e:	d107      	bne.n	8007040 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007036:	2b00      	cmp	r3, #0
 8007038:	d002      	beq.n	8007040 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f8be 	bl	80071bc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b01      	cmp	r3, #1
 8007048:	d107      	bne.n	800705a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007050:	2b00      	cmp	r3, #0
 8007052:	d002      	beq.n	800705a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 f8fd 	bl	8007254 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007060:	2b40      	cmp	r3, #64	; 0x40
 8007062:	d12f      	bne.n	80070c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	f003 0320 	and.w	r3, r3, #32
 800706a:	2b00      	cmp	r3, #0
 800706c:	d02a      	beq.n	80070c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800707c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a2e      	ldr	r2, [pc, #184]	; (800713c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d101      	bne.n	800708c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007088:	4b2d      	ldr	r3, [pc, #180]	; (8007140 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800708a:	e001      	b.n	8007090 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800708c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4929      	ldr	r1, [pc, #164]	; (800713c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007098:	428b      	cmp	r3, r1
 800709a:	d101      	bne.n	80070a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800709c:	4b28      	ldr	r3, [pc, #160]	; (8007140 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800709e:	e001      	b.n	80070a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80070a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80070a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80070a8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b6:	f043 0202 	orr.w	r2, r3, #2
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f7ff fdfa 	bl	8006cb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	f003 0308 	and.w	r3, r3, #8
 80070ca:	2b08      	cmp	r3, #8
 80070cc:	d131      	bne.n	8007132 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	f003 0320 	and.w	r3, r3, #32
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d02c      	beq.n	8007132 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a17      	ldr	r2, [pc, #92]	; (800713c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d101      	bne.n	80070e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80070e2:	4b17      	ldr	r3, [pc, #92]	; (8007140 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80070e4:	e001      	b.n	80070ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80070e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4912      	ldr	r1, [pc, #72]	; (800713c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80070f2:	428b      	cmp	r3, r1
 80070f4:	d101      	bne.n	80070fa <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80070f6:	4b12      	ldr	r3, [pc, #72]	; (8007140 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80070f8:	e001      	b.n	80070fe <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80070fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80070fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007102:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	685a      	ldr	r2, [r3, #4]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007112:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007120:	f043 0204 	orr.w	r2, r3, #4
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7ff fdc5 	bl	8006cb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800712e:	e000      	b.n	8007132 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007130:	bf00      	nop
}
 8007132:	bf00      	nop
 8007134:	3720      	adds	r7, #32
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	40003800 	.word	0x40003800
 8007140:	40003400 	.word	0x40003400

08007144 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007164:	1c99      	adds	r1, r3, #2
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	6251      	str	r1, [r2, #36]	; 0x24
 800716a:	881a      	ldrh	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007176:	b29b      	uxth	r3, r3
 8007178:	3b01      	subs	r3, #1
 800717a:	b29a      	uxth	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007184:	b29b      	uxth	r3, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	d113      	bne.n	80071b2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	685a      	ldr	r2, [r3, #4]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007198:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800719e:	b29b      	uxth	r3, r3
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d106      	bne.n	80071b2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7ff ffc9 	bl	8007144 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80071b2:	bf00      	nop
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
	...

080071bc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c8:	1c99      	adds	r1, r3, #2
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	6251      	str	r1, [r2, #36]	; 0x24
 80071ce:	8819      	ldrh	r1, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a1d      	ldr	r2, [pc, #116]	; (800724c <I2SEx_TxISR_I2SExt+0x90>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d101      	bne.n	80071de <I2SEx_TxISR_I2SExt+0x22>
 80071da:	4b1d      	ldr	r3, [pc, #116]	; (8007250 <I2SEx_TxISR_I2SExt+0x94>)
 80071dc:	e001      	b.n	80071e2 <I2SEx_TxISR_I2SExt+0x26>
 80071de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071e2:	460a      	mov	r2, r1
 80071e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	3b01      	subs	r3, #1
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d121      	bne.n	8007242 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a12      	ldr	r2, [pc, #72]	; (800724c <I2SEx_TxISR_I2SExt+0x90>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d101      	bne.n	800720c <I2SEx_TxISR_I2SExt+0x50>
 8007208:	4b11      	ldr	r3, [pc, #68]	; (8007250 <I2SEx_TxISR_I2SExt+0x94>)
 800720a:	e001      	b.n	8007210 <I2SEx_TxISR_I2SExt+0x54>
 800720c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	490d      	ldr	r1, [pc, #52]	; (800724c <I2SEx_TxISR_I2SExt+0x90>)
 8007218:	428b      	cmp	r3, r1
 800721a:	d101      	bne.n	8007220 <I2SEx_TxISR_I2SExt+0x64>
 800721c:	4b0c      	ldr	r3, [pc, #48]	; (8007250 <I2SEx_TxISR_I2SExt+0x94>)
 800721e:	e001      	b.n	8007224 <I2SEx_TxISR_I2SExt+0x68>
 8007220:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007224:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007228:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800722e:	b29b      	uxth	r3, r3
 8007230:	2b00      	cmp	r3, #0
 8007232:	d106      	bne.n	8007242 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f7ff ff81 	bl	8007144 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007242:	bf00      	nop
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	40003800 	.word	0x40003800
 8007250:	40003400 	.word	0x40003400

08007254 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68d8      	ldr	r0, [r3, #12]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007266:	1c99      	adds	r1, r3, #2
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800726c:	b282      	uxth	r2, r0
 800726e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007274:	b29b      	uxth	r3, r3
 8007276:	3b01      	subs	r3, #1
 8007278:	b29a      	uxth	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007282:	b29b      	uxth	r3, r3
 8007284:	2b00      	cmp	r3, #0
 8007286:	d113      	bne.n	80072b0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	685a      	ldr	r2, [r3, #4]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007296:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800729c:	b29b      	uxth	r3, r3
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d106      	bne.n	80072b0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f7ff ff4a 	bl	8007144 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80072b0:	bf00      	nop
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a20      	ldr	r2, [pc, #128]	; (8007348 <I2SEx_RxISR_I2SExt+0x90>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d101      	bne.n	80072ce <I2SEx_RxISR_I2SExt+0x16>
 80072ca:	4b20      	ldr	r3, [pc, #128]	; (800734c <I2SEx_RxISR_I2SExt+0x94>)
 80072cc:	e001      	b.n	80072d2 <I2SEx_RxISR_I2SExt+0x1a>
 80072ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072d2:	68d8      	ldr	r0, [r3, #12]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d8:	1c99      	adds	r1, r3, #2
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80072de:	b282      	uxth	r2, r0
 80072e0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	3b01      	subs	r3, #1
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d121      	bne.n	800733e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a12      	ldr	r2, [pc, #72]	; (8007348 <I2SEx_RxISR_I2SExt+0x90>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d101      	bne.n	8007308 <I2SEx_RxISR_I2SExt+0x50>
 8007304:	4b11      	ldr	r3, [pc, #68]	; (800734c <I2SEx_RxISR_I2SExt+0x94>)
 8007306:	e001      	b.n	800730c <I2SEx_RxISR_I2SExt+0x54>
 8007308:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800730c:	685a      	ldr	r2, [r3, #4]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	490d      	ldr	r1, [pc, #52]	; (8007348 <I2SEx_RxISR_I2SExt+0x90>)
 8007314:	428b      	cmp	r3, r1
 8007316:	d101      	bne.n	800731c <I2SEx_RxISR_I2SExt+0x64>
 8007318:	4b0c      	ldr	r3, [pc, #48]	; (800734c <I2SEx_RxISR_I2SExt+0x94>)
 800731a:	e001      	b.n	8007320 <I2SEx_RxISR_I2SExt+0x68>
 800731c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007320:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007324:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800732a:	b29b      	uxth	r3, r3
 800732c:	2b00      	cmp	r3, #0
 800732e:	d106      	bne.n	800733e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f7ff ff03 	bl	8007144 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800733e:	bf00      	nop
 8007340:	3708      	adds	r7, #8
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	40003800 	.word	0x40003800
 800734c:	40003400 	.word	0x40003400

08007350 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d101      	bne.n	8007362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e264      	b.n	800782c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 0301 	and.w	r3, r3, #1
 800736a:	2b00      	cmp	r3, #0
 800736c:	d075      	beq.n	800745a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800736e:	4ba3      	ldr	r3, [pc, #652]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	f003 030c 	and.w	r3, r3, #12
 8007376:	2b04      	cmp	r3, #4
 8007378:	d00c      	beq.n	8007394 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800737a:	4ba0      	ldr	r3, [pc, #640]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007382:	2b08      	cmp	r3, #8
 8007384:	d112      	bne.n	80073ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007386:	4b9d      	ldr	r3, [pc, #628]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800738e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007392:	d10b      	bne.n	80073ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007394:	4b99      	ldr	r3, [pc, #612]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d05b      	beq.n	8007458 <HAL_RCC_OscConfig+0x108>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d157      	bne.n	8007458 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e23f      	b.n	800782c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073b4:	d106      	bne.n	80073c4 <HAL_RCC_OscConfig+0x74>
 80073b6:	4b91      	ldr	r3, [pc, #580]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a90      	ldr	r2, [pc, #576]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 80073bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073c0:	6013      	str	r3, [r2, #0]
 80073c2:	e01d      	b.n	8007400 <HAL_RCC_OscConfig+0xb0>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80073cc:	d10c      	bne.n	80073e8 <HAL_RCC_OscConfig+0x98>
 80073ce:	4b8b      	ldr	r3, [pc, #556]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a8a      	ldr	r2, [pc, #552]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 80073d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073d8:	6013      	str	r3, [r2, #0]
 80073da:	4b88      	ldr	r3, [pc, #544]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a87      	ldr	r2, [pc, #540]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 80073e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073e4:	6013      	str	r3, [r2, #0]
 80073e6:	e00b      	b.n	8007400 <HAL_RCC_OscConfig+0xb0>
 80073e8:	4b84      	ldr	r3, [pc, #528]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a83      	ldr	r2, [pc, #524]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 80073ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073f2:	6013      	str	r3, [r2, #0]
 80073f4:	4b81      	ldr	r3, [pc, #516]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a80      	ldr	r2, [pc, #512]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 80073fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d013      	beq.n	8007430 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007408:	f7fc fe26 	bl	8004058 <HAL_GetTick>
 800740c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800740e:	e008      	b.n	8007422 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007410:	f7fc fe22 	bl	8004058 <HAL_GetTick>
 8007414:	4602      	mov	r2, r0
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	2b64      	cmp	r3, #100	; 0x64
 800741c:	d901      	bls.n	8007422 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	e204      	b.n	800782c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007422:	4b76      	ldr	r3, [pc, #472]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800742a:	2b00      	cmp	r3, #0
 800742c:	d0f0      	beq.n	8007410 <HAL_RCC_OscConfig+0xc0>
 800742e:	e014      	b.n	800745a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007430:	f7fc fe12 	bl	8004058 <HAL_GetTick>
 8007434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007436:	e008      	b.n	800744a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007438:	f7fc fe0e 	bl	8004058 <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	2b64      	cmp	r3, #100	; 0x64
 8007444:	d901      	bls.n	800744a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e1f0      	b.n	800782c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800744a:	4b6c      	ldr	r3, [pc, #432]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1f0      	bne.n	8007438 <HAL_RCC_OscConfig+0xe8>
 8007456:	e000      	b.n	800745a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 0302 	and.w	r3, r3, #2
 8007462:	2b00      	cmp	r3, #0
 8007464:	d063      	beq.n	800752e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007466:	4b65      	ldr	r3, [pc, #404]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	f003 030c 	and.w	r3, r3, #12
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00b      	beq.n	800748a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007472:	4b62      	ldr	r3, [pc, #392]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800747a:	2b08      	cmp	r3, #8
 800747c:	d11c      	bne.n	80074b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800747e:	4b5f      	ldr	r3, [pc, #380]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d116      	bne.n	80074b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800748a:	4b5c      	ldr	r3, [pc, #368]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 0302 	and.w	r3, r3, #2
 8007492:	2b00      	cmp	r3, #0
 8007494:	d005      	beq.n	80074a2 <HAL_RCC_OscConfig+0x152>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d001      	beq.n	80074a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e1c4      	b.n	800782c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074a2:	4b56      	ldr	r3, [pc, #344]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	00db      	lsls	r3, r3, #3
 80074b0:	4952      	ldr	r1, [pc, #328]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074b6:	e03a      	b.n	800752e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d020      	beq.n	8007502 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074c0:	4b4f      	ldr	r3, [pc, #316]	; (8007600 <HAL_RCC_OscConfig+0x2b0>)
 80074c2:	2201      	movs	r2, #1
 80074c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074c6:	f7fc fdc7 	bl	8004058 <HAL_GetTick>
 80074ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074cc:	e008      	b.n	80074e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074ce:	f7fc fdc3 	bl	8004058 <HAL_GetTick>
 80074d2:	4602      	mov	r2, r0
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d901      	bls.n	80074e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	e1a5      	b.n	800782c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074e0:	4b46      	ldr	r3, [pc, #280]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d0f0      	beq.n	80074ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074ec:	4b43      	ldr	r3, [pc, #268]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	00db      	lsls	r3, r3, #3
 80074fa:	4940      	ldr	r1, [pc, #256]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	600b      	str	r3, [r1, #0]
 8007500:	e015      	b.n	800752e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007502:	4b3f      	ldr	r3, [pc, #252]	; (8007600 <HAL_RCC_OscConfig+0x2b0>)
 8007504:	2200      	movs	r2, #0
 8007506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007508:	f7fc fda6 	bl	8004058 <HAL_GetTick>
 800750c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800750e:	e008      	b.n	8007522 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007510:	f7fc fda2 	bl	8004058 <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	2b02      	cmp	r3, #2
 800751c:	d901      	bls.n	8007522 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e184      	b.n	800782c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007522:	4b36      	ldr	r3, [pc, #216]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 0302 	and.w	r3, r3, #2
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1f0      	bne.n	8007510 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 0308 	and.w	r3, r3, #8
 8007536:	2b00      	cmp	r3, #0
 8007538:	d030      	beq.n	800759c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d016      	beq.n	8007570 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007542:	4b30      	ldr	r3, [pc, #192]	; (8007604 <HAL_RCC_OscConfig+0x2b4>)
 8007544:	2201      	movs	r2, #1
 8007546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007548:	f7fc fd86 	bl	8004058 <HAL_GetTick>
 800754c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800754e:	e008      	b.n	8007562 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007550:	f7fc fd82 	bl	8004058 <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	2b02      	cmp	r3, #2
 800755c:	d901      	bls.n	8007562 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e164      	b.n	800782c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007562:	4b26      	ldr	r3, [pc, #152]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 8007564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007566:	f003 0302 	and.w	r3, r3, #2
 800756a:	2b00      	cmp	r3, #0
 800756c:	d0f0      	beq.n	8007550 <HAL_RCC_OscConfig+0x200>
 800756e:	e015      	b.n	800759c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007570:	4b24      	ldr	r3, [pc, #144]	; (8007604 <HAL_RCC_OscConfig+0x2b4>)
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007576:	f7fc fd6f 	bl	8004058 <HAL_GetTick>
 800757a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800757c:	e008      	b.n	8007590 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800757e:	f7fc fd6b 	bl	8004058 <HAL_GetTick>
 8007582:	4602      	mov	r2, r0
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	2b02      	cmp	r3, #2
 800758a:	d901      	bls.n	8007590 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800758c:	2303      	movs	r3, #3
 800758e:	e14d      	b.n	800782c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007590:	4b1a      	ldr	r3, [pc, #104]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 8007592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007594:	f003 0302 	and.w	r3, r3, #2
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1f0      	bne.n	800757e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 0304 	and.w	r3, r3, #4
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f000 80a0 	beq.w	80076ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075aa:	2300      	movs	r3, #0
 80075ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075ae:	4b13      	ldr	r3, [pc, #76]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 80075b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10f      	bne.n	80075da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075ba:	2300      	movs	r3, #0
 80075bc:	60bb      	str	r3, [r7, #8]
 80075be:	4b0f      	ldr	r3, [pc, #60]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 80075c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c2:	4a0e      	ldr	r2, [pc, #56]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 80075c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075c8:	6413      	str	r3, [r2, #64]	; 0x40
 80075ca:	4b0c      	ldr	r3, [pc, #48]	; (80075fc <HAL_RCC_OscConfig+0x2ac>)
 80075cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075d2:	60bb      	str	r3, [r7, #8]
 80075d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075d6:	2301      	movs	r3, #1
 80075d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075da:	4b0b      	ldr	r3, [pc, #44]	; (8007608 <HAL_RCC_OscConfig+0x2b8>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d121      	bne.n	800762a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075e6:	4b08      	ldr	r3, [pc, #32]	; (8007608 <HAL_RCC_OscConfig+0x2b8>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a07      	ldr	r2, [pc, #28]	; (8007608 <HAL_RCC_OscConfig+0x2b8>)
 80075ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075f2:	f7fc fd31 	bl	8004058 <HAL_GetTick>
 80075f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075f8:	e011      	b.n	800761e <HAL_RCC_OscConfig+0x2ce>
 80075fa:	bf00      	nop
 80075fc:	40023800 	.word	0x40023800
 8007600:	42470000 	.word	0x42470000
 8007604:	42470e80 	.word	0x42470e80
 8007608:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800760c:	f7fc fd24 	bl	8004058 <HAL_GetTick>
 8007610:	4602      	mov	r2, r0
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	2b02      	cmp	r3, #2
 8007618:	d901      	bls.n	800761e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800761a:	2303      	movs	r3, #3
 800761c:	e106      	b.n	800782c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800761e:	4b85      	ldr	r3, [pc, #532]	; (8007834 <HAL_RCC_OscConfig+0x4e4>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007626:	2b00      	cmp	r3, #0
 8007628:	d0f0      	beq.n	800760c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	2b01      	cmp	r3, #1
 8007630:	d106      	bne.n	8007640 <HAL_RCC_OscConfig+0x2f0>
 8007632:	4b81      	ldr	r3, [pc, #516]	; (8007838 <HAL_RCC_OscConfig+0x4e8>)
 8007634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007636:	4a80      	ldr	r2, [pc, #512]	; (8007838 <HAL_RCC_OscConfig+0x4e8>)
 8007638:	f043 0301 	orr.w	r3, r3, #1
 800763c:	6713      	str	r3, [r2, #112]	; 0x70
 800763e:	e01c      	b.n	800767a <HAL_RCC_OscConfig+0x32a>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	2b05      	cmp	r3, #5
 8007646:	d10c      	bne.n	8007662 <HAL_RCC_OscConfig+0x312>
 8007648:	4b7b      	ldr	r3, [pc, #492]	; (8007838 <HAL_RCC_OscConfig+0x4e8>)
 800764a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800764c:	4a7a      	ldr	r2, [pc, #488]	; (8007838 <HAL_RCC_OscConfig+0x4e8>)
 800764e:	f043 0304 	orr.w	r3, r3, #4
 8007652:	6713      	str	r3, [r2, #112]	; 0x70
 8007654:	4b78      	ldr	r3, [pc, #480]	; (8007838 <HAL_RCC_OscConfig+0x4e8>)
 8007656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007658:	4a77      	ldr	r2, [pc, #476]	; (8007838 <HAL_RCC_OscConfig+0x4e8>)
 800765a:	f043 0301 	orr.w	r3, r3, #1
 800765e:	6713      	str	r3, [r2, #112]	; 0x70
 8007660:	e00b      	b.n	800767a <HAL_RCC_OscConfig+0x32a>
 8007662:	4b75      	ldr	r3, [pc, #468]	; (8007838 <HAL_RCC_OscConfig+0x4e8>)
 8007664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007666:	4a74      	ldr	r2, [pc, #464]	; (8007838 <HAL_RCC_OscConfig+0x4e8>)
 8007668:	f023 0301 	bic.w	r3, r3, #1
 800766c:	6713      	str	r3, [r2, #112]	; 0x70
 800766e:	4b72      	ldr	r3, [pc, #456]	; (8007838 <HAL_RCC_OscConfig+0x4e8>)
 8007670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007672:	4a71      	ldr	r2, [pc, #452]	; (8007838 <HAL_RCC_OscConfig+0x4e8>)
 8007674:	f023 0304 	bic.w	r3, r3, #4
 8007678:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d015      	beq.n	80076ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007682:	f7fc fce9 	bl	8004058 <HAL_GetTick>
 8007686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007688:	e00a      	b.n	80076a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800768a:	f7fc fce5 	bl	8004058 <HAL_GetTick>
 800768e:	4602      	mov	r2, r0
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	f241 3288 	movw	r2, #5000	; 0x1388
 8007698:	4293      	cmp	r3, r2
 800769a:	d901      	bls.n	80076a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800769c:	2303      	movs	r3, #3
 800769e:	e0c5      	b.n	800782c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076a0:	4b65      	ldr	r3, [pc, #404]	; (8007838 <HAL_RCC_OscConfig+0x4e8>)
 80076a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076a4:	f003 0302 	and.w	r3, r3, #2
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d0ee      	beq.n	800768a <HAL_RCC_OscConfig+0x33a>
 80076ac:	e014      	b.n	80076d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076ae:	f7fc fcd3 	bl	8004058 <HAL_GetTick>
 80076b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076b4:	e00a      	b.n	80076cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80076b6:	f7fc fccf 	bl	8004058 <HAL_GetTick>
 80076ba:	4602      	mov	r2, r0
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d901      	bls.n	80076cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80076c8:	2303      	movs	r3, #3
 80076ca:	e0af      	b.n	800782c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076cc:	4b5a      	ldr	r3, [pc, #360]	; (8007838 <HAL_RCC_OscConfig+0x4e8>)
 80076ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076d0:	f003 0302 	and.w	r3, r3, #2
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d1ee      	bne.n	80076b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80076d8:	7dfb      	ldrb	r3, [r7, #23]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d105      	bne.n	80076ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076de:	4b56      	ldr	r3, [pc, #344]	; (8007838 <HAL_RCC_OscConfig+0x4e8>)
 80076e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e2:	4a55      	ldr	r2, [pc, #340]	; (8007838 <HAL_RCC_OscConfig+0x4e8>)
 80076e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f000 809b 	beq.w	800782a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80076f4:	4b50      	ldr	r3, [pc, #320]	; (8007838 <HAL_RCC_OscConfig+0x4e8>)
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f003 030c 	and.w	r3, r3, #12
 80076fc:	2b08      	cmp	r3, #8
 80076fe:	d05c      	beq.n	80077ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	2b02      	cmp	r3, #2
 8007706:	d141      	bne.n	800778c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007708:	4b4c      	ldr	r3, [pc, #304]	; (800783c <HAL_RCC_OscConfig+0x4ec>)
 800770a:	2200      	movs	r2, #0
 800770c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800770e:	f7fc fca3 	bl	8004058 <HAL_GetTick>
 8007712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007714:	e008      	b.n	8007728 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007716:	f7fc fc9f 	bl	8004058 <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	2b02      	cmp	r3, #2
 8007722:	d901      	bls.n	8007728 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e081      	b.n	800782c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007728:	4b43      	ldr	r3, [pc, #268]	; (8007838 <HAL_RCC_OscConfig+0x4e8>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007730:	2b00      	cmp	r3, #0
 8007732:	d1f0      	bne.n	8007716 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	69da      	ldr	r2, [r3, #28]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a1b      	ldr	r3, [r3, #32]
 800773c:	431a      	orrs	r2, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007742:	019b      	lsls	r3, r3, #6
 8007744:	431a      	orrs	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774a:	085b      	lsrs	r3, r3, #1
 800774c:	3b01      	subs	r3, #1
 800774e:	041b      	lsls	r3, r3, #16
 8007750:	431a      	orrs	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007756:	061b      	lsls	r3, r3, #24
 8007758:	4937      	ldr	r1, [pc, #220]	; (8007838 <HAL_RCC_OscConfig+0x4e8>)
 800775a:	4313      	orrs	r3, r2
 800775c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800775e:	4b37      	ldr	r3, [pc, #220]	; (800783c <HAL_RCC_OscConfig+0x4ec>)
 8007760:	2201      	movs	r2, #1
 8007762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007764:	f7fc fc78 	bl	8004058 <HAL_GetTick>
 8007768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800776a:	e008      	b.n	800777e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800776c:	f7fc fc74 	bl	8004058 <HAL_GetTick>
 8007770:	4602      	mov	r2, r0
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	2b02      	cmp	r3, #2
 8007778:	d901      	bls.n	800777e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	e056      	b.n	800782c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800777e:	4b2e      	ldr	r3, [pc, #184]	; (8007838 <HAL_RCC_OscConfig+0x4e8>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d0f0      	beq.n	800776c <HAL_RCC_OscConfig+0x41c>
 800778a:	e04e      	b.n	800782a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800778c:	4b2b      	ldr	r3, [pc, #172]	; (800783c <HAL_RCC_OscConfig+0x4ec>)
 800778e:	2200      	movs	r2, #0
 8007790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007792:	f7fc fc61 	bl	8004058 <HAL_GetTick>
 8007796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007798:	e008      	b.n	80077ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800779a:	f7fc fc5d 	bl	8004058 <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d901      	bls.n	80077ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e03f      	b.n	800782c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077ac:	4b22      	ldr	r3, [pc, #136]	; (8007838 <HAL_RCC_OscConfig+0x4e8>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1f0      	bne.n	800779a <HAL_RCC_OscConfig+0x44a>
 80077b8:	e037      	b.n	800782a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d101      	bne.n	80077c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e032      	b.n	800782c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80077c6:	4b1c      	ldr	r3, [pc, #112]	; (8007838 <HAL_RCC_OscConfig+0x4e8>)
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d028      	beq.n	8007826 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077de:	429a      	cmp	r2, r3
 80077e0:	d121      	bne.n	8007826 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d11a      	bne.n	8007826 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80077f6:	4013      	ands	r3, r2
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80077fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80077fe:	4293      	cmp	r3, r2
 8007800:	d111      	bne.n	8007826 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780c:	085b      	lsrs	r3, r3, #1
 800780e:	3b01      	subs	r3, #1
 8007810:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007812:	429a      	cmp	r2, r3
 8007814:	d107      	bne.n	8007826 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007820:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007822:	429a      	cmp	r2, r3
 8007824:	d001      	beq.n	800782a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e000      	b.n	800782c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3718      	adds	r7, #24
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	40007000 	.word	0x40007000
 8007838:	40023800 	.word	0x40023800
 800783c:	42470060 	.word	0x42470060

08007840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	e0cc      	b.n	80079ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007854:	4b68      	ldr	r3, [pc, #416]	; (80079f8 <HAL_RCC_ClockConfig+0x1b8>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 0307 	and.w	r3, r3, #7
 800785c:	683a      	ldr	r2, [r7, #0]
 800785e:	429a      	cmp	r2, r3
 8007860:	d90c      	bls.n	800787c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007862:	4b65      	ldr	r3, [pc, #404]	; (80079f8 <HAL_RCC_ClockConfig+0x1b8>)
 8007864:	683a      	ldr	r2, [r7, #0]
 8007866:	b2d2      	uxtb	r2, r2
 8007868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800786a:	4b63      	ldr	r3, [pc, #396]	; (80079f8 <HAL_RCC_ClockConfig+0x1b8>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0307 	and.w	r3, r3, #7
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	429a      	cmp	r2, r3
 8007876:	d001      	beq.n	800787c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e0b8      	b.n	80079ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0302 	and.w	r3, r3, #2
 8007884:	2b00      	cmp	r3, #0
 8007886:	d020      	beq.n	80078ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0304 	and.w	r3, r3, #4
 8007890:	2b00      	cmp	r3, #0
 8007892:	d005      	beq.n	80078a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007894:	4b59      	ldr	r3, [pc, #356]	; (80079fc <HAL_RCC_ClockConfig+0x1bc>)
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	4a58      	ldr	r2, [pc, #352]	; (80079fc <HAL_RCC_ClockConfig+0x1bc>)
 800789a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800789e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 0308 	and.w	r3, r3, #8
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d005      	beq.n	80078b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80078ac:	4b53      	ldr	r3, [pc, #332]	; (80079fc <HAL_RCC_ClockConfig+0x1bc>)
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	4a52      	ldr	r2, [pc, #328]	; (80079fc <HAL_RCC_ClockConfig+0x1bc>)
 80078b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80078b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078b8:	4b50      	ldr	r3, [pc, #320]	; (80079fc <HAL_RCC_ClockConfig+0x1bc>)
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	494d      	ldr	r1, [pc, #308]	; (80079fc <HAL_RCC_ClockConfig+0x1bc>)
 80078c6:	4313      	orrs	r3, r2
 80078c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d044      	beq.n	8007960 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d107      	bne.n	80078ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078de:	4b47      	ldr	r3, [pc, #284]	; (80079fc <HAL_RCC_ClockConfig+0x1bc>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d119      	bne.n	800791e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e07f      	b.n	80079ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d003      	beq.n	80078fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80078fa:	2b03      	cmp	r3, #3
 80078fc:	d107      	bne.n	800790e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078fe:	4b3f      	ldr	r3, [pc, #252]	; (80079fc <HAL_RCC_ClockConfig+0x1bc>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d109      	bne.n	800791e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e06f      	b.n	80079ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800790e:	4b3b      	ldr	r3, [pc, #236]	; (80079fc <HAL_RCC_ClockConfig+0x1bc>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 0302 	and.w	r3, r3, #2
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e067      	b.n	80079ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800791e:	4b37      	ldr	r3, [pc, #220]	; (80079fc <HAL_RCC_ClockConfig+0x1bc>)
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	f023 0203 	bic.w	r2, r3, #3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	4934      	ldr	r1, [pc, #208]	; (80079fc <HAL_RCC_ClockConfig+0x1bc>)
 800792c:	4313      	orrs	r3, r2
 800792e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007930:	f7fc fb92 	bl	8004058 <HAL_GetTick>
 8007934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007936:	e00a      	b.n	800794e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007938:	f7fc fb8e 	bl	8004058 <HAL_GetTick>
 800793c:	4602      	mov	r2, r0
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	f241 3288 	movw	r2, #5000	; 0x1388
 8007946:	4293      	cmp	r3, r2
 8007948:	d901      	bls.n	800794e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	e04f      	b.n	80079ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800794e:	4b2b      	ldr	r3, [pc, #172]	; (80079fc <HAL_RCC_ClockConfig+0x1bc>)
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f003 020c 	and.w	r2, r3, #12
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	429a      	cmp	r2, r3
 800795e:	d1eb      	bne.n	8007938 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007960:	4b25      	ldr	r3, [pc, #148]	; (80079f8 <HAL_RCC_ClockConfig+0x1b8>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 0307 	and.w	r3, r3, #7
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	429a      	cmp	r2, r3
 800796c:	d20c      	bcs.n	8007988 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800796e:	4b22      	ldr	r3, [pc, #136]	; (80079f8 <HAL_RCC_ClockConfig+0x1b8>)
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	b2d2      	uxtb	r2, r2
 8007974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007976:	4b20      	ldr	r3, [pc, #128]	; (80079f8 <HAL_RCC_ClockConfig+0x1b8>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 0307 	and.w	r3, r3, #7
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	429a      	cmp	r2, r3
 8007982:	d001      	beq.n	8007988 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e032      	b.n	80079ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0304 	and.w	r3, r3, #4
 8007990:	2b00      	cmp	r3, #0
 8007992:	d008      	beq.n	80079a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007994:	4b19      	ldr	r3, [pc, #100]	; (80079fc <HAL_RCC_ClockConfig+0x1bc>)
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	4916      	ldr	r1, [pc, #88]	; (80079fc <HAL_RCC_ClockConfig+0x1bc>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0308 	and.w	r3, r3, #8
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d009      	beq.n	80079c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80079b2:	4b12      	ldr	r3, [pc, #72]	; (80079fc <HAL_RCC_ClockConfig+0x1bc>)
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	00db      	lsls	r3, r3, #3
 80079c0:	490e      	ldr	r1, [pc, #56]	; (80079fc <HAL_RCC_ClockConfig+0x1bc>)
 80079c2:	4313      	orrs	r3, r2
 80079c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80079c6:	f000 f821 	bl	8007a0c <HAL_RCC_GetSysClockFreq>
 80079ca:	4602      	mov	r2, r0
 80079cc:	4b0b      	ldr	r3, [pc, #44]	; (80079fc <HAL_RCC_ClockConfig+0x1bc>)
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	091b      	lsrs	r3, r3, #4
 80079d2:	f003 030f 	and.w	r3, r3, #15
 80079d6:	490a      	ldr	r1, [pc, #40]	; (8007a00 <HAL_RCC_ClockConfig+0x1c0>)
 80079d8:	5ccb      	ldrb	r3, [r1, r3]
 80079da:	fa22 f303 	lsr.w	r3, r2, r3
 80079de:	4a09      	ldr	r2, [pc, #36]	; (8007a04 <HAL_RCC_ClockConfig+0x1c4>)
 80079e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80079e2:	4b09      	ldr	r3, [pc, #36]	; (8007a08 <HAL_RCC_ClockConfig+0x1c8>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fc faf2 	bl	8003fd0 <HAL_InitTick>

  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	40023c00 	.word	0x40023c00
 80079fc:	40023800 	.word	0x40023800
 8007a00:	0800ffd4 	.word	0x0800ffd4
 8007a04:	20000018 	.word	0x20000018
 8007a08:	2000001c 	.word	0x2000001c

08007a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007a10:	b084      	sub	sp, #16
 8007a12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007a14:	2300      	movs	r3, #0
 8007a16:	607b      	str	r3, [r7, #4]
 8007a18:	2300      	movs	r3, #0
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007a20:	2300      	movs	r3, #0
 8007a22:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a24:	4b67      	ldr	r3, [pc, #412]	; (8007bc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	f003 030c 	and.w	r3, r3, #12
 8007a2c:	2b08      	cmp	r3, #8
 8007a2e:	d00d      	beq.n	8007a4c <HAL_RCC_GetSysClockFreq+0x40>
 8007a30:	2b08      	cmp	r3, #8
 8007a32:	f200 80bd 	bhi.w	8007bb0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d002      	beq.n	8007a40 <HAL_RCC_GetSysClockFreq+0x34>
 8007a3a:	2b04      	cmp	r3, #4
 8007a3c:	d003      	beq.n	8007a46 <HAL_RCC_GetSysClockFreq+0x3a>
 8007a3e:	e0b7      	b.n	8007bb0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007a40:	4b61      	ldr	r3, [pc, #388]	; (8007bc8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007a42:	60bb      	str	r3, [r7, #8]
       break;
 8007a44:	e0b7      	b.n	8007bb6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007a46:	4b61      	ldr	r3, [pc, #388]	; (8007bcc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007a48:	60bb      	str	r3, [r7, #8]
      break;
 8007a4a:	e0b4      	b.n	8007bb6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a4c:	4b5d      	ldr	r3, [pc, #372]	; (8007bc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a54:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007a56:	4b5b      	ldr	r3, [pc, #364]	; (8007bc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d04d      	beq.n	8007afe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a62:	4b58      	ldr	r3, [pc, #352]	; (8007bc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	099b      	lsrs	r3, r3, #6
 8007a68:	461a      	mov	r2, r3
 8007a6a:	f04f 0300 	mov.w	r3, #0
 8007a6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007a72:	f04f 0100 	mov.w	r1, #0
 8007a76:	ea02 0800 	and.w	r8, r2, r0
 8007a7a:	ea03 0901 	and.w	r9, r3, r1
 8007a7e:	4640      	mov	r0, r8
 8007a80:	4649      	mov	r1, r9
 8007a82:	f04f 0200 	mov.w	r2, #0
 8007a86:	f04f 0300 	mov.w	r3, #0
 8007a8a:	014b      	lsls	r3, r1, #5
 8007a8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007a90:	0142      	lsls	r2, r0, #5
 8007a92:	4610      	mov	r0, r2
 8007a94:	4619      	mov	r1, r3
 8007a96:	ebb0 0008 	subs.w	r0, r0, r8
 8007a9a:	eb61 0109 	sbc.w	r1, r1, r9
 8007a9e:	f04f 0200 	mov.w	r2, #0
 8007aa2:	f04f 0300 	mov.w	r3, #0
 8007aa6:	018b      	lsls	r3, r1, #6
 8007aa8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007aac:	0182      	lsls	r2, r0, #6
 8007aae:	1a12      	subs	r2, r2, r0
 8007ab0:	eb63 0301 	sbc.w	r3, r3, r1
 8007ab4:	f04f 0000 	mov.w	r0, #0
 8007ab8:	f04f 0100 	mov.w	r1, #0
 8007abc:	00d9      	lsls	r1, r3, #3
 8007abe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ac2:	00d0      	lsls	r0, r2, #3
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	eb12 0208 	adds.w	r2, r2, r8
 8007acc:	eb43 0309 	adc.w	r3, r3, r9
 8007ad0:	f04f 0000 	mov.w	r0, #0
 8007ad4:	f04f 0100 	mov.w	r1, #0
 8007ad8:	0259      	lsls	r1, r3, #9
 8007ada:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007ade:	0250      	lsls	r0, r2, #9
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	4610      	mov	r0, r2
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	461a      	mov	r2, r3
 8007aec:	f04f 0300 	mov.w	r3, #0
 8007af0:	f7fa fb5e 	bl	80021b0 <__aeabi_uldivmod>
 8007af4:	4602      	mov	r2, r0
 8007af6:	460b      	mov	r3, r1
 8007af8:	4613      	mov	r3, r2
 8007afa:	60fb      	str	r3, [r7, #12]
 8007afc:	e04a      	b.n	8007b94 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007afe:	4b31      	ldr	r3, [pc, #196]	; (8007bc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	099b      	lsrs	r3, r3, #6
 8007b04:	461a      	mov	r2, r3
 8007b06:	f04f 0300 	mov.w	r3, #0
 8007b0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007b0e:	f04f 0100 	mov.w	r1, #0
 8007b12:	ea02 0400 	and.w	r4, r2, r0
 8007b16:	ea03 0501 	and.w	r5, r3, r1
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	f04f 0200 	mov.w	r2, #0
 8007b22:	f04f 0300 	mov.w	r3, #0
 8007b26:	014b      	lsls	r3, r1, #5
 8007b28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007b2c:	0142      	lsls	r2, r0, #5
 8007b2e:	4610      	mov	r0, r2
 8007b30:	4619      	mov	r1, r3
 8007b32:	1b00      	subs	r0, r0, r4
 8007b34:	eb61 0105 	sbc.w	r1, r1, r5
 8007b38:	f04f 0200 	mov.w	r2, #0
 8007b3c:	f04f 0300 	mov.w	r3, #0
 8007b40:	018b      	lsls	r3, r1, #6
 8007b42:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007b46:	0182      	lsls	r2, r0, #6
 8007b48:	1a12      	subs	r2, r2, r0
 8007b4a:	eb63 0301 	sbc.w	r3, r3, r1
 8007b4e:	f04f 0000 	mov.w	r0, #0
 8007b52:	f04f 0100 	mov.w	r1, #0
 8007b56:	00d9      	lsls	r1, r3, #3
 8007b58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007b5c:	00d0      	lsls	r0, r2, #3
 8007b5e:	4602      	mov	r2, r0
 8007b60:	460b      	mov	r3, r1
 8007b62:	1912      	adds	r2, r2, r4
 8007b64:	eb45 0303 	adc.w	r3, r5, r3
 8007b68:	f04f 0000 	mov.w	r0, #0
 8007b6c:	f04f 0100 	mov.w	r1, #0
 8007b70:	0299      	lsls	r1, r3, #10
 8007b72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007b76:	0290      	lsls	r0, r2, #10
 8007b78:	4602      	mov	r2, r0
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	4610      	mov	r0, r2
 8007b7e:	4619      	mov	r1, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	461a      	mov	r2, r3
 8007b84:	f04f 0300 	mov.w	r3, #0
 8007b88:	f7fa fb12 	bl	80021b0 <__aeabi_uldivmod>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	460b      	mov	r3, r1
 8007b90:	4613      	mov	r3, r2
 8007b92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007b94:	4b0b      	ldr	r3, [pc, #44]	; (8007bc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	0c1b      	lsrs	r3, r3, #16
 8007b9a:	f003 0303 	and.w	r3, r3, #3
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	005b      	lsls	r3, r3, #1
 8007ba2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bac:	60bb      	str	r3, [r7, #8]
      break;
 8007bae:	e002      	b.n	8007bb6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007bb0:	4b05      	ldr	r3, [pc, #20]	; (8007bc8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007bb2:	60bb      	str	r3, [r7, #8]
      break;
 8007bb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007bb6:	68bb      	ldr	r3, [r7, #8]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007bc2:	bf00      	nop
 8007bc4:	40023800 	.word	0x40023800
 8007bc8:	00f42400 	.word	0x00f42400
 8007bcc:	007a1200 	.word	0x007a1200

08007bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007bd4:	4b03      	ldr	r3, [pc, #12]	; (8007be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	20000018 	.word	0x20000018

08007be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007bec:	f7ff fff0 	bl	8007bd0 <HAL_RCC_GetHCLKFreq>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	4b05      	ldr	r3, [pc, #20]	; (8007c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	0a9b      	lsrs	r3, r3, #10
 8007bf8:	f003 0307 	and.w	r3, r3, #7
 8007bfc:	4903      	ldr	r1, [pc, #12]	; (8007c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007bfe:	5ccb      	ldrb	r3, [r1, r3]
 8007c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	40023800 	.word	0x40023800
 8007c0c:	0800ffe4 	.word	0x0800ffe4

08007c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007c14:	f7ff ffdc 	bl	8007bd0 <HAL_RCC_GetHCLKFreq>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	4b05      	ldr	r3, [pc, #20]	; (8007c30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	0b5b      	lsrs	r3, r3, #13
 8007c20:	f003 0307 	and.w	r3, r3, #7
 8007c24:	4903      	ldr	r1, [pc, #12]	; (8007c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c26:	5ccb      	ldrb	r3, [r1, r3]
 8007c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	40023800 	.word	0x40023800
 8007c34:	0800ffe4 	.word	0x0800ffe4

08007c38 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007c40:	2300      	movs	r3, #0
 8007c42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007c44:	2300      	movs	r3, #0
 8007c46:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 0301 	and.w	r3, r3, #1
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d105      	bne.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d035      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007c60:	4b62      	ldr	r3, [pc, #392]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007c62:	2200      	movs	r2, #0
 8007c64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c66:	f7fc f9f7 	bl	8004058 <HAL_GetTick>
 8007c6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007c6c:	e008      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007c6e:	f7fc f9f3 	bl	8004058 <HAL_GetTick>
 8007c72:	4602      	mov	r2, r0
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d901      	bls.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	e0b0      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007c80:	4b5b      	ldr	r3, [pc, #364]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1f0      	bne.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	019a      	lsls	r2, r3, #6
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	071b      	lsls	r3, r3, #28
 8007c98:	4955      	ldr	r1, [pc, #340]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007ca0:	4b52      	ldr	r3, [pc, #328]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007ca6:	f7fc f9d7 	bl	8004058 <HAL_GetTick>
 8007caa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007cac:	e008      	b.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007cae:	f7fc f9d3 	bl	8004058 <HAL_GetTick>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d901      	bls.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e090      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007cc0:	4b4b      	ldr	r3, [pc, #300]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d0f0      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 0302 	and.w	r3, r3, #2
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f000 8083 	beq.w	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007cda:	2300      	movs	r3, #0
 8007cdc:	60fb      	str	r3, [r7, #12]
 8007cde:	4b44      	ldr	r3, [pc, #272]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce2:	4a43      	ldr	r2, [pc, #268]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8007cea:	4b41      	ldr	r3, [pc, #260]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cf2:	60fb      	str	r3, [r7, #12]
 8007cf4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007cf6:	4b3f      	ldr	r3, [pc, #252]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a3e      	ldr	r2, [pc, #248]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d00:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007d02:	f7fc f9a9 	bl	8004058 <HAL_GetTick>
 8007d06:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007d08:	e008      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007d0a:	f7fc f9a5 	bl	8004058 <HAL_GetTick>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	1ad3      	subs	r3, r2, r3
 8007d14:	2b02      	cmp	r3, #2
 8007d16:	d901      	bls.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	e062      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007d1c:	4b35      	ldr	r3, [pc, #212]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d0f0      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007d28:	4b31      	ldr	r3, [pc, #196]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d30:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d02f      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d028      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d46:	4b2a      	ldr	r3, [pc, #168]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d4e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d50:	4b29      	ldr	r3, [pc, #164]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007d52:	2201      	movs	r2, #1
 8007d54:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d56:	4b28      	ldr	r3, [pc, #160]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007d5c:	4a24      	ldr	r2, [pc, #144]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007d62:	4b23      	ldr	r3, [pc, #140]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d66:	f003 0301 	and.w	r3, r3, #1
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d114      	bne.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007d6e:	f7fc f973 	bl	8004058 <HAL_GetTick>
 8007d72:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d74:	e00a      	b.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d76:	f7fc f96f 	bl	8004058 <HAL_GetTick>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	1ad3      	subs	r3, r2, r3
 8007d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d901      	bls.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e02a      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d8c:	4b18      	ldr	r3, [pc, #96]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d90:	f003 0302 	and.w	r3, r3, #2
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d0ee      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007da0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007da4:	d10d      	bne.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007da6:	4b12      	ldr	r3, [pc, #72]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dba:	490d      	ldr	r1, [pc, #52]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	608b      	str	r3, [r1, #8]
 8007dc0:	e005      	b.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007dc2:	4b0b      	ldr	r3, [pc, #44]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	4a0a      	ldr	r2, [pc, #40]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007dc8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007dcc:	6093      	str	r3, [r2, #8]
 8007dce:	4b08      	ldr	r3, [pc, #32]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007dd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dda:	4905      	ldr	r1, [pc, #20]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3718      	adds	r7, #24
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	42470068 	.word	0x42470068
 8007df0:	40023800 	.word	0x40023800
 8007df4:	40007000 	.word	0x40007000
 8007df8:	42470e40 	.word	0x42470e40

08007dfc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b087      	sub	sp, #28
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007e04:	2300      	movs	r3, #0
 8007e06:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007e10:	2300      	movs	r3, #0
 8007e12:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d13e      	bne.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007e1a:	4b23      	ldr	r3, [pc, #140]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e22:	60fb      	str	r3, [r7, #12]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d005      	beq.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d12f      	bne.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007e30:	4b1e      	ldr	r3, [pc, #120]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007e32:	617b      	str	r3, [r7, #20]
          break;
 8007e34:	e02f      	b.n	8007e96 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007e36:	4b1c      	ldr	r3, [pc, #112]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e42:	d108      	bne.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007e44:	4b18      	ldr	r3, [pc, #96]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e4c:	4a18      	ldr	r2, [pc, #96]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e52:	613b      	str	r3, [r7, #16]
 8007e54:	e007      	b.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007e56:	4b14      	ldr	r3, [pc, #80]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e5e:	4a15      	ldr	r2, [pc, #84]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e64:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007e66:	4b10      	ldr	r3, [pc, #64]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e6c:	099b      	lsrs	r3, r3, #6
 8007e6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	fb02 f303 	mul.w	r3, r2, r3
 8007e78:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007e7a:	4b0b      	ldr	r3, [pc, #44]	; (8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e80:	0f1b      	lsrs	r3, r3, #28
 8007e82:	f003 0307 	and.w	r3, r3, #7
 8007e86:	68ba      	ldr	r2, [r7, #8]
 8007e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e8c:	617b      	str	r3, [r7, #20]
          break;
 8007e8e:	e002      	b.n	8007e96 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007e90:	2300      	movs	r3, #0
 8007e92:	617b      	str	r3, [r7, #20]
          break;
 8007e94:	bf00      	nop
        }
      }
      break;
 8007e96:	bf00      	nop
    }
  }
  return frequency;
 8007e98:	697b      	ldr	r3, [r7, #20]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	371c      	adds	r7, #28
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	40023800 	.word	0x40023800
 8007eac:	00bb8000 	.word	0x00bb8000
 8007eb0:	007a1200 	.word	0x007a1200
 8007eb4:	00f42400 	.word	0x00f42400

08007eb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d101      	bne.n	8007eca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e07b      	b.n	8007fc2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d108      	bne.n	8007ee4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007eda:	d009      	beq.n	8007ef0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	61da      	str	r2, [r3, #28]
 8007ee2:	e005      	b.n	8007ef0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d106      	bne.n	8007f10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7fb fe46 	bl	8003b9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2202      	movs	r2, #2
 8007f14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007f38:	431a      	orrs	r2, r3
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f42:	431a      	orrs	r2, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	f003 0302 	and.w	r3, r3, #2
 8007f4c:	431a      	orrs	r2, r3
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	695b      	ldr	r3, [r3, #20]
 8007f52:	f003 0301 	and.w	r3, r3, #1
 8007f56:	431a      	orrs	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	699b      	ldr	r3, [r3, #24]
 8007f5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f60:	431a      	orrs	r2, r3
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	69db      	ldr	r3, [r3, #28]
 8007f66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f6a:	431a      	orrs	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a1b      	ldr	r3, [r3, #32]
 8007f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f74:	ea42 0103 	orr.w	r1, r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	430a      	orrs	r2, r1
 8007f86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	699b      	ldr	r3, [r3, #24]
 8007f8c:	0c1b      	lsrs	r3, r3, #16
 8007f8e:	f003 0104 	and.w	r1, r3, #4
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f96:	f003 0210 	and.w	r2, r3, #16
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	430a      	orrs	r2, r1
 8007fa0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	69da      	ldr	r2, [r3, #28]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3708      	adds	r7, #8
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b082      	sub	sp, #8
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d101      	bne.n	8007fdc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e041      	b.n	8008060 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d106      	bne.n	8007ff6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f7fb fe1b 	bl	8003c2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2202      	movs	r2, #2
 8007ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	3304      	adds	r3, #4
 8008006:	4619      	mov	r1, r3
 8008008:	4610      	mov	r0, r2
 800800a:	f000 f9cd 	bl	80083a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2201      	movs	r2, #1
 8008012:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2201      	movs	r2, #1
 800801a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2201      	movs	r2, #1
 8008032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008076:	b2db      	uxtb	r3, r3
 8008078:	2b01      	cmp	r3, #1
 800807a:	d001      	beq.n	8008080 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	e04e      	b.n	800811e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2202      	movs	r2, #2
 8008084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68da      	ldr	r2, [r3, #12]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f042 0201 	orr.w	r2, r2, #1
 8008096:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a23      	ldr	r2, [pc, #140]	; (800812c <HAL_TIM_Base_Start_IT+0xc4>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d022      	beq.n	80080e8 <HAL_TIM_Base_Start_IT+0x80>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080aa:	d01d      	beq.n	80080e8 <HAL_TIM_Base_Start_IT+0x80>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a1f      	ldr	r2, [pc, #124]	; (8008130 <HAL_TIM_Base_Start_IT+0xc8>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d018      	beq.n	80080e8 <HAL_TIM_Base_Start_IT+0x80>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a1e      	ldr	r2, [pc, #120]	; (8008134 <HAL_TIM_Base_Start_IT+0xcc>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d013      	beq.n	80080e8 <HAL_TIM_Base_Start_IT+0x80>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a1c      	ldr	r2, [pc, #112]	; (8008138 <HAL_TIM_Base_Start_IT+0xd0>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d00e      	beq.n	80080e8 <HAL_TIM_Base_Start_IT+0x80>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a1b      	ldr	r2, [pc, #108]	; (800813c <HAL_TIM_Base_Start_IT+0xd4>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d009      	beq.n	80080e8 <HAL_TIM_Base_Start_IT+0x80>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a19      	ldr	r2, [pc, #100]	; (8008140 <HAL_TIM_Base_Start_IT+0xd8>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d004      	beq.n	80080e8 <HAL_TIM_Base_Start_IT+0x80>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a18      	ldr	r2, [pc, #96]	; (8008144 <HAL_TIM_Base_Start_IT+0xdc>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d111      	bne.n	800810c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	f003 0307 	and.w	r3, r3, #7
 80080f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2b06      	cmp	r3, #6
 80080f8:	d010      	beq.n	800811c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f042 0201 	orr.w	r2, r2, #1
 8008108:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800810a:	e007      	b.n	800811c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f042 0201 	orr.w	r2, r2, #1
 800811a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3714      	adds	r7, #20
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	40010000 	.word	0x40010000
 8008130:	40000400 	.word	0x40000400
 8008134:	40000800 	.word	0x40000800
 8008138:	40000c00 	.word	0x40000c00
 800813c:	40010400 	.word	0x40010400
 8008140:	40014000 	.word	0x40014000
 8008144:	40001800 	.word	0x40001800

08008148 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	f003 0302 	and.w	r3, r3, #2
 800815a:	2b02      	cmp	r3, #2
 800815c:	d122      	bne.n	80081a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	f003 0302 	and.w	r3, r3, #2
 8008168:	2b02      	cmp	r3, #2
 800816a:	d11b      	bne.n	80081a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f06f 0202 	mvn.w	r2, #2
 8008174:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	f003 0303 	and.w	r3, r3, #3
 8008186:	2b00      	cmp	r3, #0
 8008188:	d003      	beq.n	8008192 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f8ee 	bl	800836c <HAL_TIM_IC_CaptureCallback>
 8008190:	e005      	b.n	800819e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f8e0 	bl	8008358 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 f8f1 	bl	8008380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	f003 0304 	and.w	r3, r3, #4
 80081ae:	2b04      	cmp	r3, #4
 80081b0:	d122      	bne.n	80081f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	f003 0304 	and.w	r3, r3, #4
 80081bc:	2b04      	cmp	r3, #4
 80081be:	d11b      	bne.n	80081f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f06f 0204 	mvn.w	r2, #4
 80081c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2202      	movs	r2, #2
 80081ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	699b      	ldr	r3, [r3, #24]
 80081d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d003      	beq.n	80081e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f8c4 	bl	800836c <HAL_TIM_IC_CaptureCallback>
 80081e4:	e005      	b.n	80081f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f8b6 	bl	8008358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f8c7 	bl	8008380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	f003 0308 	and.w	r3, r3, #8
 8008202:	2b08      	cmp	r3, #8
 8008204:	d122      	bne.n	800824c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	f003 0308 	and.w	r3, r3, #8
 8008210:	2b08      	cmp	r3, #8
 8008212:	d11b      	bne.n	800824c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f06f 0208 	mvn.w	r2, #8
 800821c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2204      	movs	r2, #4
 8008222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	69db      	ldr	r3, [r3, #28]
 800822a:	f003 0303 	and.w	r3, r3, #3
 800822e:	2b00      	cmp	r3, #0
 8008230:	d003      	beq.n	800823a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 f89a 	bl	800836c <HAL_TIM_IC_CaptureCallback>
 8008238:	e005      	b.n	8008246 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f88c 	bl	8008358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 f89d 	bl	8008380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	f003 0310 	and.w	r3, r3, #16
 8008256:	2b10      	cmp	r3, #16
 8008258:	d122      	bne.n	80082a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	f003 0310 	and.w	r3, r3, #16
 8008264:	2b10      	cmp	r3, #16
 8008266:	d11b      	bne.n	80082a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f06f 0210 	mvn.w	r2, #16
 8008270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2208      	movs	r2, #8
 8008276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	69db      	ldr	r3, [r3, #28]
 800827e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008282:	2b00      	cmp	r3, #0
 8008284:	d003      	beq.n	800828e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f870 	bl	800836c <HAL_TIM_IC_CaptureCallback>
 800828c:	e005      	b.n	800829a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f862 	bl	8008358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f873 	bl	8008380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d10e      	bne.n	80082cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	f003 0301 	and.w	r3, r3, #1
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d107      	bne.n	80082cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f06f 0201 	mvn.w	r2, #1
 80082c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f7fb f982 	bl	80035d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082d6:	2b80      	cmp	r3, #128	; 0x80
 80082d8:	d10e      	bne.n	80082f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082e4:	2b80      	cmp	r3, #128	; 0x80
 80082e6:	d107      	bne.n	80082f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80082f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f902 	bl	80084fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008302:	2b40      	cmp	r3, #64	; 0x40
 8008304:	d10e      	bne.n	8008324 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008310:	2b40      	cmp	r3, #64	; 0x40
 8008312:	d107      	bne.n	8008324 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800831c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f838 	bl	8008394 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	f003 0320 	and.w	r3, r3, #32
 800832e:	2b20      	cmp	r3, #32
 8008330:	d10e      	bne.n	8008350 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	f003 0320 	and.w	r3, r3, #32
 800833c:	2b20      	cmp	r3, #32
 800833e:	d107      	bne.n	8008350 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f06f 0220 	mvn.w	r2, #32
 8008348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f8cc 	bl	80084e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008350:	bf00      	nop
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a40      	ldr	r2, [pc, #256]	; (80084bc <TIM_Base_SetConfig+0x114>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d013      	beq.n	80083e8 <TIM_Base_SetConfig+0x40>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083c6:	d00f      	beq.n	80083e8 <TIM_Base_SetConfig+0x40>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a3d      	ldr	r2, [pc, #244]	; (80084c0 <TIM_Base_SetConfig+0x118>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d00b      	beq.n	80083e8 <TIM_Base_SetConfig+0x40>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a3c      	ldr	r2, [pc, #240]	; (80084c4 <TIM_Base_SetConfig+0x11c>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d007      	beq.n	80083e8 <TIM_Base_SetConfig+0x40>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a3b      	ldr	r2, [pc, #236]	; (80084c8 <TIM_Base_SetConfig+0x120>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d003      	beq.n	80083e8 <TIM_Base_SetConfig+0x40>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4a3a      	ldr	r2, [pc, #232]	; (80084cc <TIM_Base_SetConfig+0x124>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d108      	bne.n	80083fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a2f      	ldr	r2, [pc, #188]	; (80084bc <TIM_Base_SetConfig+0x114>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d02b      	beq.n	800845a <TIM_Base_SetConfig+0xb2>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008408:	d027      	beq.n	800845a <TIM_Base_SetConfig+0xb2>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a2c      	ldr	r2, [pc, #176]	; (80084c0 <TIM_Base_SetConfig+0x118>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d023      	beq.n	800845a <TIM_Base_SetConfig+0xb2>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a2b      	ldr	r2, [pc, #172]	; (80084c4 <TIM_Base_SetConfig+0x11c>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d01f      	beq.n	800845a <TIM_Base_SetConfig+0xb2>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a2a      	ldr	r2, [pc, #168]	; (80084c8 <TIM_Base_SetConfig+0x120>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d01b      	beq.n	800845a <TIM_Base_SetConfig+0xb2>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a29      	ldr	r2, [pc, #164]	; (80084cc <TIM_Base_SetConfig+0x124>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d017      	beq.n	800845a <TIM_Base_SetConfig+0xb2>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a28      	ldr	r2, [pc, #160]	; (80084d0 <TIM_Base_SetConfig+0x128>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d013      	beq.n	800845a <TIM_Base_SetConfig+0xb2>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a27      	ldr	r2, [pc, #156]	; (80084d4 <TIM_Base_SetConfig+0x12c>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d00f      	beq.n	800845a <TIM_Base_SetConfig+0xb2>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a26      	ldr	r2, [pc, #152]	; (80084d8 <TIM_Base_SetConfig+0x130>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d00b      	beq.n	800845a <TIM_Base_SetConfig+0xb2>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a25      	ldr	r2, [pc, #148]	; (80084dc <TIM_Base_SetConfig+0x134>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d007      	beq.n	800845a <TIM_Base_SetConfig+0xb2>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a24      	ldr	r2, [pc, #144]	; (80084e0 <TIM_Base_SetConfig+0x138>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d003      	beq.n	800845a <TIM_Base_SetConfig+0xb2>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a23      	ldr	r2, [pc, #140]	; (80084e4 <TIM_Base_SetConfig+0x13c>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d108      	bne.n	800846c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	4313      	orrs	r3, r2
 800846a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	695b      	ldr	r3, [r3, #20]
 8008476:	4313      	orrs	r3, r2
 8008478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	689a      	ldr	r2, [r3, #8]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a0a      	ldr	r2, [pc, #40]	; (80084bc <TIM_Base_SetConfig+0x114>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d003      	beq.n	80084a0 <TIM_Base_SetConfig+0xf8>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a0c      	ldr	r2, [pc, #48]	; (80084cc <TIM_Base_SetConfig+0x124>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d103      	bne.n	80084a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	691a      	ldr	r2, [r3, #16]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	615a      	str	r2, [r3, #20]
}
 80084ae:	bf00      	nop
 80084b0:	3714      	adds	r7, #20
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	40010000 	.word	0x40010000
 80084c0:	40000400 	.word	0x40000400
 80084c4:	40000800 	.word	0x40000800
 80084c8:	40000c00 	.word	0x40000c00
 80084cc:	40010400 	.word	0x40010400
 80084d0:	40014000 	.word	0x40014000
 80084d4:	40014400 	.word	0x40014400
 80084d8:	40014800 	.word	0x40014800
 80084dc:	40001800 	.word	0x40001800
 80084e0:	40001c00 	.word	0x40001c00
 80084e4:	40002000 	.word	0x40002000

080084e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084f0:	bf00      	nop
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008504:	bf00      	nop
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d101      	bne.n	8008522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e03f      	b.n	80085a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008528:	b2db      	uxtb	r3, r3
 800852a:	2b00      	cmp	r3, #0
 800852c:	d106      	bne.n	800853c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7fb fba0 	bl	8003c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2224      	movs	r2, #36	; 0x24
 8008540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	68da      	ldr	r2, [r3, #12]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008552:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f829 	bl	80085ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	691a      	ldr	r2, [r3, #16]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008568:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	695a      	ldr	r2, [r3, #20]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008578:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68da      	ldr	r2, [r3, #12]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008588:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2220      	movs	r2, #32
 8008594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2220      	movs	r2, #32
 800859c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3708      	adds	r7, #8
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
	...

080085ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b0:	b09f      	sub	sp, #124	; 0x7c
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80085c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085c2:	68d9      	ldr	r1, [r3, #12]
 80085c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	ea40 0301 	orr.w	r3, r0, r1
 80085cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80085ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085d0:	689a      	ldr	r2, [r3, #8]
 80085d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	431a      	orrs	r2, r3
 80085d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085da:	695b      	ldr	r3, [r3, #20]
 80085dc:	431a      	orrs	r2, r3
 80085de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085e0:	69db      	ldr	r3, [r3, #28]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80085e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80085f0:	f021 010c 	bic.w	r1, r1, #12
 80085f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085fa:	430b      	orrs	r3, r1
 80085fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80085fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	695b      	ldr	r3, [r3, #20]
 8008604:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800860a:	6999      	ldr	r1, [r3, #24]
 800860c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	ea40 0301 	orr.w	r3, r0, r1
 8008614:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	4bc5      	ldr	r3, [pc, #788]	; (8008930 <UART_SetConfig+0x384>)
 800861c:	429a      	cmp	r2, r3
 800861e:	d004      	beq.n	800862a <UART_SetConfig+0x7e>
 8008620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	4bc3      	ldr	r3, [pc, #780]	; (8008934 <UART_SetConfig+0x388>)
 8008626:	429a      	cmp	r2, r3
 8008628:	d103      	bne.n	8008632 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800862a:	f7ff faf1 	bl	8007c10 <HAL_RCC_GetPCLK2Freq>
 800862e:	6778      	str	r0, [r7, #116]	; 0x74
 8008630:	e002      	b.n	8008638 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008632:	f7ff fad9 	bl	8007be8 <HAL_RCC_GetPCLK1Freq>
 8008636:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800863a:	69db      	ldr	r3, [r3, #28]
 800863c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008640:	f040 80b6 	bne.w	80087b0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008644:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008646:	461c      	mov	r4, r3
 8008648:	f04f 0500 	mov.w	r5, #0
 800864c:	4622      	mov	r2, r4
 800864e:	462b      	mov	r3, r5
 8008650:	1891      	adds	r1, r2, r2
 8008652:	6439      	str	r1, [r7, #64]	; 0x40
 8008654:	415b      	adcs	r3, r3
 8008656:	647b      	str	r3, [r7, #68]	; 0x44
 8008658:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800865c:	1912      	adds	r2, r2, r4
 800865e:	eb45 0303 	adc.w	r3, r5, r3
 8008662:	f04f 0000 	mov.w	r0, #0
 8008666:	f04f 0100 	mov.w	r1, #0
 800866a:	00d9      	lsls	r1, r3, #3
 800866c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008670:	00d0      	lsls	r0, r2, #3
 8008672:	4602      	mov	r2, r0
 8008674:	460b      	mov	r3, r1
 8008676:	1911      	adds	r1, r2, r4
 8008678:	6639      	str	r1, [r7, #96]	; 0x60
 800867a:	416b      	adcs	r3, r5
 800867c:	667b      	str	r3, [r7, #100]	; 0x64
 800867e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	461a      	mov	r2, r3
 8008684:	f04f 0300 	mov.w	r3, #0
 8008688:	1891      	adds	r1, r2, r2
 800868a:	63b9      	str	r1, [r7, #56]	; 0x38
 800868c:	415b      	adcs	r3, r3
 800868e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008690:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008694:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008698:	f7f9 fd8a 	bl	80021b0 <__aeabi_uldivmod>
 800869c:	4602      	mov	r2, r0
 800869e:	460b      	mov	r3, r1
 80086a0:	4ba5      	ldr	r3, [pc, #660]	; (8008938 <UART_SetConfig+0x38c>)
 80086a2:	fba3 2302 	umull	r2, r3, r3, r2
 80086a6:	095b      	lsrs	r3, r3, #5
 80086a8:	011e      	lsls	r6, r3, #4
 80086aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086ac:	461c      	mov	r4, r3
 80086ae:	f04f 0500 	mov.w	r5, #0
 80086b2:	4622      	mov	r2, r4
 80086b4:	462b      	mov	r3, r5
 80086b6:	1891      	adds	r1, r2, r2
 80086b8:	6339      	str	r1, [r7, #48]	; 0x30
 80086ba:	415b      	adcs	r3, r3
 80086bc:	637b      	str	r3, [r7, #52]	; 0x34
 80086be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80086c2:	1912      	adds	r2, r2, r4
 80086c4:	eb45 0303 	adc.w	r3, r5, r3
 80086c8:	f04f 0000 	mov.w	r0, #0
 80086cc:	f04f 0100 	mov.w	r1, #0
 80086d0:	00d9      	lsls	r1, r3, #3
 80086d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80086d6:	00d0      	lsls	r0, r2, #3
 80086d8:	4602      	mov	r2, r0
 80086da:	460b      	mov	r3, r1
 80086dc:	1911      	adds	r1, r2, r4
 80086de:	65b9      	str	r1, [r7, #88]	; 0x58
 80086e0:	416b      	adcs	r3, r5
 80086e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	461a      	mov	r2, r3
 80086ea:	f04f 0300 	mov.w	r3, #0
 80086ee:	1891      	adds	r1, r2, r2
 80086f0:	62b9      	str	r1, [r7, #40]	; 0x28
 80086f2:	415b      	adcs	r3, r3
 80086f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80086fa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80086fe:	f7f9 fd57 	bl	80021b0 <__aeabi_uldivmod>
 8008702:	4602      	mov	r2, r0
 8008704:	460b      	mov	r3, r1
 8008706:	4b8c      	ldr	r3, [pc, #560]	; (8008938 <UART_SetConfig+0x38c>)
 8008708:	fba3 1302 	umull	r1, r3, r3, r2
 800870c:	095b      	lsrs	r3, r3, #5
 800870e:	2164      	movs	r1, #100	; 0x64
 8008710:	fb01 f303 	mul.w	r3, r1, r3
 8008714:	1ad3      	subs	r3, r2, r3
 8008716:	00db      	lsls	r3, r3, #3
 8008718:	3332      	adds	r3, #50	; 0x32
 800871a:	4a87      	ldr	r2, [pc, #540]	; (8008938 <UART_SetConfig+0x38c>)
 800871c:	fba2 2303 	umull	r2, r3, r2, r3
 8008720:	095b      	lsrs	r3, r3, #5
 8008722:	005b      	lsls	r3, r3, #1
 8008724:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008728:	441e      	add	r6, r3
 800872a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800872c:	4618      	mov	r0, r3
 800872e:	f04f 0100 	mov.w	r1, #0
 8008732:	4602      	mov	r2, r0
 8008734:	460b      	mov	r3, r1
 8008736:	1894      	adds	r4, r2, r2
 8008738:	623c      	str	r4, [r7, #32]
 800873a:	415b      	adcs	r3, r3
 800873c:	627b      	str	r3, [r7, #36]	; 0x24
 800873e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008742:	1812      	adds	r2, r2, r0
 8008744:	eb41 0303 	adc.w	r3, r1, r3
 8008748:	f04f 0400 	mov.w	r4, #0
 800874c:	f04f 0500 	mov.w	r5, #0
 8008750:	00dd      	lsls	r5, r3, #3
 8008752:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008756:	00d4      	lsls	r4, r2, #3
 8008758:	4622      	mov	r2, r4
 800875a:	462b      	mov	r3, r5
 800875c:	1814      	adds	r4, r2, r0
 800875e:	653c      	str	r4, [r7, #80]	; 0x50
 8008760:	414b      	adcs	r3, r1
 8008762:	657b      	str	r3, [r7, #84]	; 0x54
 8008764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	461a      	mov	r2, r3
 800876a:	f04f 0300 	mov.w	r3, #0
 800876e:	1891      	adds	r1, r2, r2
 8008770:	61b9      	str	r1, [r7, #24]
 8008772:	415b      	adcs	r3, r3
 8008774:	61fb      	str	r3, [r7, #28]
 8008776:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800877a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800877e:	f7f9 fd17 	bl	80021b0 <__aeabi_uldivmod>
 8008782:	4602      	mov	r2, r0
 8008784:	460b      	mov	r3, r1
 8008786:	4b6c      	ldr	r3, [pc, #432]	; (8008938 <UART_SetConfig+0x38c>)
 8008788:	fba3 1302 	umull	r1, r3, r3, r2
 800878c:	095b      	lsrs	r3, r3, #5
 800878e:	2164      	movs	r1, #100	; 0x64
 8008790:	fb01 f303 	mul.w	r3, r1, r3
 8008794:	1ad3      	subs	r3, r2, r3
 8008796:	00db      	lsls	r3, r3, #3
 8008798:	3332      	adds	r3, #50	; 0x32
 800879a:	4a67      	ldr	r2, [pc, #412]	; (8008938 <UART_SetConfig+0x38c>)
 800879c:	fba2 2303 	umull	r2, r3, r2, r3
 80087a0:	095b      	lsrs	r3, r3, #5
 80087a2:	f003 0207 	and.w	r2, r3, #7
 80087a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4432      	add	r2, r6
 80087ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80087ae:	e0b9      	b.n	8008924 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80087b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087b2:	461c      	mov	r4, r3
 80087b4:	f04f 0500 	mov.w	r5, #0
 80087b8:	4622      	mov	r2, r4
 80087ba:	462b      	mov	r3, r5
 80087bc:	1891      	adds	r1, r2, r2
 80087be:	6139      	str	r1, [r7, #16]
 80087c0:	415b      	adcs	r3, r3
 80087c2:	617b      	str	r3, [r7, #20]
 80087c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80087c8:	1912      	adds	r2, r2, r4
 80087ca:	eb45 0303 	adc.w	r3, r5, r3
 80087ce:	f04f 0000 	mov.w	r0, #0
 80087d2:	f04f 0100 	mov.w	r1, #0
 80087d6:	00d9      	lsls	r1, r3, #3
 80087d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80087dc:	00d0      	lsls	r0, r2, #3
 80087de:	4602      	mov	r2, r0
 80087e0:	460b      	mov	r3, r1
 80087e2:	eb12 0804 	adds.w	r8, r2, r4
 80087e6:	eb43 0905 	adc.w	r9, r3, r5
 80087ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f04f 0100 	mov.w	r1, #0
 80087f4:	f04f 0200 	mov.w	r2, #0
 80087f8:	f04f 0300 	mov.w	r3, #0
 80087fc:	008b      	lsls	r3, r1, #2
 80087fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008802:	0082      	lsls	r2, r0, #2
 8008804:	4640      	mov	r0, r8
 8008806:	4649      	mov	r1, r9
 8008808:	f7f9 fcd2 	bl	80021b0 <__aeabi_uldivmod>
 800880c:	4602      	mov	r2, r0
 800880e:	460b      	mov	r3, r1
 8008810:	4b49      	ldr	r3, [pc, #292]	; (8008938 <UART_SetConfig+0x38c>)
 8008812:	fba3 2302 	umull	r2, r3, r3, r2
 8008816:	095b      	lsrs	r3, r3, #5
 8008818:	011e      	lsls	r6, r3, #4
 800881a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800881c:	4618      	mov	r0, r3
 800881e:	f04f 0100 	mov.w	r1, #0
 8008822:	4602      	mov	r2, r0
 8008824:	460b      	mov	r3, r1
 8008826:	1894      	adds	r4, r2, r2
 8008828:	60bc      	str	r4, [r7, #8]
 800882a:	415b      	adcs	r3, r3
 800882c:	60fb      	str	r3, [r7, #12]
 800882e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008832:	1812      	adds	r2, r2, r0
 8008834:	eb41 0303 	adc.w	r3, r1, r3
 8008838:	f04f 0400 	mov.w	r4, #0
 800883c:	f04f 0500 	mov.w	r5, #0
 8008840:	00dd      	lsls	r5, r3, #3
 8008842:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008846:	00d4      	lsls	r4, r2, #3
 8008848:	4622      	mov	r2, r4
 800884a:	462b      	mov	r3, r5
 800884c:	1814      	adds	r4, r2, r0
 800884e:	64bc      	str	r4, [r7, #72]	; 0x48
 8008850:	414b      	adcs	r3, r1
 8008852:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	4618      	mov	r0, r3
 800885a:	f04f 0100 	mov.w	r1, #0
 800885e:	f04f 0200 	mov.w	r2, #0
 8008862:	f04f 0300 	mov.w	r3, #0
 8008866:	008b      	lsls	r3, r1, #2
 8008868:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800886c:	0082      	lsls	r2, r0, #2
 800886e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008872:	f7f9 fc9d 	bl	80021b0 <__aeabi_uldivmod>
 8008876:	4602      	mov	r2, r0
 8008878:	460b      	mov	r3, r1
 800887a:	4b2f      	ldr	r3, [pc, #188]	; (8008938 <UART_SetConfig+0x38c>)
 800887c:	fba3 1302 	umull	r1, r3, r3, r2
 8008880:	095b      	lsrs	r3, r3, #5
 8008882:	2164      	movs	r1, #100	; 0x64
 8008884:	fb01 f303 	mul.w	r3, r1, r3
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	011b      	lsls	r3, r3, #4
 800888c:	3332      	adds	r3, #50	; 0x32
 800888e:	4a2a      	ldr	r2, [pc, #168]	; (8008938 <UART_SetConfig+0x38c>)
 8008890:	fba2 2303 	umull	r2, r3, r2, r3
 8008894:	095b      	lsrs	r3, r3, #5
 8008896:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800889a:	441e      	add	r6, r3
 800889c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800889e:	4618      	mov	r0, r3
 80088a0:	f04f 0100 	mov.w	r1, #0
 80088a4:	4602      	mov	r2, r0
 80088a6:	460b      	mov	r3, r1
 80088a8:	1894      	adds	r4, r2, r2
 80088aa:	603c      	str	r4, [r7, #0]
 80088ac:	415b      	adcs	r3, r3
 80088ae:	607b      	str	r3, [r7, #4]
 80088b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088b4:	1812      	adds	r2, r2, r0
 80088b6:	eb41 0303 	adc.w	r3, r1, r3
 80088ba:	f04f 0400 	mov.w	r4, #0
 80088be:	f04f 0500 	mov.w	r5, #0
 80088c2:	00dd      	lsls	r5, r3, #3
 80088c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80088c8:	00d4      	lsls	r4, r2, #3
 80088ca:	4622      	mov	r2, r4
 80088cc:	462b      	mov	r3, r5
 80088ce:	eb12 0a00 	adds.w	sl, r2, r0
 80088d2:	eb43 0b01 	adc.w	fp, r3, r1
 80088d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	4618      	mov	r0, r3
 80088dc:	f04f 0100 	mov.w	r1, #0
 80088e0:	f04f 0200 	mov.w	r2, #0
 80088e4:	f04f 0300 	mov.w	r3, #0
 80088e8:	008b      	lsls	r3, r1, #2
 80088ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80088ee:	0082      	lsls	r2, r0, #2
 80088f0:	4650      	mov	r0, sl
 80088f2:	4659      	mov	r1, fp
 80088f4:	f7f9 fc5c 	bl	80021b0 <__aeabi_uldivmod>
 80088f8:	4602      	mov	r2, r0
 80088fa:	460b      	mov	r3, r1
 80088fc:	4b0e      	ldr	r3, [pc, #56]	; (8008938 <UART_SetConfig+0x38c>)
 80088fe:	fba3 1302 	umull	r1, r3, r3, r2
 8008902:	095b      	lsrs	r3, r3, #5
 8008904:	2164      	movs	r1, #100	; 0x64
 8008906:	fb01 f303 	mul.w	r3, r1, r3
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	011b      	lsls	r3, r3, #4
 800890e:	3332      	adds	r3, #50	; 0x32
 8008910:	4a09      	ldr	r2, [pc, #36]	; (8008938 <UART_SetConfig+0x38c>)
 8008912:	fba2 2303 	umull	r2, r3, r2, r3
 8008916:	095b      	lsrs	r3, r3, #5
 8008918:	f003 020f 	and.w	r2, r3, #15
 800891c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4432      	add	r2, r6
 8008922:	609a      	str	r2, [r3, #8]
}
 8008924:	bf00      	nop
 8008926:	377c      	adds	r7, #124	; 0x7c
 8008928:	46bd      	mov	sp, r7
 800892a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800892e:	bf00      	nop
 8008930:	40011000 	.word	0x40011000
 8008934:	40011400 	.word	0x40011400
 8008938:	51eb851f 	.word	0x51eb851f

0800893c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800893c:	b084      	sub	sp, #16
 800893e:	b580      	push	{r7, lr}
 8008940:	b084      	sub	sp, #16
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
 8008946:	f107 001c 	add.w	r0, r7, #28
 800894a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800894e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008950:	2b01      	cmp	r3, #1
 8008952:	d122      	bne.n	800899a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008958:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800897c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800897e:	2b01      	cmp	r3, #1
 8008980:	d105      	bne.n	800898e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f9a0 	bl	8008cd4 <USB_CoreReset>
 8008994:	4603      	mov	r3, r0
 8008996:	73fb      	strb	r3, [r7, #15]
 8008998:	e01a      	b.n	80089d0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f994 	bl	8008cd4 <USB_CoreReset>
 80089ac:	4603      	mov	r3, r0
 80089ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80089b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d106      	bne.n	80089c4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	639a      	str	r2, [r3, #56]	; 0x38
 80089c2:	e005      	b.n	80089d0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80089d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d10b      	bne.n	80089ee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	f043 0206 	orr.w	r2, r3, #6
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	f043 0220 	orr.w	r2, r3, #32
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80089ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089fa:	b004      	add	sp, #16
 80089fc:	4770      	bx	lr

080089fe <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80089fe:	b480      	push	{r7}
 8008a00:	b083      	sub	sp, #12
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	f043 0201 	orr.w	r2, r3, #1
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	f023 0201 	bic.w	r2, r3, #1
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	370c      	adds	r7, #12
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr

08008a42 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b084      	sub	sp, #16
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008a5e:	78fb      	ldrb	r3, [r7, #3]
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d115      	bne.n	8008a90 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008a70:	2001      	movs	r0, #1
 8008a72:	f7fb fafd 	bl	8004070 <HAL_Delay>
      ms++;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f91a 	bl	8008cb6 <USB_GetMode>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d01e      	beq.n	8008ac6 <USB_SetCurrentMode+0x84>
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2b31      	cmp	r3, #49	; 0x31
 8008a8c:	d9f0      	bls.n	8008a70 <USB_SetCurrentMode+0x2e>
 8008a8e:	e01a      	b.n	8008ac6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008a90:	78fb      	ldrb	r3, [r7, #3]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d115      	bne.n	8008ac2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008aa2:	2001      	movs	r0, #1
 8008aa4:	f7fb fae4 	bl	8004070 <HAL_Delay>
      ms++;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 f901 	bl	8008cb6 <USB_GetMode>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d005      	beq.n	8008ac6 <USB_SetCurrentMode+0x84>
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2b31      	cmp	r3, #49	; 0x31
 8008abe:	d9f0      	bls.n	8008aa2 <USB_SetCurrentMode+0x60>
 8008ac0:	e001      	b.n	8008ac6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e005      	b.n	8008ad2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2b32      	cmp	r3, #50	; 0x32
 8008aca:	d101      	bne.n	8008ad0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	e000      	b.n	8008ad2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
	...

08008adc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b085      	sub	sp, #20
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	019b      	lsls	r3, r3, #6
 8008aee:	f043 0220 	orr.w	r2, r3, #32
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	3301      	adds	r3, #1
 8008afa:	60fb      	str	r3, [r7, #12]
 8008afc:	4a08      	ldr	r2, [pc, #32]	; (8008b20 <USB_FlushTxFifo+0x44>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d901      	bls.n	8008b06 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8008b02:	2303      	movs	r3, #3
 8008b04:	e006      	b.n	8008b14 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	f003 0320 	and.w	r3, r3, #32
 8008b0e:	2b20      	cmp	r3, #32
 8008b10:	d0f1      	beq.n	8008af6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008b12:	2300      	movs	r3, #0
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3714      	adds	r7, #20
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr
 8008b20:	00030d40 	.word	0x00030d40

08008b24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b085      	sub	sp, #20
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2210      	movs	r2, #16
 8008b34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	60fb      	str	r3, [r7, #12]
 8008b3c:	4a08      	ldr	r2, [pc, #32]	; (8008b60 <USB_FlushRxFifo+0x3c>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d901      	bls.n	8008b46 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8008b42:	2303      	movs	r3, #3
 8008b44:	e006      	b.n	8008b54 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	691b      	ldr	r3, [r3, #16]
 8008b4a:	f003 0310 	and.w	r3, r3, #16
 8008b4e:	2b10      	cmp	r3, #16
 8008b50:	d0f1      	beq.n	8008b36 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3714      	adds	r7, #20
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr
 8008b60:	00030d40 	.word	0x00030d40

08008b64 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b089      	sub	sp, #36	; 0x24
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	4611      	mov	r1, r2
 8008b70:	461a      	mov	r2, r3
 8008b72:	460b      	mov	r3, r1
 8008b74:	71fb      	strb	r3, [r7, #7]
 8008b76:	4613      	mov	r3, r2
 8008b78:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008b82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d123      	bne.n	8008bd2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008b8a:	88bb      	ldrh	r3, [r7, #4]
 8008b8c:	3303      	adds	r3, #3
 8008b8e:	089b      	lsrs	r3, r3, #2
 8008b90:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008b92:	2300      	movs	r3, #0
 8008b94:	61bb      	str	r3, [r7, #24]
 8008b96:	e018      	b.n	8008bca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008b98:	79fb      	ldrb	r3, [r7, #7]
 8008b9a:	031a      	lsls	r2, r3, #12
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	61bb      	str	r3, [r7, #24]
 8008bca:	69ba      	ldr	r2, [r7, #24]
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d3e2      	bcc.n	8008b98 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3724      	adds	r7, #36	; 0x24
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b08b      	sub	sp, #44	; 0x2c
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	4613      	mov	r3, r2
 8008bec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008bf6:	88fb      	ldrh	r3, [r7, #6]
 8008bf8:	089b      	lsrs	r3, r3, #2
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008bfe:	88fb      	ldrh	r3, [r7, #6]
 8008c00:	f003 0303 	and.w	r3, r3, #3
 8008c04:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008c06:	2300      	movs	r3, #0
 8008c08:	623b      	str	r3, [r7, #32]
 8008c0a:	e014      	b.n	8008c36 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c16:	601a      	str	r2, [r3, #0]
    pDest++;
 8008c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c20:	3301      	adds	r3, #1
 8008c22:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c26:	3301      	adds	r3, #1
 8008c28:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008c30:	6a3b      	ldr	r3, [r7, #32]
 8008c32:	3301      	adds	r3, #1
 8008c34:	623b      	str	r3, [r7, #32]
 8008c36:	6a3a      	ldr	r2, [r7, #32]
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d3e6      	bcc.n	8008c0c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008c3e:	8bfb      	ldrh	r3, [r7, #30]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d01e      	beq.n	8008c82 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008c44:	2300      	movs	r3, #0
 8008c46:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c4e:	461a      	mov	r2, r3
 8008c50:	f107 0310 	add.w	r3, r7, #16
 8008c54:	6812      	ldr	r2, [r2, #0]
 8008c56:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008c58:	693a      	ldr	r2, [r7, #16]
 8008c5a:	6a3b      	ldr	r3, [r7, #32]
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	00db      	lsls	r3, r3, #3
 8008c60:	fa22 f303 	lsr.w	r3, r2, r3
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c68:	701a      	strb	r2, [r3, #0]
      i++;
 8008c6a:	6a3b      	ldr	r3, [r7, #32]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c72:	3301      	adds	r3, #1
 8008c74:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008c76:	8bfb      	ldrh	r3, [r7, #30]
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008c7c:	8bfb      	ldrh	r3, [r7, #30]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d1ea      	bne.n	8008c58 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	372c      	adds	r7, #44	; 0x2c
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	695b      	ldr	r3, [r3, #20]
 8008c9c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	699b      	ldr	r3, [r3, #24]
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3714      	adds	r7, #20
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b083      	sub	sp, #12
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	695b      	ldr	r3, [r3, #20]
 8008cc2:	f003 0301 	and.w	r3, r3, #1
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	370c      	adds	r7, #12
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
	...

08008cd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	60fb      	str	r3, [r7, #12]
 8008ce6:	4a13      	ldr	r2, [pc, #76]	; (8008d34 <USB_CoreReset+0x60>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d901      	bls.n	8008cf0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008cec:	2303      	movs	r3, #3
 8008cee:	e01a      	b.n	8008d26 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	daf3      	bge.n	8008ce0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	f043 0201 	orr.w	r2, r3, #1
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	60fb      	str	r3, [r7, #12]
 8008d0e:	4a09      	ldr	r2, [pc, #36]	; (8008d34 <USB_CoreReset+0x60>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d901      	bls.n	8008d18 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008d14:	2303      	movs	r3, #3
 8008d16:	e006      	b.n	8008d26 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	f003 0301 	and.w	r3, r3, #1
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d0f1      	beq.n	8008d08 <USB_CoreReset+0x34>

  return HAL_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3714      	adds	r7, #20
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	00030d40 	.word	0x00030d40

08008d38 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d38:	b084      	sub	sp, #16
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b084      	sub	sp, #16
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
 8008d42:	f107 001c 	add.w	r0, r7, #28
 8008d46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d54:	461a      	mov	r2, r3
 8008d56:	2300      	movs	r3, #0
 8008d58:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d76:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d018      	beq.n	8008dbc <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d10a      	bne.n	8008da6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	68ba      	ldr	r2, [r7, #8]
 8008d9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d9e:	f043 0304 	orr.w	r3, r3, #4
 8008da2:	6013      	str	r3, [r2, #0]
 8008da4:	e014      	b.n	8008dd0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68ba      	ldr	r2, [r7, #8]
 8008db0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008db4:	f023 0304 	bic.w	r3, r3, #4
 8008db8:	6013      	str	r3, [r2, #0]
 8008dba:	e009      	b.n	8008dd0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68ba      	ldr	r2, [r7, #8]
 8008dc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008dca:	f023 0304 	bic.w	r3, r3, #4
 8008dce:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008dd0:	2110      	movs	r1, #16
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f7ff fe82 	bl	8008adc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f7ff fea3 	bl	8008b24 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008dde:	2300      	movs	r3, #0
 8008de0:	60fb      	str	r3, [r7, #12]
 8008de2:	e015      	b.n	8008e10 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	015a      	lsls	r2, r3, #5
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	4413      	add	r3, r2
 8008dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008df0:	461a      	mov	r2, r3
 8008df2:	f04f 33ff 	mov.w	r3, #4294967295
 8008df6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	015a      	lsls	r2, r3, #5
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	4413      	add	r3, r2
 8008e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e04:	461a      	mov	r2, r3
 8008e06:	2300      	movs	r3, #0
 8008e08:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	60fb      	str	r3, [r7, #12]
 8008e10:	6a3b      	ldr	r3, [r7, #32]
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d3e5      	bcc.n	8008de4 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f04f 32ff 	mov.w	r2, #4294967295
 8008e24:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00b      	beq.n	8008e4a <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e38:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a13      	ldr	r2, [pc, #76]	; (8008e8c <USB_HostInit+0x154>)
 8008e3e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a13      	ldr	r2, [pc, #76]	; (8008e90 <USB_HostInit+0x158>)
 8008e44:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008e48:	e009      	b.n	8008e5e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2280      	movs	r2, #128	; 0x80
 8008e4e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a10      	ldr	r2, [pc, #64]	; (8008e94 <USB_HostInit+0x15c>)
 8008e54:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4a0f      	ldr	r2, [pc, #60]	; (8008e98 <USB_HostInit+0x160>)
 8008e5a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d105      	bne.n	8008e70 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	699b      	ldr	r3, [r3, #24]
 8008e68:	f043 0210 	orr.w	r2, r3, #16
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	699a      	ldr	r2, [r3, #24]
 8008e74:	4b09      	ldr	r3, [pc, #36]	; (8008e9c <USB_HostInit+0x164>)
 8008e76:	4313      	orrs	r3, r2
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3710      	adds	r7, #16
 8008e82:	46bd      	mov	sp, r7
 8008e84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e88:	b004      	add	sp, #16
 8008e8a:	4770      	bx	lr
 8008e8c:	01000200 	.word	0x01000200
 8008e90:	00e00300 	.word	0x00e00300
 8008e94:	00600080 	.word	0x00600080
 8008e98:	004000e0 	.word	0x004000e0
 8008e9c:	a3200008 	.word	0xa3200008

08008ea0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ebe:	f023 0303 	bic.w	r3, r3, #3
 8008ec2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	78fb      	ldrb	r3, [r7, #3]
 8008ece:	f003 0303 	and.w	r3, r3, #3
 8008ed2:	68f9      	ldr	r1, [r7, #12]
 8008ed4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008edc:	78fb      	ldrb	r3, [r7, #3]
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d107      	bne.n	8008ef2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ee8:	461a      	mov	r2, r3
 8008eea:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008eee:	6053      	str	r3, [r2, #4]
 8008ef0:	e009      	b.n	8008f06 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008ef2:	78fb      	ldrb	r3, [r7, #3]
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	d106      	bne.n	8008f06 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008efe:	461a      	mov	r2, r3
 8008f00:	f241 7370 	movw	r3, #6000	; 0x1770
 8008f04:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3714      	adds	r7, #20
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008f20:	2300      	movs	r3, #0
 8008f22:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008f34:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f42:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008f44:	2064      	movs	r0, #100	; 0x64
 8008f46:	f7fb f893 	bl	8004070 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	68fa      	ldr	r2, [r7, #12]
 8008f4e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008f52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f56:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008f58:	200a      	movs	r0, #10
 8008f5a:	f7fb f889 	bl	8004070 <HAL_Delay>

  return HAL_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3710      	adds	r7, #16
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	460b      	mov	r3, r1
 8008f72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008f8c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d109      	bne.n	8008fac <USB_DriveVbus+0x44>
 8008f98:	78fb      	ldrb	r3, [r7, #3]
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d106      	bne.n	8008fac <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008fa6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008faa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fb6:	d109      	bne.n	8008fcc <USB_DriveVbus+0x64>
 8008fb8:	78fb      	ldrb	r3, [r7, #3]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d106      	bne.n	8008fcc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008fc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fca:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3714      	adds	r7, #20
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr

08008fda <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008fda:	b480      	push	{r7}
 8008fdc:	b085      	sub	sp, #20
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	0c5b      	lsrs	r3, r3, #17
 8008ff8:	f003 0303 	and.w	r3, r3, #3
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3714      	adds	r7, #20
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	b29b      	uxth	r3, r3
}
 800901e:	4618      	mov	r0, r3
 8009020:	3714      	adds	r7, #20
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr
	...

0800902c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b088      	sub	sp, #32
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	4608      	mov	r0, r1
 8009036:	4611      	mov	r1, r2
 8009038:	461a      	mov	r2, r3
 800903a:	4603      	mov	r3, r0
 800903c:	70fb      	strb	r3, [r7, #3]
 800903e:	460b      	mov	r3, r1
 8009040:	70bb      	strb	r3, [r7, #2]
 8009042:	4613      	mov	r3, r2
 8009044:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009046:	2300      	movs	r3, #0
 8009048:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800904e:	78fb      	ldrb	r3, [r7, #3]
 8009050:	015a      	lsls	r2, r3, #5
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	4413      	add	r3, r2
 8009056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800905a:	461a      	mov	r2, r3
 800905c:	f04f 33ff 	mov.w	r3, #4294967295
 8009060:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009062:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009066:	2b03      	cmp	r3, #3
 8009068:	d87e      	bhi.n	8009168 <USB_HC_Init+0x13c>
 800906a:	a201      	add	r2, pc, #4	; (adr r2, 8009070 <USB_HC_Init+0x44>)
 800906c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009070:	08009081 	.word	0x08009081
 8009074:	0800912b 	.word	0x0800912b
 8009078:	08009081 	.word	0x08009081
 800907c:	080090ed 	.word	0x080090ed
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009080:	78fb      	ldrb	r3, [r7, #3]
 8009082:	015a      	lsls	r2, r3, #5
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	4413      	add	r3, r2
 8009088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800908c:	461a      	mov	r2, r3
 800908e:	f240 439d 	movw	r3, #1181	; 0x49d
 8009092:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009094:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009098:	2b00      	cmp	r3, #0
 800909a:	da10      	bge.n	80090be <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800909c:	78fb      	ldrb	r3, [r7, #3]
 800909e:	015a      	lsls	r2, r3, #5
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	4413      	add	r3, r2
 80090a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	78fa      	ldrb	r2, [r7, #3]
 80090ac:	0151      	lsls	r1, r2, #5
 80090ae:	693a      	ldr	r2, [r7, #16]
 80090b0:	440a      	add	r2, r1
 80090b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090ba:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80090bc:	e057      	b.n	800916e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d051      	beq.n	800916e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80090ca:	78fb      	ldrb	r3, [r7, #3]
 80090cc:	015a      	lsls	r2, r3, #5
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	4413      	add	r3, r2
 80090d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	78fa      	ldrb	r2, [r7, #3]
 80090da:	0151      	lsls	r1, r2, #5
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	440a      	add	r2, r1
 80090e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80090e8:	60d3      	str	r3, [r2, #12]
      break;
 80090ea:	e040      	b.n	800916e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80090ec:	78fb      	ldrb	r3, [r7, #3]
 80090ee:	015a      	lsls	r2, r3, #5
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	4413      	add	r3, r2
 80090f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090f8:	461a      	mov	r2, r3
 80090fa:	f240 639d 	movw	r3, #1693	; 0x69d
 80090fe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009100:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009104:	2b00      	cmp	r3, #0
 8009106:	da34      	bge.n	8009172 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009108:	78fb      	ldrb	r3, [r7, #3]
 800910a:	015a      	lsls	r2, r3, #5
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	4413      	add	r3, r2
 8009110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	78fa      	ldrb	r2, [r7, #3]
 8009118:	0151      	lsls	r1, r2, #5
 800911a:	693a      	ldr	r2, [r7, #16]
 800911c:	440a      	add	r2, r1
 800911e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009126:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009128:	e023      	b.n	8009172 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800912a:	78fb      	ldrb	r3, [r7, #3]
 800912c:	015a      	lsls	r2, r3, #5
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	4413      	add	r3, r2
 8009132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009136:	461a      	mov	r2, r3
 8009138:	f240 2325 	movw	r3, #549	; 0x225
 800913c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800913e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009142:	2b00      	cmp	r3, #0
 8009144:	da17      	bge.n	8009176 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009146:	78fb      	ldrb	r3, [r7, #3]
 8009148:	015a      	lsls	r2, r3, #5
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	4413      	add	r3, r2
 800914e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	78fa      	ldrb	r2, [r7, #3]
 8009156:	0151      	lsls	r1, r2, #5
 8009158:	693a      	ldr	r2, [r7, #16]
 800915a:	440a      	add	r2, r1
 800915c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009160:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009164:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009166:	e006      	b.n	8009176 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009168:	2301      	movs	r3, #1
 800916a:	77fb      	strb	r3, [r7, #31]
      break;
 800916c:	e004      	b.n	8009178 <USB_HC_Init+0x14c>
      break;
 800916e:	bf00      	nop
 8009170:	e002      	b.n	8009178 <USB_HC_Init+0x14c>
      break;
 8009172:	bf00      	nop
 8009174:	e000      	b.n	8009178 <USB_HC_Init+0x14c>
      break;
 8009176:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800917e:	699a      	ldr	r2, [r3, #24]
 8009180:	78fb      	ldrb	r3, [r7, #3]
 8009182:	f003 030f 	and.w	r3, r3, #15
 8009186:	2101      	movs	r1, #1
 8009188:	fa01 f303 	lsl.w	r3, r1, r3
 800918c:	6939      	ldr	r1, [r7, #16]
 800918e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009192:	4313      	orrs	r3, r2
 8009194:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	699b      	ldr	r3, [r3, #24]
 800919a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80091a2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	da03      	bge.n	80091b2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80091aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091ae:	61bb      	str	r3, [r7, #24]
 80091b0:	e001      	b.n	80091b6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80091b2:	2300      	movs	r3, #0
 80091b4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f7ff ff0f 	bl	8008fda <USB_GetHostSpeed>
 80091bc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80091be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d106      	bne.n	80091d4 <USB_HC_Init+0x1a8>
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	d003      	beq.n	80091d4 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80091cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80091d0:	617b      	str	r3, [r7, #20]
 80091d2:	e001      	b.n	80091d8 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80091d4:	2300      	movs	r3, #0
 80091d6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80091d8:	787b      	ldrb	r3, [r7, #1]
 80091da:	059b      	lsls	r3, r3, #22
 80091dc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80091e0:	78bb      	ldrb	r3, [r7, #2]
 80091e2:	02db      	lsls	r3, r3, #11
 80091e4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80091e8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80091ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80091ee:	049b      	lsls	r3, r3, #18
 80091f0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80091f4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80091f6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80091f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80091fc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009202:	78fb      	ldrb	r3, [r7, #3]
 8009204:	0159      	lsls	r1, r3, #5
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	440b      	add	r3, r1
 800920a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800920e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009214:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8009216:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800921a:	2b03      	cmp	r3, #3
 800921c:	d10f      	bne.n	800923e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800921e:	78fb      	ldrb	r3, [r7, #3]
 8009220:	015a      	lsls	r2, r3, #5
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	4413      	add	r3, r2
 8009226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	78fa      	ldrb	r2, [r7, #3]
 800922e:	0151      	lsls	r1, r2, #5
 8009230:	693a      	ldr	r2, [r7, #16]
 8009232:	440a      	add	r2, r1
 8009234:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009238:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800923c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800923e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009240:	4618      	mov	r0, r3
 8009242:	3720      	adds	r7, #32
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b08c      	sub	sp, #48	; 0x30
 800924c:	af02      	add	r7, sp, #8
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	4613      	mov	r3, r2
 8009254:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	785b      	ldrb	r3, [r3, #1]
 800925e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009264:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800926a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800926e:	2b00      	cmp	r3, #0
 8009270:	d02d      	beq.n	80092ce <USB_HC_StartXfer+0x86>
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	791b      	ldrb	r3, [r3, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d129      	bne.n	80092ce <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800927a:	79fb      	ldrb	r3, [r7, #7]
 800927c:	2b01      	cmp	r3, #1
 800927e:	d117      	bne.n	80092b0 <USB_HC_StartXfer+0x68>
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	79db      	ldrb	r3, [r3, #7]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d003      	beq.n	8009290 <USB_HC_StartXfer+0x48>
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	79db      	ldrb	r3, [r3, #7]
 800928c:	2b02      	cmp	r3, #2
 800928e:	d10f      	bne.n	80092b0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	015a      	lsls	r2, r3, #5
 8009294:	6a3b      	ldr	r3, [r7, #32]
 8009296:	4413      	add	r3, r2
 8009298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	69fa      	ldr	r2, [r7, #28]
 80092a0:	0151      	lsls	r1, r2, #5
 80092a2:	6a3a      	ldr	r2, [r7, #32]
 80092a4:	440a      	add	r2, r1
 80092a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ae:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80092b0:	79fb      	ldrb	r3, [r7, #7]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10b      	bne.n	80092ce <USB_HC_StartXfer+0x86>
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	795b      	ldrb	r3, [r3, #5]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d107      	bne.n	80092ce <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	785b      	ldrb	r3, [r3, #1]
 80092c2:	4619      	mov	r1, r3
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f000 fa2f 	bl	8009728 <USB_DoPing>
      return HAL_OK;
 80092ca:	2300      	movs	r3, #0
 80092cc:	e0f8      	b.n	80094c0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	695b      	ldr	r3, [r3, #20]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d018      	beq.n	8009308 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	695b      	ldr	r3, [r3, #20]
 80092da:	68ba      	ldr	r2, [r7, #8]
 80092dc:	8912      	ldrh	r2, [r2, #8]
 80092de:	4413      	add	r3, r2
 80092e0:	3b01      	subs	r3, #1
 80092e2:	68ba      	ldr	r2, [r7, #8]
 80092e4:	8912      	ldrh	r2, [r2, #8]
 80092e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80092ea:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80092ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80092ee:	8b7b      	ldrh	r3, [r7, #26]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d90b      	bls.n	800930c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80092f4:	8b7b      	ldrh	r3, [r7, #26]
 80092f6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80092f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80092fa:	68ba      	ldr	r2, [r7, #8]
 80092fc:	8912      	ldrh	r2, [r2, #8]
 80092fe:	fb02 f203 	mul.w	r2, r2, r3
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	611a      	str	r2, [r3, #16]
 8009306:	e001      	b.n	800930c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009308:	2301      	movs	r3, #1
 800930a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	78db      	ldrb	r3, [r3, #3]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d007      	beq.n	8009324 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009314:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009316:	68ba      	ldr	r2, [r7, #8]
 8009318:	8912      	ldrh	r2, [r2, #8]
 800931a:	fb02 f203 	mul.w	r2, r2, r3
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	611a      	str	r2, [r3, #16]
 8009322:	e003      	b.n	800932c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	695a      	ldr	r2, [r3, #20]
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009334:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009336:	04d9      	lsls	r1, r3, #19
 8009338:	4b63      	ldr	r3, [pc, #396]	; (80094c8 <USB_HC_StartXfer+0x280>)
 800933a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800933c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	7a9b      	ldrb	r3, [r3, #10]
 8009342:	075b      	lsls	r3, r3, #29
 8009344:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009348:	69f9      	ldr	r1, [r7, #28]
 800934a:	0148      	lsls	r0, r1, #5
 800934c:	6a39      	ldr	r1, [r7, #32]
 800934e:	4401      	add	r1, r0
 8009350:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009354:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009356:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009358:	79fb      	ldrb	r3, [r7, #7]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d009      	beq.n	8009372 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	68d9      	ldr	r1, [r3, #12]
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	015a      	lsls	r2, r3, #5
 8009366:	6a3b      	ldr	r3, [r7, #32]
 8009368:	4413      	add	r3, r2
 800936a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800936e:	460a      	mov	r2, r1
 8009370:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009372:	6a3b      	ldr	r3, [r7, #32]
 8009374:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	f003 0301 	and.w	r3, r3, #1
 800937e:	2b00      	cmp	r3, #0
 8009380:	bf0c      	ite	eq
 8009382:	2301      	moveq	r3, #1
 8009384:	2300      	movne	r3, #0
 8009386:	b2db      	uxtb	r3, r3
 8009388:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800938a:	69fb      	ldr	r3, [r7, #28]
 800938c:	015a      	lsls	r2, r3, #5
 800938e:	6a3b      	ldr	r3, [r7, #32]
 8009390:	4413      	add	r3, r2
 8009392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	69fa      	ldr	r2, [r7, #28]
 800939a:	0151      	lsls	r1, r2, #5
 800939c:	6a3a      	ldr	r2, [r7, #32]
 800939e:	440a      	add	r2, r1
 80093a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80093a8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	015a      	lsls	r2, r3, #5
 80093ae:	6a3b      	ldr	r3, [r7, #32]
 80093b0:	4413      	add	r3, r2
 80093b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	7e7b      	ldrb	r3, [r7, #25]
 80093ba:	075b      	lsls	r3, r3, #29
 80093bc:	69f9      	ldr	r1, [r7, #28]
 80093be:	0148      	lsls	r0, r1, #5
 80093c0:	6a39      	ldr	r1, [r7, #32]
 80093c2:	4401      	add	r1, r0
 80093c4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80093c8:	4313      	orrs	r3, r2
 80093ca:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	015a      	lsls	r2, r3, #5
 80093d0:	6a3b      	ldr	r3, [r7, #32]
 80093d2:	4413      	add	r3, r2
 80093d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80093e2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	78db      	ldrb	r3, [r3, #3]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d004      	beq.n	80093f6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093f2:	613b      	str	r3, [r7, #16]
 80093f4:	e003      	b.n	80093fe <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80093fc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009404:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	015a      	lsls	r2, r3, #5
 800940a:	6a3b      	ldr	r3, [r7, #32]
 800940c:	4413      	add	r3, r2
 800940e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009412:	461a      	mov	r2, r3
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009418:	79fb      	ldrb	r3, [r7, #7]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d001      	beq.n	8009422 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800941e:	2300      	movs	r3, #0
 8009420:	e04e      	b.n	80094c0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	78db      	ldrb	r3, [r3, #3]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d149      	bne.n	80094be <USB_HC_StartXfer+0x276>
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	695b      	ldr	r3, [r3, #20]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d045      	beq.n	80094be <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	79db      	ldrb	r3, [r3, #7]
 8009436:	2b03      	cmp	r3, #3
 8009438:	d830      	bhi.n	800949c <USB_HC_StartXfer+0x254>
 800943a:	a201      	add	r2, pc, #4	; (adr r2, 8009440 <USB_HC_StartXfer+0x1f8>)
 800943c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009440:	08009451 	.word	0x08009451
 8009444:	08009475 	.word	0x08009475
 8009448:	08009451 	.word	0x08009451
 800944c:	08009475 	.word	0x08009475
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	695b      	ldr	r3, [r3, #20]
 8009454:	3303      	adds	r3, #3
 8009456:	089b      	lsrs	r3, r3, #2
 8009458:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800945a:	8afa      	ldrh	r2, [r7, #22]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009460:	b29b      	uxth	r3, r3
 8009462:	429a      	cmp	r2, r3
 8009464:	d91c      	bls.n	80094a0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	699b      	ldr	r3, [r3, #24]
 800946a:	f043 0220 	orr.w	r2, r3, #32
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	619a      	str	r2, [r3, #24]
        }
        break;
 8009472:	e015      	b.n	80094a0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	695b      	ldr	r3, [r3, #20]
 8009478:	3303      	adds	r3, #3
 800947a:	089b      	lsrs	r3, r3, #2
 800947c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800947e:	8afa      	ldrh	r2, [r7, #22]
 8009480:	6a3b      	ldr	r3, [r7, #32]
 8009482:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	b29b      	uxth	r3, r3
 800948a:	429a      	cmp	r2, r3
 800948c:	d90a      	bls.n	80094a4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	699b      	ldr	r3, [r3, #24]
 8009492:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	619a      	str	r2, [r3, #24]
        }
        break;
 800949a:	e003      	b.n	80094a4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800949c:	bf00      	nop
 800949e:	e002      	b.n	80094a6 <USB_HC_StartXfer+0x25e>
        break;
 80094a0:	bf00      	nop
 80094a2:	e000      	b.n	80094a6 <USB_HC_StartXfer+0x25e>
        break;
 80094a4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	68d9      	ldr	r1, [r3, #12]
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	785a      	ldrb	r2, [r3, #1]
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	695b      	ldr	r3, [r3, #20]
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	2000      	movs	r0, #0
 80094b6:	9000      	str	r0, [sp, #0]
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f7ff fb53 	bl	8008b64 <USB_WritePacket>
  }

  return HAL_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3728      	adds	r7, #40	; 0x28
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	1ff80000 	.word	0x1ff80000

080094cc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094de:	695b      	ldr	r3, [r3, #20]
 80094e0:	b29b      	uxth	r3, r3
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3714      	adds	r7, #20
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr

080094ee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80094ee:	b480      	push	{r7}
 80094f0:	b089      	sub	sp, #36	; 0x24
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
 80094f6:	460b      	mov	r3, r1
 80094f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80094fe:	78fb      	ldrb	r3, [r7, #3]
 8009500:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8009502:	2300      	movs	r3, #0
 8009504:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	015a      	lsls	r2, r3, #5
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	4413      	add	r3, r2
 800950e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	0c9b      	lsrs	r3, r3, #18
 8009516:	f003 0303 	and.w	r3, r3, #3
 800951a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	015a      	lsls	r2, r3, #5
 8009520:	69bb      	ldr	r3, [r7, #24]
 8009522:	4413      	add	r3, r2
 8009524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	0fdb      	lsrs	r3, r3, #31
 800952c:	f003 0301 	and.w	r3, r3, #1
 8009530:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	f003 0320 	and.w	r3, r3, #32
 800953a:	2b20      	cmp	r3, #32
 800953c:	d104      	bne.n	8009548 <USB_HC_Halt+0x5a>
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d101      	bne.n	8009548 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009544:	2300      	movs	r3, #0
 8009546:	e0e8      	b.n	800971a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d002      	beq.n	8009554 <USB_HC_Halt+0x66>
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	2b02      	cmp	r3, #2
 8009552:	d173      	bne.n	800963c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	015a      	lsls	r2, r3, #5
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	4413      	add	r3, r2
 800955c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	697a      	ldr	r2, [r7, #20]
 8009564:	0151      	lsls	r1, r2, #5
 8009566:	69ba      	ldr	r2, [r7, #24]
 8009568:	440a      	add	r2, r1
 800956a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800956e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009572:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	f003 0320 	and.w	r3, r3, #32
 800957c:	2b00      	cmp	r3, #0
 800957e:	f040 80cb 	bne.w	8009718 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009586:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800958a:	2b00      	cmp	r3, #0
 800958c:	d143      	bne.n	8009616 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	015a      	lsls	r2, r3, #5
 8009592:	69bb      	ldr	r3, [r7, #24]
 8009594:	4413      	add	r3, r2
 8009596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	697a      	ldr	r2, [r7, #20]
 800959e:	0151      	lsls	r1, r2, #5
 80095a0:	69ba      	ldr	r2, [r7, #24]
 80095a2:	440a      	add	r2, r1
 80095a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095ac:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	015a      	lsls	r2, r3, #5
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	4413      	add	r3, r2
 80095b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	697a      	ldr	r2, [r7, #20]
 80095be:	0151      	lsls	r1, r2, #5
 80095c0:	69ba      	ldr	r2, [r7, #24]
 80095c2:	440a      	add	r2, r1
 80095c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80095cc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	015a      	lsls	r2, r3, #5
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	4413      	add	r3, r2
 80095d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	697a      	ldr	r2, [r7, #20]
 80095de:	0151      	lsls	r1, r2, #5
 80095e0:	69ba      	ldr	r2, [r7, #24]
 80095e2:	440a      	add	r2, r1
 80095e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80095ec:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	3301      	adds	r3, #1
 80095f2:	61fb      	str	r3, [r7, #28]
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095fa:	d81d      	bhi.n	8009638 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	015a      	lsls	r2, r3, #5
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	4413      	add	r3, r2
 8009604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800960e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009612:	d0ec      	beq.n	80095ee <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009614:	e080      	b.n	8009718 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	015a      	lsls	r2, r3, #5
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	4413      	add	r3, r2
 800961e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	697a      	ldr	r2, [r7, #20]
 8009626:	0151      	lsls	r1, r2, #5
 8009628:	69ba      	ldr	r2, [r7, #24]
 800962a:	440a      	add	r2, r1
 800962c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009634:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009636:	e06f      	b.n	8009718 <USB_HC_Halt+0x22a>
            break;
 8009638:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800963a:	e06d      	b.n	8009718 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	015a      	lsls	r2, r3, #5
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	4413      	add	r3, r2
 8009644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	697a      	ldr	r2, [r7, #20]
 800964c:	0151      	lsls	r1, r2, #5
 800964e:	69ba      	ldr	r2, [r7, #24]
 8009650:	440a      	add	r2, r1
 8009652:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009656:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800965a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009662:	691b      	ldr	r3, [r3, #16]
 8009664:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009668:	2b00      	cmp	r3, #0
 800966a:	d143      	bne.n	80096f4 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	015a      	lsls	r2, r3, #5
 8009670:	69bb      	ldr	r3, [r7, #24]
 8009672:	4413      	add	r3, r2
 8009674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	697a      	ldr	r2, [r7, #20]
 800967c:	0151      	lsls	r1, r2, #5
 800967e:	69ba      	ldr	r2, [r7, #24]
 8009680:	440a      	add	r2, r1
 8009682:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009686:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800968a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	015a      	lsls	r2, r3, #5
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	4413      	add	r3, r2
 8009694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	697a      	ldr	r2, [r7, #20]
 800969c:	0151      	lsls	r1, r2, #5
 800969e:	69ba      	ldr	r2, [r7, #24]
 80096a0:	440a      	add	r2, r1
 80096a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80096aa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	015a      	lsls	r2, r3, #5
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	4413      	add	r3, r2
 80096b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	697a      	ldr	r2, [r7, #20]
 80096bc:	0151      	lsls	r1, r2, #5
 80096be:	69ba      	ldr	r2, [r7, #24]
 80096c0:	440a      	add	r2, r1
 80096c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80096ca:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	3301      	adds	r3, #1
 80096d0:	61fb      	str	r3, [r7, #28]
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096d8:	d81d      	bhi.n	8009716 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	015a      	lsls	r2, r3, #5
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	4413      	add	r3, r2
 80096e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096f0:	d0ec      	beq.n	80096cc <USB_HC_Halt+0x1de>
 80096f2:	e011      	b.n	8009718 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	015a      	lsls	r2, r3, #5
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	4413      	add	r3, r2
 80096fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	697a      	ldr	r2, [r7, #20]
 8009704:	0151      	lsls	r1, r2, #5
 8009706:	69ba      	ldr	r2, [r7, #24]
 8009708:	440a      	add	r2, r1
 800970a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800970e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009712:	6013      	str	r3, [r2, #0]
 8009714:	e000      	b.n	8009718 <USB_HC_Halt+0x22a>
          break;
 8009716:	bf00      	nop
    }
  }

  return HAL_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	3724      	adds	r7, #36	; 0x24
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr
	...

08009728 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009728:	b480      	push	{r7}
 800972a:	b087      	sub	sp, #28
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	460b      	mov	r3, r1
 8009732:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009738:	78fb      	ldrb	r3, [r7, #3]
 800973a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800973c:	2301      	movs	r3, #1
 800973e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	04da      	lsls	r2, r3, #19
 8009744:	4b15      	ldr	r3, [pc, #84]	; (800979c <USB_DoPing+0x74>)
 8009746:	4013      	ands	r3, r2
 8009748:	693a      	ldr	r2, [r7, #16]
 800974a:	0151      	lsls	r1, r2, #5
 800974c:	697a      	ldr	r2, [r7, #20]
 800974e:	440a      	add	r2, r1
 8009750:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009754:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009758:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	015a      	lsls	r2, r3, #5
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	4413      	add	r3, r2
 8009762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009770:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009778:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	015a      	lsls	r2, r3, #5
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	4413      	add	r3, r2
 8009782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009786:	461a      	mov	r2, r3
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	371c      	adds	r7, #28
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	1ff80000 	.word	0x1ff80000

080097a0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b086      	sub	sp, #24
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80097ac:	2300      	movs	r3, #0
 80097ae:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f7ff f935 	bl	8008a20 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80097b6:	2110      	movs	r1, #16
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f7ff f98f 	bl	8008adc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f7ff f9b0 	bl	8008b24 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80097c4:	2300      	movs	r3, #0
 80097c6:	613b      	str	r3, [r7, #16]
 80097c8:	e01f      	b.n	800980a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	015a      	lsls	r2, r3, #5
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	4413      	add	r3, r2
 80097d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097e0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80097e8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80097f0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	015a      	lsls	r2, r3, #5
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	4413      	add	r3, r2
 80097fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097fe:	461a      	mov	r2, r3
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	3301      	adds	r3, #1
 8009808:	613b      	str	r3, [r7, #16]
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	2b0f      	cmp	r3, #15
 800980e:	d9dc      	bls.n	80097ca <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009810:	2300      	movs	r3, #0
 8009812:	613b      	str	r3, [r7, #16]
 8009814:	e034      	b.n	8009880 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	015a      	lsls	r2, r3, #5
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	4413      	add	r3, r2
 800981e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800982c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009834:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800983c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	015a      	lsls	r2, r3, #5
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	4413      	add	r3, r2
 8009846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800984a:	461a      	mov	r2, r3
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	3301      	adds	r3, #1
 8009854:	617b      	str	r3, [r7, #20]
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800985c:	d80c      	bhi.n	8009878 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	015a      	lsls	r2, r3, #5
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	4413      	add	r3, r2
 8009866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009870:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009874:	d0ec      	beq.n	8009850 <USB_StopHost+0xb0>
 8009876:	e000      	b.n	800987a <USB_StopHost+0xda>
        break;
 8009878:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	3301      	adds	r3, #1
 800987e:	613b      	str	r3, [r7, #16]
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	2b0f      	cmp	r3, #15
 8009884:	d9c7      	bls.n	8009816 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800988c:	461a      	mov	r2, r3
 800988e:	f04f 33ff 	mov.w	r3, #4294967295
 8009892:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f04f 32ff 	mov.w	r2, #4294967295
 800989a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f7ff f8ae 	bl	80089fe <USB_EnableGlobalInt>

  return HAL_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3718      	adds	r7, #24
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80098ac:	b590      	push	{r4, r7, lr}
 80098ae:	b089      	sub	sp, #36	; 0x24
 80098b0:	af04      	add	r7, sp, #16
 80098b2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80098b4:	2301      	movs	r3, #1
 80098b6:	2202      	movs	r2, #2
 80098b8:	2102      	movs	r1, #2
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 fc66 	bl	800a18c <USBH_FindInterface>
 80098c0:	4603      	mov	r3, r0
 80098c2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80098c4:	7bfb      	ldrb	r3, [r7, #15]
 80098c6:	2bff      	cmp	r3, #255	; 0xff
 80098c8:	d002      	beq.n	80098d0 <USBH_CDC_InterfaceInit+0x24>
 80098ca:	7bfb      	ldrb	r3, [r7, #15]
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d901      	bls.n	80098d4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80098d0:	2302      	movs	r3, #2
 80098d2:	e13d      	b.n	8009b50 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80098d4:	7bfb      	ldrb	r3, [r7, #15]
 80098d6:	4619      	mov	r1, r3
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 fc3b 	bl	800a154 <USBH_SelectInterface>
 80098de:	4603      	mov	r3, r0
 80098e0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80098e2:	7bbb      	ldrb	r3, [r7, #14]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d001      	beq.n	80098ec <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80098e8:	2302      	movs	r3, #2
 80098ea:	e131      	b.n	8009b50 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80098f2:	2050      	movs	r0, #80	; 0x50
 80098f4:	f002 fa30 	bl	800bd58 <malloc>
 80098f8:	4603      	mov	r3, r0
 80098fa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009902:	69db      	ldr	r3, [r3, #28]
 8009904:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d101      	bne.n	8009910 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800990c:	2302      	movs	r3, #2
 800990e:	e11f      	b.n	8009b50 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009910:	2250      	movs	r2, #80	; 0x50
 8009912:	2100      	movs	r1, #0
 8009914:	68b8      	ldr	r0, [r7, #8]
 8009916:	f002 fa2f 	bl	800bd78 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800991a:	7bfb      	ldrb	r3, [r7, #15]
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	211a      	movs	r1, #26
 8009920:	fb01 f303 	mul.w	r3, r1, r3
 8009924:	4413      	add	r3, r2
 8009926:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	b25b      	sxtb	r3, r3
 800992e:	2b00      	cmp	r3, #0
 8009930:	da15      	bge.n	800995e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009932:	7bfb      	ldrb	r3, [r7, #15]
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	211a      	movs	r1, #26
 8009938:	fb01 f303 	mul.w	r3, r1, r3
 800993c:	4413      	add	r3, r2
 800993e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009942:	781a      	ldrb	r2, [r3, #0]
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009948:	7bfb      	ldrb	r3, [r7, #15]
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	211a      	movs	r1, #26
 800994e:	fb01 f303 	mul.w	r3, r1, r3
 8009952:	4413      	add	r3, r2
 8009954:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009958:	881a      	ldrh	r2, [r3, #0]
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	785b      	ldrb	r3, [r3, #1]
 8009962:	4619      	mov	r1, r3
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f001 fe32 	bl	800b5ce <USBH_AllocPipe>
 800996a:	4603      	mov	r3, r0
 800996c:	461a      	mov	r2, r3
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	7819      	ldrb	r1, [r3, #0]
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	7858      	ldrb	r0, [r3, #1]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009986:	68ba      	ldr	r2, [r7, #8]
 8009988:	8952      	ldrh	r2, [r2, #10]
 800998a:	9202      	str	r2, [sp, #8]
 800998c:	2203      	movs	r2, #3
 800998e:	9201      	str	r2, [sp, #4]
 8009990:	9300      	str	r3, [sp, #0]
 8009992:	4623      	mov	r3, r4
 8009994:	4602      	mov	r2, r0
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f001 fdea 	bl	800b570 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	2200      	movs	r2, #0
 80099a2:	4619      	mov	r1, r3
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f002 f8f9 	bl	800bb9c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80099aa:	2300      	movs	r3, #0
 80099ac:	2200      	movs	r2, #0
 80099ae:	210a      	movs	r1, #10
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 fbeb 	bl	800a18c <USBH_FindInterface>
 80099b6:	4603      	mov	r3, r0
 80099b8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80099ba:	7bfb      	ldrb	r3, [r7, #15]
 80099bc:	2bff      	cmp	r3, #255	; 0xff
 80099be:	d002      	beq.n	80099c6 <USBH_CDC_InterfaceInit+0x11a>
 80099c0:	7bfb      	ldrb	r3, [r7, #15]
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d901      	bls.n	80099ca <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80099c6:	2302      	movs	r3, #2
 80099c8:	e0c2      	b.n	8009b50 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80099ca:	7bfb      	ldrb	r3, [r7, #15]
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	211a      	movs	r1, #26
 80099d0:	fb01 f303 	mul.w	r3, r1, r3
 80099d4:	4413      	add	r3, r2
 80099d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	b25b      	sxtb	r3, r3
 80099de:	2b00      	cmp	r3, #0
 80099e0:	da16      	bge.n	8009a10 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80099e2:	7bfb      	ldrb	r3, [r7, #15]
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	211a      	movs	r1, #26
 80099e8:	fb01 f303 	mul.w	r3, r1, r3
 80099ec:	4413      	add	r3, r2
 80099ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80099f2:	781a      	ldrb	r2, [r3, #0]
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80099f8:	7bfb      	ldrb	r3, [r7, #15]
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	211a      	movs	r1, #26
 80099fe:	fb01 f303 	mul.w	r3, r1, r3
 8009a02:	4413      	add	r3, r2
 8009a04:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009a08:	881a      	ldrh	r2, [r3, #0]
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	835a      	strh	r2, [r3, #26]
 8009a0e:	e015      	b.n	8009a3c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009a10:	7bfb      	ldrb	r3, [r7, #15]
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	211a      	movs	r1, #26
 8009a16:	fb01 f303 	mul.w	r3, r1, r3
 8009a1a:	4413      	add	r3, r2
 8009a1c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009a20:	781a      	ldrb	r2, [r3, #0]
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009a26:	7bfb      	ldrb	r3, [r7, #15]
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	211a      	movs	r1, #26
 8009a2c:	fb01 f303 	mul.w	r3, r1, r3
 8009a30:	4413      	add	r3, r2
 8009a32:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009a36:	881a      	ldrh	r2, [r3, #0]
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009a3c:	7bfb      	ldrb	r3, [r7, #15]
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	211a      	movs	r1, #26
 8009a42:	fb01 f303 	mul.w	r3, r1, r3
 8009a46:	4413      	add	r3, r2
 8009a48:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	b25b      	sxtb	r3, r3
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	da16      	bge.n	8009a82 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009a54:	7bfb      	ldrb	r3, [r7, #15]
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	211a      	movs	r1, #26
 8009a5a:	fb01 f303 	mul.w	r3, r1, r3
 8009a5e:	4413      	add	r3, r2
 8009a60:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009a64:	781a      	ldrb	r2, [r3, #0]
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009a6a:	7bfb      	ldrb	r3, [r7, #15]
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	211a      	movs	r1, #26
 8009a70:	fb01 f303 	mul.w	r3, r1, r3
 8009a74:	4413      	add	r3, r2
 8009a76:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009a7a:	881a      	ldrh	r2, [r3, #0]
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	835a      	strh	r2, [r3, #26]
 8009a80:	e015      	b.n	8009aae <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009a82:	7bfb      	ldrb	r3, [r7, #15]
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	211a      	movs	r1, #26
 8009a88:	fb01 f303 	mul.w	r3, r1, r3
 8009a8c:	4413      	add	r3, r2
 8009a8e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009a92:	781a      	ldrb	r2, [r3, #0]
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009a98:	7bfb      	ldrb	r3, [r7, #15]
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	211a      	movs	r1, #26
 8009a9e:	fb01 f303 	mul.w	r3, r1, r3
 8009aa2:	4413      	add	r3, r2
 8009aa4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009aa8:	881a      	ldrh	r2, [r3, #0]
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	7b9b      	ldrb	r3, [r3, #14]
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f001 fd8a 	bl	800b5ce <USBH_AllocPipe>
 8009aba:	4603      	mov	r3, r0
 8009abc:	461a      	mov	r2, r3
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	7bdb      	ldrb	r3, [r3, #15]
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f001 fd80 	bl	800b5ce <USBH_AllocPipe>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	7b59      	ldrb	r1, [r3, #13]
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	7b98      	ldrb	r0, [r3, #14]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009aea:	68ba      	ldr	r2, [r7, #8]
 8009aec:	8b12      	ldrh	r2, [r2, #24]
 8009aee:	9202      	str	r2, [sp, #8]
 8009af0:	2202      	movs	r2, #2
 8009af2:	9201      	str	r2, [sp, #4]
 8009af4:	9300      	str	r3, [sp, #0]
 8009af6:	4623      	mov	r3, r4
 8009af8:	4602      	mov	r2, r0
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f001 fd38 	bl	800b570 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	7b19      	ldrb	r1, [r3, #12]
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	7bd8      	ldrb	r0, [r3, #15]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b14:	68ba      	ldr	r2, [r7, #8]
 8009b16:	8b52      	ldrh	r2, [r2, #26]
 8009b18:	9202      	str	r2, [sp, #8]
 8009b1a:	2202      	movs	r2, #2
 8009b1c:	9201      	str	r2, [sp, #4]
 8009b1e:	9300      	str	r3, [sp, #0]
 8009b20:	4623      	mov	r3, r4
 8009b22:	4602      	mov	r2, r0
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f001 fd23 	bl	800b570 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	7b5b      	ldrb	r3, [r3, #13]
 8009b36:	2200      	movs	r2, #0
 8009b38:	4619      	mov	r1, r3
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f002 f82e 	bl	800bb9c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	7b1b      	ldrb	r3, [r3, #12]
 8009b44:	2200      	movs	r2, #0
 8009b46:	4619      	mov	r1, r3
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f002 f827 	bl	800bb9c <USBH_LL_SetToggle>

  return USBH_OK;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3714      	adds	r7, #20
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd90      	pop	{r4, r7, pc}

08009b58 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b66:	69db      	ldr	r3, [r3, #28]
 8009b68:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d00e      	beq.n	8009b90 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	4619      	mov	r1, r3
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f001 fd18 	bl	800b5ae <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	4619      	mov	r1, r3
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f001 fd43 	bl	800b610 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	7b1b      	ldrb	r3, [r3, #12]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d00e      	beq.n	8009bb6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	7b1b      	ldrb	r3, [r3, #12]
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f001 fd05 	bl	800b5ae <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	7b1b      	ldrb	r3, [r3, #12]
 8009ba8:	4619      	mov	r1, r3
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f001 fd30 	bl	800b610 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	7b5b      	ldrb	r3, [r3, #13]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d00e      	beq.n	8009bdc <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	7b5b      	ldrb	r3, [r3, #13]
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f001 fcf2 	bl	800b5ae <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	7b5b      	ldrb	r3, [r3, #13]
 8009bce:	4619      	mov	r1, r3
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f001 fd1d 	bl	800b610 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009be2:	69db      	ldr	r3, [r3, #28]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00b      	beq.n	8009c00 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bee:	69db      	ldr	r3, [r3, #28]
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f002 f8b9 	bl	800bd68 <free>
    phost->pActiveClass->pData = 0U;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3710      	adds	r7, #16
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b084      	sub	sp, #16
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c18:	69db      	ldr	r3, [r3, #28]
 8009c1a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	3340      	adds	r3, #64	; 0x40
 8009c20:	4619      	mov	r1, r3
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 f8b1 	bl	8009d8a <GetLineCoding>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009c2c:	7afb      	ldrb	r3, [r7, #11]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d105      	bne.n	8009c3e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009c38:	2102      	movs	r1, #2
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009c3e:	7afb      	ldrb	r3, [r7, #11]
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3710      	adds	r7, #16
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009c50:	2301      	movs	r3, #1
 8009c52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009c54:	2300      	movs	r3, #0
 8009c56:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c5e:	69db      	ldr	r3, [r3, #28]
 8009c60:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009c68:	2b04      	cmp	r3, #4
 8009c6a:	d877      	bhi.n	8009d5c <USBH_CDC_Process+0x114>
 8009c6c:	a201      	add	r2, pc, #4	; (adr r2, 8009c74 <USBH_CDC_Process+0x2c>)
 8009c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c72:	bf00      	nop
 8009c74:	08009c89 	.word	0x08009c89
 8009c78:	08009c8f 	.word	0x08009c8f
 8009c7c:	08009cbf 	.word	0x08009cbf
 8009c80:	08009d33 	.word	0x08009d33
 8009c84:	08009d41 	.word	0x08009d41
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8009c8c:	e06d      	b.n	8009d6a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c92:	4619      	mov	r1, r3
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 f897 	bl	8009dc8 <SetLineCoding>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009c9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d104      	bne.n	8009cae <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	2202      	movs	r2, #2
 8009ca8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009cac:	e058      	b.n	8009d60 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009cae:	7bbb      	ldrb	r3, [r7, #14]
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d055      	beq.n	8009d60 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	2204      	movs	r2, #4
 8009cb8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009cbc:	e050      	b.n	8009d60 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	3340      	adds	r3, #64	; 0x40
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 f860 	bl	8009d8a <GetLineCoding>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009cce:	7bbb      	ldrb	r3, [r7, #14]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d126      	bne.n	8009d22 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ce6:	791b      	ldrb	r3, [r3, #4]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d13b      	bne.n	8009d64 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cf6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d133      	bne.n	8009d64 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d06:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d12b      	bne.n	8009d64 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d14:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d124      	bne.n	8009d64 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 f958 	bl	8009fd0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009d20:	e020      	b.n	8009d64 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009d22:	7bbb      	ldrb	r3, [r7, #14]
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d01d      	beq.n	8009d64 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	2204      	movs	r2, #4
 8009d2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009d30:	e018      	b.n	8009d64 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 f867 	bl	8009e06 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 f8da 	bl	8009ef2 <CDC_ProcessReception>
      break;
 8009d3e:	e014      	b.n	8009d6a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009d40:	2100      	movs	r1, #0
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 ffe3 	bl	800ad0e <USBH_ClrFeature>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009d4c:	7bbb      	ldrb	r3, [r7, #14]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d10a      	bne.n	8009d68 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	2200      	movs	r2, #0
 8009d56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8009d5a:	e005      	b.n	8009d68 <USBH_CDC_Process+0x120>

    default:
      break;
 8009d5c:	bf00      	nop
 8009d5e:	e004      	b.n	8009d6a <USBH_CDC_Process+0x122>
      break;
 8009d60:	bf00      	nop
 8009d62:	e002      	b.n	8009d6a <USBH_CDC_Process+0x122>
      break;
 8009d64:	bf00      	nop
 8009d66:	e000      	b.n	8009d6a <USBH_CDC_Process+0x122>
      break;
 8009d68:	bf00      	nop

  }

  return status;
 8009d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3710      	adds	r7, #16
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009d7c:	2300      	movs	r3, #0
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	370c      	adds	r7, #12
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr

08009d8a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b082      	sub	sp, #8
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
 8009d92:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	22a1      	movs	r2, #161	; 0xa1
 8009d98:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2221      	movs	r2, #33	; 0x21
 8009d9e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2200      	movs	r2, #0
 8009daa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2207      	movs	r2, #7
 8009db0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	2207      	movs	r2, #7
 8009db6:	4619      	mov	r1, r3
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f001 f988 	bl	800b0ce <USBH_CtlReq>
 8009dbe:	4603      	mov	r3, r0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3708      	adds	r7, #8
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2221      	movs	r2, #33	; 0x21
 8009dd6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2220      	movs	r2, #32
 8009ddc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2207      	movs	r2, #7
 8009dee:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	2207      	movs	r2, #7
 8009df4:	4619      	mov	r1, r3
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f001 f969 	bl	800b0ce <USBH_CtlReq>
 8009dfc:	4603      	mov	r3, r0
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3708      	adds	r7, #8
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b086      	sub	sp, #24
 8009e0a:	af02      	add	r7, sp, #8
 8009e0c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e14:	69db      	ldr	r3, [r3, #28]
 8009e16:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d002      	beq.n	8009e2c <CDC_ProcessTransmission+0x26>
 8009e26:	2b02      	cmp	r3, #2
 8009e28:	d023      	beq.n	8009e72 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009e2a:	e05e      	b.n	8009eea <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e30:	68fa      	ldr	r2, [r7, #12]
 8009e32:	8b12      	ldrh	r2, [r2, #24]
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d90b      	bls.n	8009e50 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	69d9      	ldr	r1, [r3, #28]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	8b1a      	ldrh	r2, [r3, #24]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	7b5b      	ldrb	r3, [r3, #13]
 8009e44:	2001      	movs	r0, #1
 8009e46:	9000      	str	r0, [sp, #0]
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f001 fb4e 	bl	800b4ea <USBH_BulkSendData>
 8009e4e:	e00b      	b.n	8009e68 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8009e58:	b29a      	uxth	r2, r3
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	7b5b      	ldrb	r3, [r3, #13]
 8009e5e:	2001      	movs	r0, #1
 8009e60:	9000      	str	r0, [sp, #0]
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f001 fb41 	bl	800b4ea <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2202      	movs	r2, #2
 8009e6c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009e70:	e03b      	b.n	8009eea <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	7b5b      	ldrb	r3, [r3, #13]
 8009e76:	4619      	mov	r1, r3
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f001 fe65 	bl	800bb48 <USBH_LL_GetURBState>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009e82:	7afb      	ldrb	r3, [r7, #11]
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d128      	bne.n	8009eda <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8c:	68fa      	ldr	r2, [r7, #12]
 8009e8e:	8b12      	ldrh	r2, [r2, #24]
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d90e      	bls.n	8009eb2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	8b12      	ldrh	r2, [r2, #24]
 8009e9c:	1a9a      	subs	r2, r3, r2
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	69db      	ldr	r3, [r3, #28]
 8009ea6:	68fa      	ldr	r2, [r7, #12]
 8009ea8:	8b12      	ldrh	r2, [r2, #24]
 8009eaa:	441a      	add	r2, r3
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	61da      	str	r2, [r3, #28]
 8009eb0:	e002      	b.n	8009eb8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d004      	beq.n	8009eca <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009ec8:	e00e      	b.n	8009ee8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 f868 	bl	8009fa8 <USBH_CDC_TransmitCallback>
      break;
 8009ed8:	e006      	b.n	8009ee8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009eda:	7afb      	ldrb	r3, [r7, #11]
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	d103      	bne.n	8009ee8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009ee8:	bf00      	nop
  }
}
 8009eea:	bf00      	nop
 8009eec:	3710      	adds	r7, #16
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b086      	sub	sp, #24
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f00:	69db      	ldr	r3, [r3, #28]
 8009f02:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009f04:	2300      	movs	r3, #0
 8009f06:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009f0e:	2b03      	cmp	r3, #3
 8009f10:	d002      	beq.n	8009f18 <CDC_ProcessReception+0x26>
 8009f12:	2b04      	cmp	r3, #4
 8009f14:	d00e      	beq.n	8009f34 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009f16:	e043      	b.n	8009fa0 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	6a19      	ldr	r1, [r3, #32]
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	8b5a      	ldrh	r2, [r3, #26]
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	7b1b      	ldrb	r3, [r3, #12]
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f001 fb05 	bl	800b534 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	2204      	movs	r2, #4
 8009f2e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009f32:	e035      	b.n	8009fa0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	7b1b      	ldrb	r3, [r3, #12]
 8009f38:	4619      	mov	r1, r3
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f001 fe04 	bl	800bb48 <USBH_LL_GetURBState>
 8009f40:	4603      	mov	r3, r0
 8009f42:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009f44:	7cfb      	ldrb	r3, [r7, #19]
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d129      	bne.n	8009f9e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	7b1b      	ldrb	r3, [r3, #12]
 8009f4e:	4619      	mov	r1, r3
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f001 fd67 	bl	800ba24 <USBH_LL_GetLastXferSize>
 8009f56:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d016      	beq.n	8009f90 <CDC_ProcessReception+0x9e>
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	8b5b      	ldrh	r3, [r3, #26]
 8009f66:	461a      	mov	r2, r3
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d910      	bls.n	8009f90 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	1ad2      	subs	r2, r2, r3
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	6a1a      	ldr	r2, [r3, #32]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	441a      	add	r2, r3
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	2203      	movs	r2, #3
 8009f8a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009f8e:	e006      	b.n	8009f9e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 f80f 	bl	8009fbc <USBH_CDC_ReceiveCallback>
      break;
 8009f9e:	bf00      	nop
  }
}
 8009fa0:	bf00      	nop
 8009fa2:	3718      	adds	r7, #24
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009fb0:	bf00      	nop
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009fc4:	bf00      	nop
 8009fc6:	370c      	adds	r7, #12
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009fd8:	bf00      	nop
 8009fda:	370c      	adds	r7, #12
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	4613      	mov	r3, r2
 8009ff0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d101      	bne.n	8009ffc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009ff8:	2302      	movs	r3, #2
 8009ffa:	e029      	b.n	800a050 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	79fa      	ldrb	r2, [r7, #7]
 800a000:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2200      	movs	r2, #0
 800a008:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2200      	movs	r2, #0
 800a010:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a014:	68f8      	ldr	r0, [r7, #12]
 800a016:	f000 f81f 	bl	800a058 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2200      	movs	r2, #0
 800a026:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2200      	movs	r2, #0
 800a036:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d003      	beq.n	800a048 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	68ba      	ldr	r2, [r7, #8]
 800a044:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	f001 fc37 	bl	800b8bc <USBH_LL_Init>

  return USBH_OK;
 800a04e:	2300      	movs	r3, #0
}
 800a050:	4618      	mov	r0, r3
 800a052:	3710      	adds	r7, #16
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a060:	2300      	movs	r3, #0
 800a062:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a064:	2300      	movs	r3, #0
 800a066:	60fb      	str	r3, [r7, #12]
 800a068:	e009      	b.n	800a07e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	33e0      	adds	r3, #224	; 0xe0
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	4413      	add	r3, r2
 800a074:	2200      	movs	r2, #0
 800a076:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	3301      	adds	r3, #1
 800a07c:	60fb      	str	r3, [r7, #12]
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2b0e      	cmp	r3, #14
 800a082:	d9f2      	bls.n	800a06a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a084:	2300      	movs	r3, #0
 800a086:	60fb      	str	r3, [r7, #12]
 800a088:	e009      	b.n	800a09e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	4413      	add	r3, r2
 800a090:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a094:	2200      	movs	r2, #0
 800a096:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	3301      	adds	r3, #1
 800a09c:	60fb      	str	r3, [r7, #12]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0a4:	d3f1      	bcc.n	800a08a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2240      	movs	r2, #64	; 0x40
 800a0ca:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a0f2:	2300      	movs	r3, #0
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3714      	adds	r7, #20
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a100:	b480      	push	{r7}
 800a102:	b085      	sub	sp, #20
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a10a:	2300      	movs	r3, #0
 800a10c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d016      	beq.n	800a142 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d10e      	bne.n	800a13c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a124:	1c59      	adds	r1, r3, #1
 800a126:	687a      	ldr	r2, [r7, #4]
 800a128:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	33de      	adds	r3, #222	; 0xde
 800a130:	6839      	ldr	r1, [r7, #0]
 800a132:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a136:	2300      	movs	r3, #0
 800a138:	73fb      	strb	r3, [r7, #15]
 800a13a:	e004      	b.n	800a146 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a13c:	2302      	movs	r3, #2
 800a13e:	73fb      	strb	r3, [r7, #15]
 800a140:	e001      	b.n	800a146 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a142:	2302      	movs	r3, #2
 800a144:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a146:	7bfb      	ldrb	r3, [r7, #15]
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3714      	adds	r7, #20
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	460b      	mov	r3, r1
 800a15e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a160:	2300      	movs	r3, #0
 800a162:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a16a:	78fa      	ldrb	r2, [r7, #3]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d204      	bcs.n	800a17a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	78fa      	ldrb	r2, [r7, #3]
 800a174:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a178:	e001      	b.n	800a17e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a17a:	2302      	movs	r3, #2
 800a17c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a17e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a180:	4618      	mov	r0, r3
 800a182:	3714      	adds	r7, #20
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b087      	sub	sp, #28
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	4608      	mov	r0, r1
 800a196:	4611      	mov	r1, r2
 800a198:	461a      	mov	r2, r3
 800a19a:	4603      	mov	r3, r0
 800a19c:	70fb      	strb	r3, [r7, #3]
 800a19e:	460b      	mov	r3, r1
 800a1a0:	70bb      	strb	r3, [r7, #2]
 800a1a2:	4613      	mov	r3, r2
 800a1a4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a1b4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a1b6:	e025      	b.n	800a204 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a1b8:	7dfb      	ldrb	r3, [r7, #23]
 800a1ba:	221a      	movs	r2, #26
 800a1bc:	fb02 f303 	mul.w	r3, r2, r3
 800a1c0:	3308      	adds	r3, #8
 800a1c2:	68fa      	ldr	r2, [r7, #12]
 800a1c4:	4413      	add	r3, r2
 800a1c6:	3302      	adds	r3, #2
 800a1c8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	795b      	ldrb	r3, [r3, #5]
 800a1ce:	78fa      	ldrb	r2, [r7, #3]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d002      	beq.n	800a1da <USBH_FindInterface+0x4e>
 800a1d4:	78fb      	ldrb	r3, [r7, #3]
 800a1d6:	2bff      	cmp	r3, #255	; 0xff
 800a1d8:	d111      	bne.n	800a1fe <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a1de:	78ba      	ldrb	r2, [r7, #2]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d002      	beq.n	800a1ea <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a1e4:	78bb      	ldrb	r3, [r7, #2]
 800a1e6:	2bff      	cmp	r3, #255	; 0xff
 800a1e8:	d109      	bne.n	800a1fe <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a1ee:	787a      	ldrb	r2, [r7, #1]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d002      	beq.n	800a1fa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a1f4:	787b      	ldrb	r3, [r7, #1]
 800a1f6:	2bff      	cmp	r3, #255	; 0xff
 800a1f8:	d101      	bne.n	800a1fe <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a1fa:	7dfb      	ldrb	r3, [r7, #23]
 800a1fc:	e006      	b.n	800a20c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a1fe:	7dfb      	ldrb	r3, [r7, #23]
 800a200:	3301      	adds	r3, #1
 800a202:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a204:	7dfb      	ldrb	r3, [r7, #23]
 800a206:	2b01      	cmp	r3, #1
 800a208:	d9d6      	bls.n	800a1b8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a20a:	23ff      	movs	r3, #255	; 0xff
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	371c      	adds	r7, #28
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f001 fb87 	bl	800b934 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a226:	2101      	movs	r1, #1
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f001 fca0 	bl	800bb6e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a22e:	2300      	movs	r3, #0
}
 800a230:	4618      	mov	r0, r3
 800a232:	3708      	adds	r7, #8
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b088      	sub	sp, #32
 800a23c:	af04      	add	r7, sp, #16
 800a23e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a240:	2302      	movs	r3, #2
 800a242:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a244:	2300      	movs	r3, #0
 800a246:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a24e:	b2db      	uxtb	r3, r3
 800a250:	2b01      	cmp	r3, #1
 800a252:	d102      	bne.n	800a25a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2203      	movs	r2, #3
 800a258:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	2b0b      	cmp	r3, #11
 800a262:	f200 81b3 	bhi.w	800a5cc <USBH_Process+0x394>
 800a266:	a201      	add	r2, pc, #4	; (adr r2, 800a26c <USBH_Process+0x34>)
 800a268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a26c:	0800a29d 	.word	0x0800a29d
 800a270:	0800a2cf 	.word	0x0800a2cf
 800a274:	0800a337 	.word	0x0800a337
 800a278:	0800a567 	.word	0x0800a567
 800a27c:	0800a5cd 	.word	0x0800a5cd
 800a280:	0800a3db 	.word	0x0800a3db
 800a284:	0800a50d 	.word	0x0800a50d
 800a288:	0800a411 	.word	0x0800a411
 800a28c:	0800a431 	.word	0x0800a431
 800a290:	0800a451 	.word	0x0800a451
 800a294:	0800a47f 	.word	0x0800a47f
 800a298:	0800a54f 	.word	0x0800a54f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	f000 8193 	beq.w	800a5d0 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a2b0:	20c8      	movs	r0, #200	; 0xc8
 800a2b2:	f001 fca3 	bl	800bbfc <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f001 fb99 	bl	800b9ee <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a2cc:	e180      	b.n	800a5d0 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d107      	bne.n	800a2e8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2202      	movs	r2, #2
 800a2e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a2e6:	e182      	b.n	800a5ee <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a2ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a2f2:	d914      	bls.n	800a31e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	b2da      	uxtb	r2, r3
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a30a:	2b03      	cmp	r3, #3
 800a30c:	d903      	bls.n	800a316 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	220d      	movs	r2, #13
 800a312:	701a      	strb	r2, [r3, #0]
      break;
 800a314:	e16b      	b.n	800a5ee <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	701a      	strb	r2, [r3, #0]
      break;
 800a31c:	e167      	b.n	800a5ee <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a324:	f103 020a 	add.w	r2, r3, #10
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a32e:	200a      	movs	r0, #10
 800a330:	f001 fc64 	bl	800bbfc <USBH_Delay>
      break;
 800a334:	e15b      	b.n	800a5ee <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d005      	beq.n	800a34c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a346:	2104      	movs	r1, #4
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a34c:	2064      	movs	r0, #100	; 0x64
 800a34e:	f001 fc55 	bl	800bbfc <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f001 fb24 	bl	800b9a0 <USBH_LL_GetSpeed>
 800a358:	4603      	mov	r3, r0
 800a35a:	461a      	mov	r2, r3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2205      	movs	r2, #5
 800a366:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a368:	2100      	movs	r1, #0
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f001 f92f 	bl	800b5ce <USBH_AllocPipe>
 800a370:	4603      	mov	r3, r0
 800a372:	461a      	mov	r2, r3
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a378:	2180      	movs	r1, #128	; 0x80
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f001 f927 	bl	800b5ce <USBH_AllocPipe>
 800a380:	4603      	mov	r3, r0
 800a382:	461a      	mov	r2, r3
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	7919      	ldrb	r1, [r3, #4]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a39c:	b292      	uxth	r2, r2
 800a39e:	9202      	str	r2, [sp, #8]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	9201      	str	r2, [sp, #4]
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2280      	movs	r2, #128	; 0x80
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f001 f8e0 	bl	800b570 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	7959      	ldrb	r1, [r3, #5]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a3c4:	b292      	uxth	r2, r2
 800a3c6:	9202      	str	r2, [sp, #8]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	9201      	str	r2, [sp, #4]
 800a3cc:	9300      	str	r3, [sp, #0]
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f001 f8cc 	bl	800b570 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a3d8:	e109      	b.n	800a5ee <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 f90c 	bl	800a5f8 <USBH_HandleEnum>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a3e4:	7bbb      	ldrb	r3, [r7, #14]
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	f040 80f3 	bne.w	800a5d4 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d103      	bne.n	800a408 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2208      	movs	r2, #8
 800a404:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a406:	e0e5      	b.n	800a5d4 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2207      	movs	r2, #7
 800a40c:	701a      	strb	r2, [r3, #0]
      break;
 800a40e:	e0e1      	b.n	800a5d4 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a416:	2b00      	cmp	r3, #0
 800a418:	f000 80de 	beq.w	800a5d8 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a422:	2101      	movs	r1, #1
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2208      	movs	r2, #8
 800a42c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a42e:	e0d3      	b.n	800a5d8 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a436:	b29b      	uxth	r3, r3
 800a438:	4619      	mov	r1, r3
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 fc20 	bl	800ac80 <USBH_SetCfg>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	f040 80ca 	bne.w	800a5dc <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2209      	movs	r2, #9
 800a44c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a44e:	e0c5      	b.n	800a5dc <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a456:	f003 0320 	and.w	r3, r3, #32
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d00b      	beq.n	800a476 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a45e:	2101      	movs	r1, #1
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 fc30 	bl	800acc6 <USBH_SetFeature>
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	f040 80b9 	bne.w	800a5e0 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	220a      	movs	r2, #10
 800a472:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a474:	e0b4      	b.n	800a5e0 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	220a      	movs	r2, #10
 800a47a:	701a      	strb	r2, [r3, #0]
      break;
 800a47c:	e0b0      	b.n	800a5e0 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a484:	2b00      	cmp	r3, #0
 800a486:	f000 80ad 	beq.w	800a5e4 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a492:	2300      	movs	r3, #0
 800a494:	73fb      	strb	r3, [r7, #15]
 800a496:	e016      	b.n	800a4c6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a498:	7bfa      	ldrb	r2, [r7, #15]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	32de      	adds	r2, #222	; 0xde
 800a49e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4a2:	791a      	ldrb	r2, [r3, #4]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d108      	bne.n	800a4c0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a4ae:	7bfa      	ldrb	r2, [r7, #15]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	32de      	adds	r2, #222	; 0xde
 800a4b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a4be:	e005      	b.n	800a4cc <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a4c0:	7bfb      	ldrb	r3, [r7, #15]
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	73fb      	strb	r3, [r7, #15]
 800a4c6:	7bfb      	ldrb	r3, [r7, #15]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d0e5      	beq.n	800a498 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d016      	beq.n	800a504 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4dc:	689b      	ldr	r3, [r3, #8]
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	4798      	blx	r3
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d109      	bne.n	800a4fc <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2206      	movs	r2, #6
 800a4ec:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a4f4:	2103      	movs	r1, #3
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a4fa:	e073      	b.n	800a5e4 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	220d      	movs	r2, #13
 800a500:	701a      	strb	r2, [r3, #0]
      break;
 800a502:	e06f      	b.n	800a5e4 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	220d      	movs	r2, #13
 800a508:	701a      	strb	r2, [r3, #0]
      break;
 800a50a:	e06b      	b.n	800a5e4 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a512:	2b00      	cmp	r3, #0
 800a514:	d017      	beq.n	800a546 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	4798      	blx	r3
 800a522:	4603      	mov	r3, r0
 800a524:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a526:	7bbb      	ldrb	r3, [r7, #14]
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d103      	bne.n	800a536 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	220b      	movs	r2, #11
 800a532:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a534:	e058      	b.n	800a5e8 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800a536:	7bbb      	ldrb	r3, [r7, #14]
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	2b02      	cmp	r3, #2
 800a53c:	d154      	bne.n	800a5e8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	220d      	movs	r2, #13
 800a542:	701a      	strb	r2, [r3, #0]
      break;
 800a544:	e050      	b.n	800a5e8 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	220d      	movs	r2, #13
 800a54a:	701a      	strb	r2, [r3, #0]
      break;
 800a54c:	e04c      	b.n	800a5e8 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a554:	2b00      	cmp	r3, #0
 800a556:	d049      	beq.n	800a5ec <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a55e:	695b      	ldr	r3, [r3, #20]
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	4798      	blx	r3
      }
      break;
 800a564:	e042      	b.n	800a5ec <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f7ff fd72 	bl	800a058 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d009      	beq.n	800a592 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a584:	68db      	ldr	r3, [r3, #12]
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d005      	beq.n	800a5a8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a5a2:	2105      	movs	r1, #5
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d107      	bne.n	800a5c4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f7ff fe2b 	bl	800a218 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a5c2:	e014      	b.n	800a5ee <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f001 f9b5 	bl	800b934 <USBH_LL_Start>
      break;
 800a5ca:	e010      	b.n	800a5ee <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800a5cc:	bf00      	nop
 800a5ce:	e00e      	b.n	800a5ee <USBH_Process+0x3b6>
      break;
 800a5d0:	bf00      	nop
 800a5d2:	e00c      	b.n	800a5ee <USBH_Process+0x3b6>
      break;
 800a5d4:	bf00      	nop
 800a5d6:	e00a      	b.n	800a5ee <USBH_Process+0x3b6>
    break;
 800a5d8:	bf00      	nop
 800a5da:	e008      	b.n	800a5ee <USBH_Process+0x3b6>
      break;
 800a5dc:	bf00      	nop
 800a5de:	e006      	b.n	800a5ee <USBH_Process+0x3b6>
      break;
 800a5e0:	bf00      	nop
 800a5e2:	e004      	b.n	800a5ee <USBH_Process+0x3b6>
      break;
 800a5e4:	bf00      	nop
 800a5e6:	e002      	b.n	800a5ee <USBH_Process+0x3b6>
      break;
 800a5e8:	bf00      	nop
 800a5ea:	e000      	b.n	800a5ee <USBH_Process+0x3b6>
      break;
 800a5ec:	bf00      	nop
  }
  return USBH_OK;
 800a5ee:	2300      	movs	r3, #0
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3710      	adds	r7, #16
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b088      	sub	sp, #32
 800a5fc:	af04      	add	r7, sp, #16
 800a5fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a600:	2301      	movs	r3, #1
 800a602:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a604:	2301      	movs	r3, #1
 800a606:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	785b      	ldrb	r3, [r3, #1]
 800a60c:	2b07      	cmp	r3, #7
 800a60e:	f200 81c1 	bhi.w	800a994 <USBH_HandleEnum+0x39c>
 800a612:	a201      	add	r2, pc, #4	; (adr r2, 800a618 <USBH_HandleEnum+0x20>)
 800a614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a618:	0800a639 	.word	0x0800a639
 800a61c:	0800a6f7 	.word	0x0800a6f7
 800a620:	0800a761 	.word	0x0800a761
 800a624:	0800a7ef 	.word	0x0800a7ef
 800a628:	0800a859 	.word	0x0800a859
 800a62c:	0800a8c9 	.word	0x0800a8c9
 800a630:	0800a90f 	.word	0x0800a90f
 800a634:	0800a955 	.word	0x0800a955
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a638:	2108      	movs	r1, #8
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 fa50 	bl	800aae0 <USBH_Get_DevDesc>
 800a640:	4603      	mov	r3, r0
 800a642:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a644:	7bbb      	ldrb	r3, [r7, #14]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d130      	bne.n	800a6ac <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2201      	movs	r2, #1
 800a658:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	7919      	ldrb	r1, [r3, #4]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a66e:	b292      	uxth	r2, r2
 800a670:	9202      	str	r2, [sp, #8]
 800a672:	2200      	movs	r2, #0
 800a674:	9201      	str	r2, [sp, #4]
 800a676:	9300      	str	r3, [sp, #0]
 800a678:	4603      	mov	r3, r0
 800a67a:	2280      	movs	r2, #128	; 0x80
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 ff77 	bl	800b570 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	7959      	ldrb	r1, [r3, #5]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a692:	687a      	ldr	r2, [r7, #4]
 800a694:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a696:	b292      	uxth	r2, r2
 800a698:	9202      	str	r2, [sp, #8]
 800a69a:	2200      	movs	r2, #0
 800a69c:	9201      	str	r2, [sp, #4]
 800a69e:	9300      	str	r3, [sp, #0]
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 ff63 	bl	800b570 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a6aa:	e175      	b.n	800a998 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a6ac:	7bbb      	ldrb	r3, [r7, #14]
 800a6ae:	2b03      	cmp	r3, #3
 800a6b0:	f040 8172 	bne.w	800a998 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	b2da      	uxtb	r2, r3
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a6ca:	2b03      	cmp	r3, #3
 800a6cc:	d903      	bls.n	800a6d6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	220d      	movs	r2, #13
 800a6d2:	701a      	strb	r2, [r3, #0]
      break;
 800a6d4:	e160      	b.n	800a998 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	795b      	ldrb	r3, [r3, #5]
 800a6da:	4619      	mov	r1, r3
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 ff97 	bl	800b610 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	791b      	ldrb	r3, [r3, #4]
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 ff91 	bl	800b610 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	701a      	strb	r2, [r3, #0]
      break;
 800a6f4:	e150      	b.n	800a998 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a6f6:	2112      	movs	r1, #18
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 f9f1 	bl	800aae0 <USBH_Get_DevDesc>
 800a6fe:	4603      	mov	r3, r0
 800a700:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a702:	7bbb      	ldrb	r3, [r7, #14]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d103      	bne.n	800a710 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2202      	movs	r2, #2
 800a70c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a70e:	e145      	b.n	800a99c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a710:	7bbb      	ldrb	r3, [r7, #14]
 800a712:	2b03      	cmp	r3, #3
 800a714:	f040 8142 	bne.w	800a99c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a71e:	3301      	adds	r3, #1
 800a720:	b2da      	uxtb	r2, r3
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a72e:	2b03      	cmp	r3, #3
 800a730:	d903      	bls.n	800a73a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	220d      	movs	r2, #13
 800a736:	701a      	strb	r2, [r3, #0]
      break;
 800a738:	e130      	b.n	800a99c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	795b      	ldrb	r3, [r3, #5]
 800a73e:	4619      	mov	r1, r3
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 ff65 	bl	800b610 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	791b      	ldrb	r3, [r3, #4]
 800a74a:	4619      	mov	r1, r3
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 ff5f 	bl	800b610 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2200      	movs	r2, #0
 800a756:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	701a      	strb	r2, [r3, #0]
      break;
 800a75e:	e11d      	b.n	800a99c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a760:	2101      	movs	r1, #1
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 fa68 	bl	800ac38 <USBH_SetAddress>
 800a768:	4603      	mov	r3, r0
 800a76a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a76c:	7bbb      	ldrb	r3, [r7, #14]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d132      	bne.n	800a7d8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a772:	2002      	movs	r0, #2
 800a774:	f001 fa42 	bl	800bbfc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2203      	movs	r2, #3
 800a784:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	7919      	ldrb	r1, [r3, #4]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a79a:	b292      	uxth	r2, r2
 800a79c:	9202      	str	r2, [sp, #8]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	9201      	str	r2, [sp, #4]
 800a7a2:	9300      	str	r3, [sp, #0]
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2280      	movs	r2, #128	; 0x80
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f000 fee1 	bl	800b570 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	7959      	ldrb	r1, [r3, #5]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a7c2:	b292      	uxth	r2, r2
 800a7c4:	9202      	str	r2, [sp, #8]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	9201      	str	r2, [sp, #4]
 800a7ca:	9300      	str	r3, [sp, #0]
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 fecd 	bl	800b570 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a7d6:	e0e3      	b.n	800a9a0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a7d8:	7bbb      	ldrb	r3, [r7, #14]
 800a7da:	2b03      	cmp	r3, #3
 800a7dc:	f040 80e0 	bne.w	800a9a0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	220d      	movs	r2, #13
 800a7e4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	705a      	strb	r2, [r3, #1]
      break;
 800a7ec:	e0d8      	b.n	800a9a0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a7ee:	2109      	movs	r1, #9
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 f99d 	bl	800ab30 <USBH_Get_CfgDesc>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a7fa:	7bbb      	ldrb	r3, [r7, #14]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d103      	bne.n	800a808 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2204      	movs	r2, #4
 800a804:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a806:	e0cd      	b.n	800a9a4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a808:	7bbb      	ldrb	r3, [r7, #14]
 800a80a:	2b03      	cmp	r3, #3
 800a80c:	f040 80ca 	bne.w	800a9a4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a816:	3301      	adds	r3, #1
 800a818:	b2da      	uxtb	r2, r3
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a826:	2b03      	cmp	r3, #3
 800a828:	d903      	bls.n	800a832 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	220d      	movs	r2, #13
 800a82e:	701a      	strb	r2, [r3, #0]
      break;
 800a830:	e0b8      	b.n	800a9a4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	795b      	ldrb	r3, [r3, #5]
 800a836:	4619      	mov	r1, r3
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 fee9 	bl	800b610 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	791b      	ldrb	r3, [r3, #4]
 800a842:	4619      	mov	r1, r3
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 fee3 	bl	800b610 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2200      	movs	r2, #0
 800a854:	701a      	strb	r2, [r3, #0]
      break;
 800a856:	e0a5      	b.n	800a9a4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a85e:	4619      	mov	r1, r3
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 f965 	bl	800ab30 <USBH_Get_CfgDesc>
 800a866:	4603      	mov	r3, r0
 800a868:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a86a:	7bbb      	ldrb	r3, [r7, #14]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d103      	bne.n	800a878 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2205      	movs	r2, #5
 800a874:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a876:	e097      	b.n	800a9a8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a878:	7bbb      	ldrb	r3, [r7, #14]
 800a87a:	2b03      	cmp	r3, #3
 800a87c:	f040 8094 	bne.w	800a9a8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a886:	3301      	adds	r3, #1
 800a888:	b2da      	uxtb	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a896:	2b03      	cmp	r3, #3
 800a898:	d903      	bls.n	800a8a2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	220d      	movs	r2, #13
 800a89e:	701a      	strb	r2, [r3, #0]
      break;
 800a8a0:	e082      	b.n	800a9a8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	795b      	ldrb	r3, [r3, #5]
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 feb1 	bl	800b610 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	791b      	ldrb	r3, [r3, #4]
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 feab 	bl	800b610 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	701a      	strb	r2, [r3, #0]
      break;
 800a8c6:	e06f      	b.n	800a9a8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d019      	beq.n	800a906 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a8de:	23ff      	movs	r3, #255	; 0xff
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f000 f949 	bl	800ab78 <USBH_Get_StringDesc>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a8ea:	7bbb      	ldrb	r3, [r7, #14]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d103      	bne.n	800a8f8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2206      	movs	r2, #6
 800a8f4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a8f6:	e059      	b.n	800a9ac <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a8f8:	7bbb      	ldrb	r3, [r7, #14]
 800a8fa:	2b03      	cmp	r3, #3
 800a8fc:	d156      	bne.n	800a9ac <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2206      	movs	r2, #6
 800a902:	705a      	strb	r2, [r3, #1]
      break;
 800a904:	e052      	b.n	800a9ac <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2206      	movs	r2, #6
 800a90a:	705a      	strb	r2, [r3, #1]
      break;
 800a90c:	e04e      	b.n	800a9ac <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a914:	2b00      	cmp	r3, #0
 800a916:	d019      	beq.n	800a94c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a924:	23ff      	movs	r3, #255	; 0xff
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 f926 	bl	800ab78 <USBH_Get_StringDesc>
 800a92c:	4603      	mov	r3, r0
 800a92e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a930:	7bbb      	ldrb	r3, [r7, #14]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d103      	bne.n	800a93e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2207      	movs	r2, #7
 800a93a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a93c:	e038      	b.n	800a9b0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a93e:	7bbb      	ldrb	r3, [r7, #14]
 800a940:	2b03      	cmp	r3, #3
 800a942:	d135      	bne.n	800a9b0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2207      	movs	r2, #7
 800a948:	705a      	strb	r2, [r3, #1]
      break;
 800a94a:	e031      	b.n	800a9b0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2207      	movs	r2, #7
 800a950:	705a      	strb	r2, [r3, #1]
      break;
 800a952:	e02d      	b.n	800a9b0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d017      	beq.n	800a98e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a96a:	23ff      	movs	r3, #255	; 0xff
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f000 f903 	bl	800ab78 <USBH_Get_StringDesc>
 800a972:	4603      	mov	r3, r0
 800a974:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a976:	7bbb      	ldrb	r3, [r7, #14]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d102      	bne.n	800a982 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a97c:	2300      	movs	r3, #0
 800a97e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a980:	e018      	b.n	800a9b4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a982:	7bbb      	ldrb	r3, [r7, #14]
 800a984:	2b03      	cmp	r3, #3
 800a986:	d115      	bne.n	800a9b4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a988:	2300      	movs	r3, #0
 800a98a:	73fb      	strb	r3, [r7, #15]
      break;
 800a98c:	e012      	b.n	800a9b4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a98e:	2300      	movs	r3, #0
 800a990:	73fb      	strb	r3, [r7, #15]
      break;
 800a992:	e00f      	b.n	800a9b4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a994:	bf00      	nop
 800a996:	e00e      	b.n	800a9b6 <USBH_HandleEnum+0x3be>
      break;
 800a998:	bf00      	nop
 800a99a:	e00c      	b.n	800a9b6 <USBH_HandleEnum+0x3be>
      break;
 800a99c:	bf00      	nop
 800a99e:	e00a      	b.n	800a9b6 <USBH_HandleEnum+0x3be>
      break;
 800a9a0:	bf00      	nop
 800a9a2:	e008      	b.n	800a9b6 <USBH_HandleEnum+0x3be>
      break;
 800a9a4:	bf00      	nop
 800a9a6:	e006      	b.n	800a9b6 <USBH_HandleEnum+0x3be>
      break;
 800a9a8:	bf00      	nop
 800a9aa:	e004      	b.n	800a9b6 <USBH_HandleEnum+0x3be>
      break;
 800a9ac:	bf00      	nop
 800a9ae:	e002      	b.n	800a9b6 <USBH_HandleEnum+0x3be>
      break;
 800a9b0:	bf00      	nop
 800a9b2:	e000      	b.n	800a9b6 <USBH_HandleEnum+0x3be>
      break;
 800a9b4:	bf00      	nop
  }
  return Status;
 800a9b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3710      	adds	r7, #16
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b083      	sub	sp, #12
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	683a      	ldr	r2, [r7, #0]
 800a9ce:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a9d2:	bf00      	nop
 800a9d4:	370c      	adds	r7, #12
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr

0800a9de <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b082      	sub	sp, #8
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a9ec:	1c5a      	adds	r2, r3, #1
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f000 f804 	bl	800aa02 <USBH_HandleSof>
}
 800a9fa:	bf00      	nop
 800a9fc:	3708      	adds	r7, #8
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b082      	sub	sp, #8
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	2b0b      	cmp	r3, #11
 800aa12:	d10a      	bne.n	800aa2a <USBH_HandleSof+0x28>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d005      	beq.n	800aa2a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa24:	699b      	ldr	r3, [r3, #24]
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	4798      	blx	r3
  }
}
 800aa2a:	bf00      	nop
 800aa2c:	3708      	adds	r7, #8
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800aa32:	b480      	push	{r7}
 800aa34:	b083      	sub	sp, #12
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800aa42:	bf00      	nop
}
 800aa44:	370c      	adds	r7, #12
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr

0800aa4e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800aa4e:	b480      	push	{r7}
 800aa50:	b083      	sub	sp, #12
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800aa5e:	bf00      	nop
}
 800aa60:	370c      	adds	r7, #12
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr

0800aa6a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800aa6a:	b480      	push	{r7}
 800aa6c:	b083      	sub	sp, #12
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2201      	movs	r2, #1
 800aa76:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2200      	movs	r2, #0
 800aa86:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800aa8a:	2300      	movs	r3, #0
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	370c      	adds	r7, #12
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr

0800aa98 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 ff56 	bl	800b96a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	791b      	ldrb	r3, [r3, #4]
 800aac2:	4619      	mov	r1, r3
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 fda3 	bl	800b610 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	795b      	ldrb	r3, [r3, #5]
 800aace:	4619      	mov	r1, r3
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 fd9d 	bl	800b610 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800aad6:	2300      	movs	r3, #0
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3708      	adds	r7, #8
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b086      	sub	sp, #24
 800aae4:	af02      	add	r7, sp, #8
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	460b      	mov	r3, r1
 800aaea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800aaf2:	78fb      	ldrb	r3, [r7, #3]
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	9300      	str	r3, [sp, #0]
 800aaf8:	4613      	mov	r3, r2
 800aafa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aafe:	2100      	movs	r1, #0
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 f864 	bl	800abce <USBH_GetDescriptor>
 800ab06:	4603      	mov	r3, r0
 800ab08:	73fb      	strb	r3, [r7, #15]
 800ab0a:	7bfb      	ldrb	r3, [r7, #15]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d10a      	bne.n	800ab26 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ab1c:	78fa      	ldrb	r2, [r7, #3]
 800ab1e:	b292      	uxth	r2, r2
 800ab20:	4619      	mov	r1, r3
 800ab22:	f000 f918 	bl	800ad56 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ab26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3710      	adds	r7, #16
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b086      	sub	sp, #24
 800ab34:	af02      	add	r7, sp, #8
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	460b      	mov	r3, r1
 800ab3a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	331c      	adds	r3, #28
 800ab40:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ab42:	887b      	ldrh	r3, [r7, #2]
 800ab44:	9300      	str	r3, [sp, #0]
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab4c:	2100      	movs	r1, #0
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 f83d 	bl	800abce <USBH_GetDescriptor>
 800ab54:	4603      	mov	r3, r0
 800ab56:	72fb      	strb	r3, [r7, #11]
 800ab58:	7afb      	ldrb	r3, [r7, #11]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d107      	bne.n	800ab6e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ab64:	887a      	ldrh	r2, [r7, #2]
 800ab66:	68f9      	ldr	r1, [r7, #12]
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f000 f964 	bl	800ae36 <USBH_ParseCfgDesc>
  }

  return status;
 800ab6e:	7afb      	ldrb	r3, [r7, #11]
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3710      	adds	r7, #16
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b088      	sub	sp, #32
 800ab7c:	af02      	add	r7, sp, #8
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	607a      	str	r2, [r7, #4]
 800ab82:	461a      	mov	r2, r3
 800ab84:	460b      	mov	r3, r1
 800ab86:	72fb      	strb	r3, [r7, #11]
 800ab88:	4613      	mov	r3, r2
 800ab8a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800ab8c:	7afb      	ldrb	r3, [r7, #11]
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ab94:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ab9c:	893b      	ldrh	r3, [r7, #8]
 800ab9e:	9300      	str	r3, [sp, #0]
 800aba0:	460b      	mov	r3, r1
 800aba2:	2100      	movs	r1, #0
 800aba4:	68f8      	ldr	r0, [r7, #12]
 800aba6:	f000 f812 	bl	800abce <USBH_GetDescriptor>
 800abaa:	4603      	mov	r3, r0
 800abac:	75fb      	strb	r3, [r7, #23]
 800abae:	7dfb      	ldrb	r3, [r7, #23]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d107      	bne.n	800abc4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800abba:	893a      	ldrh	r2, [r7, #8]
 800abbc:	6879      	ldr	r1, [r7, #4]
 800abbe:	4618      	mov	r0, r3
 800abc0:	f000 fa37 	bl	800b032 <USBH_ParseStringDesc>
  }

  return status;
 800abc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3718      	adds	r7, #24
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}

0800abce <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800abce:	b580      	push	{r7, lr}
 800abd0:	b084      	sub	sp, #16
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	60f8      	str	r0, [r7, #12]
 800abd6:	607b      	str	r3, [r7, #4]
 800abd8:	460b      	mov	r3, r1
 800abda:	72fb      	strb	r3, [r7, #11]
 800abdc:	4613      	mov	r3, r2
 800abde:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	789b      	ldrb	r3, [r3, #2]
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d11c      	bne.n	800ac22 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800abe8:	7afb      	ldrb	r3, [r7, #11]
 800abea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800abee:	b2da      	uxtb	r2, r3
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2206      	movs	r2, #6
 800abf8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	893a      	ldrh	r2, [r7, #8]
 800abfe:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ac00:	893b      	ldrh	r3, [r7, #8]
 800ac02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ac06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac0a:	d104      	bne.n	800ac16 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f240 4209 	movw	r2, #1033	; 0x409
 800ac12:	829a      	strh	r2, [r3, #20]
 800ac14:	e002      	b.n	800ac1c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	8b3a      	ldrh	r2, [r7, #24]
 800ac20:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ac22:	8b3b      	ldrh	r3, [r7, #24]
 800ac24:	461a      	mov	r2, r3
 800ac26:	6879      	ldr	r1, [r7, #4]
 800ac28:	68f8      	ldr	r0, [r7, #12]
 800ac2a:	f000 fa50 	bl	800b0ce <USBH_CtlReq>
 800ac2e:	4603      	mov	r3, r0
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3710      	adds	r7, #16
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b082      	sub	sp, #8
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	460b      	mov	r3, r1
 800ac42:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	789b      	ldrb	r3, [r3, #2]
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d10f      	bne.n	800ac6c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2205      	movs	r2, #5
 800ac56:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ac58:	78fb      	ldrb	r3, [r7, #3]
 800ac5a:	b29a      	uxth	r2, r3
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2200      	movs	r2, #0
 800ac64:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	2100      	movs	r1, #0
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 fa2c 	bl	800b0ce <USBH_CtlReq>
 800ac76:	4603      	mov	r3, r0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3708      	adds	r7, #8
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	460b      	mov	r3, r1
 800ac8a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	789b      	ldrb	r3, [r3, #2]
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d10e      	bne.n	800acb2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2200      	movs	r2, #0
 800ac98:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2209      	movs	r2, #9
 800ac9e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	887a      	ldrh	r2, [r7, #2]
 800aca4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2200      	movs	r2, #0
 800acaa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2200      	movs	r2, #0
 800acb0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800acb2:	2200      	movs	r2, #0
 800acb4:	2100      	movs	r1, #0
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 fa09 	bl	800b0ce <USBH_CtlReq>
 800acbc:	4603      	mov	r3, r0
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3708      	adds	r7, #8
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b082      	sub	sp, #8
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
 800acce:	460b      	mov	r3, r1
 800acd0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	789b      	ldrb	r3, [r3, #2]
 800acd6:	2b01      	cmp	r3, #1
 800acd8:	d10f      	bne.n	800acfa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2200      	movs	r2, #0
 800acde:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2203      	movs	r2, #3
 800ace4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ace6:	78fb      	ldrb	r3, [r7, #3]
 800ace8:	b29a      	uxth	r2, r3
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2200      	movs	r2, #0
 800acf2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2200      	movs	r2, #0
 800acf8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800acfa:	2200      	movs	r2, #0
 800acfc:	2100      	movs	r1, #0
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 f9e5 	bl	800b0ce <USBH_CtlReq>
 800ad04:	4603      	mov	r3, r0
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3708      	adds	r7, #8
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}

0800ad0e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ad0e:	b580      	push	{r7, lr}
 800ad10:	b082      	sub	sp, #8
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
 800ad16:	460b      	mov	r3, r1
 800ad18:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	789b      	ldrb	r3, [r3, #2]
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d10f      	bne.n	800ad42 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2202      	movs	r2, #2
 800ad26:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2200      	movs	r2, #0
 800ad32:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ad34:	78fb      	ldrb	r3, [r7, #3]
 800ad36:	b29a      	uxth	r2, r3
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800ad42:	2200      	movs	r2, #0
 800ad44:	2100      	movs	r1, #0
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 f9c1 	bl	800b0ce <USBH_CtlReq>
 800ad4c:	4603      	mov	r3, r0
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3708      	adds	r7, #8
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}

0800ad56 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ad56:	b480      	push	{r7}
 800ad58:	b085      	sub	sp, #20
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	60f8      	str	r0, [r7, #12]
 800ad5e:	60b9      	str	r1, [r7, #8]
 800ad60:	4613      	mov	r3, r2
 800ad62:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	781a      	ldrb	r2, [r3, #0]
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	785a      	ldrb	r2, [r3, #1]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	3302      	adds	r3, #2
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	b29a      	uxth	r2, r3
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	3303      	adds	r3, #3
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	021b      	lsls	r3, r3, #8
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	b29a      	uxth	r2, r3
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	791a      	ldrb	r2, [r3, #4]
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	795a      	ldrb	r2, [r3, #5]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	799a      	ldrb	r2, [r3, #6]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	79da      	ldrb	r2, [r3, #7]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800adb0:	88fb      	ldrh	r3, [r7, #6]
 800adb2:	2b08      	cmp	r3, #8
 800adb4:	d939      	bls.n	800ae2a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	3308      	adds	r3, #8
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	3309      	adds	r3, #9
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	021b      	lsls	r3, r3, #8
 800adc8:	b29b      	uxth	r3, r3
 800adca:	4313      	orrs	r3, r2
 800adcc:	b29a      	uxth	r2, r3
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	330a      	adds	r3, #10
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	b29a      	uxth	r2, r3
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	330b      	adds	r3, #11
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	b29b      	uxth	r3, r3
 800ade2:	021b      	lsls	r3, r3, #8
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	4313      	orrs	r3, r2
 800ade8:	b29a      	uxth	r2, r3
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	330c      	adds	r3, #12
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	b29a      	uxth	r2, r3
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	330d      	adds	r3, #13
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	021b      	lsls	r3, r3, #8
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	4313      	orrs	r3, r2
 800ae04:	b29a      	uxth	r2, r3
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	7b9a      	ldrb	r2, [r3, #14]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	7bda      	ldrb	r2, [r3, #15]
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	7c1a      	ldrb	r2, [r3, #16]
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	7c5a      	ldrb	r2, [r3, #17]
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	745a      	strb	r2, [r3, #17]
  }
}
 800ae2a:	bf00      	nop
 800ae2c:	3714      	adds	r7, #20
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr

0800ae36 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b08a      	sub	sp, #40	; 0x28
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	60f8      	str	r0, [r7, #12]
 800ae3e:	60b9      	str	r1, [r7, #8]
 800ae40:	4613      	mov	r3, r2
 800ae42:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	781a      	ldrb	r2, [r3, #0]
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	785a      	ldrb	r2, [r3, #1]
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	3302      	adds	r3, #2
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	b29a      	uxth	r2, r3
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	3303      	adds	r3, #3
 800ae74:	781b      	ldrb	r3, [r3, #0]
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	021b      	lsls	r3, r3, #8
 800ae7a:	b29b      	uxth	r3, r3
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	b29a      	uxth	r2, r3
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	791a      	ldrb	r2, [r3, #4]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	795a      	ldrb	r2, [r3, #5]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	799a      	ldrb	r2, [r3, #6]
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	79da      	ldrb	r2, [r3, #7]
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	7a1a      	ldrb	r2, [r3, #8]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800aeac:	88fb      	ldrh	r3, [r7, #6]
 800aeae:	2b09      	cmp	r3, #9
 800aeb0:	d95f      	bls.n	800af72 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800aeb2:	2309      	movs	r3, #9
 800aeb4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800aeba:	e051      	b.n	800af60 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800aebc:	f107 0316 	add.w	r3, r7, #22
 800aec0:	4619      	mov	r1, r3
 800aec2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aec4:	f000 f8e8 	bl	800b098 <USBH_GetNextDesc>
 800aec8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800aeca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aecc:	785b      	ldrb	r3, [r3, #1]
 800aece:	2b04      	cmp	r3, #4
 800aed0:	d146      	bne.n	800af60 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800aed2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aed6:	221a      	movs	r2, #26
 800aed8:	fb02 f303 	mul.w	r3, r2, r3
 800aedc:	3308      	adds	r3, #8
 800aede:	68fa      	ldr	r2, [r7, #12]
 800aee0:	4413      	add	r3, r2
 800aee2:	3302      	adds	r3, #2
 800aee4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800aee6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aee8:	69f8      	ldr	r0, [r7, #28]
 800aeea:	f000 f846 	bl	800af7a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800aeee:	2300      	movs	r3, #0
 800aef0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800aef4:	2300      	movs	r3, #0
 800aef6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800aef8:	e022      	b.n	800af40 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800aefa:	f107 0316 	add.w	r3, r7, #22
 800aefe:	4619      	mov	r1, r3
 800af00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af02:	f000 f8c9 	bl	800b098 <USBH_GetNextDesc>
 800af06:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800af08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0a:	785b      	ldrb	r3, [r3, #1]
 800af0c:	2b05      	cmp	r3, #5
 800af0e:	d117      	bne.n	800af40 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800af10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800af14:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800af18:	3201      	adds	r2, #1
 800af1a:	00d2      	lsls	r2, r2, #3
 800af1c:	211a      	movs	r1, #26
 800af1e:	fb01 f303 	mul.w	r3, r1, r3
 800af22:	4413      	add	r3, r2
 800af24:	3308      	adds	r3, #8
 800af26:	68fa      	ldr	r2, [r7, #12]
 800af28:	4413      	add	r3, r2
 800af2a:	3304      	adds	r3, #4
 800af2c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800af2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af30:	69b8      	ldr	r0, [r7, #24]
 800af32:	f000 f851 	bl	800afd8 <USBH_ParseEPDesc>
            ep_ix++;
 800af36:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800af3a:	3301      	adds	r3, #1
 800af3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800af40:	69fb      	ldr	r3, [r7, #28]
 800af42:	791b      	ldrb	r3, [r3, #4]
 800af44:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800af48:	429a      	cmp	r2, r3
 800af4a:	d204      	bcs.n	800af56 <USBH_ParseCfgDesc+0x120>
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	885a      	ldrh	r2, [r3, #2]
 800af50:	8afb      	ldrh	r3, [r7, #22]
 800af52:	429a      	cmp	r2, r3
 800af54:	d8d1      	bhi.n	800aefa <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800af56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800af5a:	3301      	adds	r3, #1
 800af5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800af60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800af64:	2b01      	cmp	r3, #1
 800af66:	d804      	bhi.n	800af72 <USBH_ParseCfgDesc+0x13c>
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	885a      	ldrh	r2, [r3, #2]
 800af6c:	8afb      	ldrh	r3, [r7, #22]
 800af6e:	429a      	cmp	r2, r3
 800af70:	d8a4      	bhi.n	800aebc <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800af72:	bf00      	nop
 800af74:	3728      	adds	r7, #40	; 0x28
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}

0800af7a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800af7a:	b480      	push	{r7}
 800af7c:	b083      	sub	sp, #12
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
 800af82:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	781a      	ldrb	r2, [r3, #0]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	785a      	ldrb	r2, [r3, #1]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	789a      	ldrb	r2, [r3, #2]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	78da      	ldrb	r2, [r3, #3]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	791a      	ldrb	r2, [r3, #4]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	795a      	ldrb	r2, [r3, #5]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	799a      	ldrb	r2, [r3, #6]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	79da      	ldrb	r2, [r3, #7]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	7a1a      	ldrb	r2, [r3, #8]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	721a      	strb	r2, [r3, #8]
}
 800afcc:	bf00      	nop
 800afce:	370c      	adds	r7, #12
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800afd8:	b480      	push	{r7}
 800afda:	b083      	sub	sp, #12
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	781a      	ldrb	r2, [r3, #0]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	785a      	ldrb	r2, [r3, #1]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	789a      	ldrb	r2, [r3, #2]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	78da      	ldrb	r2, [r3, #3]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	3304      	adds	r3, #4
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	b29a      	uxth	r2, r3
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	3305      	adds	r3, #5
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	b29b      	uxth	r3, r3
 800b012:	021b      	lsls	r3, r3, #8
 800b014:	b29b      	uxth	r3, r3
 800b016:	4313      	orrs	r3, r2
 800b018:	b29a      	uxth	r2, r3
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	799a      	ldrb	r2, [r3, #6]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	719a      	strb	r2, [r3, #6]
}
 800b026:	bf00      	nop
 800b028:	370c      	adds	r7, #12
 800b02a:	46bd      	mov	sp, r7
 800b02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b030:	4770      	bx	lr

0800b032 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b032:	b480      	push	{r7}
 800b034:	b087      	sub	sp, #28
 800b036:	af00      	add	r7, sp, #0
 800b038:	60f8      	str	r0, [r7, #12]
 800b03a:	60b9      	str	r1, [r7, #8]
 800b03c:	4613      	mov	r3, r2
 800b03e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	3301      	adds	r3, #1
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	2b03      	cmp	r3, #3
 800b048:	d120      	bne.n	800b08c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	1e9a      	subs	r2, r3, #2
 800b050:	88fb      	ldrh	r3, [r7, #6]
 800b052:	4293      	cmp	r3, r2
 800b054:	bf28      	it	cs
 800b056:	4613      	movcs	r3, r2
 800b058:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	3302      	adds	r3, #2
 800b05e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b060:	2300      	movs	r3, #0
 800b062:	82fb      	strh	r3, [r7, #22]
 800b064:	e00b      	b.n	800b07e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b066:	8afb      	ldrh	r3, [r7, #22]
 800b068:	68fa      	ldr	r2, [r7, #12]
 800b06a:	4413      	add	r3, r2
 800b06c:	781a      	ldrb	r2, [r3, #0]
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	3301      	adds	r3, #1
 800b076:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b078:	8afb      	ldrh	r3, [r7, #22]
 800b07a:	3302      	adds	r3, #2
 800b07c:	82fb      	strh	r3, [r7, #22]
 800b07e:	8afa      	ldrh	r2, [r7, #22]
 800b080:	8abb      	ldrh	r3, [r7, #20]
 800b082:	429a      	cmp	r2, r3
 800b084:	d3ef      	bcc.n	800b066 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	2200      	movs	r2, #0
 800b08a:	701a      	strb	r2, [r3, #0]
  }
}
 800b08c:	bf00      	nop
 800b08e:	371c      	adds	r7, #28
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b098:	b480      	push	{r7}
 800b09a:	b085      	sub	sp, #20
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	881a      	ldrh	r2, [r3, #0]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	4413      	add	r3, r2
 800b0ae:	b29a      	uxth	r2, r3
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	4413      	add	r3, r2
 800b0be:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3714      	adds	r7, #20
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr

0800b0ce <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b086      	sub	sp, #24
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	60f8      	str	r0, [r7, #12]
 800b0d6:	60b9      	str	r1, [r7, #8]
 800b0d8:	4613      	mov	r3, r2
 800b0da:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	789b      	ldrb	r3, [r3, #2]
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d002      	beq.n	800b0ee <USBH_CtlReq+0x20>
 800b0e8:	2b02      	cmp	r3, #2
 800b0ea:	d00f      	beq.n	800b10c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b0ec:	e027      	b.n	800b13e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	68ba      	ldr	r2, [r7, #8]
 800b0f2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	88fa      	ldrh	r2, [r7, #6]
 800b0f8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2202      	movs	r2, #2
 800b104:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b106:	2301      	movs	r3, #1
 800b108:	75fb      	strb	r3, [r7, #23]
      break;
 800b10a:	e018      	b.n	800b13e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b10c:	68f8      	ldr	r0, [r7, #12]
 800b10e:	f000 f81b 	bl	800b148 <USBH_HandleControl>
 800b112:	4603      	mov	r3, r0
 800b114:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b116:	7dfb      	ldrb	r3, [r7, #23]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d002      	beq.n	800b122 <USBH_CtlReq+0x54>
 800b11c:	7dfb      	ldrb	r3, [r7, #23]
 800b11e:	2b03      	cmp	r3, #3
 800b120:	d106      	bne.n	800b130 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2201      	movs	r2, #1
 800b126:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2200      	movs	r2, #0
 800b12c:	761a      	strb	r2, [r3, #24]
      break;
 800b12e:	e005      	b.n	800b13c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b130:	7dfb      	ldrb	r3, [r7, #23]
 800b132:	2b02      	cmp	r3, #2
 800b134:	d102      	bne.n	800b13c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2201      	movs	r2, #1
 800b13a:	709a      	strb	r2, [r3, #2]
      break;
 800b13c:	bf00      	nop
  }
  return status;
 800b13e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b140:	4618      	mov	r0, r3
 800b142:	3718      	adds	r7, #24
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b086      	sub	sp, #24
 800b14c:	af02      	add	r7, sp, #8
 800b14e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b150:	2301      	movs	r3, #1
 800b152:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b154:	2300      	movs	r3, #0
 800b156:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	7e1b      	ldrb	r3, [r3, #24]
 800b15c:	3b01      	subs	r3, #1
 800b15e:	2b0a      	cmp	r3, #10
 800b160:	f200 8156 	bhi.w	800b410 <USBH_HandleControl+0x2c8>
 800b164:	a201      	add	r2, pc, #4	; (adr r2, 800b16c <USBH_HandleControl+0x24>)
 800b166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b16a:	bf00      	nop
 800b16c:	0800b199 	.word	0x0800b199
 800b170:	0800b1b3 	.word	0x0800b1b3
 800b174:	0800b21d 	.word	0x0800b21d
 800b178:	0800b243 	.word	0x0800b243
 800b17c:	0800b27b 	.word	0x0800b27b
 800b180:	0800b2a5 	.word	0x0800b2a5
 800b184:	0800b2f7 	.word	0x0800b2f7
 800b188:	0800b319 	.word	0x0800b319
 800b18c:	0800b355 	.word	0x0800b355
 800b190:	0800b37b 	.word	0x0800b37b
 800b194:	0800b3b9 	.word	0x0800b3b9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f103 0110 	add.w	r1, r3, #16
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	795b      	ldrb	r3, [r3, #5]
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 f943 	bl	800b430 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2202      	movs	r2, #2
 800b1ae:	761a      	strb	r2, [r3, #24]
      break;
 800b1b0:	e139      	b.n	800b426 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	795b      	ldrb	r3, [r3, #5]
 800b1b6:	4619      	mov	r1, r3
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f000 fcc5 	bl	800bb48 <USBH_LL_GetURBState>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b1c2:	7bbb      	ldrb	r3, [r7, #14]
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d11e      	bne.n	800b206 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	7c1b      	ldrb	r3, [r3, #16]
 800b1cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b1d0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	8adb      	ldrh	r3, [r3, #22]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d00a      	beq.n	800b1f0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b1da:	7b7b      	ldrb	r3, [r7, #13]
 800b1dc:	2b80      	cmp	r3, #128	; 0x80
 800b1de:	d103      	bne.n	800b1e8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2203      	movs	r2, #3
 800b1e4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b1e6:	e115      	b.n	800b414 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2205      	movs	r2, #5
 800b1ec:	761a      	strb	r2, [r3, #24]
      break;
 800b1ee:	e111      	b.n	800b414 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b1f0:	7b7b      	ldrb	r3, [r7, #13]
 800b1f2:	2b80      	cmp	r3, #128	; 0x80
 800b1f4:	d103      	bne.n	800b1fe <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2209      	movs	r2, #9
 800b1fa:	761a      	strb	r2, [r3, #24]
      break;
 800b1fc:	e10a      	b.n	800b414 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2207      	movs	r2, #7
 800b202:	761a      	strb	r2, [r3, #24]
      break;
 800b204:	e106      	b.n	800b414 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b206:	7bbb      	ldrb	r3, [r7, #14]
 800b208:	2b04      	cmp	r3, #4
 800b20a:	d003      	beq.n	800b214 <USBH_HandleControl+0xcc>
 800b20c:	7bbb      	ldrb	r3, [r7, #14]
 800b20e:	2b02      	cmp	r3, #2
 800b210:	f040 8100 	bne.w	800b414 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	220b      	movs	r2, #11
 800b218:	761a      	strb	r2, [r3, #24]
      break;
 800b21a:	e0fb      	b.n	800b414 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b222:	b29a      	uxth	r2, r3
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6899      	ldr	r1, [r3, #8]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	899a      	ldrh	r2, [r3, #12]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	791b      	ldrb	r3, [r3, #4]
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f000 f93a 	bl	800b4ae <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2204      	movs	r2, #4
 800b23e:	761a      	strb	r2, [r3, #24]
      break;
 800b240:	e0f1      	b.n	800b426 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	791b      	ldrb	r3, [r3, #4]
 800b246:	4619      	mov	r1, r3
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 fc7d 	bl	800bb48 <USBH_LL_GetURBState>
 800b24e:	4603      	mov	r3, r0
 800b250:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b252:	7bbb      	ldrb	r3, [r7, #14]
 800b254:	2b01      	cmp	r3, #1
 800b256:	d102      	bne.n	800b25e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2209      	movs	r2, #9
 800b25c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b25e:	7bbb      	ldrb	r3, [r7, #14]
 800b260:	2b05      	cmp	r3, #5
 800b262:	d102      	bne.n	800b26a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b264:	2303      	movs	r3, #3
 800b266:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b268:	e0d6      	b.n	800b418 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b26a:	7bbb      	ldrb	r3, [r7, #14]
 800b26c:	2b04      	cmp	r3, #4
 800b26e:	f040 80d3 	bne.w	800b418 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	220b      	movs	r2, #11
 800b276:	761a      	strb	r2, [r3, #24]
      break;
 800b278:	e0ce      	b.n	800b418 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6899      	ldr	r1, [r3, #8]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	899a      	ldrh	r2, [r3, #12]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	795b      	ldrb	r3, [r3, #5]
 800b286:	2001      	movs	r0, #1
 800b288:	9000      	str	r0, [sp, #0]
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 f8ea 	bl	800b464 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b296:	b29a      	uxth	r2, r3
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2206      	movs	r2, #6
 800b2a0:	761a      	strb	r2, [r3, #24]
      break;
 800b2a2:	e0c0      	b.n	800b426 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	795b      	ldrb	r3, [r3, #5]
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 fc4c 	bl	800bb48 <USBH_LL_GetURBState>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b2b4:	7bbb      	ldrb	r3, [r7, #14]
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	d103      	bne.n	800b2c2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2207      	movs	r2, #7
 800b2be:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b2c0:	e0ac      	b.n	800b41c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b2c2:	7bbb      	ldrb	r3, [r7, #14]
 800b2c4:	2b05      	cmp	r3, #5
 800b2c6:	d105      	bne.n	800b2d4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	220c      	movs	r2, #12
 800b2cc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b2ce:	2303      	movs	r3, #3
 800b2d0:	73fb      	strb	r3, [r7, #15]
      break;
 800b2d2:	e0a3      	b.n	800b41c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b2d4:	7bbb      	ldrb	r3, [r7, #14]
 800b2d6:	2b02      	cmp	r3, #2
 800b2d8:	d103      	bne.n	800b2e2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2205      	movs	r2, #5
 800b2de:	761a      	strb	r2, [r3, #24]
      break;
 800b2e0:	e09c      	b.n	800b41c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b2e2:	7bbb      	ldrb	r3, [r7, #14]
 800b2e4:	2b04      	cmp	r3, #4
 800b2e6:	f040 8099 	bne.w	800b41c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	220b      	movs	r2, #11
 800b2ee:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b2f0:	2302      	movs	r3, #2
 800b2f2:	73fb      	strb	r3, [r7, #15]
      break;
 800b2f4:	e092      	b.n	800b41c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	791b      	ldrb	r3, [r3, #4]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	2100      	movs	r1, #0
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f000 f8d5 	bl	800b4ae <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b30a:	b29a      	uxth	r2, r3
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2208      	movs	r2, #8
 800b314:	761a      	strb	r2, [r3, #24]

      break;
 800b316:	e086      	b.n	800b426 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	791b      	ldrb	r3, [r3, #4]
 800b31c:	4619      	mov	r1, r3
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 fc12 	bl	800bb48 <USBH_LL_GetURBState>
 800b324:	4603      	mov	r3, r0
 800b326:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b328:	7bbb      	ldrb	r3, [r7, #14]
 800b32a:	2b01      	cmp	r3, #1
 800b32c:	d105      	bne.n	800b33a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	220d      	movs	r2, #13
 800b332:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b334:	2300      	movs	r3, #0
 800b336:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b338:	e072      	b.n	800b420 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b33a:	7bbb      	ldrb	r3, [r7, #14]
 800b33c:	2b04      	cmp	r3, #4
 800b33e:	d103      	bne.n	800b348 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	220b      	movs	r2, #11
 800b344:	761a      	strb	r2, [r3, #24]
      break;
 800b346:	e06b      	b.n	800b420 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b348:	7bbb      	ldrb	r3, [r7, #14]
 800b34a:	2b05      	cmp	r3, #5
 800b34c:	d168      	bne.n	800b420 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b34e:	2303      	movs	r3, #3
 800b350:	73fb      	strb	r3, [r7, #15]
      break;
 800b352:	e065      	b.n	800b420 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	795b      	ldrb	r3, [r3, #5]
 800b358:	2201      	movs	r2, #1
 800b35a:	9200      	str	r2, [sp, #0]
 800b35c:	2200      	movs	r2, #0
 800b35e:	2100      	movs	r1, #0
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 f87f 	bl	800b464 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b36c:	b29a      	uxth	r2, r3
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	220a      	movs	r2, #10
 800b376:	761a      	strb	r2, [r3, #24]
      break;
 800b378:	e055      	b.n	800b426 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	795b      	ldrb	r3, [r3, #5]
 800b37e:	4619      	mov	r1, r3
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 fbe1 	bl	800bb48 <USBH_LL_GetURBState>
 800b386:	4603      	mov	r3, r0
 800b388:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b38a:	7bbb      	ldrb	r3, [r7, #14]
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	d105      	bne.n	800b39c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b390:	2300      	movs	r3, #0
 800b392:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	220d      	movs	r2, #13
 800b398:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b39a:	e043      	b.n	800b424 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b39c:	7bbb      	ldrb	r3, [r7, #14]
 800b39e:	2b02      	cmp	r3, #2
 800b3a0:	d103      	bne.n	800b3aa <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2209      	movs	r2, #9
 800b3a6:	761a      	strb	r2, [r3, #24]
      break;
 800b3a8:	e03c      	b.n	800b424 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b3aa:	7bbb      	ldrb	r3, [r7, #14]
 800b3ac:	2b04      	cmp	r3, #4
 800b3ae:	d139      	bne.n	800b424 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	220b      	movs	r2, #11
 800b3b4:	761a      	strb	r2, [r3, #24]
      break;
 800b3b6:	e035      	b.n	800b424 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	7e5b      	ldrb	r3, [r3, #25]
 800b3bc:	3301      	adds	r3, #1
 800b3be:	b2da      	uxtb	r2, r3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	765a      	strb	r2, [r3, #25]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	7e5b      	ldrb	r3, [r3, #25]
 800b3c8:	2b02      	cmp	r3, #2
 800b3ca:	d806      	bhi.n	800b3da <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b3d8:	e025      	b.n	800b426 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b3e0:	2106      	movs	r1, #6
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	795b      	ldrb	r3, [r3, #5]
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 f90c 	bl	800b610 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	791b      	ldrb	r3, [r3, #4]
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f000 f906 	bl	800b610 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b40a:	2302      	movs	r3, #2
 800b40c:	73fb      	strb	r3, [r7, #15]
      break;
 800b40e:	e00a      	b.n	800b426 <USBH_HandleControl+0x2de>

    default:
      break;
 800b410:	bf00      	nop
 800b412:	e008      	b.n	800b426 <USBH_HandleControl+0x2de>
      break;
 800b414:	bf00      	nop
 800b416:	e006      	b.n	800b426 <USBH_HandleControl+0x2de>
      break;
 800b418:	bf00      	nop
 800b41a:	e004      	b.n	800b426 <USBH_HandleControl+0x2de>
      break;
 800b41c:	bf00      	nop
 800b41e:	e002      	b.n	800b426 <USBH_HandleControl+0x2de>
      break;
 800b420:	bf00      	nop
 800b422:	e000      	b.n	800b426 <USBH_HandleControl+0x2de>
      break;
 800b424:	bf00      	nop
  }

  return status;
 800b426:	7bfb      	ldrb	r3, [r7, #15]
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3710      	adds	r7, #16
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b088      	sub	sp, #32
 800b434:	af04      	add	r7, sp, #16
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	60b9      	str	r1, [r7, #8]
 800b43a:	4613      	mov	r3, r2
 800b43c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b43e:	79f9      	ldrb	r1, [r7, #7]
 800b440:	2300      	movs	r3, #0
 800b442:	9303      	str	r3, [sp, #12]
 800b444:	2308      	movs	r3, #8
 800b446:	9302      	str	r3, [sp, #8]
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	9301      	str	r3, [sp, #4]
 800b44c:	2300      	movs	r3, #0
 800b44e:	9300      	str	r3, [sp, #0]
 800b450:	2300      	movs	r3, #0
 800b452:	2200      	movs	r2, #0
 800b454:	68f8      	ldr	r0, [r7, #12]
 800b456:	f000 fb46 	bl	800bae6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b45a:	2300      	movs	r3, #0
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3710      	adds	r7, #16
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b088      	sub	sp, #32
 800b468:	af04      	add	r7, sp, #16
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	4611      	mov	r1, r2
 800b470:	461a      	mov	r2, r3
 800b472:	460b      	mov	r3, r1
 800b474:	80fb      	strh	r3, [r7, #6]
 800b476:	4613      	mov	r3, r2
 800b478:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b480:	2b00      	cmp	r3, #0
 800b482:	d001      	beq.n	800b488 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b484:	2300      	movs	r3, #0
 800b486:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b488:	7979      	ldrb	r1, [r7, #5]
 800b48a:	7e3b      	ldrb	r3, [r7, #24]
 800b48c:	9303      	str	r3, [sp, #12]
 800b48e:	88fb      	ldrh	r3, [r7, #6]
 800b490:	9302      	str	r3, [sp, #8]
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	9301      	str	r3, [sp, #4]
 800b496:	2301      	movs	r3, #1
 800b498:	9300      	str	r3, [sp, #0]
 800b49a:	2300      	movs	r3, #0
 800b49c:	2200      	movs	r2, #0
 800b49e:	68f8      	ldr	r0, [r7, #12]
 800b4a0:	f000 fb21 	bl	800bae6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b4a4:	2300      	movs	r3, #0
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3710      	adds	r7, #16
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b088      	sub	sp, #32
 800b4b2:	af04      	add	r7, sp, #16
 800b4b4:	60f8      	str	r0, [r7, #12]
 800b4b6:	60b9      	str	r1, [r7, #8]
 800b4b8:	4611      	mov	r1, r2
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	460b      	mov	r3, r1
 800b4be:	80fb      	strh	r3, [r7, #6]
 800b4c0:	4613      	mov	r3, r2
 800b4c2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b4c4:	7979      	ldrb	r1, [r7, #5]
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	9303      	str	r3, [sp, #12]
 800b4ca:	88fb      	ldrh	r3, [r7, #6]
 800b4cc:	9302      	str	r3, [sp, #8]
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	9301      	str	r3, [sp, #4]
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	9300      	str	r3, [sp, #0]
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	2201      	movs	r2, #1
 800b4da:	68f8      	ldr	r0, [r7, #12]
 800b4dc:	f000 fb03 	bl	800bae6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b4e0:	2300      	movs	r3, #0

}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b088      	sub	sp, #32
 800b4ee:	af04      	add	r7, sp, #16
 800b4f0:	60f8      	str	r0, [r7, #12]
 800b4f2:	60b9      	str	r1, [r7, #8]
 800b4f4:	4611      	mov	r1, r2
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	80fb      	strh	r3, [r7, #6]
 800b4fc:	4613      	mov	r3, r2
 800b4fe:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b506:	2b00      	cmp	r3, #0
 800b508:	d001      	beq.n	800b50e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b50a:	2300      	movs	r3, #0
 800b50c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b50e:	7979      	ldrb	r1, [r7, #5]
 800b510:	7e3b      	ldrb	r3, [r7, #24]
 800b512:	9303      	str	r3, [sp, #12]
 800b514:	88fb      	ldrh	r3, [r7, #6]
 800b516:	9302      	str	r3, [sp, #8]
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	9301      	str	r3, [sp, #4]
 800b51c:	2301      	movs	r3, #1
 800b51e:	9300      	str	r3, [sp, #0]
 800b520:	2302      	movs	r3, #2
 800b522:	2200      	movs	r2, #0
 800b524:	68f8      	ldr	r0, [r7, #12]
 800b526:	f000 fade 	bl	800bae6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b52a:	2300      	movs	r3, #0
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3710      	adds	r7, #16
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b088      	sub	sp, #32
 800b538:	af04      	add	r7, sp, #16
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	4611      	mov	r1, r2
 800b540:	461a      	mov	r2, r3
 800b542:	460b      	mov	r3, r1
 800b544:	80fb      	strh	r3, [r7, #6]
 800b546:	4613      	mov	r3, r2
 800b548:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b54a:	7979      	ldrb	r1, [r7, #5]
 800b54c:	2300      	movs	r3, #0
 800b54e:	9303      	str	r3, [sp, #12]
 800b550:	88fb      	ldrh	r3, [r7, #6]
 800b552:	9302      	str	r3, [sp, #8]
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	9301      	str	r3, [sp, #4]
 800b558:	2301      	movs	r3, #1
 800b55a:	9300      	str	r3, [sp, #0]
 800b55c:	2302      	movs	r3, #2
 800b55e:	2201      	movs	r2, #1
 800b560:	68f8      	ldr	r0, [r7, #12]
 800b562:	f000 fac0 	bl	800bae6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b566:	2300      	movs	r3, #0
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3710      	adds	r7, #16
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b086      	sub	sp, #24
 800b574:	af04      	add	r7, sp, #16
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	4608      	mov	r0, r1
 800b57a:	4611      	mov	r1, r2
 800b57c:	461a      	mov	r2, r3
 800b57e:	4603      	mov	r3, r0
 800b580:	70fb      	strb	r3, [r7, #3]
 800b582:	460b      	mov	r3, r1
 800b584:	70bb      	strb	r3, [r7, #2]
 800b586:	4613      	mov	r3, r2
 800b588:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b58a:	7878      	ldrb	r0, [r7, #1]
 800b58c:	78ba      	ldrb	r2, [r7, #2]
 800b58e:	78f9      	ldrb	r1, [r7, #3]
 800b590:	8b3b      	ldrh	r3, [r7, #24]
 800b592:	9302      	str	r3, [sp, #8]
 800b594:	7d3b      	ldrb	r3, [r7, #20]
 800b596:	9301      	str	r3, [sp, #4]
 800b598:	7c3b      	ldrb	r3, [r7, #16]
 800b59a:	9300      	str	r3, [sp, #0]
 800b59c:	4603      	mov	r3, r0
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 fa53 	bl	800ba4a <USBH_LL_OpenPipe>

  return USBH_OK;
 800b5a4:	2300      	movs	r3, #0
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3708      	adds	r7, #8
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}

0800b5ae <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b082      	sub	sp, #8
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
 800b5b6:	460b      	mov	r3, r1
 800b5b8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b5ba:	78fb      	ldrb	r3, [r7, #3]
 800b5bc:	4619      	mov	r1, r3
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f000 fa72 	bl	800baa8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b5c4:	2300      	movs	r3, #0
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3708      	adds	r7, #8
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}

0800b5ce <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b5ce:	b580      	push	{r7, lr}
 800b5d0:	b084      	sub	sp, #16
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 f836 	bl	800b64c <USBH_GetFreePipe>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b5e4:	89fb      	ldrh	r3, [r7, #14]
 800b5e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d00a      	beq.n	800b604 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b5ee:	78fa      	ldrb	r2, [r7, #3]
 800b5f0:	89fb      	ldrh	r3, [r7, #14]
 800b5f2:	f003 030f 	and.w	r3, r3, #15
 800b5f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b5fa:	6879      	ldr	r1, [r7, #4]
 800b5fc:	33e0      	adds	r3, #224	; 0xe0
 800b5fe:	009b      	lsls	r3, r3, #2
 800b600:	440b      	add	r3, r1
 800b602:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b604:	89fb      	ldrh	r3, [r7, #14]
 800b606:	b2db      	uxtb	r3, r3
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3710      	adds	r7, #16
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	460b      	mov	r3, r1
 800b61a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b61c:	78fb      	ldrb	r3, [r7, #3]
 800b61e:	2b0a      	cmp	r3, #10
 800b620:	d80d      	bhi.n	800b63e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b622:	78fb      	ldrb	r3, [r7, #3]
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	33e0      	adds	r3, #224	; 0xe0
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	4413      	add	r3, r2
 800b62c:	685a      	ldr	r2, [r3, #4]
 800b62e:	78fb      	ldrb	r3, [r7, #3]
 800b630:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b634:	6879      	ldr	r1, [r7, #4]
 800b636:	33e0      	adds	r3, #224	; 0xe0
 800b638:	009b      	lsls	r3, r3, #2
 800b63a:	440b      	add	r3, r1
 800b63c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b63e:	2300      	movs	r3, #0
}
 800b640:	4618      	mov	r0, r3
 800b642:	370c      	adds	r7, #12
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b085      	sub	sp, #20
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b654:	2300      	movs	r3, #0
 800b656:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b658:	2300      	movs	r3, #0
 800b65a:	73fb      	strb	r3, [r7, #15]
 800b65c:	e00f      	b.n	800b67e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b65e:	7bfb      	ldrb	r3, [r7, #15]
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	33e0      	adds	r3, #224	; 0xe0
 800b664:	009b      	lsls	r3, r3, #2
 800b666:	4413      	add	r3, r2
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d102      	bne.n	800b678 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b672:	7bfb      	ldrb	r3, [r7, #15]
 800b674:	b29b      	uxth	r3, r3
 800b676:	e007      	b.n	800b688 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b678:	7bfb      	ldrb	r3, [r7, #15]
 800b67a:	3301      	adds	r3, #1
 800b67c:	73fb      	strb	r3, [r7, #15]
 800b67e:	7bfb      	ldrb	r3, [r7, #15]
 800b680:	2b0a      	cmp	r3, #10
 800b682:	d9ec      	bls.n	800b65e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b684:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3714      	adds	r7, #20
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b698:	2201      	movs	r2, #1
 800b69a:	490e      	ldr	r1, [pc, #56]	; (800b6d4 <MX_USB_HOST_Init+0x40>)
 800b69c:	480e      	ldr	r0, [pc, #56]	; (800b6d8 <MX_USB_HOST_Init+0x44>)
 800b69e:	f7fe fca1 	bl	8009fe4 <USBH_Init>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d001      	beq.n	800b6ac <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b6a8:	f7f7 ffa4 	bl	80035f4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b6ac:	490b      	ldr	r1, [pc, #44]	; (800b6dc <MX_USB_HOST_Init+0x48>)
 800b6ae:	480a      	ldr	r0, [pc, #40]	; (800b6d8 <MX_USB_HOST_Init+0x44>)
 800b6b0:	f7fe fd26 	bl	800a100 <USBH_RegisterClass>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d001      	beq.n	800b6be <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b6ba:	f7f7 ff9b 	bl	80035f4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b6be:	4806      	ldr	r0, [pc, #24]	; (800b6d8 <MX_USB_HOST_Init+0x44>)
 800b6c0:	f7fe fdaa 	bl	800a218 <USBH_Start>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d001      	beq.n	800b6ce <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b6ca:	f7f7 ff93 	bl	80035f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b6ce:	bf00      	nop
 800b6d0:	bd80      	pop	{r7, pc}
 800b6d2:	bf00      	nop
 800b6d4:	0800b6f5 	.word	0x0800b6f5
 800b6d8:	20001040 	.word	0x20001040
 800b6dc:	20000024 	.word	0x20000024

0800b6e0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b6e4:	4802      	ldr	r0, [pc, #8]	; (800b6f0 <MX_USB_HOST_Process+0x10>)
 800b6e6:	f7fe fda7 	bl	800a238 <USBH_Process>
}
 800b6ea:	bf00      	nop
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	20001040 	.word	0x20001040

0800b6f4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b083      	sub	sp, #12
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b700:	78fb      	ldrb	r3, [r7, #3]
 800b702:	3b01      	subs	r3, #1
 800b704:	2b04      	cmp	r3, #4
 800b706:	d819      	bhi.n	800b73c <USBH_UserProcess+0x48>
 800b708:	a201      	add	r2, pc, #4	; (adr r2, 800b710 <USBH_UserProcess+0x1c>)
 800b70a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b70e:	bf00      	nop
 800b710:	0800b73d 	.word	0x0800b73d
 800b714:	0800b72d 	.word	0x0800b72d
 800b718:	0800b73d 	.word	0x0800b73d
 800b71c:	0800b735 	.word	0x0800b735
 800b720:	0800b725 	.word	0x0800b725
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b724:	4b09      	ldr	r3, [pc, #36]	; (800b74c <USBH_UserProcess+0x58>)
 800b726:	2203      	movs	r2, #3
 800b728:	701a      	strb	r2, [r3, #0]
  break;
 800b72a:	e008      	b.n	800b73e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b72c:	4b07      	ldr	r3, [pc, #28]	; (800b74c <USBH_UserProcess+0x58>)
 800b72e:	2202      	movs	r2, #2
 800b730:	701a      	strb	r2, [r3, #0]
  break;
 800b732:	e004      	b.n	800b73e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b734:	4b05      	ldr	r3, [pc, #20]	; (800b74c <USBH_UserProcess+0x58>)
 800b736:	2201      	movs	r2, #1
 800b738:	701a      	strb	r2, [r3, #0]
  break;
 800b73a:	e000      	b.n	800b73e <USBH_UserProcess+0x4a>

  default:
  break;
 800b73c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b73e:	bf00      	nop
 800b740:	370c      	adds	r7, #12
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	20000e38 	.word	0x20000e38

0800b750 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b08a      	sub	sp, #40	; 0x28
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b758:	f107 0314 	add.w	r3, r7, #20
 800b75c:	2200      	movs	r2, #0
 800b75e:	601a      	str	r2, [r3, #0]
 800b760:	605a      	str	r2, [r3, #4]
 800b762:	609a      	str	r2, [r3, #8]
 800b764:	60da      	str	r2, [r3, #12]
 800b766:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b770:	d147      	bne.n	800b802 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b772:	2300      	movs	r3, #0
 800b774:	613b      	str	r3, [r7, #16]
 800b776:	4b25      	ldr	r3, [pc, #148]	; (800b80c <HAL_HCD_MspInit+0xbc>)
 800b778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b77a:	4a24      	ldr	r2, [pc, #144]	; (800b80c <HAL_HCD_MspInit+0xbc>)
 800b77c:	f043 0301 	orr.w	r3, r3, #1
 800b780:	6313      	str	r3, [r2, #48]	; 0x30
 800b782:	4b22      	ldr	r3, [pc, #136]	; (800b80c <HAL_HCD_MspInit+0xbc>)
 800b784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b786:	f003 0301 	and.w	r3, r3, #1
 800b78a:	613b      	str	r3, [r7, #16]
 800b78c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b78e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b794:	2300      	movs	r3, #0
 800b796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b798:	2300      	movs	r3, #0
 800b79a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b79c:	f107 0314 	add.w	r3, r7, #20
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	481b      	ldr	r0, [pc, #108]	; (800b810 <HAL_HCD_MspInit+0xc0>)
 800b7a4:	f7f8 fd9a 	bl	80042dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b7a8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b7ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7ae:	2302      	movs	r3, #2
 800b7b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b7ba:	230a      	movs	r3, #10
 800b7bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b7be:	f107 0314 	add.w	r3, r7, #20
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	4812      	ldr	r0, [pc, #72]	; (800b810 <HAL_HCD_MspInit+0xc0>)
 800b7c6:	f7f8 fd89 	bl	80042dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b7ca:	4b10      	ldr	r3, [pc, #64]	; (800b80c <HAL_HCD_MspInit+0xbc>)
 800b7cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7ce:	4a0f      	ldr	r2, [pc, #60]	; (800b80c <HAL_HCD_MspInit+0xbc>)
 800b7d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7d4:	6353      	str	r3, [r2, #52]	; 0x34
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	60fb      	str	r3, [r7, #12]
 800b7da:	4b0c      	ldr	r3, [pc, #48]	; (800b80c <HAL_HCD_MspInit+0xbc>)
 800b7dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7de:	4a0b      	ldr	r2, [pc, #44]	; (800b80c <HAL_HCD_MspInit+0xbc>)
 800b7e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b7e4:	6453      	str	r3, [r2, #68]	; 0x44
 800b7e6:	4b09      	ldr	r3, [pc, #36]	; (800b80c <HAL_HCD_MspInit+0xbc>)
 800b7e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b7ee:	60fb      	str	r3, [r7, #12]
 800b7f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	2100      	movs	r1, #0
 800b7f6:	2043      	movs	r0, #67	; 0x43
 800b7f8:	f7f8 fd39 	bl	800426e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b7fc:	2043      	movs	r0, #67	; 0x43
 800b7fe:	f7f8 fd52 	bl	80042a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b802:	bf00      	nop
 800b804:	3728      	adds	r7, #40	; 0x28
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	bf00      	nop
 800b80c:	40023800 	.word	0x40023800
 800b810:	40020000 	.word	0x40020000

0800b814 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b822:	4618      	mov	r0, r3
 800b824:	f7ff f8db 	bl	800a9de <USBH_LL_IncTimer>
}
 800b828:	bf00      	nop
 800b82a:	3708      	adds	r7, #8
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}

0800b830 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b83e:	4618      	mov	r0, r3
 800b840:	f7ff f913 	bl	800aa6a <USBH_LL_Connect>
}
 800b844:	bf00      	nop
 800b846:	3708      	adds	r7, #8
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b082      	sub	sp, #8
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7ff f91c 	bl	800aa98 <USBH_LL_Disconnect>
}
 800b860:	bf00      	nop
 800b862:	3708      	adds	r7, #8
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b868:	b480      	push	{r7}
 800b86a:	b083      	sub	sp, #12
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	460b      	mov	r3, r1
 800b872:	70fb      	strb	r3, [r7, #3]
 800b874:	4613      	mov	r3, r2
 800b876:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b878:	bf00      	nop
 800b87a:	370c      	adds	r7, #12
 800b87c:	46bd      	mov	sp, r7
 800b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b882:	4770      	bx	lr

0800b884 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b892:	4618      	mov	r0, r3
 800b894:	f7ff f8cd 	bl	800aa32 <USBH_LL_PortEnabled>
}
 800b898:	bf00      	nop
 800b89a:	3708      	adds	r7, #8
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b082      	sub	sp, #8
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7ff f8cd 	bl	800aa4e <USBH_LL_PortDisabled>
}
 800b8b4:	bf00      	nop
 800b8b6:	3708      	adds	r7, #8
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d12a      	bne.n	800b924 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b8ce:	4a18      	ldr	r2, [pc, #96]	; (800b930 <USBH_LL_Init+0x74>)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	4a15      	ldr	r2, [pc, #84]	; (800b930 <USBH_LL_Init+0x74>)
 800b8da:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b8de:	4b14      	ldr	r3, [pc, #80]	; (800b930 <USBH_LL_Init+0x74>)
 800b8e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b8e4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b8e6:	4b12      	ldr	r3, [pc, #72]	; (800b930 <USBH_LL_Init+0x74>)
 800b8e8:	2208      	movs	r2, #8
 800b8ea:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b8ec:	4b10      	ldr	r3, [pc, #64]	; (800b930 <USBH_LL_Init+0x74>)
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b8f2:	4b0f      	ldr	r3, [pc, #60]	; (800b930 <USBH_LL_Init+0x74>)
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b8f8:	4b0d      	ldr	r3, [pc, #52]	; (800b930 <USBH_LL_Init+0x74>)
 800b8fa:	2202      	movs	r2, #2
 800b8fc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b8fe:	4b0c      	ldr	r3, [pc, #48]	; (800b930 <USBH_LL_Init+0x74>)
 800b900:	2200      	movs	r2, #0
 800b902:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b904:	480a      	ldr	r0, [pc, #40]	; (800b930 <USBH_LL_Init+0x74>)
 800b906:	f7f8 feb6 	bl	8004676 <HAL_HCD_Init>
 800b90a:	4603      	mov	r3, r0
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d001      	beq.n	800b914 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b910:	f7f7 fe70 	bl	80035f4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b914:	4806      	ldr	r0, [pc, #24]	; (800b930 <USBH_LL_Init+0x74>)
 800b916:	f7f9 fa9a 	bl	8004e4e <HAL_HCD_GetCurrentFrame>
 800b91a:	4603      	mov	r3, r0
 800b91c:	4619      	mov	r1, r3
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f7ff f84e 	bl	800a9c0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b924:	2300      	movs	r3, #0
}
 800b926:	4618      	mov	r0, r3
 800b928:	3708      	adds	r7, #8
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}
 800b92e:	bf00      	nop
 800b930:	20001418 	.word	0x20001418

0800b934 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b93c:	2300      	movs	r3, #0
 800b93e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b940:	2300      	movs	r3, #0
 800b942:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b94a:	4618      	mov	r0, r3
 800b94c:	f7f9 fa09 	bl	8004d62 <HAL_HCD_Start>
 800b950:	4603      	mov	r3, r0
 800b952:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b954:	7bfb      	ldrb	r3, [r7, #15]
 800b956:	4618      	mov	r0, r3
 800b958:	f000 f95c 	bl	800bc14 <USBH_Get_USB_Status>
 800b95c:	4603      	mov	r3, r0
 800b95e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b960:	7bbb      	ldrb	r3, [r7, #14]
}
 800b962:	4618      	mov	r0, r3
 800b964:	3710      	adds	r7, #16
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}

0800b96a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b96a:	b580      	push	{r7, lr}
 800b96c:	b084      	sub	sp, #16
 800b96e:	af00      	add	r7, sp, #0
 800b970:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b972:	2300      	movs	r3, #0
 800b974:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b976:	2300      	movs	r3, #0
 800b978:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b980:	4618      	mov	r0, r3
 800b982:	f7f9 fa11 	bl	8004da8 <HAL_HCD_Stop>
 800b986:	4603      	mov	r3, r0
 800b988:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b98a:	7bfb      	ldrb	r3, [r7, #15]
 800b98c:	4618      	mov	r0, r3
 800b98e:	f000 f941 	bl	800bc14 <USBH_Get_USB_Status>
 800b992:	4603      	mov	r3, r0
 800b994:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b996:	7bbb      	ldrb	r3, [r7, #14]
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3710      	adds	r7, #16
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7f9 fa59 	bl	8004e6a <HAL_HCD_GetCurrentSpeed>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	2b02      	cmp	r3, #2
 800b9bc:	d00c      	beq.n	800b9d8 <USBH_LL_GetSpeed+0x38>
 800b9be:	2b02      	cmp	r3, #2
 800b9c0:	d80d      	bhi.n	800b9de <USBH_LL_GetSpeed+0x3e>
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d002      	beq.n	800b9cc <USBH_LL_GetSpeed+0x2c>
 800b9c6:	2b01      	cmp	r3, #1
 800b9c8:	d003      	beq.n	800b9d2 <USBH_LL_GetSpeed+0x32>
 800b9ca:	e008      	b.n	800b9de <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b9d0:	e008      	b.n	800b9e4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	73fb      	strb	r3, [r7, #15]
    break;
 800b9d6:	e005      	b.n	800b9e4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b9d8:	2302      	movs	r3, #2
 800b9da:	73fb      	strb	r3, [r7, #15]
    break;
 800b9dc:	e002      	b.n	800b9e4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b9de:	2301      	movs	r3, #1
 800b9e0:	73fb      	strb	r3, [r7, #15]
    break;
 800b9e2:	bf00      	nop
  }
  return  speed;
 800b9e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3710      	adds	r7, #16
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}

0800b9ee <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b9ee:	b580      	push	{r7, lr}
 800b9f0:	b084      	sub	sp, #16
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ba04:	4618      	mov	r0, r3
 800ba06:	f7f9 f9ec 	bl	8004de2 <HAL_HCD_ResetPort>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ba0e:	7bfb      	ldrb	r3, [r7, #15]
 800ba10:	4618      	mov	r0, r3
 800ba12:	f000 f8ff 	bl	800bc14 <USBH_Get_USB_Status>
 800ba16:	4603      	mov	r3, r0
 800ba18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3710      	adds	r7, #16
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ba36:	78fa      	ldrb	r2, [r7, #3]
 800ba38:	4611      	mov	r1, r2
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7f9 f9f3 	bl	8004e26 <HAL_HCD_HC_GetXferCount>
 800ba40:	4603      	mov	r3, r0
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3708      	adds	r7, #8
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}

0800ba4a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ba4a:	b590      	push	{r4, r7, lr}
 800ba4c:	b089      	sub	sp, #36	; 0x24
 800ba4e:	af04      	add	r7, sp, #16
 800ba50:	6078      	str	r0, [r7, #4]
 800ba52:	4608      	mov	r0, r1
 800ba54:	4611      	mov	r1, r2
 800ba56:	461a      	mov	r2, r3
 800ba58:	4603      	mov	r3, r0
 800ba5a:	70fb      	strb	r3, [r7, #3]
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	70bb      	strb	r3, [r7, #2]
 800ba60:	4613      	mov	r3, r2
 800ba62:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba64:	2300      	movs	r3, #0
 800ba66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ba72:	787c      	ldrb	r4, [r7, #1]
 800ba74:	78ba      	ldrb	r2, [r7, #2]
 800ba76:	78f9      	ldrb	r1, [r7, #3]
 800ba78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ba7a:	9302      	str	r3, [sp, #8]
 800ba7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ba80:	9301      	str	r3, [sp, #4]
 800ba82:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ba86:	9300      	str	r3, [sp, #0]
 800ba88:	4623      	mov	r3, r4
 800ba8a:	f7f8 fe56 	bl	800473a <HAL_HCD_HC_Init>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ba92:	7bfb      	ldrb	r3, [r7, #15]
 800ba94:	4618      	mov	r0, r3
 800ba96:	f000 f8bd 	bl	800bc14 <USBH_Get_USB_Status>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3714      	adds	r7, #20
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd90      	pop	{r4, r7, pc}

0800baa8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	460b      	mov	r3, r1
 800bab2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bab4:	2300      	movs	r3, #0
 800bab6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bab8:	2300      	movs	r3, #0
 800baba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bac2:	78fa      	ldrb	r2, [r7, #3]
 800bac4:	4611      	mov	r1, r2
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7f8 fec6 	bl	8004858 <HAL_HCD_HC_Halt>
 800bacc:	4603      	mov	r3, r0
 800bace:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bad0:	7bfb      	ldrb	r3, [r7, #15]
 800bad2:	4618      	mov	r0, r3
 800bad4:	f000 f89e 	bl	800bc14 <USBH_Get_USB_Status>
 800bad8:	4603      	mov	r3, r0
 800bada:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800badc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bae6:	b590      	push	{r4, r7, lr}
 800bae8:	b089      	sub	sp, #36	; 0x24
 800baea:	af04      	add	r7, sp, #16
 800baec:	6078      	str	r0, [r7, #4]
 800baee:	4608      	mov	r0, r1
 800baf0:	4611      	mov	r1, r2
 800baf2:	461a      	mov	r2, r3
 800baf4:	4603      	mov	r3, r0
 800baf6:	70fb      	strb	r3, [r7, #3]
 800baf8:	460b      	mov	r3, r1
 800bafa:	70bb      	strb	r3, [r7, #2]
 800bafc:	4613      	mov	r3, r2
 800bafe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb00:	2300      	movs	r3, #0
 800bb02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bb04:	2300      	movs	r3, #0
 800bb06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bb0e:	787c      	ldrb	r4, [r7, #1]
 800bb10:	78ba      	ldrb	r2, [r7, #2]
 800bb12:	78f9      	ldrb	r1, [r7, #3]
 800bb14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bb18:	9303      	str	r3, [sp, #12]
 800bb1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bb1c:	9302      	str	r3, [sp, #8]
 800bb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb20:	9301      	str	r3, [sp, #4]
 800bb22:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bb26:	9300      	str	r3, [sp, #0]
 800bb28:	4623      	mov	r3, r4
 800bb2a:	f7f8 feb9 	bl	80048a0 <HAL_HCD_HC_SubmitRequest>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800bb32:	7bfb      	ldrb	r3, [r7, #15]
 800bb34:	4618      	mov	r0, r3
 800bb36:	f000 f86d 	bl	800bc14 <USBH_Get_USB_Status>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3714      	adds	r7, #20
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd90      	pop	{r4, r7, pc}

0800bb48 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b082      	sub	sp, #8
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	460b      	mov	r3, r1
 800bb52:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bb5a:	78fa      	ldrb	r2, [r7, #3]
 800bb5c:	4611      	mov	r1, r2
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f7f9 f94d 	bl	8004dfe <HAL_HCD_HC_GetURBState>
 800bb64:	4603      	mov	r3, r0
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3708      	adds	r7, #8
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}

0800bb6e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bb6e:	b580      	push	{r7, lr}
 800bb70:	b082      	sub	sp, #8
 800bb72:	af00      	add	r7, sp, #0
 800bb74:	6078      	str	r0, [r7, #4]
 800bb76:	460b      	mov	r3, r1
 800bb78:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	d103      	bne.n	800bb8c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800bb84:	78fb      	ldrb	r3, [r7, #3]
 800bb86:	4618      	mov	r0, r3
 800bb88:	f000 f870 	bl	800bc6c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800bb8c:	20c8      	movs	r0, #200	; 0xc8
 800bb8e:	f7f8 fa6f 	bl	8004070 <HAL_Delay>
  return USBH_OK;
 800bb92:	2300      	movs	r3, #0
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3708      	adds	r7, #8
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}

0800bb9c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b085      	sub	sp, #20
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	460b      	mov	r3, r1
 800bba6:	70fb      	strb	r3, [r7, #3]
 800bba8:	4613      	mov	r3, r2
 800bbaa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bbb2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bbb4:	78fb      	ldrb	r3, [r7, #3]
 800bbb6:	68fa      	ldr	r2, [r7, #12]
 800bbb8:	212c      	movs	r1, #44	; 0x2c
 800bbba:	fb01 f303 	mul.w	r3, r1, r3
 800bbbe:	4413      	add	r3, r2
 800bbc0:	333b      	adds	r3, #59	; 0x3b
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d009      	beq.n	800bbdc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800bbc8:	78fb      	ldrb	r3, [r7, #3]
 800bbca:	68fa      	ldr	r2, [r7, #12]
 800bbcc:	212c      	movs	r1, #44	; 0x2c
 800bbce:	fb01 f303 	mul.w	r3, r1, r3
 800bbd2:	4413      	add	r3, r2
 800bbd4:	3354      	adds	r3, #84	; 0x54
 800bbd6:	78ba      	ldrb	r2, [r7, #2]
 800bbd8:	701a      	strb	r2, [r3, #0]
 800bbda:	e008      	b.n	800bbee <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800bbdc:	78fb      	ldrb	r3, [r7, #3]
 800bbde:	68fa      	ldr	r2, [r7, #12]
 800bbe0:	212c      	movs	r1, #44	; 0x2c
 800bbe2:	fb01 f303 	mul.w	r3, r1, r3
 800bbe6:	4413      	add	r3, r2
 800bbe8:	3355      	adds	r3, #85	; 0x55
 800bbea:	78ba      	ldrb	r2, [r7, #2]
 800bbec:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bbee:	2300      	movs	r3, #0
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3714      	adds	r7, #20
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr

0800bbfc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b082      	sub	sp, #8
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f7f8 fa33 	bl	8004070 <HAL_Delay>
}
 800bc0a:	bf00      	nop
 800bc0c:	3708      	adds	r7, #8
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
	...

0800bc14 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b085      	sub	sp, #20
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bc22:	79fb      	ldrb	r3, [r7, #7]
 800bc24:	2b03      	cmp	r3, #3
 800bc26:	d817      	bhi.n	800bc58 <USBH_Get_USB_Status+0x44>
 800bc28:	a201      	add	r2, pc, #4	; (adr r2, 800bc30 <USBH_Get_USB_Status+0x1c>)
 800bc2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc2e:	bf00      	nop
 800bc30:	0800bc41 	.word	0x0800bc41
 800bc34:	0800bc47 	.word	0x0800bc47
 800bc38:	0800bc4d 	.word	0x0800bc4d
 800bc3c:	0800bc53 	.word	0x0800bc53
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bc40:	2300      	movs	r3, #0
 800bc42:	73fb      	strb	r3, [r7, #15]
    break;
 800bc44:	e00b      	b.n	800bc5e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bc46:	2302      	movs	r3, #2
 800bc48:	73fb      	strb	r3, [r7, #15]
    break;
 800bc4a:	e008      	b.n	800bc5e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc50:	e005      	b.n	800bc5e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bc52:	2302      	movs	r3, #2
 800bc54:	73fb      	strb	r3, [r7, #15]
    break;
 800bc56:	e002      	b.n	800bc5e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bc58:	2302      	movs	r3, #2
 800bc5a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc5c:	bf00      	nop
  }
  return usb_status;
 800bc5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3714      	adds	r7, #20
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	4603      	mov	r3, r0
 800bc74:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800bc76:	79fb      	ldrb	r3, [r7, #7]
 800bc78:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800bc7a:	79fb      	ldrb	r3, [r7, #7]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d102      	bne.n	800bc86 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800bc80:	2301      	movs	r3, #1
 800bc82:	73fb      	strb	r3, [r7, #15]
 800bc84:	e001      	b.n	800bc8a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800bc86:	2300      	movs	r3, #0
 800bc88:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800bc8a:	7bfb      	ldrb	r3, [r7, #15]
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	2101      	movs	r1, #1
 800bc90:	4803      	ldr	r0, [pc, #12]	; (800bca0 <MX_DriverVbusFS+0x34>)
 800bc92:	f7f8 fcd7 	bl	8004644 <HAL_GPIO_WritePin>
}
 800bc96:	bf00      	nop
 800bc98:	3710      	adds	r7, #16
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}
 800bc9e:	bf00      	nop
 800bca0:	40020800 	.word	0x40020800

0800bca4 <__assert_func>:
 800bca4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bca6:	4614      	mov	r4, r2
 800bca8:	461a      	mov	r2, r3
 800bcaa:	4b09      	ldr	r3, [pc, #36]	; (800bcd0 <__assert_func+0x2c>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	4605      	mov	r5, r0
 800bcb0:	68d8      	ldr	r0, [r3, #12]
 800bcb2:	b14c      	cbz	r4, 800bcc8 <__assert_func+0x24>
 800bcb4:	4b07      	ldr	r3, [pc, #28]	; (800bcd4 <__assert_func+0x30>)
 800bcb6:	9100      	str	r1, [sp, #0]
 800bcb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bcbc:	4906      	ldr	r1, [pc, #24]	; (800bcd8 <__assert_func+0x34>)
 800bcbe:	462b      	mov	r3, r5
 800bcc0:	f000 f814 	bl	800bcec <fiprintf>
 800bcc4:	f000 fd8c 	bl	800c7e0 <abort>
 800bcc8:	4b04      	ldr	r3, [pc, #16]	; (800bcdc <__assert_func+0x38>)
 800bcca:	461c      	mov	r4, r3
 800bccc:	e7f3      	b.n	800bcb6 <__assert_func+0x12>
 800bcce:	bf00      	nop
 800bcd0:	20000044 	.word	0x20000044
 800bcd4:	0800ffec 	.word	0x0800ffec
 800bcd8:	0800fff9 	.word	0x0800fff9
 800bcdc:	08010027 	.word	0x08010027

0800bce0 <__errno>:
 800bce0:	4b01      	ldr	r3, [pc, #4]	; (800bce8 <__errno+0x8>)
 800bce2:	6818      	ldr	r0, [r3, #0]
 800bce4:	4770      	bx	lr
 800bce6:	bf00      	nop
 800bce8:	20000044 	.word	0x20000044

0800bcec <fiprintf>:
 800bcec:	b40e      	push	{r1, r2, r3}
 800bcee:	b503      	push	{r0, r1, lr}
 800bcf0:	4601      	mov	r1, r0
 800bcf2:	ab03      	add	r3, sp, #12
 800bcf4:	4805      	ldr	r0, [pc, #20]	; (800bd0c <fiprintf+0x20>)
 800bcf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcfa:	6800      	ldr	r0, [r0, #0]
 800bcfc:	9301      	str	r3, [sp, #4]
 800bcfe:	f000 f917 	bl	800bf30 <_vfiprintf_r>
 800bd02:	b002      	add	sp, #8
 800bd04:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd08:	b003      	add	sp, #12
 800bd0a:	4770      	bx	lr
 800bd0c:	20000044 	.word	0x20000044

0800bd10 <__libc_init_array>:
 800bd10:	b570      	push	{r4, r5, r6, lr}
 800bd12:	4d0d      	ldr	r5, [pc, #52]	; (800bd48 <__libc_init_array+0x38>)
 800bd14:	4c0d      	ldr	r4, [pc, #52]	; (800bd4c <__libc_init_array+0x3c>)
 800bd16:	1b64      	subs	r4, r4, r5
 800bd18:	10a4      	asrs	r4, r4, #2
 800bd1a:	2600      	movs	r6, #0
 800bd1c:	42a6      	cmp	r6, r4
 800bd1e:	d109      	bne.n	800bd34 <__libc_init_array+0x24>
 800bd20:	4d0b      	ldr	r5, [pc, #44]	; (800bd50 <__libc_init_array+0x40>)
 800bd22:	4c0c      	ldr	r4, [pc, #48]	; (800bd54 <__libc_init_array+0x44>)
 800bd24:	f001 fa78 	bl	800d218 <_init>
 800bd28:	1b64      	subs	r4, r4, r5
 800bd2a:	10a4      	asrs	r4, r4, #2
 800bd2c:	2600      	movs	r6, #0
 800bd2e:	42a6      	cmp	r6, r4
 800bd30:	d105      	bne.n	800bd3e <__libc_init_array+0x2e>
 800bd32:	bd70      	pop	{r4, r5, r6, pc}
 800bd34:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd38:	4798      	blx	r3
 800bd3a:	3601      	adds	r6, #1
 800bd3c:	e7ee      	b.n	800bd1c <__libc_init_array+0xc>
 800bd3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd42:	4798      	blx	r3
 800bd44:	3601      	adds	r6, #1
 800bd46:	e7f2      	b.n	800bd2e <__libc_init_array+0x1e>
 800bd48:	080100c8 	.word	0x080100c8
 800bd4c:	080100c8 	.word	0x080100c8
 800bd50:	080100c8 	.word	0x080100c8
 800bd54:	080100cc 	.word	0x080100cc

0800bd58 <malloc>:
 800bd58:	4b02      	ldr	r3, [pc, #8]	; (800bd64 <malloc+0xc>)
 800bd5a:	4601      	mov	r1, r0
 800bd5c:	6818      	ldr	r0, [r3, #0]
 800bd5e:	f000 b863 	b.w	800be28 <_malloc_r>
 800bd62:	bf00      	nop
 800bd64:	20000044 	.word	0x20000044

0800bd68 <free>:
 800bd68:	4b02      	ldr	r3, [pc, #8]	; (800bd74 <free+0xc>)
 800bd6a:	4601      	mov	r1, r0
 800bd6c:	6818      	ldr	r0, [r3, #0]
 800bd6e:	f000 b80b 	b.w	800bd88 <_free_r>
 800bd72:	bf00      	nop
 800bd74:	20000044 	.word	0x20000044

0800bd78 <memset>:
 800bd78:	4402      	add	r2, r0
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d100      	bne.n	800bd82 <memset+0xa>
 800bd80:	4770      	bx	lr
 800bd82:	f803 1b01 	strb.w	r1, [r3], #1
 800bd86:	e7f9      	b.n	800bd7c <memset+0x4>

0800bd88 <_free_r>:
 800bd88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd8a:	2900      	cmp	r1, #0
 800bd8c:	d048      	beq.n	800be20 <_free_r+0x98>
 800bd8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd92:	9001      	str	r0, [sp, #4]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	f1a1 0404 	sub.w	r4, r1, #4
 800bd9a:	bfb8      	it	lt
 800bd9c:	18e4      	addlt	r4, r4, r3
 800bd9e:	f000 ff6d 	bl	800cc7c <__malloc_lock>
 800bda2:	4a20      	ldr	r2, [pc, #128]	; (800be24 <_free_r+0x9c>)
 800bda4:	9801      	ldr	r0, [sp, #4]
 800bda6:	6813      	ldr	r3, [r2, #0]
 800bda8:	4615      	mov	r5, r2
 800bdaa:	b933      	cbnz	r3, 800bdba <_free_r+0x32>
 800bdac:	6063      	str	r3, [r4, #4]
 800bdae:	6014      	str	r4, [r2, #0]
 800bdb0:	b003      	add	sp, #12
 800bdb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bdb6:	f000 bf67 	b.w	800cc88 <__malloc_unlock>
 800bdba:	42a3      	cmp	r3, r4
 800bdbc:	d90b      	bls.n	800bdd6 <_free_r+0x4e>
 800bdbe:	6821      	ldr	r1, [r4, #0]
 800bdc0:	1862      	adds	r2, r4, r1
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	bf04      	itt	eq
 800bdc6:	681a      	ldreq	r2, [r3, #0]
 800bdc8:	685b      	ldreq	r3, [r3, #4]
 800bdca:	6063      	str	r3, [r4, #4]
 800bdcc:	bf04      	itt	eq
 800bdce:	1852      	addeq	r2, r2, r1
 800bdd0:	6022      	streq	r2, [r4, #0]
 800bdd2:	602c      	str	r4, [r5, #0]
 800bdd4:	e7ec      	b.n	800bdb0 <_free_r+0x28>
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	b10b      	cbz	r3, 800bde0 <_free_r+0x58>
 800bddc:	42a3      	cmp	r3, r4
 800bdde:	d9fa      	bls.n	800bdd6 <_free_r+0x4e>
 800bde0:	6811      	ldr	r1, [r2, #0]
 800bde2:	1855      	adds	r5, r2, r1
 800bde4:	42a5      	cmp	r5, r4
 800bde6:	d10b      	bne.n	800be00 <_free_r+0x78>
 800bde8:	6824      	ldr	r4, [r4, #0]
 800bdea:	4421      	add	r1, r4
 800bdec:	1854      	adds	r4, r2, r1
 800bdee:	42a3      	cmp	r3, r4
 800bdf0:	6011      	str	r1, [r2, #0]
 800bdf2:	d1dd      	bne.n	800bdb0 <_free_r+0x28>
 800bdf4:	681c      	ldr	r4, [r3, #0]
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	6053      	str	r3, [r2, #4]
 800bdfa:	4421      	add	r1, r4
 800bdfc:	6011      	str	r1, [r2, #0]
 800bdfe:	e7d7      	b.n	800bdb0 <_free_r+0x28>
 800be00:	d902      	bls.n	800be08 <_free_r+0x80>
 800be02:	230c      	movs	r3, #12
 800be04:	6003      	str	r3, [r0, #0]
 800be06:	e7d3      	b.n	800bdb0 <_free_r+0x28>
 800be08:	6825      	ldr	r5, [r4, #0]
 800be0a:	1961      	adds	r1, r4, r5
 800be0c:	428b      	cmp	r3, r1
 800be0e:	bf04      	itt	eq
 800be10:	6819      	ldreq	r1, [r3, #0]
 800be12:	685b      	ldreq	r3, [r3, #4]
 800be14:	6063      	str	r3, [r4, #4]
 800be16:	bf04      	itt	eq
 800be18:	1949      	addeq	r1, r1, r5
 800be1a:	6021      	streq	r1, [r4, #0]
 800be1c:	6054      	str	r4, [r2, #4]
 800be1e:	e7c7      	b.n	800bdb0 <_free_r+0x28>
 800be20:	b003      	add	sp, #12
 800be22:	bd30      	pop	{r4, r5, pc}
 800be24:	20000e3c 	.word	0x20000e3c

0800be28 <_malloc_r>:
 800be28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be2a:	1ccd      	adds	r5, r1, #3
 800be2c:	f025 0503 	bic.w	r5, r5, #3
 800be30:	3508      	adds	r5, #8
 800be32:	2d0c      	cmp	r5, #12
 800be34:	bf38      	it	cc
 800be36:	250c      	movcc	r5, #12
 800be38:	2d00      	cmp	r5, #0
 800be3a:	4606      	mov	r6, r0
 800be3c:	db01      	blt.n	800be42 <_malloc_r+0x1a>
 800be3e:	42a9      	cmp	r1, r5
 800be40:	d903      	bls.n	800be4a <_malloc_r+0x22>
 800be42:	230c      	movs	r3, #12
 800be44:	6033      	str	r3, [r6, #0]
 800be46:	2000      	movs	r0, #0
 800be48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be4a:	f000 ff17 	bl	800cc7c <__malloc_lock>
 800be4e:	4921      	ldr	r1, [pc, #132]	; (800bed4 <_malloc_r+0xac>)
 800be50:	680a      	ldr	r2, [r1, #0]
 800be52:	4614      	mov	r4, r2
 800be54:	b99c      	cbnz	r4, 800be7e <_malloc_r+0x56>
 800be56:	4f20      	ldr	r7, [pc, #128]	; (800bed8 <_malloc_r+0xb0>)
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	b923      	cbnz	r3, 800be66 <_malloc_r+0x3e>
 800be5c:	4621      	mov	r1, r4
 800be5e:	4630      	mov	r0, r6
 800be60:	f000 fbce 	bl	800c600 <_sbrk_r>
 800be64:	6038      	str	r0, [r7, #0]
 800be66:	4629      	mov	r1, r5
 800be68:	4630      	mov	r0, r6
 800be6a:	f000 fbc9 	bl	800c600 <_sbrk_r>
 800be6e:	1c43      	adds	r3, r0, #1
 800be70:	d123      	bne.n	800beba <_malloc_r+0x92>
 800be72:	230c      	movs	r3, #12
 800be74:	6033      	str	r3, [r6, #0]
 800be76:	4630      	mov	r0, r6
 800be78:	f000 ff06 	bl	800cc88 <__malloc_unlock>
 800be7c:	e7e3      	b.n	800be46 <_malloc_r+0x1e>
 800be7e:	6823      	ldr	r3, [r4, #0]
 800be80:	1b5b      	subs	r3, r3, r5
 800be82:	d417      	bmi.n	800beb4 <_malloc_r+0x8c>
 800be84:	2b0b      	cmp	r3, #11
 800be86:	d903      	bls.n	800be90 <_malloc_r+0x68>
 800be88:	6023      	str	r3, [r4, #0]
 800be8a:	441c      	add	r4, r3
 800be8c:	6025      	str	r5, [r4, #0]
 800be8e:	e004      	b.n	800be9a <_malloc_r+0x72>
 800be90:	6863      	ldr	r3, [r4, #4]
 800be92:	42a2      	cmp	r2, r4
 800be94:	bf0c      	ite	eq
 800be96:	600b      	streq	r3, [r1, #0]
 800be98:	6053      	strne	r3, [r2, #4]
 800be9a:	4630      	mov	r0, r6
 800be9c:	f000 fef4 	bl	800cc88 <__malloc_unlock>
 800bea0:	f104 000b 	add.w	r0, r4, #11
 800bea4:	1d23      	adds	r3, r4, #4
 800bea6:	f020 0007 	bic.w	r0, r0, #7
 800beaa:	1ac2      	subs	r2, r0, r3
 800beac:	d0cc      	beq.n	800be48 <_malloc_r+0x20>
 800beae:	1a1b      	subs	r3, r3, r0
 800beb0:	50a3      	str	r3, [r4, r2]
 800beb2:	e7c9      	b.n	800be48 <_malloc_r+0x20>
 800beb4:	4622      	mov	r2, r4
 800beb6:	6864      	ldr	r4, [r4, #4]
 800beb8:	e7cc      	b.n	800be54 <_malloc_r+0x2c>
 800beba:	1cc4      	adds	r4, r0, #3
 800bebc:	f024 0403 	bic.w	r4, r4, #3
 800bec0:	42a0      	cmp	r0, r4
 800bec2:	d0e3      	beq.n	800be8c <_malloc_r+0x64>
 800bec4:	1a21      	subs	r1, r4, r0
 800bec6:	4630      	mov	r0, r6
 800bec8:	f000 fb9a 	bl	800c600 <_sbrk_r>
 800becc:	3001      	adds	r0, #1
 800bece:	d1dd      	bne.n	800be8c <_malloc_r+0x64>
 800bed0:	e7cf      	b.n	800be72 <_malloc_r+0x4a>
 800bed2:	bf00      	nop
 800bed4:	20000e3c 	.word	0x20000e3c
 800bed8:	20000e40 	.word	0x20000e40

0800bedc <__sfputc_r>:
 800bedc:	6893      	ldr	r3, [r2, #8]
 800bede:	3b01      	subs	r3, #1
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	b410      	push	{r4}
 800bee4:	6093      	str	r3, [r2, #8]
 800bee6:	da08      	bge.n	800befa <__sfputc_r+0x1e>
 800bee8:	6994      	ldr	r4, [r2, #24]
 800beea:	42a3      	cmp	r3, r4
 800beec:	db01      	blt.n	800bef2 <__sfputc_r+0x16>
 800beee:	290a      	cmp	r1, #10
 800bef0:	d103      	bne.n	800befa <__sfputc_r+0x1e>
 800bef2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bef6:	f000 bbb3 	b.w	800c660 <__swbuf_r>
 800befa:	6813      	ldr	r3, [r2, #0]
 800befc:	1c58      	adds	r0, r3, #1
 800befe:	6010      	str	r0, [r2, #0]
 800bf00:	7019      	strb	r1, [r3, #0]
 800bf02:	4608      	mov	r0, r1
 800bf04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf08:	4770      	bx	lr

0800bf0a <__sfputs_r>:
 800bf0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf0c:	4606      	mov	r6, r0
 800bf0e:	460f      	mov	r7, r1
 800bf10:	4614      	mov	r4, r2
 800bf12:	18d5      	adds	r5, r2, r3
 800bf14:	42ac      	cmp	r4, r5
 800bf16:	d101      	bne.n	800bf1c <__sfputs_r+0x12>
 800bf18:	2000      	movs	r0, #0
 800bf1a:	e007      	b.n	800bf2c <__sfputs_r+0x22>
 800bf1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf20:	463a      	mov	r2, r7
 800bf22:	4630      	mov	r0, r6
 800bf24:	f7ff ffda 	bl	800bedc <__sfputc_r>
 800bf28:	1c43      	adds	r3, r0, #1
 800bf2a:	d1f3      	bne.n	800bf14 <__sfputs_r+0xa>
 800bf2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bf30 <_vfiprintf_r>:
 800bf30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf34:	460d      	mov	r5, r1
 800bf36:	b09d      	sub	sp, #116	; 0x74
 800bf38:	4614      	mov	r4, r2
 800bf3a:	4698      	mov	r8, r3
 800bf3c:	4606      	mov	r6, r0
 800bf3e:	b118      	cbz	r0, 800bf48 <_vfiprintf_r+0x18>
 800bf40:	6983      	ldr	r3, [r0, #24]
 800bf42:	b90b      	cbnz	r3, 800bf48 <_vfiprintf_r+0x18>
 800bf44:	f000 fd6e 	bl	800ca24 <__sinit>
 800bf48:	4b89      	ldr	r3, [pc, #548]	; (800c170 <_vfiprintf_r+0x240>)
 800bf4a:	429d      	cmp	r5, r3
 800bf4c:	d11b      	bne.n	800bf86 <_vfiprintf_r+0x56>
 800bf4e:	6875      	ldr	r5, [r6, #4]
 800bf50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf52:	07d9      	lsls	r1, r3, #31
 800bf54:	d405      	bmi.n	800bf62 <_vfiprintf_r+0x32>
 800bf56:	89ab      	ldrh	r3, [r5, #12]
 800bf58:	059a      	lsls	r2, r3, #22
 800bf5a:	d402      	bmi.n	800bf62 <_vfiprintf_r+0x32>
 800bf5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf5e:	f000 fdff 	bl	800cb60 <__retarget_lock_acquire_recursive>
 800bf62:	89ab      	ldrh	r3, [r5, #12]
 800bf64:	071b      	lsls	r3, r3, #28
 800bf66:	d501      	bpl.n	800bf6c <_vfiprintf_r+0x3c>
 800bf68:	692b      	ldr	r3, [r5, #16]
 800bf6a:	b9eb      	cbnz	r3, 800bfa8 <_vfiprintf_r+0x78>
 800bf6c:	4629      	mov	r1, r5
 800bf6e:	4630      	mov	r0, r6
 800bf70:	f000 fbc8 	bl	800c704 <__swsetup_r>
 800bf74:	b1c0      	cbz	r0, 800bfa8 <_vfiprintf_r+0x78>
 800bf76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf78:	07dc      	lsls	r4, r3, #31
 800bf7a:	d50e      	bpl.n	800bf9a <_vfiprintf_r+0x6a>
 800bf7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf80:	b01d      	add	sp, #116	; 0x74
 800bf82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf86:	4b7b      	ldr	r3, [pc, #492]	; (800c174 <_vfiprintf_r+0x244>)
 800bf88:	429d      	cmp	r5, r3
 800bf8a:	d101      	bne.n	800bf90 <_vfiprintf_r+0x60>
 800bf8c:	68b5      	ldr	r5, [r6, #8]
 800bf8e:	e7df      	b.n	800bf50 <_vfiprintf_r+0x20>
 800bf90:	4b79      	ldr	r3, [pc, #484]	; (800c178 <_vfiprintf_r+0x248>)
 800bf92:	429d      	cmp	r5, r3
 800bf94:	bf08      	it	eq
 800bf96:	68f5      	ldreq	r5, [r6, #12]
 800bf98:	e7da      	b.n	800bf50 <_vfiprintf_r+0x20>
 800bf9a:	89ab      	ldrh	r3, [r5, #12]
 800bf9c:	0598      	lsls	r0, r3, #22
 800bf9e:	d4ed      	bmi.n	800bf7c <_vfiprintf_r+0x4c>
 800bfa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfa2:	f000 fdde 	bl	800cb62 <__retarget_lock_release_recursive>
 800bfa6:	e7e9      	b.n	800bf7c <_vfiprintf_r+0x4c>
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	9309      	str	r3, [sp, #36]	; 0x24
 800bfac:	2320      	movs	r3, #32
 800bfae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bfb2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfb6:	2330      	movs	r3, #48	; 0x30
 800bfb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c17c <_vfiprintf_r+0x24c>
 800bfbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bfc0:	f04f 0901 	mov.w	r9, #1
 800bfc4:	4623      	mov	r3, r4
 800bfc6:	469a      	mov	sl, r3
 800bfc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfcc:	b10a      	cbz	r2, 800bfd2 <_vfiprintf_r+0xa2>
 800bfce:	2a25      	cmp	r2, #37	; 0x25
 800bfd0:	d1f9      	bne.n	800bfc6 <_vfiprintf_r+0x96>
 800bfd2:	ebba 0b04 	subs.w	fp, sl, r4
 800bfd6:	d00b      	beq.n	800bff0 <_vfiprintf_r+0xc0>
 800bfd8:	465b      	mov	r3, fp
 800bfda:	4622      	mov	r2, r4
 800bfdc:	4629      	mov	r1, r5
 800bfde:	4630      	mov	r0, r6
 800bfe0:	f7ff ff93 	bl	800bf0a <__sfputs_r>
 800bfe4:	3001      	adds	r0, #1
 800bfe6:	f000 80aa 	beq.w	800c13e <_vfiprintf_r+0x20e>
 800bfea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfec:	445a      	add	r2, fp
 800bfee:	9209      	str	r2, [sp, #36]	; 0x24
 800bff0:	f89a 3000 	ldrb.w	r3, [sl]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	f000 80a2 	beq.w	800c13e <_vfiprintf_r+0x20e>
 800bffa:	2300      	movs	r3, #0
 800bffc:	f04f 32ff 	mov.w	r2, #4294967295
 800c000:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c004:	f10a 0a01 	add.w	sl, sl, #1
 800c008:	9304      	str	r3, [sp, #16]
 800c00a:	9307      	str	r3, [sp, #28]
 800c00c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c010:	931a      	str	r3, [sp, #104]	; 0x68
 800c012:	4654      	mov	r4, sl
 800c014:	2205      	movs	r2, #5
 800c016:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c01a:	4858      	ldr	r0, [pc, #352]	; (800c17c <_vfiprintf_r+0x24c>)
 800c01c:	f7f6 f878 	bl	8002110 <memchr>
 800c020:	9a04      	ldr	r2, [sp, #16]
 800c022:	b9d8      	cbnz	r0, 800c05c <_vfiprintf_r+0x12c>
 800c024:	06d1      	lsls	r1, r2, #27
 800c026:	bf44      	itt	mi
 800c028:	2320      	movmi	r3, #32
 800c02a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c02e:	0713      	lsls	r3, r2, #28
 800c030:	bf44      	itt	mi
 800c032:	232b      	movmi	r3, #43	; 0x2b
 800c034:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c038:	f89a 3000 	ldrb.w	r3, [sl]
 800c03c:	2b2a      	cmp	r3, #42	; 0x2a
 800c03e:	d015      	beq.n	800c06c <_vfiprintf_r+0x13c>
 800c040:	9a07      	ldr	r2, [sp, #28]
 800c042:	4654      	mov	r4, sl
 800c044:	2000      	movs	r0, #0
 800c046:	f04f 0c0a 	mov.w	ip, #10
 800c04a:	4621      	mov	r1, r4
 800c04c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c050:	3b30      	subs	r3, #48	; 0x30
 800c052:	2b09      	cmp	r3, #9
 800c054:	d94e      	bls.n	800c0f4 <_vfiprintf_r+0x1c4>
 800c056:	b1b0      	cbz	r0, 800c086 <_vfiprintf_r+0x156>
 800c058:	9207      	str	r2, [sp, #28]
 800c05a:	e014      	b.n	800c086 <_vfiprintf_r+0x156>
 800c05c:	eba0 0308 	sub.w	r3, r0, r8
 800c060:	fa09 f303 	lsl.w	r3, r9, r3
 800c064:	4313      	orrs	r3, r2
 800c066:	9304      	str	r3, [sp, #16]
 800c068:	46a2      	mov	sl, r4
 800c06a:	e7d2      	b.n	800c012 <_vfiprintf_r+0xe2>
 800c06c:	9b03      	ldr	r3, [sp, #12]
 800c06e:	1d19      	adds	r1, r3, #4
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	9103      	str	r1, [sp, #12]
 800c074:	2b00      	cmp	r3, #0
 800c076:	bfbb      	ittet	lt
 800c078:	425b      	neglt	r3, r3
 800c07a:	f042 0202 	orrlt.w	r2, r2, #2
 800c07e:	9307      	strge	r3, [sp, #28]
 800c080:	9307      	strlt	r3, [sp, #28]
 800c082:	bfb8      	it	lt
 800c084:	9204      	strlt	r2, [sp, #16]
 800c086:	7823      	ldrb	r3, [r4, #0]
 800c088:	2b2e      	cmp	r3, #46	; 0x2e
 800c08a:	d10c      	bne.n	800c0a6 <_vfiprintf_r+0x176>
 800c08c:	7863      	ldrb	r3, [r4, #1]
 800c08e:	2b2a      	cmp	r3, #42	; 0x2a
 800c090:	d135      	bne.n	800c0fe <_vfiprintf_r+0x1ce>
 800c092:	9b03      	ldr	r3, [sp, #12]
 800c094:	1d1a      	adds	r2, r3, #4
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	9203      	str	r2, [sp, #12]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	bfb8      	it	lt
 800c09e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c0a2:	3402      	adds	r4, #2
 800c0a4:	9305      	str	r3, [sp, #20]
 800c0a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c18c <_vfiprintf_r+0x25c>
 800c0aa:	7821      	ldrb	r1, [r4, #0]
 800c0ac:	2203      	movs	r2, #3
 800c0ae:	4650      	mov	r0, sl
 800c0b0:	f7f6 f82e 	bl	8002110 <memchr>
 800c0b4:	b140      	cbz	r0, 800c0c8 <_vfiprintf_r+0x198>
 800c0b6:	2340      	movs	r3, #64	; 0x40
 800c0b8:	eba0 000a 	sub.w	r0, r0, sl
 800c0bc:	fa03 f000 	lsl.w	r0, r3, r0
 800c0c0:	9b04      	ldr	r3, [sp, #16]
 800c0c2:	4303      	orrs	r3, r0
 800c0c4:	3401      	adds	r4, #1
 800c0c6:	9304      	str	r3, [sp, #16]
 800c0c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0cc:	482c      	ldr	r0, [pc, #176]	; (800c180 <_vfiprintf_r+0x250>)
 800c0ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c0d2:	2206      	movs	r2, #6
 800c0d4:	f7f6 f81c 	bl	8002110 <memchr>
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	d03f      	beq.n	800c15c <_vfiprintf_r+0x22c>
 800c0dc:	4b29      	ldr	r3, [pc, #164]	; (800c184 <_vfiprintf_r+0x254>)
 800c0de:	bb1b      	cbnz	r3, 800c128 <_vfiprintf_r+0x1f8>
 800c0e0:	9b03      	ldr	r3, [sp, #12]
 800c0e2:	3307      	adds	r3, #7
 800c0e4:	f023 0307 	bic.w	r3, r3, #7
 800c0e8:	3308      	adds	r3, #8
 800c0ea:	9303      	str	r3, [sp, #12]
 800c0ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0ee:	443b      	add	r3, r7
 800c0f0:	9309      	str	r3, [sp, #36]	; 0x24
 800c0f2:	e767      	b.n	800bfc4 <_vfiprintf_r+0x94>
 800c0f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0f8:	460c      	mov	r4, r1
 800c0fa:	2001      	movs	r0, #1
 800c0fc:	e7a5      	b.n	800c04a <_vfiprintf_r+0x11a>
 800c0fe:	2300      	movs	r3, #0
 800c100:	3401      	adds	r4, #1
 800c102:	9305      	str	r3, [sp, #20]
 800c104:	4619      	mov	r1, r3
 800c106:	f04f 0c0a 	mov.w	ip, #10
 800c10a:	4620      	mov	r0, r4
 800c10c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c110:	3a30      	subs	r2, #48	; 0x30
 800c112:	2a09      	cmp	r2, #9
 800c114:	d903      	bls.n	800c11e <_vfiprintf_r+0x1ee>
 800c116:	2b00      	cmp	r3, #0
 800c118:	d0c5      	beq.n	800c0a6 <_vfiprintf_r+0x176>
 800c11a:	9105      	str	r1, [sp, #20]
 800c11c:	e7c3      	b.n	800c0a6 <_vfiprintf_r+0x176>
 800c11e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c122:	4604      	mov	r4, r0
 800c124:	2301      	movs	r3, #1
 800c126:	e7f0      	b.n	800c10a <_vfiprintf_r+0x1da>
 800c128:	ab03      	add	r3, sp, #12
 800c12a:	9300      	str	r3, [sp, #0]
 800c12c:	462a      	mov	r2, r5
 800c12e:	4b16      	ldr	r3, [pc, #88]	; (800c188 <_vfiprintf_r+0x258>)
 800c130:	a904      	add	r1, sp, #16
 800c132:	4630      	mov	r0, r6
 800c134:	f3af 8000 	nop.w
 800c138:	4607      	mov	r7, r0
 800c13a:	1c78      	adds	r0, r7, #1
 800c13c:	d1d6      	bne.n	800c0ec <_vfiprintf_r+0x1bc>
 800c13e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c140:	07d9      	lsls	r1, r3, #31
 800c142:	d405      	bmi.n	800c150 <_vfiprintf_r+0x220>
 800c144:	89ab      	ldrh	r3, [r5, #12]
 800c146:	059a      	lsls	r2, r3, #22
 800c148:	d402      	bmi.n	800c150 <_vfiprintf_r+0x220>
 800c14a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c14c:	f000 fd09 	bl	800cb62 <__retarget_lock_release_recursive>
 800c150:	89ab      	ldrh	r3, [r5, #12]
 800c152:	065b      	lsls	r3, r3, #25
 800c154:	f53f af12 	bmi.w	800bf7c <_vfiprintf_r+0x4c>
 800c158:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c15a:	e711      	b.n	800bf80 <_vfiprintf_r+0x50>
 800c15c:	ab03      	add	r3, sp, #12
 800c15e:	9300      	str	r3, [sp, #0]
 800c160:	462a      	mov	r2, r5
 800c162:	4b09      	ldr	r3, [pc, #36]	; (800c188 <_vfiprintf_r+0x258>)
 800c164:	a904      	add	r1, sp, #16
 800c166:	4630      	mov	r0, r6
 800c168:	f000 f880 	bl	800c26c <_printf_i>
 800c16c:	e7e4      	b.n	800c138 <_vfiprintf_r+0x208>
 800c16e:	bf00      	nop
 800c170:	08010080 	.word	0x08010080
 800c174:	080100a0 	.word	0x080100a0
 800c178:	08010060 	.word	0x08010060
 800c17c:	0801002c 	.word	0x0801002c
 800c180:	08010036 	.word	0x08010036
 800c184:	00000000 	.word	0x00000000
 800c188:	0800bf0b 	.word	0x0800bf0b
 800c18c:	08010032 	.word	0x08010032

0800c190 <_printf_common>:
 800c190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c194:	4616      	mov	r6, r2
 800c196:	4699      	mov	r9, r3
 800c198:	688a      	ldr	r2, [r1, #8]
 800c19a:	690b      	ldr	r3, [r1, #16]
 800c19c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	bfb8      	it	lt
 800c1a4:	4613      	movlt	r3, r2
 800c1a6:	6033      	str	r3, [r6, #0]
 800c1a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c1ac:	4607      	mov	r7, r0
 800c1ae:	460c      	mov	r4, r1
 800c1b0:	b10a      	cbz	r2, 800c1b6 <_printf_common+0x26>
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	6033      	str	r3, [r6, #0]
 800c1b6:	6823      	ldr	r3, [r4, #0]
 800c1b8:	0699      	lsls	r1, r3, #26
 800c1ba:	bf42      	ittt	mi
 800c1bc:	6833      	ldrmi	r3, [r6, #0]
 800c1be:	3302      	addmi	r3, #2
 800c1c0:	6033      	strmi	r3, [r6, #0]
 800c1c2:	6825      	ldr	r5, [r4, #0]
 800c1c4:	f015 0506 	ands.w	r5, r5, #6
 800c1c8:	d106      	bne.n	800c1d8 <_printf_common+0x48>
 800c1ca:	f104 0a19 	add.w	sl, r4, #25
 800c1ce:	68e3      	ldr	r3, [r4, #12]
 800c1d0:	6832      	ldr	r2, [r6, #0]
 800c1d2:	1a9b      	subs	r3, r3, r2
 800c1d4:	42ab      	cmp	r3, r5
 800c1d6:	dc26      	bgt.n	800c226 <_printf_common+0x96>
 800c1d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c1dc:	1e13      	subs	r3, r2, #0
 800c1de:	6822      	ldr	r2, [r4, #0]
 800c1e0:	bf18      	it	ne
 800c1e2:	2301      	movne	r3, #1
 800c1e4:	0692      	lsls	r2, r2, #26
 800c1e6:	d42b      	bmi.n	800c240 <_printf_common+0xb0>
 800c1e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c1ec:	4649      	mov	r1, r9
 800c1ee:	4638      	mov	r0, r7
 800c1f0:	47c0      	blx	r8
 800c1f2:	3001      	adds	r0, #1
 800c1f4:	d01e      	beq.n	800c234 <_printf_common+0xa4>
 800c1f6:	6823      	ldr	r3, [r4, #0]
 800c1f8:	68e5      	ldr	r5, [r4, #12]
 800c1fa:	6832      	ldr	r2, [r6, #0]
 800c1fc:	f003 0306 	and.w	r3, r3, #6
 800c200:	2b04      	cmp	r3, #4
 800c202:	bf08      	it	eq
 800c204:	1aad      	subeq	r5, r5, r2
 800c206:	68a3      	ldr	r3, [r4, #8]
 800c208:	6922      	ldr	r2, [r4, #16]
 800c20a:	bf0c      	ite	eq
 800c20c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c210:	2500      	movne	r5, #0
 800c212:	4293      	cmp	r3, r2
 800c214:	bfc4      	itt	gt
 800c216:	1a9b      	subgt	r3, r3, r2
 800c218:	18ed      	addgt	r5, r5, r3
 800c21a:	2600      	movs	r6, #0
 800c21c:	341a      	adds	r4, #26
 800c21e:	42b5      	cmp	r5, r6
 800c220:	d11a      	bne.n	800c258 <_printf_common+0xc8>
 800c222:	2000      	movs	r0, #0
 800c224:	e008      	b.n	800c238 <_printf_common+0xa8>
 800c226:	2301      	movs	r3, #1
 800c228:	4652      	mov	r2, sl
 800c22a:	4649      	mov	r1, r9
 800c22c:	4638      	mov	r0, r7
 800c22e:	47c0      	blx	r8
 800c230:	3001      	adds	r0, #1
 800c232:	d103      	bne.n	800c23c <_printf_common+0xac>
 800c234:	f04f 30ff 	mov.w	r0, #4294967295
 800c238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c23c:	3501      	adds	r5, #1
 800c23e:	e7c6      	b.n	800c1ce <_printf_common+0x3e>
 800c240:	18e1      	adds	r1, r4, r3
 800c242:	1c5a      	adds	r2, r3, #1
 800c244:	2030      	movs	r0, #48	; 0x30
 800c246:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c24a:	4422      	add	r2, r4
 800c24c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c250:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c254:	3302      	adds	r3, #2
 800c256:	e7c7      	b.n	800c1e8 <_printf_common+0x58>
 800c258:	2301      	movs	r3, #1
 800c25a:	4622      	mov	r2, r4
 800c25c:	4649      	mov	r1, r9
 800c25e:	4638      	mov	r0, r7
 800c260:	47c0      	blx	r8
 800c262:	3001      	adds	r0, #1
 800c264:	d0e6      	beq.n	800c234 <_printf_common+0xa4>
 800c266:	3601      	adds	r6, #1
 800c268:	e7d9      	b.n	800c21e <_printf_common+0x8e>
	...

0800c26c <_printf_i>:
 800c26c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c270:	460c      	mov	r4, r1
 800c272:	4691      	mov	r9, r2
 800c274:	7e27      	ldrb	r7, [r4, #24]
 800c276:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c278:	2f78      	cmp	r7, #120	; 0x78
 800c27a:	4680      	mov	r8, r0
 800c27c:	469a      	mov	sl, r3
 800c27e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c282:	d807      	bhi.n	800c294 <_printf_i+0x28>
 800c284:	2f62      	cmp	r7, #98	; 0x62
 800c286:	d80a      	bhi.n	800c29e <_printf_i+0x32>
 800c288:	2f00      	cmp	r7, #0
 800c28a:	f000 80d8 	beq.w	800c43e <_printf_i+0x1d2>
 800c28e:	2f58      	cmp	r7, #88	; 0x58
 800c290:	f000 80a3 	beq.w	800c3da <_printf_i+0x16e>
 800c294:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c298:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c29c:	e03a      	b.n	800c314 <_printf_i+0xa8>
 800c29e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c2a2:	2b15      	cmp	r3, #21
 800c2a4:	d8f6      	bhi.n	800c294 <_printf_i+0x28>
 800c2a6:	a001      	add	r0, pc, #4	; (adr r0, 800c2ac <_printf_i+0x40>)
 800c2a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c2ac:	0800c305 	.word	0x0800c305
 800c2b0:	0800c319 	.word	0x0800c319
 800c2b4:	0800c295 	.word	0x0800c295
 800c2b8:	0800c295 	.word	0x0800c295
 800c2bc:	0800c295 	.word	0x0800c295
 800c2c0:	0800c295 	.word	0x0800c295
 800c2c4:	0800c319 	.word	0x0800c319
 800c2c8:	0800c295 	.word	0x0800c295
 800c2cc:	0800c295 	.word	0x0800c295
 800c2d0:	0800c295 	.word	0x0800c295
 800c2d4:	0800c295 	.word	0x0800c295
 800c2d8:	0800c425 	.word	0x0800c425
 800c2dc:	0800c349 	.word	0x0800c349
 800c2e0:	0800c407 	.word	0x0800c407
 800c2e4:	0800c295 	.word	0x0800c295
 800c2e8:	0800c295 	.word	0x0800c295
 800c2ec:	0800c447 	.word	0x0800c447
 800c2f0:	0800c295 	.word	0x0800c295
 800c2f4:	0800c349 	.word	0x0800c349
 800c2f8:	0800c295 	.word	0x0800c295
 800c2fc:	0800c295 	.word	0x0800c295
 800c300:	0800c40f 	.word	0x0800c40f
 800c304:	680b      	ldr	r3, [r1, #0]
 800c306:	1d1a      	adds	r2, r3, #4
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	600a      	str	r2, [r1, #0]
 800c30c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c310:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c314:	2301      	movs	r3, #1
 800c316:	e0a3      	b.n	800c460 <_printf_i+0x1f4>
 800c318:	6825      	ldr	r5, [r4, #0]
 800c31a:	6808      	ldr	r0, [r1, #0]
 800c31c:	062e      	lsls	r6, r5, #24
 800c31e:	f100 0304 	add.w	r3, r0, #4
 800c322:	d50a      	bpl.n	800c33a <_printf_i+0xce>
 800c324:	6805      	ldr	r5, [r0, #0]
 800c326:	600b      	str	r3, [r1, #0]
 800c328:	2d00      	cmp	r5, #0
 800c32a:	da03      	bge.n	800c334 <_printf_i+0xc8>
 800c32c:	232d      	movs	r3, #45	; 0x2d
 800c32e:	426d      	negs	r5, r5
 800c330:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c334:	485e      	ldr	r0, [pc, #376]	; (800c4b0 <_printf_i+0x244>)
 800c336:	230a      	movs	r3, #10
 800c338:	e019      	b.n	800c36e <_printf_i+0x102>
 800c33a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c33e:	6805      	ldr	r5, [r0, #0]
 800c340:	600b      	str	r3, [r1, #0]
 800c342:	bf18      	it	ne
 800c344:	b22d      	sxthne	r5, r5
 800c346:	e7ef      	b.n	800c328 <_printf_i+0xbc>
 800c348:	680b      	ldr	r3, [r1, #0]
 800c34a:	6825      	ldr	r5, [r4, #0]
 800c34c:	1d18      	adds	r0, r3, #4
 800c34e:	6008      	str	r0, [r1, #0]
 800c350:	0628      	lsls	r0, r5, #24
 800c352:	d501      	bpl.n	800c358 <_printf_i+0xec>
 800c354:	681d      	ldr	r5, [r3, #0]
 800c356:	e002      	b.n	800c35e <_printf_i+0xf2>
 800c358:	0669      	lsls	r1, r5, #25
 800c35a:	d5fb      	bpl.n	800c354 <_printf_i+0xe8>
 800c35c:	881d      	ldrh	r5, [r3, #0]
 800c35e:	4854      	ldr	r0, [pc, #336]	; (800c4b0 <_printf_i+0x244>)
 800c360:	2f6f      	cmp	r7, #111	; 0x6f
 800c362:	bf0c      	ite	eq
 800c364:	2308      	moveq	r3, #8
 800c366:	230a      	movne	r3, #10
 800c368:	2100      	movs	r1, #0
 800c36a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c36e:	6866      	ldr	r6, [r4, #4]
 800c370:	60a6      	str	r6, [r4, #8]
 800c372:	2e00      	cmp	r6, #0
 800c374:	bfa2      	ittt	ge
 800c376:	6821      	ldrge	r1, [r4, #0]
 800c378:	f021 0104 	bicge.w	r1, r1, #4
 800c37c:	6021      	strge	r1, [r4, #0]
 800c37e:	b90d      	cbnz	r5, 800c384 <_printf_i+0x118>
 800c380:	2e00      	cmp	r6, #0
 800c382:	d04d      	beq.n	800c420 <_printf_i+0x1b4>
 800c384:	4616      	mov	r6, r2
 800c386:	fbb5 f1f3 	udiv	r1, r5, r3
 800c38a:	fb03 5711 	mls	r7, r3, r1, r5
 800c38e:	5dc7      	ldrb	r7, [r0, r7]
 800c390:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c394:	462f      	mov	r7, r5
 800c396:	42bb      	cmp	r3, r7
 800c398:	460d      	mov	r5, r1
 800c39a:	d9f4      	bls.n	800c386 <_printf_i+0x11a>
 800c39c:	2b08      	cmp	r3, #8
 800c39e:	d10b      	bne.n	800c3b8 <_printf_i+0x14c>
 800c3a0:	6823      	ldr	r3, [r4, #0]
 800c3a2:	07df      	lsls	r7, r3, #31
 800c3a4:	d508      	bpl.n	800c3b8 <_printf_i+0x14c>
 800c3a6:	6923      	ldr	r3, [r4, #16]
 800c3a8:	6861      	ldr	r1, [r4, #4]
 800c3aa:	4299      	cmp	r1, r3
 800c3ac:	bfde      	ittt	le
 800c3ae:	2330      	movle	r3, #48	; 0x30
 800c3b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c3b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c3b8:	1b92      	subs	r2, r2, r6
 800c3ba:	6122      	str	r2, [r4, #16]
 800c3bc:	f8cd a000 	str.w	sl, [sp]
 800c3c0:	464b      	mov	r3, r9
 800c3c2:	aa03      	add	r2, sp, #12
 800c3c4:	4621      	mov	r1, r4
 800c3c6:	4640      	mov	r0, r8
 800c3c8:	f7ff fee2 	bl	800c190 <_printf_common>
 800c3cc:	3001      	adds	r0, #1
 800c3ce:	d14c      	bne.n	800c46a <_printf_i+0x1fe>
 800c3d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3d4:	b004      	add	sp, #16
 800c3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3da:	4835      	ldr	r0, [pc, #212]	; (800c4b0 <_printf_i+0x244>)
 800c3dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c3e0:	6823      	ldr	r3, [r4, #0]
 800c3e2:	680e      	ldr	r6, [r1, #0]
 800c3e4:	061f      	lsls	r7, r3, #24
 800c3e6:	f856 5b04 	ldr.w	r5, [r6], #4
 800c3ea:	600e      	str	r6, [r1, #0]
 800c3ec:	d514      	bpl.n	800c418 <_printf_i+0x1ac>
 800c3ee:	07d9      	lsls	r1, r3, #31
 800c3f0:	bf44      	itt	mi
 800c3f2:	f043 0320 	orrmi.w	r3, r3, #32
 800c3f6:	6023      	strmi	r3, [r4, #0]
 800c3f8:	b91d      	cbnz	r5, 800c402 <_printf_i+0x196>
 800c3fa:	6823      	ldr	r3, [r4, #0]
 800c3fc:	f023 0320 	bic.w	r3, r3, #32
 800c400:	6023      	str	r3, [r4, #0]
 800c402:	2310      	movs	r3, #16
 800c404:	e7b0      	b.n	800c368 <_printf_i+0xfc>
 800c406:	6823      	ldr	r3, [r4, #0]
 800c408:	f043 0320 	orr.w	r3, r3, #32
 800c40c:	6023      	str	r3, [r4, #0]
 800c40e:	2378      	movs	r3, #120	; 0x78
 800c410:	4828      	ldr	r0, [pc, #160]	; (800c4b4 <_printf_i+0x248>)
 800c412:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c416:	e7e3      	b.n	800c3e0 <_printf_i+0x174>
 800c418:	065e      	lsls	r6, r3, #25
 800c41a:	bf48      	it	mi
 800c41c:	b2ad      	uxthmi	r5, r5
 800c41e:	e7e6      	b.n	800c3ee <_printf_i+0x182>
 800c420:	4616      	mov	r6, r2
 800c422:	e7bb      	b.n	800c39c <_printf_i+0x130>
 800c424:	680b      	ldr	r3, [r1, #0]
 800c426:	6826      	ldr	r6, [r4, #0]
 800c428:	6960      	ldr	r0, [r4, #20]
 800c42a:	1d1d      	adds	r5, r3, #4
 800c42c:	600d      	str	r5, [r1, #0]
 800c42e:	0635      	lsls	r5, r6, #24
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	d501      	bpl.n	800c438 <_printf_i+0x1cc>
 800c434:	6018      	str	r0, [r3, #0]
 800c436:	e002      	b.n	800c43e <_printf_i+0x1d2>
 800c438:	0671      	lsls	r1, r6, #25
 800c43a:	d5fb      	bpl.n	800c434 <_printf_i+0x1c8>
 800c43c:	8018      	strh	r0, [r3, #0]
 800c43e:	2300      	movs	r3, #0
 800c440:	6123      	str	r3, [r4, #16]
 800c442:	4616      	mov	r6, r2
 800c444:	e7ba      	b.n	800c3bc <_printf_i+0x150>
 800c446:	680b      	ldr	r3, [r1, #0]
 800c448:	1d1a      	adds	r2, r3, #4
 800c44a:	600a      	str	r2, [r1, #0]
 800c44c:	681e      	ldr	r6, [r3, #0]
 800c44e:	6862      	ldr	r2, [r4, #4]
 800c450:	2100      	movs	r1, #0
 800c452:	4630      	mov	r0, r6
 800c454:	f7f5 fe5c 	bl	8002110 <memchr>
 800c458:	b108      	cbz	r0, 800c45e <_printf_i+0x1f2>
 800c45a:	1b80      	subs	r0, r0, r6
 800c45c:	6060      	str	r0, [r4, #4]
 800c45e:	6863      	ldr	r3, [r4, #4]
 800c460:	6123      	str	r3, [r4, #16]
 800c462:	2300      	movs	r3, #0
 800c464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c468:	e7a8      	b.n	800c3bc <_printf_i+0x150>
 800c46a:	6923      	ldr	r3, [r4, #16]
 800c46c:	4632      	mov	r2, r6
 800c46e:	4649      	mov	r1, r9
 800c470:	4640      	mov	r0, r8
 800c472:	47d0      	blx	sl
 800c474:	3001      	adds	r0, #1
 800c476:	d0ab      	beq.n	800c3d0 <_printf_i+0x164>
 800c478:	6823      	ldr	r3, [r4, #0]
 800c47a:	079b      	lsls	r3, r3, #30
 800c47c:	d413      	bmi.n	800c4a6 <_printf_i+0x23a>
 800c47e:	68e0      	ldr	r0, [r4, #12]
 800c480:	9b03      	ldr	r3, [sp, #12]
 800c482:	4298      	cmp	r0, r3
 800c484:	bfb8      	it	lt
 800c486:	4618      	movlt	r0, r3
 800c488:	e7a4      	b.n	800c3d4 <_printf_i+0x168>
 800c48a:	2301      	movs	r3, #1
 800c48c:	4632      	mov	r2, r6
 800c48e:	4649      	mov	r1, r9
 800c490:	4640      	mov	r0, r8
 800c492:	47d0      	blx	sl
 800c494:	3001      	adds	r0, #1
 800c496:	d09b      	beq.n	800c3d0 <_printf_i+0x164>
 800c498:	3501      	adds	r5, #1
 800c49a:	68e3      	ldr	r3, [r4, #12]
 800c49c:	9903      	ldr	r1, [sp, #12]
 800c49e:	1a5b      	subs	r3, r3, r1
 800c4a0:	42ab      	cmp	r3, r5
 800c4a2:	dcf2      	bgt.n	800c48a <_printf_i+0x21e>
 800c4a4:	e7eb      	b.n	800c47e <_printf_i+0x212>
 800c4a6:	2500      	movs	r5, #0
 800c4a8:	f104 0619 	add.w	r6, r4, #25
 800c4ac:	e7f5      	b.n	800c49a <_printf_i+0x22e>
 800c4ae:	bf00      	nop
 800c4b0:	0801003d 	.word	0x0801003d
 800c4b4:	0801004e 	.word	0x0801004e

0800c4b8 <iprintf>:
 800c4b8:	b40f      	push	{r0, r1, r2, r3}
 800c4ba:	4b0a      	ldr	r3, [pc, #40]	; (800c4e4 <iprintf+0x2c>)
 800c4bc:	b513      	push	{r0, r1, r4, lr}
 800c4be:	681c      	ldr	r4, [r3, #0]
 800c4c0:	b124      	cbz	r4, 800c4cc <iprintf+0x14>
 800c4c2:	69a3      	ldr	r3, [r4, #24]
 800c4c4:	b913      	cbnz	r3, 800c4cc <iprintf+0x14>
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	f000 faac 	bl	800ca24 <__sinit>
 800c4cc:	ab05      	add	r3, sp, #20
 800c4ce:	9a04      	ldr	r2, [sp, #16]
 800c4d0:	68a1      	ldr	r1, [r4, #8]
 800c4d2:	9301      	str	r3, [sp, #4]
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	f7ff fd2b 	bl	800bf30 <_vfiprintf_r>
 800c4da:	b002      	add	sp, #8
 800c4dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4e0:	b004      	add	sp, #16
 800c4e2:	4770      	bx	lr
 800c4e4:	20000044 	.word	0x20000044

0800c4e8 <putchar>:
 800c4e8:	4b09      	ldr	r3, [pc, #36]	; (800c510 <putchar+0x28>)
 800c4ea:	b513      	push	{r0, r1, r4, lr}
 800c4ec:	681c      	ldr	r4, [r3, #0]
 800c4ee:	4601      	mov	r1, r0
 800c4f0:	b134      	cbz	r4, 800c500 <putchar+0x18>
 800c4f2:	69a3      	ldr	r3, [r4, #24]
 800c4f4:	b923      	cbnz	r3, 800c500 <putchar+0x18>
 800c4f6:	9001      	str	r0, [sp, #4]
 800c4f8:	4620      	mov	r0, r4
 800c4fa:	f000 fa93 	bl	800ca24 <__sinit>
 800c4fe:	9901      	ldr	r1, [sp, #4]
 800c500:	68a2      	ldr	r2, [r4, #8]
 800c502:	4620      	mov	r0, r4
 800c504:	b002      	add	sp, #8
 800c506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c50a:	f000 bd45 	b.w	800cf98 <_putc_r>
 800c50e:	bf00      	nop
 800c510:	20000044 	.word	0x20000044

0800c514 <_puts_r>:
 800c514:	b570      	push	{r4, r5, r6, lr}
 800c516:	460e      	mov	r6, r1
 800c518:	4605      	mov	r5, r0
 800c51a:	b118      	cbz	r0, 800c524 <_puts_r+0x10>
 800c51c:	6983      	ldr	r3, [r0, #24]
 800c51e:	b90b      	cbnz	r3, 800c524 <_puts_r+0x10>
 800c520:	f000 fa80 	bl	800ca24 <__sinit>
 800c524:	69ab      	ldr	r3, [r5, #24]
 800c526:	68ac      	ldr	r4, [r5, #8]
 800c528:	b913      	cbnz	r3, 800c530 <_puts_r+0x1c>
 800c52a:	4628      	mov	r0, r5
 800c52c:	f000 fa7a 	bl	800ca24 <__sinit>
 800c530:	4b2c      	ldr	r3, [pc, #176]	; (800c5e4 <_puts_r+0xd0>)
 800c532:	429c      	cmp	r4, r3
 800c534:	d120      	bne.n	800c578 <_puts_r+0x64>
 800c536:	686c      	ldr	r4, [r5, #4]
 800c538:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c53a:	07db      	lsls	r3, r3, #31
 800c53c:	d405      	bmi.n	800c54a <_puts_r+0x36>
 800c53e:	89a3      	ldrh	r3, [r4, #12]
 800c540:	0598      	lsls	r0, r3, #22
 800c542:	d402      	bmi.n	800c54a <_puts_r+0x36>
 800c544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c546:	f000 fb0b 	bl	800cb60 <__retarget_lock_acquire_recursive>
 800c54a:	89a3      	ldrh	r3, [r4, #12]
 800c54c:	0719      	lsls	r1, r3, #28
 800c54e:	d51d      	bpl.n	800c58c <_puts_r+0x78>
 800c550:	6923      	ldr	r3, [r4, #16]
 800c552:	b1db      	cbz	r3, 800c58c <_puts_r+0x78>
 800c554:	3e01      	subs	r6, #1
 800c556:	68a3      	ldr	r3, [r4, #8]
 800c558:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c55c:	3b01      	subs	r3, #1
 800c55e:	60a3      	str	r3, [r4, #8]
 800c560:	bb39      	cbnz	r1, 800c5b2 <_puts_r+0x9e>
 800c562:	2b00      	cmp	r3, #0
 800c564:	da38      	bge.n	800c5d8 <_puts_r+0xc4>
 800c566:	4622      	mov	r2, r4
 800c568:	210a      	movs	r1, #10
 800c56a:	4628      	mov	r0, r5
 800c56c:	f000 f878 	bl	800c660 <__swbuf_r>
 800c570:	3001      	adds	r0, #1
 800c572:	d011      	beq.n	800c598 <_puts_r+0x84>
 800c574:	250a      	movs	r5, #10
 800c576:	e011      	b.n	800c59c <_puts_r+0x88>
 800c578:	4b1b      	ldr	r3, [pc, #108]	; (800c5e8 <_puts_r+0xd4>)
 800c57a:	429c      	cmp	r4, r3
 800c57c:	d101      	bne.n	800c582 <_puts_r+0x6e>
 800c57e:	68ac      	ldr	r4, [r5, #8]
 800c580:	e7da      	b.n	800c538 <_puts_r+0x24>
 800c582:	4b1a      	ldr	r3, [pc, #104]	; (800c5ec <_puts_r+0xd8>)
 800c584:	429c      	cmp	r4, r3
 800c586:	bf08      	it	eq
 800c588:	68ec      	ldreq	r4, [r5, #12]
 800c58a:	e7d5      	b.n	800c538 <_puts_r+0x24>
 800c58c:	4621      	mov	r1, r4
 800c58e:	4628      	mov	r0, r5
 800c590:	f000 f8b8 	bl	800c704 <__swsetup_r>
 800c594:	2800      	cmp	r0, #0
 800c596:	d0dd      	beq.n	800c554 <_puts_r+0x40>
 800c598:	f04f 35ff 	mov.w	r5, #4294967295
 800c59c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c59e:	07da      	lsls	r2, r3, #31
 800c5a0:	d405      	bmi.n	800c5ae <_puts_r+0x9a>
 800c5a2:	89a3      	ldrh	r3, [r4, #12]
 800c5a4:	059b      	lsls	r3, r3, #22
 800c5a6:	d402      	bmi.n	800c5ae <_puts_r+0x9a>
 800c5a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5aa:	f000 fada 	bl	800cb62 <__retarget_lock_release_recursive>
 800c5ae:	4628      	mov	r0, r5
 800c5b0:	bd70      	pop	{r4, r5, r6, pc}
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	da04      	bge.n	800c5c0 <_puts_r+0xac>
 800c5b6:	69a2      	ldr	r2, [r4, #24]
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	dc06      	bgt.n	800c5ca <_puts_r+0xb6>
 800c5bc:	290a      	cmp	r1, #10
 800c5be:	d004      	beq.n	800c5ca <_puts_r+0xb6>
 800c5c0:	6823      	ldr	r3, [r4, #0]
 800c5c2:	1c5a      	adds	r2, r3, #1
 800c5c4:	6022      	str	r2, [r4, #0]
 800c5c6:	7019      	strb	r1, [r3, #0]
 800c5c8:	e7c5      	b.n	800c556 <_puts_r+0x42>
 800c5ca:	4622      	mov	r2, r4
 800c5cc:	4628      	mov	r0, r5
 800c5ce:	f000 f847 	bl	800c660 <__swbuf_r>
 800c5d2:	3001      	adds	r0, #1
 800c5d4:	d1bf      	bne.n	800c556 <_puts_r+0x42>
 800c5d6:	e7df      	b.n	800c598 <_puts_r+0x84>
 800c5d8:	6823      	ldr	r3, [r4, #0]
 800c5da:	250a      	movs	r5, #10
 800c5dc:	1c5a      	adds	r2, r3, #1
 800c5de:	6022      	str	r2, [r4, #0]
 800c5e0:	701d      	strb	r5, [r3, #0]
 800c5e2:	e7db      	b.n	800c59c <_puts_r+0x88>
 800c5e4:	08010080 	.word	0x08010080
 800c5e8:	080100a0 	.word	0x080100a0
 800c5ec:	08010060 	.word	0x08010060

0800c5f0 <puts>:
 800c5f0:	4b02      	ldr	r3, [pc, #8]	; (800c5fc <puts+0xc>)
 800c5f2:	4601      	mov	r1, r0
 800c5f4:	6818      	ldr	r0, [r3, #0]
 800c5f6:	f7ff bf8d 	b.w	800c514 <_puts_r>
 800c5fa:	bf00      	nop
 800c5fc:	20000044 	.word	0x20000044

0800c600 <_sbrk_r>:
 800c600:	b538      	push	{r3, r4, r5, lr}
 800c602:	4d06      	ldr	r5, [pc, #24]	; (800c61c <_sbrk_r+0x1c>)
 800c604:	2300      	movs	r3, #0
 800c606:	4604      	mov	r4, r0
 800c608:	4608      	mov	r0, r1
 800c60a:	602b      	str	r3, [r5, #0]
 800c60c:	f7f7 fc4c 	bl	8003ea8 <_sbrk>
 800c610:	1c43      	adds	r3, r0, #1
 800c612:	d102      	bne.n	800c61a <_sbrk_r+0x1a>
 800c614:	682b      	ldr	r3, [r5, #0]
 800c616:	b103      	cbz	r3, 800c61a <_sbrk_r+0x1a>
 800c618:	6023      	str	r3, [r4, #0]
 800c61a:	bd38      	pop	{r3, r4, r5, pc}
 800c61c:	20001728 	.word	0x20001728

0800c620 <siprintf>:
 800c620:	b40e      	push	{r1, r2, r3}
 800c622:	b500      	push	{lr}
 800c624:	b09c      	sub	sp, #112	; 0x70
 800c626:	ab1d      	add	r3, sp, #116	; 0x74
 800c628:	9002      	str	r0, [sp, #8]
 800c62a:	9006      	str	r0, [sp, #24]
 800c62c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c630:	4809      	ldr	r0, [pc, #36]	; (800c658 <siprintf+0x38>)
 800c632:	9107      	str	r1, [sp, #28]
 800c634:	9104      	str	r1, [sp, #16]
 800c636:	4909      	ldr	r1, [pc, #36]	; (800c65c <siprintf+0x3c>)
 800c638:	f853 2b04 	ldr.w	r2, [r3], #4
 800c63c:	9105      	str	r1, [sp, #20]
 800c63e:	6800      	ldr	r0, [r0, #0]
 800c640:	9301      	str	r3, [sp, #4]
 800c642:	a902      	add	r1, sp, #8
 800c644:	f000 fba8 	bl	800cd98 <_svfiprintf_r>
 800c648:	9b02      	ldr	r3, [sp, #8]
 800c64a:	2200      	movs	r2, #0
 800c64c:	701a      	strb	r2, [r3, #0]
 800c64e:	b01c      	add	sp, #112	; 0x70
 800c650:	f85d eb04 	ldr.w	lr, [sp], #4
 800c654:	b003      	add	sp, #12
 800c656:	4770      	bx	lr
 800c658:	20000044 	.word	0x20000044
 800c65c:	ffff0208 	.word	0xffff0208

0800c660 <__swbuf_r>:
 800c660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c662:	460e      	mov	r6, r1
 800c664:	4614      	mov	r4, r2
 800c666:	4605      	mov	r5, r0
 800c668:	b118      	cbz	r0, 800c672 <__swbuf_r+0x12>
 800c66a:	6983      	ldr	r3, [r0, #24]
 800c66c:	b90b      	cbnz	r3, 800c672 <__swbuf_r+0x12>
 800c66e:	f000 f9d9 	bl	800ca24 <__sinit>
 800c672:	4b21      	ldr	r3, [pc, #132]	; (800c6f8 <__swbuf_r+0x98>)
 800c674:	429c      	cmp	r4, r3
 800c676:	d12b      	bne.n	800c6d0 <__swbuf_r+0x70>
 800c678:	686c      	ldr	r4, [r5, #4]
 800c67a:	69a3      	ldr	r3, [r4, #24]
 800c67c:	60a3      	str	r3, [r4, #8]
 800c67e:	89a3      	ldrh	r3, [r4, #12]
 800c680:	071a      	lsls	r2, r3, #28
 800c682:	d52f      	bpl.n	800c6e4 <__swbuf_r+0x84>
 800c684:	6923      	ldr	r3, [r4, #16]
 800c686:	b36b      	cbz	r3, 800c6e4 <__swbuf_r+0x84>
 800c688:	6923      	ldr	r3, [r4, #16]
 800c68a:	6820      	ldr	r0, [r4, #0]
 800c68c:	1ac0      	subs	r0, r0, r3
 800c68e:	6963      	ldr	r3, [r4, #20]
 800c690:	b2f6      	uxtb	r6, r6
 800c692:	4283      	cmp	r3, r0
 800c694:	4637      	mov	r7, r6
 800c696:	dc04      	bgt.n	800c6a2 <__swbuf_r+0x42>
 800c698:	4621      	mov	r1, r4
 800c69a:	4628      	mov	r0, r5
 800c69c:	f000 f92e 	bl	800c8fc <_fflush_r>
 800c6a0:	bb30      	cbnz	r0, 800c6f0 <__swbuf_r+0x90>
 800c6a2:	68a3      	ldr	r3, [r4, #8]
 800c6a4:	3b01      	subs	r3, #1
 800c6a6:	60a3      	str	r3, [r4, #8]
 800c6a8:	6823      	ldr	r3, [r4, #0]
 800c6aa:	1c5a      	adds	r2, r3, #1
 800c6ac:	6022      	str	r2, [r4, #0]
 800c6ae:	701e      	strb	r6, [r3, #0]
 800c6b0:	6963      	ldr	r3, [r4, #20]
 800c6b2:	3001      	adds	r0, #1
 800c6b4:	4283      	cmp	r3, r0
 800c6b6:	d004      	beq.n	800c6c2 <__swbuf_r+0x62>
 800c6b8:	89a3      	ldrh	r3, [r4, #12]
 800c6ba:	07db      	lsls	r3, r3, #31
 800c6bc:	d506      	bpl.n	800c6cc <__swbuf_r+0x6c>
 800c6be:	2e0a      	cmp	r6, #10
 800c6c0:	d104      	bne.n	800c6cc <__swbuf_r+0x6c>
 800c6c2:	4621      	mov	r1, r4
 800c6c4:	4628      	mov	r0, r5
 800c6c6:	f000 f919 	bl	800c8fc <_fflush_r>
 800c6ca:	b988      	cbnz	r0, 800c6f0 <__swbuf_r+0x90>
 800c6cc:	4638      	mov	r0, r7
 800c6ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6d0:	4b0a      	ldr	r3, [pc, #40]	; (800c6fc <__swbuf_r+0x9c>)
 800c6d2:	429c      	cmp	r4, r3
 800c6d4:	d101      	bne.n	800c6da <__swbuf_r+0x7a>
 800c6d6:	68ac      	ldr	r4, [r5, #8]
 800c6d8:	e7cf      	b.n	800c67a <__swbuf_r+0x1a>
 800c6da:	4b09      	ldr	r3, [pc, #36]	; (800c700 <__swbuf_r+0xa0>)
 800c6dc:	429c      	cmp	r4, r3
 800c6de:	bf08      	it	eq
 800c6e0:	68ec      	ldreq	r4, [r5, #12]
 800c6e2:	e7ca      	b.n	800c67a <__swbuf_r+0x1a>
 800c6e4:	4621      	mov	r1, r4
 800c6e6:	4628      	mov	r0, r5
 800c6e8:	f000 f80c 	bl	800c704 <__swsetup_r>
 800c6ec:	2800      	cmp	r0, #0
 800c6ee:	d0cb      	beq.n	800c688 <__swbuf_r+0x28>
 800c6f0:	f04f 37ff 	mov.w	r7, #4294967295
 800c6f4:	e7ea      	b.n	800c6cc <__swbuf_r+0x6c>
 800c6f6:	bf00      	nop
 800c6f8:	08010080 	.word	0x08010080
 800c6fc:	080100a0 	.word	0x080100a0
 800c700:	08010060 	.word	0x08010060

0800c704 <__swsetup_r>:
 800c704:	4b32      	ldr	r3, [pc, #200]	; (800c7d0 <__swsetup_r+0xcc>)
 800c706:	b570      	push	{r4, r5, r6, lr}
 800c708:	681d      	ldr	r5, [r3, #0]
 800c70a:	4606      	mov	r6, r0
 800c70c:	460c      	mov	r4, r1
 800c70e:	b125      	cbz	r5, 800c71a <__swsetup_r+0x16>
 800c710:	69ab      	ldr	r3, [r5, #24]
 800c712:	b913      	cbnz	r3, 800c71a <__swsetup_r+0x16>
 800c714:	4628      	mov	r0, r5
 800c716:	f000 f985 	bl	800ca24 <__sinit>
 800c71a:	4b2e      	ldr	r3, [pc, #184]	; (800c7d4 <__swsetup_r+0xd0>)
 800c71c:	429c      	cmp	r4, r3
 800c71e:	d10f      	bne.n	800c740 <__swsetup_r+0x3c>
 800c720:	686c      	ldr	r4, [r5, #4]
 800c722:	89a3      	ldrh	r3, [r4, #12]
 800c724:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c728:	0719      	lsls	r1, r3, #28
 800c72a:	d42c      	bmi.n	800c786 <__swsetup_r+0x82>
 800c72c:	06dd      	lsls	r5, r3, #27
 800c72e:	d411      	bmi.n	800c754 <__swsetup_r+0x50>
 800c730:	2309      	movs	r3, #9
 800c732:	6033      	str	r3, [r6, #0]
 800c734:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c738:	81a3      	strh	r3, [r4, #12]
 800c73a:	f04f 30ff 	mov.w	r0, #4294967295
 800c73e:	e03e      	b.n	800c7be <__swsetup_r+0xba>
 800c740:	4b25      	ldr	r3, [pc, #148]	; (800c7d8 <__swsetup_r+0xd4>)
 800c742:	429c      	cmp	r4, r3
 800c744:	d101      	bne.n	800c74a <__swsetup_r+0x46>
 800c746:	68ac      	ldr	r4, [r5, #8]
 800c748:	e7eb      	b.n	800c722 <__swsetup_r+0x1e>
 800c74a:	4b24      	ldr	r3, [pc, #144]	; (800c7dc <__swsetup_r+0xd8>)
 800c74c:	429c      	cmp	r4, r3
 800c74e:	bf08      	it	eq
 800c750:	68ec      	ldreq	r4, [r5, #12]
 800c752:	e7e6      	b.n	800c722 <__swsetup_r+0x1e>
 800c754:	0758      	lsls	r0, r3, #29
 800c756:	d512      	bpl.n	800c77e <__swsetup_r+0x7a>
 800c758:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c75a:	b141      	cbz	r1, 800c76e <__swsetup_r+0x6a>
 800c75c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c760:	4299      	cmp	r1, r3
 800c762:	d002      	beq.n	800c76a <__swsetup_r+0x66>
 800c764:	4630      	mov	r0, r6
 800c766:	f7ff fb0f 	bl	800bd88 <_free_r>
 800c76a:	2300      	movs	r3, #0
 800c76c:	6363      	str	r3, [r4, #52]	; 0x34
 800c76e:	89a3      	ldrh	r3, [r4, #12]
 800c770:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c774:	81a3      	strh	r3, [r4, #12]
 800c776:	2300      	movs	r3, #0
 800c778:	6063      	str	r3, [r4, #4]
 800c77a:	6923      	ldr	r3, [r4, #16]
 800c77c:	6023      	str	r3, [r4, #0]
 800c77e:	89a3      	ldrh	r3, [r4, #12]
 800c780:	f043 0308 	orr.w	r3, r3, #8
 800c784:	81a3      	strh	r3, [r4, #12]
 800c786:	6923      	ldr	r3, [r4, #16]
 800c788:	b94b      	cbnz	r3, 800c79e <__swsetup_r+0x9a>
 800c78a:	89a3      	ldrh	r3, [r4, #12]
 800c78c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c794:	d003      	beq.n	800c79e <__swsetup_r+0x9a>
 800c796:	4621      	mov	r1, r4
 800c798:	4630      	mov	r0, r6
 800c79a:	f000 fa07 	bl	800cbac <__smakebuf_r>
 800c79e:	89a0      	ldrh	r0, [r4, #12]
 800c7a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c7a4:	f010 0301 	ands.w	r3, r0, #1
 800c7a8:	d00a      	beq.n	800c7c0 <__swsetup_r+0xbc>
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	60a3      	str	r3, [r4, #8]
 800c7ae:	6963      	ldr	r3, [r4, #20]
 800c7b0:	425b      	negs	r3, r3
 800c7b2:	61a3      	str	r3, [r4, #24]
 800c7b4:	6923      	ldr	r3, [r4, #16]
 800c7b6:	b943      	cbnz	r3, 800c7ca <__swsetup_r+0xc6>
 800c7b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c7bc:	d1ba      	bne.n	800c734 <__swsetup_r+0x30>
 800c7be:	bd70      	pop	{r4, r5, r6, pc}
 800c7c0:	0781      	lsls	r1, r0, #30
 800c7c2:	bf58      	it	pl
 800c7c4:	6963      	ldrpl	r3, [r4, #20]
 800c7c6:	60a3      	str	r3, [r4, #8]
 800c7c8:	e7f4      	b.n	800c7b4 <__swsetup_r+0xb0>
 800c7ca:	2000      	movs	r0, #0
 800c7cc:	e7f7      	b.n	800c7be <__swsetup_r+0xba>
 800c7ce:	bf00      	nop
 800c7d0:	20000044 	.word	0x20000044
 800c7d4:	08010080 	.word	0x08010080
 800c7d8:	080100a0 	.word	0x080100a0
 800c7dc:	08010060 	.word	0x08010060

0800c7e0 <abort>:
 800c7e0:	b508      	push	{r3, lr}
 800c7e2:	2006      	movs	r0, #6
 800c7e4:	f000 fc48 	bl	800d078 <raise>
 800c7e8:	2001      	movs	r0, #1
 800c7ea:	f7f7 fae5 	bl	8003db8 <_exit>
	...

0800c7f0 <__sflush_r>:
 800c7f0:	898a      	ldrh	r2, [r1, #12]
 800c7f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7f6:	4605      	mov	r5, r0
 800c7f8:	0710      	lsls	r0, r2, #28
 800c7fa:	460c      	mov	r4, r1
 800c7fc:	d458      	bmi.n	800c8b0 <__sflush_r+0xc0>
 800c7fe:	684b      	ldr	r3, [r1, #4]
 800c800:	2b00      	cmp	r3, #0
 800c802:	dc05      	bgt.n	800c810 <__sflush_r+0x20>
 800c804:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c806:	2b00      	cmp	r3, #0
 800c808:	dc02      	bgt.n	800c810 <__sflush_r+0x20>
 800c80a:	2000      	movs	r0, #0
 800c80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c810:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c812:	2e00      	cmp	r6, #0
 800c814:	d0f9      	beq.n	800c80a <__sflush_r+0x1a>
 800c816:	2300      	movs	r3, #0
 800c818:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c81c:	682f      	ldr	r7, [r5, #0]
 800c81e:	602b      	str	r3, [r5, #0]
 800c820:	d032      	beq.n	800c888 <__sflush_r+0x98>
 800c822:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c824:	89a3      	ldrh	r3, [r4, #12]
 800c826:	075a      	lsls	r2, r3, #29
 800c828:	d505      	bpl.n	800c836 <__sflush_r+0x46>
 800c82a:	6863      	ldr	r3, [r4, #4]
 800c82c:	1ac0      	subs	r0, r0, r3
 800c82e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c830:	b10b      	cbz	r3, 800c836 <__sflush_r+0x46>
 800c832:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c834:	1ac0      	subs	r0, r0, r3
 800c836:	2300      	movs	r3, #0
 800c838:	4602      	mov	r2, r0
 800c83a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c83c:	6a21      	ldr	r1, [r4, #32]
 800c83e:	4628      	mov	r0, r5
 800c840:	47b0      	blx	r6
 800c842:	1c43      	adds	r3, r0, #1
 800c844:	89a3      	ldrh	r3, [r4, #12]
 800c846:	d106      	bne.n	800c856 <__sflush_r+0x66>
 800c848:	6829      	ldr	r1, [r5, #0]
 800c84a:	291d      	cmp	r1, #29
 800c84c:	d82c      	bhi.n	800c8a8 <__sflush_r+0xb8>
 800c84e:	4a2a      	ldr	r2, [pc, #168]	; (800c8f8 <__sflush_r+0x108>)
 800c850:	40ca      	lsrs	r2, r1
 800c852:	07d6      	lsls	r6, r2, #31
 800c854:	d528      	bpl.n	800c8a8 <__sflush_r+0xb8>
 800c856:	2200      	movs	r2, #0
 800c858:	6062      	str	r2, [r4, #4]
 800c85a:	04d9      	lsls	r1, r3, #19
 800c85c:	6922      	ldr	r2, [r4, #16]
 800c85e:	6022      	str	r2, [r4, #0]
 800c860:	d504      	bpl.n	800c86c <__sflush_r+0x7c>
 800c862:	1c42      	adds	r2, r0, #1
 800c864:	d101      	bne.n	800c86a <__sflush_r+0x7a>
 800c866:	682b      	ldr	r3, [r5, #0]
 800c868:	b903      	cbnz	r3, 800c86c <__sflush_r+0x7c>
 800c86a:	6560      	str	r0, [r4, #84]	; 0x54
 800c86c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c86e:	602f      	str	r7, [r5, #0]
 800c870:	2900      	cmp	r1, #0
 800c872:	d0ca      	beq.n	800c80a <__sflush_r+0x1a>
 800c874:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c878:	4299      	cmp	r1, r3
 800c87a:	d002      	beq.n	800c882 <__sflush_r+0x92>
 800c87c:	4628      	mov	r0, r5
 800c87e:	f7ff fa83 	bl	800bd88 <_free_r>
 800c882:	2000      	movs	r0, #0
 800c884:	6360      	str	r0, [r4, #52]	; 0x34
 800c886:	e7c1      	b.n	800c80c <__sflush_r+0x1c>
 800c888:	6a21      	ldr	r1, [r4, #32]
 800c88a:	2301      	movs	r3, #1
 800c88c:	4628      	mov	r0, r5
 800c88e:	47b0      	blx	r6
 800c890:	1c41      	adds	r1, r0, #1
 800c892:	d1c7      	bne.n	800c824 <__sflush_r+0x34>
 800c894:	682b      	ldr	r3, [r5, #0]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d0c4      	beq.n	800c824 <__sflush_r+0x34>
 800c89a:	2b1d      	cmp	r3, #29
 800c89c:	d001      	beq.n	800c8a2 <__sflush_r+0xb2>
 800c89e:	2b16      	cmp	r3, #22
 800c8a0:	d101      	bne.n	800c8a6 <__sflush_r+0xb6>
 800c8a2:	602f      	str	r7, [r5, #0]
 800c8a4:	e7b1      	b.n	800c80a <__sflush_r+0x1a>
 800c8a6:	89a3      	ldrh	r3, [r4, #12]
 800c8a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8ac:	81a3      	strh	r3, [r4, #12]
 800c8ae:	e7ad      	b.n	800c80c <__sflush_r+0x1c>
 800c8b0:	690f      	ldr	r7, [r1, #16]
 800c8b2:	2f00      	cmp	r7, #0
 800c8b4:	d0a9      	beq.n	800c80a <__sflush_r+0x1a>
 800c8b6:	0793      	lsls	r3, r2, #30
 800c8b8:	680e      	ldr	r6, [r1, #0]
 800c8ba:	bf08      	it	eq
 800c8bc:	694b      	ldreq	r3, [r1, #20]
 800c8be:	600f      	str	r7, [r1, #0]
 800c8c0:	bf18      	it	ne
 800c8c2:	2300      	movne	r3, #0
 800c8c4:	eba6 0807 	sub.w	r8, r6, r7
 800c8c8:	608b      	str	r3, [r1, #8]
 800c8ca:	f1b8 0f00 	cmp.w	r8, #0
 800c8ce:	dd9c      	ble.n	800c80a <__sflush_r+0x1a>
 800c8d0:	6a21      	ldr	r1, [r4, #32]
 800c8d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c8d4:	4643      	mov	r3, r8
 800c8d6:	463a      	mov	r2, r7
 800c8d8:	4628      	mov	r0, r5
 800c8da:	47b0      	blx	r6
 800c8dc:	2800      	cmp	r0, #0
 800c8de:	dc06      	bgt.n	800c8ee <__sflush_r+0xfe>
 800c8e0:	89a3      	ldrh	r3, [r4, #12]
 800c8e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8e6:	81a3      	strh	r3, [r4, #12]
 800c8e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ec:	e78e      	b.n	800c80c <__sflush_r+0x1c>
 800c8ee:	4407      	add	r7, r0
 800c8f0:	eba8 0800 	sub.w	r8, r8, r0
 800c8f4:	e7e9      	b.n	800c8ca <__sflush_r+0xda>
 800c8f6:	bf00      	nop
 800c8f8:	20400001 	.word	0x20400001

0800c8fc <_fflush_r>:
 800c8fc:	b538      	push	{r3, r4, r5, lr}
 800c8fe:	690b      	ldr	r3, [r1, #16]
 800c900:	4605      	mov	r5, r0
 800c902:	460c      	mov	r4, r1
 800c904:	b913      	cbnz	r3, 800c90c <_fflush_r+0x10>
 800c906:	2500      	movs	r5, #0
 800c908:	4628      	mov	r0, r5
 800c90a:	bd38      	pop	{r3, r4, r5, pc}
 800c90c:	b118      	cbz	r0, 800c916 <_fflush_r+0x1a>
 800c90e:	6983      	ldr	r3, [r0, #24]
 800c910:	b90b      	cbnz	r3, 800c916 <_fflush_r+0x1a>
 800c912:	f000 f887 	bl	800ca24 <__sinit>
 800c916:	4b14      	ldr	r3, [pc, #80]	; (800c968 <_fflush_r+0x6c>)
 800c918:	429c      	cmp	r4, r3
 800c91a:	d11b      	bne.n	800c954 <_fflush_r+0x58>
 800c91c:	686c      	ldr	r4, [r5, #4]
 800c91e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d0ef      	beq.n	800c906 <_fflush_r+0xa>
 800c926:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c928:	07d0      	lsls	r0, r2, #31
 800c92a:	d404      	bmi.n	800c936 <_fflush_r+0x3a>
 800c92c:	0599      	lsls	r1, r3, #22
 800c92e:	d402      	bmi.n	800c936 <_fflush_r+0x3a>
 800c930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c932:	f000 f915 	bl	800cb60 <__retarget_lock_acquire_recursive>
 800c936:	4628      	mov	r0, r5
 800c938:	4621      	mov	r1, r4
 800c93a:	f7ff ff59 	bl	800c7f0 <__sflush_r>
 800c93e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c940:	07da      	lsls	r2, r3, #31
 800c942:	4605      	mov	r5, r0
 800c944:	d4e0      	bmi.n	800c908 <_fflush_r+0xc>
 800c946:	89a3      	ldrh	r3, [r4, #12]
 800c948:	059b      	lsls	r3, r3, #22
 800c94a:	d4dd      	bmi.n	800c908 <_fflush_r+0xc>
 800c94c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c94e:	f000 f908 	bl	800cb62 <__retarget_lock_release_recursive>
 800c952:	e7d9      	b.n	800c908 <_fflush_r+0xc>
 800c954:	4b05      	ldr	r3, [pc, #20]	; (800c96c <_fflush_r+0x70>)
 800c956:	429c      	cmp	r4, r3
 800c958:	d101      	bne.n	800c95e <_fflush_r+0x62>
 800c95a:	68ac      	ldr	r4, [r5, #8]
 800c95c:	e7df      	b.n	800c91e <_fflush_r+0x22>
 800c95e:	4b04      	ldr	r3, [pc, #16]	; (800c970 <_fflush_r+0x74>)
 800c960:	429c      	cmp	r4, r3
 800c962:	bf08      	it	eq
 800c964:	68ec      	ldreq	r4, [r5, #12]
 800c966:	e7da      	b.n	800c91e <_fflush_r+0x22>
 800c968:	08010080 	.word	0x08010080
 800c96c:	080100a0 	.word	0x080100a0
 800c970:	08010060 	.word	0x08010060

0800c974 <std>:
 800c974:	2300      	movs	r3, #0
 800c976:	b510      	push	{r4, lr}
 800c978:	4604      	mov	r4, r0
 800c97a:	e9c0 3300 	strd	r3, r3, [r0]
 800c97e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c982:	6083      	str	r3, [r0, #8]
 800c984:	8181      	strh	r1, [r0, #12]
 800c986:	6643      	str	r3, [r0, #100]	; 0x64
 800c988:	81c2      	strh	r2, [r0, #14]
 800c98a:	6183      	str	r3, [r0, #24]
 800c98c:	4619      	mov	r1, r3
 800c98e:	2208      	movs	r2, #8
 800c990:	305c      	adds	r0, #92	; 0x5c
 800c992:	f7ff f9f1 	bl	800bd78 <memset>
 800c996:	4b05      	ldr	r3, [pc, #20]	; (800c9ac <std+0x38>)
 800c998:	6263      	str	r3, [r4, #36]	; 0x24
 800c99a:	4b05      	ldr	r3, [pc, #20]	; (800c9b0 <std+0x3c>)
 800c99c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c99e:	4b05      	ldr	r3, [pc, #20]	; (800c9b4 <std+0x40>)
 800c9a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c9a2:	4b05      	ldr	r3, [pc, #20]	; (800c9b8 <std+0x44>)
 800c9a4:	6224      	str	r4, [r4, #32]
 800c9a6:	6323      	str	r3, [r4, #48]	; 0x30
 800c9a8:	bd10      	pop	{r4, pc}
 800c9aa:	bf00      	nop
 800c9ac:	0800d0b1 	.word	0x0800d0b1
 800c9b0:	0800d0d3 	.word	0x0800d0d3
 800c9b4:	0800d10b 	.word	0x0800d10b
 800c9b8:	0800d12f 	.word	0x0800d12f

0800c9bc <_cleanup_r>:
 800c9bc:	4901      	ldr	r1, [pc, #4]	; (800c9c4 <_cleanup_r+0x8>)
 800c9be:	f000 b8af 	b.w	800cb20 <_fwalk_reent>
 800c9c2:	bf00      	nop
 800c9c4:	0800c8fd 	.word	0x0800c8fd

0800c9c8 <__sfmoreglue>:
 800c9c8:	b570      	push	{r4, r5, r6, lr}
 800c9ca:	1e4a      	subs	r2, r1, #1
 800c9cc:	2568      	movs	r5, #104	; 0x68
 800c9ce:	4355      	muls	r5, r2
 800c9d0:	460e      	mov	r6, r1
 800c9d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c9d6:	f7ff fa27 	bl	800be28 <_malloc_r>
 800c9da:	4604      	mov	r4, r0
 800c9dc:	b140      	cbz	r0, 800c9f0 <__sfmoreglue+0x28>
 800c9de:	2100      	movs	r1, #0
 800c9e0:	e9c0 1600 	strd	r1, r6, [r0]
 800c9e4:	300c      	adds	r0, #12
 800c9e6:	60a0      	str	r0, [r4, #8]
 800c9e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c9ec:	f7ff f9c4 	bl	800bd78 <memset>
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	bd70      	pop	{r4, r5, r6, pc}

0800c9f4 <__sfp_lock_acquire>:
 800c9f4:	4801      	ldr	r0, [pc, #4]	; (800c9fc <__sfp_lock_acquire+0x8>)
 800c9f6:	f000 b8b3 	b.w	800cb60 <__retarget_lock_acquire_recursive>
 800c9fa:	bf00      	nop
 800c9fc:	20001724 	.word	0x20001724

0800ca00 <__sfp_lock_release>:
 800ca00:	4801      	ldr	r0, [pc, #4]	; (800ca08 <__sfp_lock_release+0x8>)
 800ca02:	f000 b8ae 	b.w	800cb62 <__retarget_lock_release_recursive>
 800ca06:	bf00      	nop
 800ca08:	20001724 	.word	0x20001724

0800ca0c <__sinit_lock_acquire>:
 800ca0c:	4801      	ldr	r0, [pc, #4]	; (800ca14 <__sinit_lock_acquire+0x8>)
 800ca0e:	f000 b8a7 	b.w	800cb60 <__retarget_lock_acquire_recursive>
 800ca12:	bf00      	nop
 800ca14:	2000171f 	.word	0x2000171f

0800ca18 <__sinit_lock_release>:
 800ca18:	4801      	ldr	r0, [pc, #4]	; (800ca20 <__sinit_lock_release+0x8>)
 800ca1a:	f000 b8a2 	b.w	800cb62 <__retarget_lock_release_recursive>
 800ca1e:	bf00      	nop
 800ca20:	2000171f 	.word	0x2000171f

0800ca24 <__sinit>:
 800ca24:	b510      	push	{r4, lr}
 800ca26:	4604      	mov	r4, r0
 800ca28:	f7ff fff0 	bl	800ca0c <__sinit_lock_acquire>
 800ca2c:	69a3      	ldr	r3, [r4, #24]
 800ca2e:	b11b      	cbz	r3, 800ca38 <__sinit+0x14>
 800ca30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca34:	f7ff bff0 	b.w	800ca18 <__sinit_lock_release>
 800ca38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ca3c:	6523      	str	r3, [r4, #80]	; 0x50
 800ca3e:	4b13      	ldr	r3, [pc, #76]	; (800ca8c <__sinit+0x68>)
 800ca40:	4a13      	ldr	r2, [pc, #76]	; (800ca90 <__sinit+0x6c>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	62a2      	str	r2, [r4, #40]	; 0x28
 800ca46:	42a3      	cmp	r3, r4
 800ca48:	bf04      	itt	eq
 800ca4a:	2301      	moveq	r3, #1
 800ca4c:	61a3      	streq	r3, [r4, #24]
 800ca4e:	4620      	mov	r0, r4
 800ca50:	f000 f820 	bl	800ca94 <__sfp>
 800ca54:	6060      	str	r0, [r4, #4]
 800ca56:	4620      	mov	r0, r4
 800ca58:	f000 f81c 	bl	800ca94 <__sfp>
 800ca5c:	60a0      	str	r0, [r4, #8]
 800ca5e:	4620      	mov	r0, r4
 800ca60:	f000 f818 	bl	800ca94 <__sfp>
 800ca64:	2200      	movs	r2, #0
 800ca66:	60e0      	str	r0, [r4, #12]
 800ca68:	2104      	movs	r1, #4
 800ca6a:	6860      	ldr	r0, [r4, #4]
 800ca6c:	f7ff ff82 	bl	800c974 <std>
 800ca70:	68a0      	ldr	r0, [r4, #8]
 800ca72:	2201      	movs	r2, #1
 800ca74:	2109      	movs	r1, #9
 800ca76:	f7ff ff7d 	bl	800c974 <std>
 800ca7a:	68e0      	ldr	r0, [r4, #12]
 800ca7c:	2202      	movs	r2, #2
 800ca7e:	2112      	movs	r1, #18
 800ca80:	f7ff ff78 	bl	800c974 <std>
 800ca84:	2301      	movs	r3, #1
 800ca86:	61a3      	str	r3, [r4, #24]
 800ca88:	e7d2      	b.n	800ca30 <__sinit+0xc>
 800ca8a:	bf00      	nop
 800ca8c:	08010028 	.word	0x08010028
 800ca90:	0800c9bd 	.word	0x0800c9bd

0800ca94 <__sfp>:
 800ca94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca96:	4607      	mov	r7, r0
 800ca98:	f7ff ffac 	bl	800c9f4 <__sfp_lock_acquire>
 800ca9c:	4b1e      	ldr	r3, [pc, #120]	; (800cb18 <__sfp+0x84>)
 800ca9e:	681e      	ldr	r6, [r3, #0]
 800caa0:	69b3      	ldr	r3, [r6, #24]
 800caa2:	b913      	cbnz	r3, 800caaa <__sfp+0x16>
 800caa4:	4630      	mov	r0, r6
 800caa6:	f7ff ffbd 	bl	800ca24 <__sinit>
 800caaa:	3648      	adds	r6, #72	; 0x48
 800caac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cab0:	3b01      	subs	r3, #1
 800cab2:	d503      	bpl.n	800cabc <__sfp+0x28>
 800cab4:	6833      	ldr	r3, [r6, #0]
 800cab6:	b30b      	cbz	r3, 800cafc <__sfp+0x68>
 800cab8:	6836      	ldr	r6, [r6, #0]
 800caba:	e7f7      	b.n	800caac <__sfp+0x18>
 800cabc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cac0:	b9d5      	cbnz	r5, 800caf8 <__sfp+0x64>
 800cac2:	4b16      	ldr	r3, [pc, #88]	; (800cb1c <__sfp+0x88>)
 800cac4:	60e3      	str	r3, [r4, #12]
 800cac6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800caca:	6665      	str	r5, [r4, #100]	; 0x64
 800cacc:	f000 f847 	bl	800cb5e <__retarget_lock_init_recursive>
 800cad0:	f7ff ff96 	bl	800ca00 <__sfp_lock_release>
 800cad4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cad8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cadc:	6025      	str	r5, [r4, #0]
 800cade:	61a5      	str	r5, [r4, #24]
 800cae0:	2208      	movs	r2, #8
 800cae2:	4629      	mov	r1, r5
 800cae4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cae8:	f7ff f946 	bl	800bd78 <memset>
 800caec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800caf0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800caf4:	4620      	mov	r0, r4
 800caf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800caf8:	3468      	adds	r4, #104	; 0x68
 800cafa:	e7d9      	b.n	800cab0 <__sfp+0x1c>
 800cafc:	2104      	movs	r1, #4
 800cafe:	4638      	mov	r0, r7
 800cb00:	f7ff ff62 	bl	800c9c8 <__sfmoreglue>
 800cb04:	4604      	mov	r4, r0
 800cb06:	6030      	str	r0, [r6, #0]
 800cb08:	2800      	cmp	r0, #0
 800cb0a:	d1d5      	bne.n	800cab8 <__sfp+0x24>
 800cb0c:	f7ff ff78 	bl	800ca00 <__sfp_lock_release>
 800cb10:	230c      	movs	r3, #12
 800cb12:	603b      	str	r3, [r7, #0]
 800cb14:	e7ee      	b.n	800caf4 <__sfp+0x60>
 800cb16:	bf00      	nop
 800cb18:	08010028 	.word	0x08010028
 800cb1c:	ffff0001 	.word	0xffff0001

0800cb20 <_fwalk_reent>:
 800cb20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb24:	4606      	mov	r6, r0
 800cb26:	4688      	mov	r8, r1
 800cb28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cb2c:	2700      	movs	r7, #0
 800cb2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cb32:	f1b9 0901 	subs.w	r9, r9, #1
 800cb36:	d505      	bpl.n	800cb44 <_fwalk_reent+0x24>
 800cb38:	6824      	ldr	r4, [r4, #0]
 800cb3a:	2c00      	cmp	r4, #0
 800cb3c:	d1f7      	bne.n	800cb2e <_fwalk_reent+0xe>
 800cb3e:	4638      	mov	r0, r7
 800cb40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb44:	89ab      	ldrh	r3, [r5, #12]
 800cb46:	2b01      	cmp	r3, #1
 800cb48:	d907      	bls.n	800cb5a <_fwalk_reent+0x3a>
 800cb4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb4e:	3301      	adds	r3, #1
 800cb50:	d003      	beq.n	800cb5a <_fwalk_reent+0x3a>
 800cb52:	4629      	mov	r1, r5
 800cb54:	4630      	mov	r0, r6
 800cb56:	47c0      	blx	r8
 800cb58:	4307      	orrs	r7, r0
 800cb5a:	3568      	adds	r5, #104	; 0x68
 800cb5c:	e7e9      	b.n	800cb32 <_fwalk_reent+0x12>

0800cb5e <__retarget_lock_init_recursive>:
 800cb5e:	4770      	bx	lr

0800cb60 <__retarget_lock_acquire_recursive>:
 800cb60:	4770      	bx	lr

0800cb62 <__retarget_lock_release_recursive>:
 800cb62:	4770      	bx	lr

0800cb64 <__swhatbuf_r>:
 800cb64:	b570      	push	{r4, r5, r6, lr}
 800cb66:	460e      	mov	r6, r1
 800cb68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb6c:	2900      	cmp	r1, #0
 800cb6e:	b096      	sub	sp, #88	; 0x58
 800cb70:	4614      	mov	r4, r2
 800cb72:	461d      	mov	r5, r3
 800cb74:	da07      	bge.n	800cb86 <__swhatbuf_r+0x22>
 800cb76:	2300      	movs	r3, #0
 800cb78:	602b      	str	r3, [r5, #0]
 800cb7a:	89b3      	ldrh	r3, [r6, #12]
 800cb7c:	061a      	lsls	r2, r3, #24
 800cb7e:	d410      	bmi.n	800cba2 <__swhatbuf_r+0x3e>
 800cb80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb84:	e00e      	b.n	800cba4 <__swhatbuf_r+0x40>
 800cb86:	466a      	mov	r2, sp
 800cb88:	f000 faf8 	bl	800d17c <_fstat_r>
 800cb8c:	2800      	cmp	r0, #0
 800cb8e:	dbf2      	blt.n	800cb76 <__swhatbuf_r+0x12>
 800cb90:	9a01      	ldr	r2, [sp, #4]
 800cb92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cb96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cb9a:	425a      	negs	r2, r3
 800cb9c:	415a      	adcs	r2, r3
 800cb9e:	602a      	str	r2, [r5, #0]
 800cba0:	e7ee      	b.n	800cb80 <__swhatbuf_r+0x1c>
 800cba2:	2340      	movs	r3, #64	; 0x40
 800cba4:	2000      	movs	r0, #0
 800cba6:	6023      	str	r3, [r4, #0]
 800cba8:	b016      	add	sp, #88	; 0x58
 800cbaa:	bd70      	pop	{r4, r5, r6, pc}

0800cbac <__smakebuf_r>:
 800cbac:	898b      	ldrh	r3, [r1, #12]
 800cbae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cbb0:	079d      	lsls	r5, r3, #30
 800cbb2:	4606      	mov	r6, r0
 800cbb4:	460c      	mov	r4, r1
 800cbb6:	d507      	bpl.n	800cbc8 <__smakebuf_r+0x1c>
 800cbb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cbbc:	6023      	str	r3, [r4, #0]
 800cbbe:	6123      	str	r3, [r4, #16]
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	6163      	str	r3, [r4, #20]
 800cbc4:	b002      	add	sp, #8
 800cbc6:	bd70      	pop	{r4, r5, r6, pc}
 800cbc8:	ab01      	add	r3, sp, #4
 800cbca:	466a      	mov	r2, sp
 800cbcc:	f7ff ffca 	bl	800cb64 <__swhatbuf_r>
 800cbd0:	9900      	ldr	r1, [sp, #0]
 800cbd2:	4605      	mov	r5, r0
 800cbd4:	4630      	mov	r0, r6
 800cbd6:	f7ff f927 	bl	800be28 <_malloc_r>
 800cbda:	b948      	cbnz	r0, 800cbf0 <__smakebuf_r+0x44>
 800cbdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbe0:	059a      	lsls	r2, r3, #22
 800cbe2:	d4ef      	bmi.n	800cbc4 <__smakebuf_r+0x18>
 800cbe4:	f023 0303 	bic.w	r3, r3, #3
 800cbe8:	f043 0302 	orr.w	r3, r3, #2
 800cbec:	81a3      	strh	r3, [r4, #12]
 800cbee:	e7e3      	b.n	800cbb8 <__smakebuf_r+0xc>
 800cbf0:	4b0d      	ldr	r3, [pc, #52]	; (800cc28 <__smakebuf_r+0x7c>)
 800cbf2:	62b3      	str	r3, [r6, #40]	; 0x28
 800cbf4:	89a3      	ldrh	r3, [r4, #12]
 800cbf6:	6020      	str	r0, [r4, #0]
 800cbf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbfc:	81a3      	strh	r3, [r4, #12]
 800cbfe:	9b00      	ldr	r3, [sp, #0]
 800cc00:	6163      	str	r3, [r4, #20]
 800cc02:	9b01      	ldr	r3, [sp, #4]
 800cc04:	6120      	str	r0, [r4, #16]
 800cc06:	b15b      	cbz	r3, 800cc20 <__smakebuf_r+0x74>
 800cc08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc0c:	4630      	mov	r0, r6
 800cc0e:	f000 fac7 	bl	800d1a0 <_isatty_r>
 800cc12:	b128      	cbz	r0, 800cc20 <__smakebuf_r+0x74>
 800cc14:	89a3      	ldrh	r3, [r4, #12]
 800cc16:	f023 0303 	bic.w	r3, r3, #3
 800cc1a:	f043 0301 	orr.w	r3, r3, #1
 800cc1e:	81a3      	strh	r3, [r4, #12]
 800cc20:	89a0      	ldrh	r0, [r4, #12]
 800cc22:	4305      	orrs	r5, r0
 800cc24:	81a5      	strh	r5, [r4, #12]
 800cc26:	e7cd      	b.n	800cbc4 <__smakebuf_r+0x18>
 800cc28:	0800c9bd 	.word	0x0800c9bd

0800cc2c <memcpy>:
 800cc2c:	440a      	add	r2, r1
 800cc2e:	4291      	cmp	r1, r2
 800cc30:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc34:	d100      	bne.n	800cc38 <memcpy+0xc>
 800cc36:	4770      	bx	lr
 800cc38:	b510      	push	{r4, lr}
 800cc3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc42:	4291      	cmp	r1, r2
 800cc44:	d1f9      	bne.n	800cc3a <memcpy+0xe>
 800cc46:	bd10      	pop	{r4, pc}

0800cc48 <memmove>:
 800cc48:	4288      	cmp	r0, r1
 800cc4a:	b510      	push	{r4, lr}
 800cc4c:	eb01 0402 	add.w	r4, r1, r2
 800cc50:	d902      	bls.n	800cc58 <memmove+0x10>
 800cc52:	4284      	cmp	r4, r0
 800cc54:	4623      	mov	r3, r4
 800cc56:	d807      	bhi.n	800cc68 <memmove+0x20>
 800cc58:	1e43      	subs	r3, r0, #1
 800cc5a:	42a1      	cmp	r1, r4
 800cc5c:	d008      	beq.n	800cc70 <memmove+0x28>
 800cc5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc62:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc66:	e7f8      	b.n	800cc5a <memmove+0x12>
 800cc68:	4402      	add	r2, r0
 800cc6a:	4601      	mov	r1, r0
 800cc6c:	428a      	cmp	r2, r1
 800cc6e:	d100      	bne.n	800cc72 <memmove+0x2a>
 800cc70:	bd10      	pop	{r4, pc}
 800cc72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc7a:	e7f7      	b.n	800cc6c <memmove+0x24>

0800cc7c <__malloc_lock>:
 800cc7c:	4801      	ldr	r0, [pc, #4]	; (800cc84 <__malloc_lock+0x8>)
 800cc7e:	f7ff bf6f 	b.w	800cb60 <__retarget_lock_acquire_recursive>
 800cc82:	bf00      	nop
 800cc84:	20001720 	.word	0x20001720

0800cc88 <__malloc_unlock>:
 800cc88:	4801      	ldr	r0, [pc, #4]	; (800cc90 <__malloc_unlock+0x8>)
 800cc8a:	f7ff bf6a 	b.w	800cb62 <__retarget_lock_release_recursive>
 800cc8e:	bf00      	nop
 800cc90:	20001720 	.word	0x20001720

0800cc94 <_realloc_r>:
 800cc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc96:	4607      	mov	r7, r0
 800cc98:	4614      	mov	r4, r2
 800cc9a:	460e      	mov	r6, r1
 800cc9c:	b921      	cbnz	r1, 800cca8 <_realloc_r+0x14>
 800cc9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cca2:	4611      	mov	r1, r2
 800cca4:	f7ff b8c0 	b.w	800be28 <_malloc_r>
 800cca8:	b922      	cbnz	r2, 800ccb4 <_realloc_r+0x20>
 800ccaa:	f7ff f86d 	bl	800bd88 <_free_r>
 800ccae:	4625      	mov	r5, r4
 800ccb0:	4628      	mov	r0, r5
 800ccb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccb4:	f000 fa96 	bl	800d1e4 <_malloc_usable_size_r>
 800ccb8:	42a0      	cmp	r0, r4
 800ccba:	d20f      	bcs.n	800ccdc <_realloc_r+0x48>
 800ccbc:	4621      	mov	r1, r4
 800ccbe:	4638      	mov	r0, r7
 800ccc0:	f7ff f8b2 	bl	800be28 <_malloc_r>
 800ccc4:	4605      	mov	r5, r0
 800ccc6:	2800      	cmp	r0, #0
 800ccc8:	d0f2      	beq.n	800ccb0 <_realloc_r+0x1c>
 800ccca:	4631      	mov	r1, r6
 800cccc:	4622      	mov	r2, r4
 800ccce:	f7ff ffad 	bl	800cc2c <memcpy>
 800ccd2:	4631      	mov	r1, r6
 800ccd4:	4638      	mov	r0, r7
 800ccd6:	f7ff f857 	bl	800bd88 <_free_r>
 800ccda:	e7e9      	b.n	800ccb0 <_realloc_r+0x1c>
 800ccdc:	4635      	mov	r5, r6
 800ccde:	e7e7      	b.n	800ccb0 <_realloc_r+0x1c>

0800cce0 <__ssputs_r>:
 800cce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cce4:	688e      	ldr	r6, [r1, #8]
 800cce6:	429e      	cmp	r6, r3
 800cce8:	4682      	mov	sl, r0
 800ccea:	460c      	mov	r4, r1
 800ccec:	4690      	mov	r8, r2
 800ccee:	461f      	mov	r7, r3
 800ccf0:	d838      	bhi.n	800cd64 <__ssputs_r+0x84>
 800ccf2:	898a      	ldrh	r2, [r1, #12]
 800ccf4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ccf8:	d032      	beq.n	800cd60 <__ssputs_r+0x80>
 800ccfa:	6825      	ldr	r5, [r4, #0]
 800ccfc:	6909      	ldr	r1, [r1, #16]
 800ccfe:	eba5 0901 	sub.w	r9, r5, r1
 800cd02:	6965      	ldr	r5, [r4, #20]
 800cd04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd0c:	3301      	adds	r3, #1
 800cd0e:	444b      	add	r3, r9
 800cd10:	106d      	asrs	r5, r5, #1
 800cd12:	429d      	cmp	r5, r3
 800cd14:	bf38      	it	cc
 800cd16:	461d      	movcc	r5, r3
 800cd18:	0553      	lsls	r3, r2, #21
 800cd1a:	d531      	bpl.n	800cd80 <__ssputs_r+0xa0>
 800cd1c:	4629      	mov	r1, r5
 800cd1e:	f7ff f883 	bl	800be28 <_malloc_r>
 800cd22:	4606      	mov	r6, r0
 800cd24:	b950      	cbnz	r0, 800cd3c <__ssputs_r+0x5c>
 800cd26:	230c      	movs	r3, #12
 800cd28:	f8ca 3000 	str.w	r3, [sl]
 800cd2c:	89a3      	ldrh	r3, [r4, #12]
 800cd2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd32:	81a3      	strh	r3, [r4, #12]
 800cd34:	f04f 30ff 	mov.w	r0, #4294967295
 800cd38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd3c:	6921      	ldr	r1, [r4, #16]
 800cd3e:	464a      	mov	r2, r9
 800cd40:	f7ff ff74 	bl	800cc2c <memcpy>
 800cd44:	89a3      	ldrh	r3, [r4, #12]
 800cd46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cd4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd4e:	81a3      	strh	r3, [r4, #12]
 800cd50:	6126      	str	r6, [r4, #16]
 800cd52:	6165      	str	r5, [r4, #20]
 800cd54:	444e      	add	r6, r9
 800cd56:	eba5 0509 	sub.w	r5, r5, r9
 800cd5a:	6026      	str	r6, [r4, #0]
 800cd5c:	60a5      	str	r5, [r4, #8]
 800cd5e:	463e      	mov	r6, r7
 800cd60:	42be      	cmp	r6, r7
 800cd62:	d900      	bls.n	800cd66 <__ssputs_r+0x86>
 800cd64:	463e      	mov	r6, r7
 800cd66:	4632      	mov	r2, r6
 800cd68:	6820      	ldr	r0, [r4, #0]
 800cd6a:	4641      	mov	r1, r8
 800cd6c:	f7ff ff6c 	bl	800cc48 <memmove>
 800cd70:	68a3      	ldr	r3, [r4, #8]
 800cd72:	6822      	ldr	r2, [r4, #0]
 800cd74:	1b9b      	subs	r3, r3, r6
 800cd76:	4432      	add	r2, r6
 800cd78:	60a3      	str	r3, [r4, #8]
 800cd7a:	6022      	str	r2, [r4, #0]
 800cd7c:	2000      	movs	r0, #0
 800cd7e:	e7db      	b.n	800cd38 <__ssputs_r+0x58>
 800cd80:	462a      	mov	r2, r5
 800cd82:	f7ff ff87 	bl	800cc94 <_realloc_r>
 800cd86:	4606      	mov	r6, r0
 800cd88:	2800      	cmp	r0, #0
 800cd8a:	d1e1      	bne.n	800cd50 <__ssputs_r+0x70>
 800cd8c:	6921      	ldr	r1, [r4, #16]
 800cd8e:	4650      	mov	r0, sl
 800cd90:	f7fe fffa 	bl	800bd88 <_free_r>
 800cd94:	e7c7      	b.n	800cd26 <__ssputs_r+0x46>
	...

0800cd98 <_svfiprintf_r>:
 800cd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd9c:	4698      	mov	r8, r3
 800cd9e:	898b      	ldrh	r3, [r1, #12]
 800cda0:	061b      	lsls	r3, r3, #24
 800cda2:	b09d      	sub	sp, #116	; 0x74
 800cda4:	4607      	mov	r7, r0
 800cda6:	460d      	mov	r5, r1
 800cda8:	4614      	mov	r4, r2
 800cdaa:	d50e      	bpl.n	800cdca <_svfiprintf_r+0x32>
 800cdac:	690b      	ldr	r3, [r1, #16]
 800cdae:	b963      	cbnz	r3, 800cdca <_svfiprintf_r+0x32>
 800cdb0:	2140      	movs	r1, #64	; 0x40
 800cdb2:	f7ff f839 	bl	800be28 <_malloc_r>
 800cdb6:	6028      	str	r0, [r5, #0]
 800cdb8:	6128      	str	r0, [r5, #16]
 800cdba:	b920      	cbnz	r0, 800cdc6 <_svfiprintf_r+0x2e>
 800cdbc:	230c      	movs	r3, #12
 800cdbe:	603b      	str	r3, [r7, #0]
 800cdc0:	f04f 30ff 	mov.w	r0, #4294967295
 800cdc4:	e0d1      	b.n	800cf6a <_svfiprintf_r+0x1d2>
 800cdc6:	2340      	movs	r3, #64	; 0x40
 800cdc8:	616b      	str	r3, [r5, #20]
 800cdca:	2300      	movs	r3, #0
 800cdcc:	9309      	str	r3, [sp, #36]	; 0x24
 800cdce:	2320      	movs	r3, #32
 800cdd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cdd4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cdd8:	2330      	movs	r3, #48	; 0x30
 800cdda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cf84 <_svfiprintf_r+0x1ec>
 800cdde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cde2:	f04f 0901 	mov.w	r9, #1
 800cde6:	4623      	mov	r3, r4
 800cde8:	469a      	mov	sl, r3
 800cdea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdee:	b10a      	cbz	r2, 800cdf4 <_svfiprintf_r+0x5c>
 800cdf0:	2a25      	cmp	r2, #37	; 0x25
 800cdf2:	d1f9      	bne.n	800cde8 <_svfiprintf_r+0x50>
 800cdf4:	ebba 0b04 	subs.w	fp, sl, r4
 800cdf8:	d00b      	beq.n	800ce12 <_svfiprintf_r+0x7a>
 800cdfa:	465b      	mov	r3, fp
 800cdfc:	4622      	mov	r2, r4
 800cdfe:	4629      	mov	r1, r5
 800ce00:	4638      	mov	r0, r7
 800ce02:	f7ff ff6d 	bl	800cce0 <__ssputs_r>
 800ce06:	3001      	adds	r0, #1
 800ce08:	f000 80aa 	beq.w	800cf60 <_svfiprintf_r+0x1c8>
 800ce0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce0e:	445a      	add	r2, fp
 800ce10:	9209      	str	r2, [sp, #36]	; 0x24
 800ce12:	f89a 3000 	ldrb.w	r3, [sl]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	f000 80a2 	beq.w	800cf60 <_svfiprintf_r+0x1c8>
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce26:	f10a 0a01 	add.w	sl, sl, #1
 800ce2a:	9304      	str	r3, [sp, #16]
 800ce2c:	9307      	str	r3, [sp, #28]
 800ce2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce32:	931a      	str	r3, [sp, #104]	; 0x68
 800ce34:	4654      	mov	r4, sl
 800ce36:	2205      	movs	r2, #5
 800ce38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce3c:	4851      	ldr	r0, [pc, #324]	; (800cf84 <_svfiprintf_r+0x1ec>)
 800ce3e:	f7f5 f967 	bl	8002110 <memchr>
 800ce42:	9a04      	ldr	r2, [sp, #16]
 800ce44:	b9d8      	cbnz	r0, 800ce7e <_svfiprintf_r+0xe6>
 800ce46:	06d0      	lsls	r0, r2, #27
 800ce48:	bf44      	itt	mi
 800ce4a:	2320      	movmi	r3, #32
 800ce4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce50:	0711      	lsls	r1, r2, #28
 800ce52:	bf44      	itt	mi
 800ce54:	232b      	movmi	r3, #43	; 0x2b
 800ce56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ce5e:	2b2a      	cmp	r3, #42	; 0x2a
 800ce60:	d015      	beq.n	800ce8e <_svfiprintf_r+0xf6>
 800ce62:	9a07      	ldr	r2, [sp, #28]
 800ce64:	4654      	mov	r4, sl
 800ce66:	2000      	movs	r0, #0
 800ce68:	f04f 0c0a 	mov.w	ip, #10
 800ce6c:	4621      	mov	r1, r4
 800ce6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce72:	3b30      	subs	r3, #48	; 0x30
 800ce74:	2b09      	cmp	r3, #9
 800ce76:	d94e      	bls.n	800cf16 <_svfiprintf_r+0x17e>
 800ce78:	b1b0      	cbz	r0, 800cea8 <_svfiprintf_r+0x110>
 800ce7a:	9207      	str	r2, [sp, #28]
 800ce7c:	e014      	b.n	800cea8 <_svfiprintf_r+0x110>
 800ce7e:	eba0 0308 	sub.w	r3, r0, r8
 800ce82:	fa09 f303 	lsl.w	r3, r9, r3
 800ce86:	4313      	orrs	r3, r2
 800ce88:	9304      	str	r3, [sp, #16]
 800ce8a:	46a2      	mov	sl, r4
 800ce8c:	e7d2      	b.n	800ce34 <_svfiprintf_r+0x9c>
 800ce8e:	9b03      	ldr	r3, [sp, #12]
 800ce90:	1d19      	adds	r1, r3, #4
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	9103      	str	r1, [sp, #12]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	bfbb      	ittet	lt
 800ce9a:	425b      	neglt	r3, r3
 800ce9c:	f042 0202 	orrlt.w	r2, r2, #2
 800cea0:	9307      	strge	r3, [sp, #28]
 800cea2:	9307      	strlt	r3, [sp, #28]
 800cea4:	bfb8      	it	lt
 800cea6:	9204      	strlt	r2, [sp, #16]
 800cea8:	7823      	ldrb	r3, [r4, #0]
 800ceaa:	2b2e      	cmp	r3, #46	; 0x2e
 800ceac:	d10c      	bne.n	800cec8 <_svfiprintf_r+0x130>
 800ceae:	7863      	ldrb	r3, [r4, #1]
 800ceb0:	2b2a      	cmp	r3, #42	; 0x2a
 800ceb2:	d135      	bne.n	800cf20 <_svfiprintf_r+0x188>
 800ceb4:	9b03      	ldr	r3, [sp, #12]
 800ceb6:	1d1a      	adds	r2, r3, #4
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	9203      	str	r2, [sp, #12]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	bfb8      	it	lt
 800cec0:	f04f 33ff 	movlt.w	r3, #4294967295
 800cec4:	3402      	adds	r4, #2
 800cec6:	9305      	str	r3, [sp, #20]
 800cec8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cf94 <_svfiprintf_r+0x1fc>
 800cecc:	7821      	ldrb	r1, [r4, #0]
 800cece:	2203      	movs	r2, #3
 800ced0:	4650      	mov	r0, sl
 800ced2:	f7f5 f91d 	bl	8002110 <memchr>
 800ced6:	b140      	cbz	r0, 800ceea <_svfiprintf_r+0x152>
 800ced8:	2340      	movs	r3, #64	; 0x40
 800ceda:	eba0 000a 	sub.w	r0, r0, sl
 800cede:	fa03 f000 	lsl.w	r0, r3, r0
 800cee2:	9b04      	ldr	r3, [sp, #16]
 800cee4:	4303      	orrs	r3, r0
 800cee6:	3401      	adds	r4, #1
 800cee8:	9304      	str	r3, [sp, #16]
 800ceea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceee:	4826      	ldr	r0, [pc, #152]	; (800cf88 <_svfiprintf_r+0x1f0>)
 800cef0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cef4:	2206      	movs	r2, #6
 800cef6:	f7f5 f90b 	bl	8002110 <memchr>
 800cefa:	2800      	cmp	r0, #0
 800cefc:	d038      	beq.n	800cf70 <_svfiprintf_r+0x1d8>
 800cefe:	4b23      	ldr	r3, [pc, #140]	; (800cf8c <_svfiprintf_r+0x1f4>)
 800cf00:	bb1b      	cbnz	r3, 800cf4a <_svfiprintf_r+0x1b2>
 800cf02:	9b03      	ldr	r3, [sp, #12]
 800cf04:	3307      	adds	r3, #7
 800cf06:	f023 0307 	bic.w	r3, r3, #7
 800cf0a:	3308      	adds	r3, #8
 800cf0c:	9303      	str	r3, [sp, #12]
 800cf0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf10:	4433      	add	r3, r6
 800cf12:	9309      	str	r3, [sp, #36]	; 0x24
 800cf14:	e767      	b.n	800cde6 <_svfiprintf_r+0x4e>
 800cf16:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf1a:	460c      	mov	r4, r1
 800cf1c:	2001      	movs	r0, #1
 800cf1e:	e7a5      	b.n	800ce6c <_svfiprintf_r+0xd4>
 800cf20:	2300      	movs	r3, #0
 800cf22:	3401      	adds	r4, #1
 800cf24:	9305      	str	r3, [sp, #20]
 800cf26:	4619      	mov	r1, r3
 800cf28:	f04f 0c0a 	mov.w	ip, #10
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf32:	3a30      	subs	r2, #48	; 0x30
 800cf34:	2a09      	cmp	r2, #9
 800cf36:	d903      	bls.n	800cf40 <_svfiprintf_r+0x1a8>
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d0c5      	beq.n	800cec8 <_svfiprintf_r+0x130>
 800cf3c:	9105      	str	r1, [sp, #20]
 800cf3e:	e7c3      	b.n	800cec8 <_svfiprintf_r+0x130>
 800cf40:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf44:	4604      	mov	r4, r0
 800cf46:	2301      	movs	r3, #1
 800cf48:	e7f0      	b.n	800cf2c <_svfiprintf_r+0x194>
 800cf4a:	ab03      	add	r3, sp, #12
 800cf4c:	9300      	str	r3, [sp, #0]
 800cf4e:	462a      	mov	r2, r5
 800cf50:	4b0f      	ldr	r3, [pc, #60]	; (800cf90 <_svfiprintf_r+0x1f8>)
 800cf52:	a904      	add	r1, sp, #16
 800cf54:	4638      	mov	r0, r7
 800cf56:	f3af 8000 	nop.w
 800cf5a:	1c42      	adds	r2, r0, #1
 800cf5c:	4606      	mov	r6, r0
 800cf5e:	d1d6      	bne.n	800cf0e <_svfiprintf_r+0x176>
 800cf60:	89ab      	ldrh	r3, [r5, #12]
 800cf62:	065b      	lsls	r3, r3, #25
 800cf64:	f53f af2c 	bmi.w	800cdc0 <_svfiprintf_r+0x28>
 800cf68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf6a:	b01d      	add	sp, #116	; 0x74
 800cf6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf70:	ab03      	add	r3, sp, #12
 800cf72:	9300      	str	r3, [sp, #0]
 800cf74:	462a      	mov	r2, r5
 800cf76:	4b06      	ldr	r3, [pc, #24]	; (800cf90 <_svfiprintf_r+0x1f8>)
 800cf78:	a904      	add	r1, sp, #16
 800cf7a:	4638      	mov	r0, r7
 800cf7c:	f7ff f976 	bl	800c26c <_printf_i>
 800cf80:	e7eb      	b.n	800cf5a <_svfiprintf_r+0x1c2>
 800cf82:	bf00      	nop
 800cf84:	0801002c 	.word	0x0801002c
 800cf88:	08010036 	.word	0x08010036
 800cf8c:	00000000 	.word	0x00000000
 800cf90:	0800cce1 	.word	0x0800cce1
 800cf94:	08010032 	.word	0x08010032

0800cf98 <_putc_r>:
 800cf98:	b570      	push	{r4, r5, r6, lr}
 800cf9a:	460d      	mov	r5, r1
 800cf9c:	4614      	mov	r4, r2
 800cf9e:	4606      	mov	r6, r0
 800cfa0:	b118      	cbz	r0, 800cfaa <_putc_r+0x12>
 800cfa2:	6983      	ldr	r3, [r0, #24]
 800cfa4:	b90b      	cbnz	r3, 800cfaa <_putc_r+0x12>
 800cfa6:	f7ff fd3d 	bl	800ca24 <__sinit>
 800cfaa:	4b1c      	ldr	r3, [pc, #112]	; (800d01c <_putc_r+0x84>)
 800cfac:	429c      	cmp	r4, r3
 800cfae:	d124      	bne.n	800cffa <_putc_r+0x62>
 800cfb0:	6874      	ldr	r4, [r6, #4]
 800cfb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cfb4:	07d8      	lsls	r0, r3, #31
 800cfb6:	d405      	bmi.n	800cfc4 <_putc_r+0x2c>
 800cfb8:	89a3      	ldrh	r3, [r4, #12]
 800cfba:	0599      	lsls	r1, r3, #22
 800cfbc:	d402      	bmi.n	800cfc4 <_putc_r+0x2c>
 800cfbe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfc0:	f7ff fdce 	bl	800cb60 <__retarget_lock_acquire_recursive>
 800cfc4:	68a3      	ldr	r3, [r4, #8]
 800cfc6:	3b01      	subs	r3, #1
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	60a3      	str	r3, [r4, #8]
 800cfcc:	da05      	bge.n	800cfda <_putc_r+0x42>
 800cfce:	69a2      	ldr	r2, [r4, #24]
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	db1c      	blt.n	800d00e <_putc_r+0x76>
 800cfd4:	b2eb      	uxtb	r3, r5
 800cfd6:	2b0a      	cmp	r3, #10
 800cfd8:	d019      	beq.n	800d00e <_putc_r+0x76>
 800cfda:	6823      	ldr	r3, [r4, #0]
 800cfdc:	1c5a      	adds	r2, r3, #1
 800cfde:	6022      	str	r2, [r4, #0]
 800cfe0:	701d      	strb	r5, [r3, #0]
 800cfe2:	b2ed      	uxtb	r5, r5
 800cfe4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cfe6:	07da      	lsls	r2, r3, #31
 800cfe8:	d405      	bmi.n	800cff6 <_putc_r+0x5e>
 800cfea:	89a3      	ldrh	r3, [r4, #12]
 800cfec:	059b      	lsls	r3, r3, #22
 800cfee:	d402      	bmi.n	800cff6 <_putc_r+0x5e>
 800cff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cff2:	f7ff fdb6 	bl	800cb62 <__retarget_lock_release_recursive>
 800cff6:	4628      	mov	r0, r5
 800cff8:	bd70      	pop	{r4, r5, r6, pc}
 800cffa:	4b09      	ldr	r3, [pc, #36]	; (800d020 <_putc_r+0x88>)
 800cffc:	429c      	cmp	r4, r3
 800cffe:	d101      	bne.n	800d004 <_putc_r+0x6c>
 800d000:	68b4      	ldr	r4, [r6, #8]
 800d002:	e7d6      	b.n	800cfb2 <_putc_r+0x1a>
 800d004:	4b07      	ldr	r3, [pc, #28]	; (800d024 <_putc_r+0x8c>)
 800d006:	429c      	cmp	r4, r3
 800d008:	bf08      	it	eq
 800d00a:	68f4      	ldreq	r4, [r6, #12]
 800d00c:	e7d1      	b.n	800cfb2 <_putc_r+0x1a>
 800d00e:	4629      	mov	r1, r5
 800d010:	4622      	mov	r2, r4
 800d012:	4630      	mov	r0, r6
 800d014:	f7ff fb24 	bl	800c660 <__swbuf_r>
 800d018:	4605      	mov	r5, r0
 800d01a:	e7e3      	b.n	800cfe4 <_putc_r+0x4c>
 800d01c:	08010080 	.word	0x08010080
 800d020:	080100a0 	.word	0x080100a0
 800d024:	08010060 	.word	0x08010060

0800d028 <_raise_r>:
 800d028:	291f      	cmp	r1, #31
 800d02a:	b538      	push	{r3, r4, r5, lr}
 800d02c:	4604      	mov	r4, r0
 800d02e:	460d      	mov	r5, r1
 800d030:	d904      	bls.n	800d03c <_raise_r+0x14>
 800d032:	2316      	movs	r3, #22
 800d034:	6003      	str	r3, [r0, #0]
 800d036:	f04f 30ff 	mov.w	r0, #4294967295
 800d03a:	bd38      	pop	{r3, r4, r5, pc}
 800d03c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d03e:	b112      	cbz	r2, 800d046 <_raise_r+0x1e>
 800d040:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d044:	b94b      	cbnz	r3, 800d05a <_raise_r+0x32>
 800d046:	4620      	mov	r0, r4
 800d048:	f000 f830 	bl	800d0ac <_getpid_r>
 800d04c:	462a      	mov	r2, r5
 800d04e:	4601      	mov	r1, r0
 800d050:	4620      	mov	r0, r4
 800d052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d056:	f000 b817 	b.w	800d088 <_kill_r>
 800d05a:	2b01      	cmp	r3, #1
 800d05c:	d00a      	beq.n	800d074 <_raise_r+0x4c>
 800d05e:	1c59      	adds	r1, r3, #1
 800d060:	d103      	bne.n	800d06a <_raise_r+0x42>
 800d062:	2316      	movs	r3, #22
 800d064:	6003      	str	r3, [r0, #0]
 800d066:	2001      	movs	r0, #1
 800d068:	e7e7      	b.n	800d03a <_raise_r+0x12>
 800d06a:	2400      	movs	r4, #0
 800d06c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d070:	4628      	mov	r0, r5
 800d072:	4798      	blx	r3
 800d074:	2000      	movs	r0, #0
 800d076:	e7e0      	b.n	800d03a <_raise_r+0x12>

0800d078 <raise>:
 800d078:	4b02      	ldr	r3, [pc, #8]	; (800d084 <raise+0xc>)
 800d07a:	4601      	mov	r1, r0
 800d07c:	6818      	ldr	r0, [r3, #0]
 800d07e:	f7ff bfd3 	b.w	800d028 <_raise_r>
 800d082:	bf00      	nop
 800d084:	20000044 	.word	0x20000044

0800d088 <_kill_r>:
 800d088:	b538      	push	{r3, r4, r5, lr}
 800d08a:	4d07      	ldr	r5, [pc, #28]	; (800d0a8 <_kill_r+0x20>)
 800d08c:	2300      	movs	r3, #0
 800d08e:	4604      	mov	r4, r0
 800d090:	4608      	mov	r0, r1
 800d092:	4611      	mov	r1, r2
 800d094:	602b      	str	r3, [r5, #0]
 800d096:	f7f6 fe7f 	bl	8003d98 <_kill>
 800d09a:	1c43      	adds	r3, r0, #1
 800d09c:	d102      	bne.n	800d0a4 <_kill_r+0x1c>
 800d09e:	682b      	ldr	r3, [r5, #0]
 800d0a0:	b103      	cbz	r3, 800d0a4 <_kill_r+0x1c>
 800d0a2:	6023      	str	r3, [r4, #0]
 800d0a4:	bd38      	pop	{r3, r4, r5, pc}
 800d0a6:	bf00      	nop
 800d0a8:	20001728 	.word	0x20001728

0800d0ac <_getpid_r>:
 800d0ac:	f7f6 be6c 	b.w	8003d88 <_getpid>

0800d0b0 <__sread>:
 800d0b0:	b510      	push	{r4, lr}
 800d0b2:	460c      	mov	r4, r1
 800d0b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0b8:	f000 f89c 	bl	800d1f4 <_read_r>
 800d0bc:	2800      	cmp	r0, #0
 800d0be:	bfab      	itete	ge
 800d0c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d0c2:	89a3      	ldrhlt	r3, [r4, #12]
 800d0c4:	181b      	addge	r3, r3, r0
 800d0c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d0ca:	bfac      	ite	ge
 800d0cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800d0ce:	81a3      	strhlt	r3, [r4, #12]
 800d0d0:	bd10      	pop	{r4, pc}

0800d0d2 <__swrite>:
 800d0d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0d6:	461f      	mov	r7, r3
 800d0d8:	898b      	ldrh	r3, [r1, #12]
 800d0da:	05db      	lsls	r3, r3, #23
 800d0dc:	4605      	mov	r5, r0
 800d0de:	460c      	mov	r4, r1
 800d0e0:	4616      	mov	r6, r2
 800d0e2:	d505      	bpl.n	800d0f0 <__swrite+0x1e>
 800d0e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0e8:	2302      	movs	r3, #2
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	f000 f868 	bl	800d1c0 <_lseek_r>
 800d0f0:	89a3      	ldrh	r3, [r4, #12]
 800d0f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d0fa:	81a3      	strh	r3, [r4, #12]
 800d0fc:	4632      	mov	r2, r6
 800d0fe:	463b      	mov	r3, r7
 800d100:	4628      	mov	r0, r5
 800d102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d106:	f000 b817 	b.w	800d138 <_write_r>

0800d10a <__sseek>:
 800d10a:	b510      	push	{r4, lr}
 800d10c:	460c      	mov	r4, r1
 800d10e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d112:	f000 f855 	bl	800d1c0 <_lseek_r>
 800d116:	1c43      	adds	r3, r0, #1
 800d118:	89a3      	ldrh	r3, [r4, #12]
 800d11a:	bf15      	itete	ne
 800d11c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d11e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d122:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d126:	81a3      	strheq	r3, [r4, #12]
 800d128:	bf18      	it	ne
 800d12a:	81a3      	strhne	r3, [r4, #12]
 800d12c:	bd10      	pop	{r4, pc}

0800d12e <__sclose>:
 800d12e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d132:	f000 b813 	b.w	800d15c <_close_r>
	...

0800d138 <_write_r>:
 800d138:	b538      	push	{r3, r4, r5, lr}
 800d13a:	4d07      	ldr	r5, [pc, #28]	; (800d158 <_write_r+0x20>)
 800d13c:	4604      	mov	r4, r0
 800d13e:	4608      	mov	r0, r1
 800d140:	4611      	mov	r1, r2
 800d142:	2200      	movs	r2, #0
 800d144:	602a      	str	r2, [r5, #0]
 800d146:	461a      	mov	r2, r3
 800d148:	f7f6 fe5d 	bl	8003e06 <_write>
 800d14c:	1c43      	adds	r3, r0, #1
 800d14e:	d102      	bne.n	800d156 <_write_r+0x1e>
 800d150:	682b      	ldr	r3, [r5, #0]
 800d152:	b103      	cbz	r3, 800d156 <_write_r+0x1e>
 800d154:	6023      	str	r3, [r4, #0]
 800d156:	bd38      	pop	{r3, r4, r5, pc}
 800d158:	20001728 	.word	0x20001728

0800d15c <_close_r>:
 800d15c:	b538      	push	{r3, r4, r5, lr}
 800d15e:	4d06      	ldr	r5, [pc, #24]	; (800d178 <_close_r+0x1c>)
 800d160:	2300      	movs	r3, #0
 800d162:	4604      	mov	r4, r0
 800d164:	4608      	mov	r0, r1
 800d166:	602b      	str	r3, [r5, #0]
 800d168:	f7f6 fe69 	bl	8003e3e <_close>
 800d16c:	1c43      	adds	r3, r0, #1
 800d16e:	d102      	bne.n	800d176 <_close_r+0x1a>
 800d170:	682b      	ldr	r3, [r5, #0]
 800d172:	b103      	cbz	r3, 800d176 <_close_r+0x1a>
 800d174:	6023      	str	r3, [r4, #0]
 800d176:	bd38      	pop	{r3, r4, r5, pc}
 800d178:	20001728 	.word	0x20001728

0800d17c <_fstat_r>:
 800d17c:	b538      	push	{r3, r4, r5, lr}
 800d17e:	4d07      	ldr	r5, [pc, #28]	; (800d19c <_fstat_r+0x20>)
 800d180:	2300      	movs	r3, #0
 800d182:	4604      	mov	r4, r0
 800d184:	4608      	mov	r0, r1
 800d186:	4611      	mov	r1, r2
 800d188:	602b      	str	r3, [r5, #0]
 800d18a:	f7f6 fe64 	bl	8003e56 <_fstat>
 800d18e:	1c43      	adds	r3, r0, #1
 800d190:	d102      	bne.n	800d198 <_fstat_r+0x1c>
 800d192:	682b      	ldr	r3, [r5, #0]
 800d194:	b103      	cbz	r3, 800d198 <_fstat_r+0x1c>
 800d196:	6023      	str	r3, [r4, #0]
 800d198:	bd38      	pop	{r3, r4, r5, pc}
 800d19a:	bf00      	nop
 800d19c:	20001728 	.word	0x20001728

0800d1a0 <_isatty_r>:
 800d1a0:	b538      	push	{r3, r4, r5, lr}
 800d1a2:	4d06      	ldr	r5, [pc, #24]	; (800d1bc <_isatty_r+0x1c>)
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	4604      	mov	r4, r0
 800d1a8:	4608      	mov	r0, r1
 800d1aa:	602b      	str	r3, [r5, #0]
 800d1ac:	f7f6 fe63 	bl	8003e76 <_isatty>
 800d1b0:	1c43      	adds	r3, r0, #1
 800d1b2:	d102      	bne.n	800d1ba <_isatty_r+0x1a>
 800d1b4:	682b      	ldr	r3, [r5, #0]
 800d1b6:	b103      	cbz	r3, 800d1ba <_isatty_r+0x1a>
 800d1b8:	6023      	str	r3, [r4, #0]
 800d1ba:	bd38      	pop	{r3, r4, r5, pc}
 800d1bc:	20001728 	.word	0x20001728

0800d1c0 <_lseek_r>:
 800d1c0:	b538      	push	{r3, r4, r5, lr}
 800d1c2:	4d07      	ldr	r5, [pc, #28]	; (800d1e0 <_lseek_r+0x20>)
 800d1c4:	4604      	mov	r4, r0
 800d1c6:	4608      	mov	r0, r1
 800d1c8:	4611      	mov	r1, r2
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	602a      	str	r2, [r5, #0]
 800d1ce:	461a      	mov	r2, r3
 800d1d0:	f7f6 fe5c 	bl	8003e8c <_lseek>
 800d1d4:	1c43      	adds	r3, r0, #1
 800d1d6:	d102      	bne.n	800d1de <_lseek_r+0x1e>
 800d1d8:	682b      	ldr	r3, [r5, #0]
 800d1da:	b103      	cbz	r3, 800d1de <_lseek_r+0x1e>
 800d1dc:	6023      	str	r3, [r4, #0]
 800d1de:	bd38      	pop	{r3, r4, r5, pc}
 800d1e0:	20001728 	.word	0x20001728

0800d1e4 <_malloc_usable_size_r>:
 800d1e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1e8:	1f18      	subs	r0, r3, #4
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	bfbc      	itt	lt
 800d1ee:	580b      	ldrlt	r3, [r1, r0]
 800d1f0:	18c0      	addlt	r0, r0, r3
 800d1f2:	4770      	bx	lr

0800d1f4 <_read_r>:
 800d1f4:	b538      	push	{r3, r4, r5, lr}
 800d1f6:	4d07      	ldr	r5, [pc, #28]	; (800d214 <_read_r+0x20>)
 800d1f8:	4604      	mov	r4, r0
 800d1fa:	4608      	mov	r0, r1
 800d1fc:	4611      	mov	r1, r2
 800d1fe:	2200      	movs	r2, #0
 800d200:	602a      	str	r2, [r5, #0]
 800d202:	461a      	mov	r2, r3
 800d204:	f7f6 fde2 	bl	8003dcc <_read>
 800d208:	1c43      	adds	r3, r0, #1
 800d20a:	d102      	bne.n	800d212 <_read_r+0x1e>
 800d20c:	682b      	ldr	r3, [r5, #0]
 800d20e:	b103      	cbz	r3, 800d212 <_read_r+0x1e>
 800d210:	6023      	str	r3, [r4, #0]
 800d212:	bd38      	pop	{r3, r4, r5, pc}
 800d214:	20001728 	.word	0x20001728

0800d218 <_init>:
 800d218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d21a:	bf00      	nop
 800d21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d21e:	bc08      	pop	{r3}
 800d220:	469e      	mov	lr, r3
 800d222:	4770      	bx	lr

0800d224 <_fini>:
 800d224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d226:	bf00      	nop
 800d228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d22a:	bc08      	pop	{r3}
 800d22c:	469e      	mov	lr, r3
 800d22e:	4770      	bx	lr
