
oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bd8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002844  08008d60  08008d60  00018d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5a4  0800b5a4  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5a4  0800b5a4  0001b5a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5ac  0800b5ac  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5ac  0800b5ac  0001b5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5b0  0800b5b0  0001b5b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800b5b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ca0  200000a8  0800b65c  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d48  0800b65c  00020d48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e3c1  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004024  00000000  00000000  0003e499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  000424c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002445d  00000000  00000000  00043858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001ae96  00000000  00000000  00067cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000cddcc  00000000  00000000  00082b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00150917  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001230  00000000  00000000  00150970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005360  00000000  00000000  00151ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a8 	.word	0x200000a8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008d48 	.word	0x08008d48

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000ac 	.word	0x200000ac
 80001c4:	08008d48 	.word	0x08008d48

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 ff65 	bl	8001394 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f899 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 fa01 	bl	80008d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d2:	f000 f917 	bl	8000704 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d6:	f000 f943 	bl	8000760 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004da:	f000 f971 	bl	80007c0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004de:	f008 f821 	bl	8008524 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80004e2:	f000 f9a3 	bl	800082c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80004e6:	f000 f9cb 	bl	8000880 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80004ea:	f000 fb0f 	bl	8000b0c <ssd1306_Init>
  HAL_Delay(1000);
 80004ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f2:	f000 ffc1 	bl	8001478 <HAL_Delay>
  ssd1306_Fill(Black);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 fb74 	bl	8000be4 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 80004fc:	f000 fb96 	bl	8000c2c <ssd1306_UpdateScreen>
  HAL_Delay(1000);
 8000500:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000504:	f000 ffb8 	bl	8001478 <HAL_Delay>
  ssd1306_SetCursor(0, 0);
 8000508:	2100      	movs	r1, #0
 800050a:	2000      	movs	r0, #0
 800050c:	f000 fcc4 	bl	8000e98 <ssd1306_SetCursor>
  ssd1306_WriteString("Lim Doyu", Font_11x18, White);
 8000510:	4a34      	ldr	r2, [pc, #208]	; (80005e4 <main+0x124>)
 8000512:	2301      	movs	r3, #1
 8000514:	ca06      	ldmia	r2, {r1, r2}
 8000516:	4834      	ldr	r0, [pc, #208]	; (80005e8 <main+0x128>)
 8000518:	f000 fc98 	bl	8000e4c <ssd1306_WriteString>
  ssd1306_SetCursor(0, 50);
 800051c:	2132      	movs	r1, #50	; 0x32
 800051e:	2000      	movs	r0, #0
 8000520:	f000 fcba 	bl	8000e98 <ssd1306_SetCursor>
  ssd1306_WriteString("Time", Font_7x10, White);
 8000524:	4a31      	ldr	r2, [pc, #196]	; (80005ec <main+0x12c>)
 8000526:	2301      	movs	r3, #1
 8000528:	ca06      	ldmia	r2, {r1, r2}
 800052a:	4831      	ldr	r0, [pc, #196]	; (80005f0 <main+0x130>)
 800052c:	f000 fc8e 	bl	8000e4c <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000530:	f000 fb7c 	bl	8000c2c <ssd1306_UpdateScreen>
  int counter;
  unsigned char string[10];
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000534:	f008 f81c 	bl	8008570 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    string[0] = counter / 100 + 0x30;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	4a2e      	ldr	r2, [pc, #184]	; (80005f4 <main+0x134>)
 800053c:	fb82 1203 	smull	r1, r2, r2, r3
 8000540:	1152      	asrs	r2, r2, #5
 8000542:	17db      	asrs	r3, r3, #31
 8000544:	1ad3      	subs	r3, r2, r3
 8000546:	b2db      	uxtb	r3, r3
 8000548:	3330      	adds	r3, #48	; 0x30
 800054a:	b2db      	uxtb	r3, r3
 800054c:	703b      	strb	r3, [r7, #0]
    string[1] = (counter % 100) / 10 + 0x30;
 800054e:	68fa      	ldr	r2, [r7, #12]
 8000550:	4b28      	ldr	r3, [pc, #160]	; (80005f4 <main+0x134>)
 8000552:	fb83 1302 	smull	r1, r3, r3, r2
 8000556:	1159      	asrs	r1, r3, #5
 8000558:	17d3      	asrs	r3, r2, #31
 800055a:	1acb      	subs	r3, r1, r3
 800055c:	2164      	movs	r1, #100	; 0x64
 800055e:	fb01 f303 	mul.w	r3, r1, r3
 8000562:	1ad3      	subs	r3, r2, r3
 8000564:	4a24      	ldr	r2, [pc, #144]	; (80005f8 <main+0x138>)
 8000566:	fb82 1203 	smull	r1, r2, r2, r3
 800056a:	1092      	asrs	r2, r2, #2
 800056c:	17db      	asrs	r3, r3, #31
 800056e:	1ad3      	subs	r3, r2, r3
 8000570:	b2db      	uxtb	r3, r3
 8000572:	3330      	adds	r3, #48	; 0x30
 8000574:	b2db      	uxtb	r3, r3
 8000576:	707b      	strb	r3, [r7, #1]
    string[2] = (counter % 100) % 10 + 0x30;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	4a1e      	ldr	r2, [pc, #120]	; (80005f4 <main+0x134>)
 800057c:	fb82 1203 	smull	r1, r2, r2, r3
 8000580:	1151      	asrs	r1, r2, #5
 8000582:	17da      	asrs	r2, r3, #31
 8000584:	1a8a      	subs	r2, r1, r2
 8000586:	2164      	movs	r1, #100	; 0x64
 8000588:	fb01 f202 	mul.w	r2, r1, r2
 800058c:	1a9a      	subs	r2, r3, r2
 800058e:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <main+0x138>)
 8000590:	fb83 1302 	smull	r1, r3, r3, r2
 8000594:	1099      	asrs	r1, r3, #2
 8000596:	17d3      	asrs	r3, r2, #31
 8000598:	1ac9      	subs	r1, r1, r3
 800059a:	460b      	mov	r3, r1
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	440b      	add	r3, r1
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	1ad1      	subs	r1, r2, r3
 80005a4:	b2cb      	uxtb	r3, r1
 80005a6:	3330      	adds	r3, #48	; 0x30
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	70bb      	strb	r3, [r7, #2]
    string[3] = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	70fb      	strb	r3, [r7, #3]
    ssd1306_SetCursor(40, 20);
 80005b0:	2114      	movs	r1, #20
 80005b2:	2028      	movs	r0, #40	; 0x28
 80005b4:	f000 fc70 	bl	8000e98 <ssd1306_SetCursor>
    ssd1306_WriteString(string, Font_16x26, White);
 80005b8:	4a10      	ldr	r2, [pc, #64]	; (80005fc <main+0x13c>)
 80005ba:	4638      	mov	r0, r7
 80005bc:	2301      	movs	r3, #1
 80005be:	ca06      	ldmia	r2, {r1, r2}
 80005c0:	f000 fc44 	bl	8000e4c <ssd1306_WriteString>
    counter++;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	3301      	adds	r3, #1
 80005c8:	60fb      	str	r3, [r7, #12]
    if (counter > 999) counter = 0;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005d0:	db01      	blt.n	80005d6 <main+0x116>
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
    ssd1306_UpdateScreen();
 80005d6:	f000 fb29 	bl	8000c2c <ssd1306_UpdateScreen>
    HAL_Delay(10);
 80005da:	200a      	movs	r0, #10
 80005dc:	f000 ff4c 	bl	8001478 <HAL_Delay>
    MX_USB_HOST_Process();
 80005e0:	e7a8      	b.n	8000534 <main+0x74>
 80005e2:	bf00      	nop
 80005e4:	20000008 	.word	0x20000008
 80005e8:	08008d60 	.word	0x08008d60
 80005ec:	20000000 	.word	0x20000000
 80005f0:	08008d6c 	.word	0x08008d6c
 80005f4:	51eb851f 	.word	0x51eb851f
 80005f8:	66666667 	.word	0x66666667
 80005fc:	20000010 	.word	0x20000010

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b098      	sub	sp, #96	; 0x60
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f008 faca 	bl	8008ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 031c 	add.w	r3, r7, #28
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	4b31      	ldr	r3, [pc, #196]	; (80006fc <SystemClock_Config+0xfc>)
 8000638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063a:	4a30      	ldr	r2, [pc, #192]	; (80006fc <SystemClock_Config+0xfc>)
 800063c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000640:	6413      	str	r3, [r2, #64]	; 0x40
 8000642:	4b2e      	ldr	r3, [pc, #184]	; (80006fc <SystemClock_Config+0xfc>)
 8000644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	4b2b      	ldr	r3, [pc, #172]	; (8000700 <SystemClock_Config+0x100>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a2a      	ldr	r2, [pc, #168]	; (8000700 <SystemClock_Config+0x100>)
 8000658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065c:	6013      	str	r3, [r2, #0]
 800065e:	4b28      	ldr	r3, [pc, #160]	; (8000700 <SystemClock_Config+0x100>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066a:	2301      	movs	r3, #1
 800066c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800066e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000672:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000678:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800067e:	2308      	movs	r3, #8
 8000680:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000682:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000686:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800068c:	2307      	movs	r3, #7
 800068e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000694:	4618      	mov	r0, r3
 8000696:	f004 f847 	bl	8004728 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006a0:	f000 fa16 	bl	8000ad0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2302      	movs	r3, #2
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006bc:	f107 031c 	add.w	r3, r7, #28
 80006c0:	2105      	movs	r1, #5
 80006c2:	4618      	mov	r0, r3
 80006c4:	f004 faa8 	bl	8004c18 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006ce:	f000 f9ff 	bl	8000ad0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006d2:	2301      	movs	r3, #1
 80006d4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80006d6:	23c0      	movs	r3, #192	; 0xc0
 80006d8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006da:	2302      	movs	r3, #2
 80006dc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	4618      	mov	r0, r3
 80006e4:	f004 fc94 	bl	8005010 <HAL_RCCEx_PeriphCLKConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80006ee:	f000 f9ef 	bl	8000ad0 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3760      	adds	r7, #96	; 0x60
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_I2C1_Init+0x50>)
 800070a:	4a13      	ldr	r2, [pc, #76]	; (8000758 <MX_I2C1_Init+0x54>)
 800070c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_I2C1_Init+0x50>)
 8000710:	4a12      	ldr	r2, [pc, #72]	; (800075c <MX_I2C1_Init+0x58>)
 8000712:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_I2C1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_I2C1_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_I2C1_Init+0x50>)
 8000722:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000726:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <MX_I2C1_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_I2C1_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <MX_I2C1_Init+0x50>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_I2C1_Init+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_I2C1_Init+0x50>)
 8000742:	f002 fef5 	bl	8003530 <HAL_I2C_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800074c:	f000 f9c0 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000520 	.word	0x20000520
 8000758:	40005400 	.word	0x40005400
 800075c:	000186a0 	.word	0x000186a0

08000760 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_I2S3_Init+0x54>)
 8000766:	4a14      	ldr	r2, [pc, #80]	; (80007b8 <MX_I2S3_Init+0x58>)
 8000768:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800076a:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_I2S3_Init+0x54>)
 800076c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000770:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_I2S3_Init+0x54>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000778:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_I2S3_Init+0x54>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800077e:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <MX_I2S3_Init+0x54>)
 8000780:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000784:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_I2S3_Init+0x54>)
 8000788:	4a0c      	ldr	r2, [pc, #48]	; (80007bc <MX_I2S3_Init+0x5c>)
 800078a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_I2S3_Init+0x54>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_I2S3_Init+0x54>)
 8000794:	2200      	movs	r2, #0
 8000796:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_I2S3_Init+0x54>)
 800079a:	2200      	movs	r2, #0
 800079c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_I2S3_Init+0x54>)
 80007a0:	f003 fb22 	bl	8003de8 <HAL_I2S_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007aa:	f000 f991 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000610 	.word	0x20000610
 80007b8:	40003c00 	.word	0x40003c00
 80007bc:	00017700 	.word	0x00017700

080007c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007c4:	4b17      	ldr	r3, [pc, #92]	; (8000824 <MX_SPI1_Init+0x64>)
 80007c6:	4a18      	ldr	r2, [pc, #96]	; (8000828 <MX_SPI1_Init+0x68>)
 80007c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <MX_SPI1_Init+0x64>)
 80007cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_SPI1_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_SPI1_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_SPI1_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_SPI1_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_SPI1_Init+0x64>)
 80007ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_SPI1_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <MX_SPI1_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_SPI1_Init+0x64>)
 8000800:	2200      	movs	r2, #0
 8000802:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <MX_SPI1_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_SPI1_Init+0x64>)
 800080c:	220a      	movs	r2, #10
 800080e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000810:	4804      	ldr	r0, [pc, #16]	; (8000824 <MX_SPI1_Init+0x64>)
 8000812:	f004 fd3d 	bl	8005290 <HAL_SPI_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800081c:	f000 f958 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000574 	.word	0x20000574
 8000828:	40013000 	.word	0x40013000

0800082c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000832:	4a12      	ldr	r2, [pc, #72]	; (800087c <MX_USART2_UART_Init+0x50>)
 8000834:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000838:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800083c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000864:	f004 fd9d 	bl	80053a2 <HAL_UART_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800086e:	f000 f92f 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200005cc 	.word	0x200005cc
 800087c:	40004400 	.word	0x40004400

08000880 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_USART3_UART_Init+0x4c>)
 8000886:	4a12      	ldr	r2, [pc, #72]	; (80008d0 <MX_USART3_UART_Init+0x50>)
 8000888:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_USART3_UART_Init+0x4c>)
 800088c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000890:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_USART3_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_USART3_UART_Init+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MX_USART3_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_USART3_UART_Init+0x4c>)
 80008a6:	220c      	movs	r2, #12
 80008a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <MX_USART3_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_USART3_UART_Init+0x4c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_USART3_UART_Init+0x4c>)
 80008b8:	f004 fd73 	bl	80053a2 <HAL_UART_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008c2:	f000 f905 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200004dc 	.word	0x200004dc
 80008d0:	40004800 	.word	0x40004800

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08c      	sub	sp, #48	; 0x30
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	61bb      	str	r3, [r7, #24]
 80008ee:	4b72      	ldr	r3, [pc, #456]	; (8000ab8 <MX_GPIO_Init+0x1e4>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a71      	ldr	r2, [pc, #452]	; (8000ab8 <MX_GPIO_Init+0x1e4>)
 80008f4:	f043 0310 	orr.w	r3, r3, #16
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b6f      	ldr	r3, [pc, #444]	; (8000ab8 <MX_GPIO_Init+0x1e4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0310 	and.w	r3, r3, #16
 8000902:	61bb      	str	r3, [r7, #24]
 8000904:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	4b6b      	ldr	r3, [pc, #428]	; (8000ab8 <MX_GPIO_Init+0x1e4>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a6a      	ldr	r2, [pc, #424]	; (8000ab8 <MX_GPIO_Init+0x1e4>)
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b68      	ldr	r3, [pc, #416]	; (8000ab8 <MX_GPIO_Init+0x1e4>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	4b64      	ldr	r3, [pc, #400]	; (8000ab8 <MX_GPIO_Init+0x1e4>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a63      	ldr	r2, [pc, #396]	; (8000ab8 <MX_GPIO_Init+0x1e4>)
 800092c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b61      	ldr	r3, [pc, #388]	; (8000ab8 <MX_GPIO_Init+0x1e4>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	4b5d      	ldr	r3, [pc, #372]	; (8000ab8 <MX_GPIO_Init+0x1e4>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a5c      	ldr	r2, [pc, #368]	; (8000ab8 <MX_GPIO_Init+0x1e4>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b5a      	ldr	r3, [pc, #360]	; (8000ab8 <MX_GPIO_Init+0x1e4>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	4b56      	ldr	r3, [pc, #344]	; (8000ab8 <MX_GPIO_Init+0x1e4>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a55      	ldr	r2, [pc, #340]	; (8000ab8 <MX_GPIO_Init+0x1e4>)
 8000964:	f043 0302 	orr.w	r3, r3, #2
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b53      	ldr	r3, [pc, #332]	; (8000ab8 <MX_GPIO_Init+0x1e4>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b4f      	ldr	r3, [pc, #316]	; (8000ab8 <MX_GPIO_Init+0x1e4>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a4e      	ldr	r2, [pc, #312]	; (8000ab8 <MX_GPIO_Init+0x1e4>)
 8000980:	f043 0308 	orr.w	r3, r3, #8
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b4c      	ldr	r3, [pc, #304]	; (8000ab8 <MX_GPIO_Init+0x1e4>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0308 	and.w	r3, r3, #8
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2108      	movs	r1, #8
 8000996:	4849      	ldr	r0, [pc, #292]	; (8000abc <MX_GPIO_Init+0x1e8>)
 8000998:	f001 f840 	bl	8001a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	2101      	movs	r1, #1
 80009a0:	4847      	ldr	r0, [pc, #284]	; (8000ac0 <MX_GPIO_Init+0x1ec>)
 80009a2:	f001 f83b 	bl	8001a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009a6:	2200      	movs	r2, #0
 80009a8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009ac:	4845      	ldr	r0, [pc, #276]	; (8000ac4 <MX_GPIO_Init+0x1f0>)
 80009ae:	f001 f835 	bl	8001a1c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009b2:	2308      	movs	r3, #8
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	483c      	ldr	r0, [pc, #240]	; (8000abc <MX_GPIO_Init+0x1e8>)
 80009ca:	f000 fe8b 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009ce:	2301      	movs	r3, #1
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4836      	ldr	r0, [pc, #216]	; (8000ac0 <MX_GPIO_Init+0x1ec>)
 80009e6:	f000 fe7d 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009ea:	2308      	movs	r3, #8
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009fa:	2305      	movs	r3, #5
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	482e      	ldr	r0, [pc, #184]	; (8000ac0 <MX_GPIO_Init+0x1ec>)
 8000a06:	f000 fe6d 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a0e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	482a      	ldr	r0, [pc, #168]	; (8000ac8 <MX_GPIO_Init+0x1f4>)
 8000a20:	f000 fe60 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a24:	2304      	movs	r3, #4
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	4825      	ldr	r0, [pc, #148]	; (8000acc <MX_GPIO_Init+0x1f8>)
 8000a38:	f000 fe54 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a4e:	2305      	movs	r3, #5
 8000a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	481c      	ldr	r0, [pc, #112]	; (8000acc <MX_GPIO_Init+0x1f8>)
 8000a5a:	f000 fe43 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a5e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a62:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	4813      	ldr	r0, [pc, #76]	; (8000ac4 <MX_GPIO_Init+0x1f0>)
 8000a78:	f000 fe34 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a7c:	2320      	movs	r3, #32
 8000a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <MX_GPIO_Init+0x1f0>)
 8000a90:	f000 fe28 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a94:	2302      	movs	r3, #2
 8000a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a98:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4804      	ldr	r0, [pc, #16]	; (8000abc <MX_GPIO_Init+0x1e8>)
 8000aaa:	f000 fe1b 	bl	80016e4 <HAL_GPIO_Init>

}
 8000aae:	bf00      	nop
 8000ab0:	3730      	adds	r7, #48	; 0x30
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	40020800 	.word	0x40020800
 8000ac4:	40020c00 	.word	0x40020c00
 8000ac8:	40020000 	.word	0x40020000
 8000acc:	40020400 	.word	0x40020400

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <Error_Handler+0x8>
	...

08000adc <ssd1306_WriteCommand>:
//
//	Een byte sturen naar het commando register
//	Kan niet gebruikt worden buiten deze file
//
void ssd1306_WriteCommand(uint8_t command)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af04      	add	r7, sp, #16
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8000ae6:	230a      	movs	r3, #10
 8000ae8:	9302      	str	r3, [sp, #8]
 8000aea:	2301      	movs	r3, #1
 8000aec:	9301      	str	r3, [sp, #4]
 8000aee:	1dfb      	adds	r3, r7, #7
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	2301      	movs	r3, #1
 8000af4:	2200      	movs	r2, #0
 8000af6:	2178      	movs	r1, #120	; 0x78
 8000af8:	4803      	ldr	r0, [pc, #12]	; (8000b08 <ssd1306_WriteCommand+0x2c>)
 8000afa:	f002 fe5d 	bl	80037b8 <HAL_I2C_Mem_Write>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000520 	.word	0x20000520

08000b0c <ssd1306_Init>:
//
//	Het scherm initialiseren voor gebruik
//
uint8_t ssd1306_Init(void)
{	
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	// Even wachten zodat het scherm zeker opgestart is
	HAL_Delay(100);
 8000b10:	2064      	movs	r0, #100	; 0x64
 8000b12:	f000 fcb1 	bl	8001478 <HAL_Delay>
	
	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 8000b16:	20ae      	movs	r0, #174	; 0xae
 8000b18:	f7ff ffe0 	bl	8000adc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8000b1c:	2020      	movs	r0, #32
 8000b1e:	f7ff ffdd 	bl	8000adc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000b22:	2010      	movs	r0, #16
 8000b24:	f7ff ffda 	bl	8000adc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000b28:	20b0      	movs	r0, #176	; 0xb0
 8000b2a:	f7ff ffd7 	bl	8000adc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000b2e:	20c8      	movs	r0, #200	; 0xc8
 8000b30:	f7ff ffd4 	bl	8000adc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8000b34:	2000      	movs	r0, #0
 8000b36:	f7ff ffd1 	bl	8000adc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8000b3a:	2010      	movs	r0, #16
 8000b3c:	f7ff ffce 	bl	8000adc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8000b40:	2040      	movs	r0, #64	; 0x40
 8000b42:	f7ff ffcb 	bl	8000adc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8000b46:	2081      	movs	r0, #129	; 0x81
 8000b48:	f7ff ffc8 	bl	8000adc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8000b4c:	20ff      	movs	r0, #255	; 0xff
 8000b4e:	f7ff ffc5 	bl	8000adc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8000b52:	20a1      	movs	r0, #161	; 0xa1
 8000b54:	f7ff ffc2 	bl	8000adc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8000b58:	20a6      	movs	r0, #166	; 0xa6
 8000b5a:	f7ff ffbf 	bl	8000adc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8000b5e:	20a8      	movs	r0, #168	; 0xa8
 8000b60:	f7ff ffbc 	bl	8000adc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8000b64:	203f      	movs	r0, #63	; 0x3f
 8000b66:	f7ff ffb9 	bl	8000adc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000b6a:	20a4      	movs	r0, #164	; 0xa4
 8000b6c:	f7ff ffb6 	bl	8000adc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8000b70:	20d3      	movs	r0, #211	; 0xd3
 8000b72:	f7ff ffb3 	bl	8000adc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8000b76:	2000      	movs	r0, #0
 8000b78:	f7ff ffb0 	bl	8000adc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000b7c:	20d5      	movs	r0, #213	; 0xd5
 8000b7e:	f7ff ffad 	bl	8000adc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000b82:	20f0      	movs	r0, #240	; 0xf0
 8000b84:	f7ff ffaa 	bl	8000adc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000b88:	20d9      	movs	r0, #217	; 0xd9
 8000b8a:	f7ff ffa7 	bl	8000adc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8000b8e:	2022      	movs	r0, #34	; 0x22
 8000b90:	f7ff ffa4 	bl	8000adc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8000b94:	20da      	movs	r0, #218	; 0xda
 8000b96:	f7ff ffa1 	bl	8000adc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8000b9a:	2012      	movs	r0, #18
 8000b9c:	f7ff ff9e 	bl	8000adc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8000ba0:	20db      	movs	r0, #219	; 0xdb
 8000ba2:	f7ff ff9b 	bl	8000adc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000ba6:	2020      	movs	r0, #32
 8000ba8:	f7ff ff98 	bl	8000adc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000bac:	208d      	movs	r0, #141	; 0x8d
 8000bae:	f7ff ff95 	bl	8000adc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8000bb2:	2014      	movs	r0, #20
 8000bb4:	f7ff ff92 	bl	8000adc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8000bb8:	20af      	movs	r0, #175	; 0xaf
 8000bba:	f7ff ff8f 	bl	8000adc <ssd1306_WriteCommand>
	
	/* Clearen scherm */
	ssd1306_Fill(Black);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f000 f810 	bl	8000be4 <ssd1306_Fill>
	
	/* Update screen */
	ssd1306_UpdateScreen();
 8000bc4:	f000 f832 	bl	8000c2c <ssd1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <ssd1306_Init+0xd4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000bce:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <ssd1306_Init+0xd4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000bd4:	4b02      	ldr	r3, [pc, #8]	; (8000be0 <ssd1306_Init+0xd4>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	200004c4 	.word	0x200004c4

08000be4 <ssd1306_Fill>:
//
//	We zetten de hele buffer op een bepaalde kleur
// 	color 	=> de kleur waarin alles moet
//
void ssd1306_Fill(SSD1306_COLOR color) 
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	e00d      	b.n	8000c10 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d101      	bne.n	8000bfe <ssd1306_Fill+0x1a>
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	e000      	b.n	8000c00 <ssd1306_Fill+0x1c>
 8000bfe:	21ff      	movs	r1, #255	; 0xff
 8000c00:	4a09      	ldr	r2, [pc, #36]	; (8000c28 <ssd1306_Fill+0x44>)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	4413      	add	r3, r2
 8000c06:	460a      	mov	r2, r1
 8000c08:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c16:	d3ed      	bcc.n	8000bf4 <ssd1306_Fill+0x10>
	}
}
 8000c18:	bf00      	nop
 8000c1a:	bf00      	nop
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	200000c4 	.word	0x200000c4

08000c2c <ssd1306_UpdateScreen>:

//
//	Alle weizigingen in de buffer naar het scherm sturen
//
void ssd1306_UpdateScreen(void) 
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af04      	add	r7, sp, #16
	uint8_t i;
	
	for (i = 0; i < 8; i++) {
 8000c32:	2300      	movs	r3, #0
 8000c34:	71fb      	strb	r3, [r7, #7]
 8000c36:	e01d      	b.n	8000c74 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	3b50      	subs	r3, #80	; 0x50
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff ff4c 	bl	8000adc <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8000c44:	2000      	movs	r0, #0
 8000c46:	f7ff ff49 	bl	8000adc <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8000c4a:	2010      	movs	r0, #16
 8000c4c:	f7ff ff46 	bl	8000adc <ssd1306_WriteCommand>

		// We schrijven alles map per map weg
		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	01db      	lsls	r3, r3, #7
 8000c54:	4a0b      	ldr	r2, [pc, #44]	; (8000c84 <ssd1306_UpdateScreen+0x58>)
 8000c56:	4413      	add	r3, r2
 8000c58:	2264      	movs	r2, #100	; 0x64
 8000c5a:	9202      	str	r2, [sp, #8]
 8000c5c:	2280      	movs	r2, #128	; 0x80
 8000c5e:	9201      	str	r2, [sp, #4]
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	2301      	movs	r3, #1
 8000c64:	2240      	movs	r2, #64	; 0x40
 8000c66:	2178      	movs	r1, #120	; 0x78
 8000c68:	4807      	ldr	r0, [pc, #28]	; (8000c88 <ssd1306_UpdateScreen+0x5c>)
 8000c6a:	f002 fda5 	bl	80037b8 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	3301      	adds	r3, #1
 8000c72:	71fb      	strb	r3, [r7, #7]
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	2b07      	cmp	r3, #7
 8000c78:	d9de      	bls.n	8000c38 <ssd1306_UpdateScreen+0xc>
	}
}
 8000c7a:	bf00      	nop
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	200000c4 	.word	0x200000c4
 8000c88:	20000520 	.word	0x20000520

08000c8c <ssd1306_DrawPixel>:
//	X => X coordinaat
//	Y => Y coordinaat
//	color => kleur die pixel moet krijgen
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
 8000c96:	460b      	mov	r3, r1
 8000c98:	71bb      	strb	r3, [r7, #6]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	db48      	blt.n	8000d38 <ssd1306_DrawPixel+0xac>
 8000ca6:	79bb      	ldrb	r3, [r7, #6]
 8000ca8:	2b3f      	cmp	r3, #63	; 0x3f
 8000caa:	d845      	bhi.n	8000d38 <ssd1306_DrawPixel+0xac>
		// We gaan niet buiten het scherm schrijven
		return;
	}
	
	// Kijken of de pixel geinverteerd moet worden
	if (SSD1306.Inverted) 
 8000cac:	4b25      	ldr	r3, [pc, #148]	; (8000d44 <ssd1306_DrawPixel+0xb8>)
 8000cae:	791b      	ldrb	r3, [r3, #4]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d006      	beq.n	8000cc2 <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8000cb4:	797b      	ldrb	r3, [r7, #5]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	bf0c      	ite	eq
 8000cba:	2301      	moveq	r3, #1
 8000cbc:	2300      	movne	r3, #0
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	717b      	strb	r3, [r7, #5]
	}
	
	// We zetten de juiste kleur voor de pixel
	if (color == White)
 8000cc2:	797b      	ldrb	r3, [r7, #5]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d11a      	bne.n	8000cfe <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000cc8:	79fa      	ldrb	r2, [r7, #7]
 8000cca:	79bb      	ldrb	r3, [r7, #6]
 8000ccc:	08db      	lsrs	r3, r3, #3
 8000cce:	b2d8      	uxtb	r0, r3
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	01db      	lsls	r3, r3, #7
 8000cd4:	4413      	add	r3, r2
 8000cd6:	4a1c      	ldr	r2, [pc, #112]	; (8000d48 <ssd1306_DrawPixel+0xbc>)
 8000cd8:	5cd3      	ldrb	r3, [r2, r3]
 8000cda:	b25a      	sxtb	r2, r3
 8000cdc:	79bb      	ldrb	r3, [r7, #6]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce8:	b25b      	sxtb	r3, r3
 8000cea:	4313      	orrs	r3, r2
 8000cec:	b259      	sxtb	r1, r3
 8000cee:	79fa      	ldrb	r2, [r7, #7]
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	01db      	lsls	r3, r3, #7
 8000cf4:	4413      	add	r3, r2
 8000cf6:	b2c9      	uxtb	r1, r1
 8000cf8:	4a13      	ldr	r2, [pc, #76]	; (8000d48 <ssd1306_DrawPixel+0xbc>)
 8000cfa:	54d1      	strb	r1, [r2, r3]
 8000cfc:	e01d      	b.n	8000d3a <ssd1306_DrawPixel+0xae>
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000cfe:	79fa      	ldrb	r2, [r7, #7]
 8000d00:	79bb      	ldrb	r3, [r7, #6]
 8000d02:	08db      	lsrs	r3, r3, #3
 8000d04:	b2d8      	uxtb	r0, r3
 8000d06:	4603      	mov	r3, r0
 8000d08:	01db      	lsls	r3, r3, #7
 8000d0a:	4413      	add	r3, r2
 8000d0c:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <ssd1306_DrawPixel+0xbc>)
 8000d0e:	5cd3      	ldrb	r3, [r2, r3]
 8000d10:	b25a      	sxtb	r2, r3
 8000d12:	79bb      	ldrb	r3, [r7, #6]
 8000d14:	f003 0307 	and.w	r3, r3, #7
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1e:	b25b      	sxtb	r3, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	4013      	ands	r3, r2
 8000d26:	b259      	sxtb	r1, r3
 8000d28:	79fa      	ldrb	r2, [r7, #7]
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	01db      	lsls	r3, r3, #7
 8000d2e:	4413      	add	r3, r2
 8000d30:	b2c9      	uxtb	r1, r1
 8000d32:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <ssd1306_DrawPixel+0xbc>)
 8000d34:	54d1      	strb	r1, [r2, r3]
 8000d36:	e000      	b.n	8000d3a <ssd1306_DrawPixel+0xae>
		return;
 8000d38:	bf00      	nop
	}
}
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	200004c4 	.word	0x200004c4
 8000d48:	200000c4 	.word	0x200000c4

08000d4c <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b089      	sub	sp, #36	; 0x24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4604      	mov	r4, r0
 8000d54:	1d38      	adds	r0, r7, #4
 8000d56:	e880 0006 	stmia.w	r0, {r1, r2}
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	4623      	mov	r3, r4
 8000d5e:	73fb      	strb	r3, [r7, #15]
 8000d60:	4613      	mov	r3, r2
 8000d62:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;
	
	// Kijken of er nog plaats is op deze lijn
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000d64:	4b38      	ldr	r3, [pc, #224]	; (8000e48 <ssd1306_WriteChar+0xfc>)
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	793b      	ldrb	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	2b7f      	cmp	r3, #127	; 0x7f
 8000d70:	dc06      	bgt.n	8000d80 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8000d72:	4b35      	ldr	r3, [pc, #212]	; (8000e48 <ssd1306_WriteChar+0xfc>)
 8000d74:	885b      	ldrh	r3, [r3, #2]
 8000d76:	461a      	mov	r2, r3
 8000d78:	797b      	ldrb	r3, [r7, #5]
 8000d7a:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000d7c:	2b3f      	cmp	r3, #63	; 0x3f
 8000d7e:	dd01      	ble.n	8000d84 <ssd1306_WriteChar+0x38>
	{
		// Er is geen plaats meer
		return 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	e05d      	b.n	8000e40 <ssd1306_WriteChar+0xf4>
	}
	
	// We gaan door het font
	for (i = 0; i < Font.FontHeight; i++)
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
 8000d88:	e04c      	b.n	8000e24 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	3b20      	subs	r3, #32
 8000d90:	7979      	ldrb	r1, [r7, #5]
 8000d92:	fb01 f303 	mul.w	r3, r1, r3
 8000d96:	4619      	mov	r1, r3
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	440b      	add	r3, r1
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	4413      	add	r3, r2
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]
 8000da8:	e034      	b.n	8000e14 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000) 
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d012      	beq.n	8000de0 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000dba:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <ssd1306_WriteChar+0xfc>)
 8000dbc:	881b      	ldrh	r3, [r3, #0]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	4413      	add	r3, r2
 8000dc6:	b2d8      	uxtb	r0, r3
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <ssd1306_WriteChar+0xfc>)
 8000dca:	885b      	ldrh	r3, [r3, #2]
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	4413      	add	r3, r2
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	7bba      	ldrb	r2, [r7, #14]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f7ff ff57 	bl	8000c8c <ssd1306_DrawPixel>
 8000dde:	e016      	b.n	8000e0e <ssd1306_WriteChar+0xc2>
			} 
			else 
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000de0:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <ssd1306_WriteChar+0xfc>)
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	4413      	add	r3, r2
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <ssd1306_WriteChar+0xfc>)
 8000df0:	885b      	ldrh	r3, [r3, #2]
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	4413      	add	r3, r2
 8000dfa:	b2d9      	uxtb	r1, r3
 8000dfc:	7bbb      	ldrb	r3, [r7, #14]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	bf0c      	ite	eq
 8000e02:	2301      	moveq	r3, #1
 8000e04:	2300      	movne	r3, #0
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	461a      	mov	r2, r3
 8000e0a:	f7ff ff3f 	bl	8000c8c <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	3301      	adds	r3, #1
 8000e12:	61bb      	str	r3, [r7, #24]
 8000e14:	793b      	ldrb	r3, [r7, #4]
 8000e16:	461a      	mov	r2, r3
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d3c5      	bcc.n	8000daa <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3301      	adds	r3, #1
 8000e22:	61fb      	str	r3, [r7, #28]
 8000e24:	797b      	ldrb	r3, [r7, #5]
 8000e26:	461a      	mov	r2, r3
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d3ad      	bcc.n	8000d8a <ssd1306_WriteChar+0x3e>
			}
		}
	}
	
	// De huidige positie is nu verplaatst
	SSD1306.CurrentX += Font.FontWidth;
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <ssd1306_WriteChar+0xfc>)
 8000e30:	881a      	ldrh	r2, [r3, #0]
 8000e32:	793b      	ldrb	r3, [r7, #4]
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	4413      	add	r3, r2
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <ssd1306_WriteChar+0xfc>)
 8000e3c:	801a      	strh	r2, [r3, #0]
	
	// We geven het geschreven char terug voor validatie
	return ch;
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3724      	adds	r7, #36	; 0x24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd90      	pop	{r4, r7, pc}
 8000e48:	200004c4 	.word	0x200004c4

08000e4c <ssd1306_WriteString>:
// 	str => string om op het scherm te schrijven
//	Font => Het font dat gebruikt moet worden
//	color => Black or White
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	1d38      	adds	r0, r7, #4
 8000e56:	e880 0006 	stmia.w	r0, {r1, r2}
 8000e5a:	70fb      	strb	r3, [r7, #3]
	// We schrijven alle char tot een nulbyte
	while (*str) 
 8000e5c:	e012      	b.n	8000e84 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	7818      	ldrb	r0, [r3, #0]
 8000e62:	78fb      	ldrb	r3, [r7, #3]
 8000e64:	1d3a      	adds	r2, r7, #4
 8000e66:	ca06      	ldmia	r2, {r1, r2}
 8000e68:	f7ff ff70 	bl	8000d4c <ssd1306_WriteChar>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	461a      	mov	r2, r3
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d002      	beq.n	8000e7e <ssd1306_WriteString+0x32>
		{
			// Het karakter is niet juist weggeschreven
			return *str;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	e008      	b.n	8000e90 <ssd1306_WriteString+0x44>
		}
		
		// Volgende char
		str++;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	3301      	adds	r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
	while (*str) 
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1e8      	bne.n	8000e5e <ssd1306_WriteString+0x12>
	}
	
	// Alles gelukt, we sturen dus 0 terug
	return *str;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	781b      	ldrb	r3, [r3, #0]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <ssd1306_SetCursor>:

//
//	Zet de cursor op een coordinaat
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	460a      	mov	r2, r1
 8000ea2:	71fb      	strb	r3, [r7, #7]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	71bb      	strb	r3, [r7, #6]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <ssd1306_SetCursor+0x2c>)
 8000eae:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8000eb0:	79bb      	ldrb	r3, [r7, #6]
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <ssd1306_SetCursor+0x2c>)
 8000eb6:	805a      	strh	r2, [r3, #2]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	200004c4 	.word	0x200004c4

08000ec8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <HAL_MspInit+0x4c>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	4a0f      	ldr	r2, [pc, #60]	; (8000f14 <HAL_MspInit+0x4c>)
 8000ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000edc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ede:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <HAL_MspInit+0x4c>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	603b      	str	r3, [r7, #0]
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <HAL_MspInit+0x4c>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	4a08      	ldr	r2, [pc, #32]	; (8000f14 <HAL_MspInit+0x4c>)
 8000ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_MspInit+0x4c>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f02:	603b      	str	r3, [r7, #0]
 8000f04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f06:	2007      	movs	r0, #7
 8000f08:	f000 fbaa 	bl	8001660 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40023800 	.word	0x40023800

08000f18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	; 0x28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a19      	ldr	r2, [pc, #100]	; (8000f9c <HAL_I2C_MspInit+0x84>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d12c      	bne.n	8000f94 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <HAL_I2C_MspInit+0x88>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a17      	ldr	r2, [pc, #92]	; (8000fa0 <HAL_I2C_MspInit+0x88>)
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <HAL_I2C_MspInit+0x88>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000f56:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f5c:	2312      	movs	r3, #18
 8000f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f68:	2304      	movs	r3, #4
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4619      	mov	r1, r3
 8000f72:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <HAL_I2C_MspInit+0x8c>)
 8000f74:	f000 fbb6 	bl	80016e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <HAL_I2C_MspInit+0x88>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	4a07      	ldr	r2, [pc, #28]	; (8000fa0 <HAL_I2C_MspInit+0x88>)
 8000f82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f86:	6413      	str	r3, [r2, #64]	; 0x40
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <HAL_I2C_MspInit+0x88>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f94:	bf00      	nop
 8000f96:	3728      	adds	r7, #40	; 0x28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40005400 	.word	0x40005400
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020400 	.word	0x40020400

08000fa8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a28      	ldr	r2, [pc, #160]	; (8001068 <HAL_I2S_MspInit+0xc0>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d14a      	bne.n	8001060 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	4b27      	ldr	r3, [pc, #156]	; (800106c <HAL_I2S_MspInit+0xc4>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	4a26      	ldr	r2, [pc, #152]	; (800106c <HAL_I2S_MspInit+0xc4>)
 8000fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fda:	4b24      	ldr	r3, [pc, #144]	; (800106c <HAL_I2S_MspInit+0xc4>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	4b20      	ldr	r3, [pc, #128]	; (800106c <HAL_I2S_MspInit+0xc4>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a1f      	ldr	r2, [pc, #124]	; (800106c <HAL_I2S_MspInit+0xc4>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	; (800106c <HAL_I2S_MspInit+0xc4>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <HAL_I2S_MspInit+0xc4>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a18      	ldr	r2, [pc, #96]	; (800106c <HAL_I2S_MspInit+0xc4>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b16      	ldr	r3, [pc, #88]	; (800106c <HAL_I2S_MspInit+0xc4>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800101e:	2310      	movs	r3, #16
 8001020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800102e:	2306      	movs	r3, #6
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4619      	mov	r1, r3
 8001038:	480d      	ldr	r0, [pc, #52]	; (8001070 <HAL_I2S_MspInit+0xc8>)
 800103a:	f000 fb53 	bl	80016e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800103e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001050:	2306      	movs	r3, #6
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	4806      	ldr	r0, [pc, #24]	; (8001074 <HAL_I2S_MspInit+0xcc>)
 800105c:	f000 fb42 	bl	80016e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001060:	bf00      	nop
 8001062:	3728      	adds	r7, #40	; 0x28
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40003c00 	.word	0x40003c00
 800106c:	40023800 	.word	0x40023800
 8001070:	40020000 	.word	0x40020000
 8001074:	40020800 	.word	0x40020800

08001078 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	; 0x28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a19      	ldr	r2, [pc, #100]	; (80010fc <HAL_SPI_MspInit+0x84>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d12b      	bne.n	80010f2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <HAL_SPI_MspInit+0x88>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	4a17      	ldr	r2, [pc, #92]	; (8001100 <HAL_SPI_MspInit+0x88>)
 80010a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010a8:	6453      	str	r3, [r2, #68]	; 0x44
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_SPI_MspInit+0x88>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <HAL_SPI_MspInit+0x88>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a10      	ldr	r2, [pc, #64]	; (8001100 <HAL_SPI_MspInit+0x88>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <HAL_SPI_MspInit+0x88>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80010d2:	23e0      	movs	r3, #224	; 0xe0
 80010d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	2300      	movs	r3, #0
 80010e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010e2:	2305      	movs	r3, #5
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <HAL_SPI_MspInit+0x8c>)
 80010ee:	f000 faf9 	bl	80016e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010f2:	bf00      	nop
 80010f4:	3728      	adds	r7, #40	; 0x28
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40013000 	.word	0x40013000
 8001100:	40023800 	.word	0x40023800
 8001104:	40020000 	.word	0x40020000

08001108 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08c      	sub	sp, #48	; 0x30
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a42      	ldr	r2, [pc, #264]	; (8001230 <HAL_UART_MspInit+0x128>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d12c      	bne.n	8001184 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
 800112e:	4b41      	ldr	r3, [pc, #260]	; (8001234 <HAL_UART_MspInit+0x12c>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	4a40      	ldr	r2, [pc, #256]	; (8001234 <HAL_UART_MspInit+0x12c>)
 8001134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001138:	6413      	str	r3, [r2, #64]	; 0x40
 800113a:	4b3e      	ldr	r3, [pc, #248]	; (8001234 <HAL_UART_MspInit+0x12c>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001142:	61bb      	str	r3, [r7, #24]
 8001144:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	4b3a      	ldr	r3, [pc, #232]	; (8001234 <HAL_UART_MspInit+0x12c>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a39      	ldr	r2, [pc, #228]	; (8001234 <HAL_UART_MspInit+0x12c>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b37      	ldr	r3, [pc, #220]	; (8001234 <HAL_UART_MspInit+0x12c>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001162:	230c      	movs	r3, #12
 8001164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116e:	2303      	movs	r3, #3
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001172:	2307      	movs	r3, #7
 8001174:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	4619      	mov	r1, r3
 800117c:	482e      	ldr	r0, [pc, #184]	; (8001238 <HAL_UART_MspInit+0x130>)
 800117e:	f000 fab1 	bl	80016e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001182:	e050      	b.n	8001226 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a2c      	ldr	r2, [pc, #176]	; (800123c <HAL_UART_MspInit+0x134>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d14b      	bne.n	8001226 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	4b28      	ldr	r3, [pc, #160]	; (8001234 <HAL_UART_MspInit+0x12c>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	4a27      	ldr	r2, [pc, #156]	; (8001234 <HAL_UART_MspInit+0x12c>)
 8001198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800119c:	6413      	str	r3, [r2, #64]	; 0x40
 800119e:	4b25      	ldr	r3, [pc, #148]	; (8001234 <HAL_UART_MspInit+0x12c>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b21      	ldr	r3, [pc, #132]	; (8001234 <HAL_UART_MspInit+0x12c>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a20      	ldr	r2, [pc, #128]	; (8001234 <HAL_UART_MspInit+0x12c>)
 80011b4:	f043 0302 	orr.w	r3, r3, #2
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <HAL_UART_MspInit+0x12c>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <HAL_UART_MspInit+0x12c>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a19      	ldr	r2, [pc, #100]	; (8001234 <HAL_UART_MspInit+0x12c>)
 80011d0:	f043 0308 	orr.w	r3, r3, #8
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <HAL_UART_MspInit+0x12c>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80011e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f0:	2303      	movs	r3, #3
 80011f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011f4:	2307      	movs	r3, #7
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	4619      	mov	r1, r3
 80011fe:	4810      	ldr	r0, [pc, #64]	; (8001240 <HAL_UART_MspInit+0x138>)
 8001200:	f000 fa70 	bl	80016e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001204:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001216:	2307      	movs	r3, #7
 8001218:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	4619      	mov	r1, r3
 8001220:	4808      	ldr	r0, [pc, #32]	; (8001244 <HAL_UART_MspInit+0x13c>)
 8001222:	f000 fa5f 	bl	80016e4 <HAL_GPIO_Init>
}
 8001226:	bf00      	nop
 8001228:	3730      	adds	r7, #48	; 0x30
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40004400 	.word	0x40004400
 8001234:	40023800 	.word	0x40023800
 8001238:	40020000 	.word	0x40020000
 800123c:	40004800 	.word	0x40004800
 8001240:	40020400 	.word	0x40020400
 8001244:	40020c00 	.word	0x40020c00

08001248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800124c:	e7fe      	b.n	800124c <NMI_Handler+0x4>

0800124e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <HardFault_Handler+0x4>

08001254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <MemManage_Handler+0x4>

0800125a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <BusFault_Handler+0x4>

08001260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <UsageFault_Handler+0x4>

08001266 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001294:	f000 f8d0 	bl	8001438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}

0800129c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <OTG_FS_IRQHandler+0x10>)
 80012a2:	f000 fe3f 	bl	8001f24 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000a34 	.word	0x20000a34

080012b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b8:	4a14      	ldr	r2, [pc, #80]	; (800130c <_sbrk+0x5c>)
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <_sbrk+0x60>)
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c4:	4b13      	ldr	r3, [pc, #76]	; (8001314 <_sbrk+0x64>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d102      	bne.n	80012d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <_sbrk+0x64>)
 80012ce:	4a12      	ldr	r2, [pc, #72]	; (8001318 <_sbrk+0x68>)
 80012d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <_sbrk+0x64>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d207      	bcs.n	80012f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012e0:	f007 fc28 	bl	8008b34 <__errno>
 80012e4:	4603      	mov	r3, r0
 80012e6:	220c      	movs	r2, #12
 80012e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	e009      	b.n	8001304 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <_sbrk+0x64>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f6:	4b07      	ldr	r3, [pc, #28]	; (8001314 <_sbrk+0x64>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	4a05      	ldr	r2, [pc, #20]	; (8001314 <_sbrk+0x64>)
 8001300:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001302:	68fb      	ldr	r3, [r7, #12]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20020000 	.word	0x20020000
 8001310:	00000400 	.word	0x00000400
 8001314:	200004cc 	.word	0x200004cc
 8001318:	20000d48 	.word	0x20000d48

0800131c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <SystemInit+0x20>)
 8001322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001326:	4a05      	ldr	r2, [pc, #20]	; (800133c <SystemInit+0x20>)
 8001328:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800132c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001378 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001344:	480d      	ldr	r0, [pc, #52]	; (800137c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001346:	490e      	ldr	r1, [pc, #56]	; (8001380 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001348:	4a0e      	ldr	r2, [pc, #56]	; (8001384 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800134c:	e002      	b.n	8001354 <LoopCopyDataInit>

0800134e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001352:	3304      	adds	r3, #4

08001354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001358:	d3f9      	bcc.n	800134e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135a:	4a0b      	ldr	r2, [pc, #44]	; (8001388 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800135c:	4c0b      	ldr	r4, [pc, #44]	; (800138c <LoopFillZerobss+0x26>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001360:	e001      	b.n	8001366 <LoopFillZerobss>

08001362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001364:	3204      	adds	r2, #4

08001366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001368:	d3fb      	bcc.n	8001362 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800136a:	f7ff ffd7 	bl	800131c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800136e:	f007 fbe7 	bl	8008b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001372:	f7ff f8a5 	bl	80004c0 <main>
  bx  lr    
 8001376:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001378:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800137c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001380:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001384:	0800b5b4 	.word	0x0800b5b4
  ldr r2, =_sbss
 8001388:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 800138c:	20000d48 	.word	0x20000d48

08001390 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001390:	e7fe      	b.n	8001390 <ADC_IRQHandler>
	...

08001394 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001398:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <HAL_Init+0x40>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0d      	ldr	r2, [pc, #52]	; (80013d4 <HAL_Init+0x40>)
 800139e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013a4:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <HAL_Init+0x40>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <HAL_Init+0x40>)
 80013aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <HAL_Init+0x40>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a07      	ldr	r2, [pc, #28]	; (80013d4 <HAL_Init+0x40>)
 80013b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013bc:	2003      	movs	r0, #3
 80013be:	f000 f94f 	bl	8001660 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013c2:	2000      	movs	r0, #0
 80013c4:	f000 f808 	bl	80013d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c8:	f7ff fd7e 	bl	8000ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40023c00 	.word	0x40023c00

080013d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_InitTick+0x54>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <HAL_InitTick+0x58>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4619      	mov	r1, r3
 80013ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80013f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 f967 	bl	80016ca <HAL_SYSTICK_Config>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e00e      	b.n	8001424 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b0f      	cmp	r3, #15
 800140a:	d80a      	bhi.n	8001422 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800140c:	2200      	movs	r2, #0
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	f000 f92f 	bl	8001676 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001418:	4a06      	ldr	r2, [pc, #24]	; (8001434 <HAL_InitTick+0x5c>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	e000      	b.n	8001424 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000018 	.word	0x20000018
 8001430:	20000020 	.word	0x20000020
 8001434:	2000001c 	.word	0x2000001c

08001438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_IncTick+0x20>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_IncTick+0x24>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4413      	add	r3, r2
 8001448:	4a04      	ldr	r2, [pc, #16]	; (800145c <HAL_IncTick+0x24>)
 800144a:	6013      	str	r3, [r2, #0]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	20000020 	.word	0x20000020
 800145c:	20000658 	.word	0x20000658

08001460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return uwTick;
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <HAL_GetTick+0x14>)
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000658 	.word	0x20000658

08001478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001480:	f7ff ffee 	bl	8001460 <HAL_GetTick>
 8001484:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001490:	d005      	beq.n	800149e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001492:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <HAL_Delay+0x44>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	461a      	mov	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4413      	add	r3, r2
 800149c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800149e:	bf00      	nop
 80014a0:	f7ff ffde 	bl	8001460 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d8f7      	bhi.n	80014a0 <HAL_Delay+0x28>
  {
  }
}
 80014b0:	bf00      	nop
 80014b2:	bf00      	nop
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000020 	.word	0x20000020

080014c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <__NVIC_SetPriorityGrouping+0x44>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014dc:	4013      	ands	r3, r2
 80014de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f2:	4a04      	ldr	r2, [pc, #16]	; (8001504 <__NVIC_SetPriorityGrouping+0x44>)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	60d3      	str	r3, [r2, #12]
}
 80014f8:	bf00      	nop
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800150c:	4b04      	ldr	r3, [pc, #16]	; (8001520 <__NVIC_GetPriorityGrouping+0x18>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	0a1b      	lsrs	r3, r3, #8
 8001512:	f003 0307 	and.w	r3, r3, #7
}
 8001516:	4618      	mov	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	2b00      	cmp	r3, #0
 8001534:	db0b      	blt.n	800154e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	f003 021f 	and.w	r2, r3, #31
 800153c:	4907      	ldr	r1, [pc, #28]	; (800155c <__NVIC_EnableIRQ+0x38>)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	095b      	lsrs	r3, r3, #5
 8001544:	2001      	movs	r0, #1
 8001546:	fa00 f202 	lsl.w	r2, r0, r2
 800154a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000e100 	.word	0xe000e100

08001560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	db0a      	blt.n	800158a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	b2da      	uxtb	r2, r3
 8001578:	490c      	ldr	r1, [pc, #48]	; (80015ac <__NVIC_SetPriority+0x4c>)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	0112      	lsls	r2, r2, #4
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	440b      	add	r3, r1
 8001584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001588:	e00a      	b.n	80015a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4908      	ldr	r1, [pc, #32]	; (80015b0 <__NVIC_SetPriority+0x50>)
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	3b04      	subs	r3, #4
 8001598:	0112      	lsls	r2, r2, #4
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	440b      	add	r3, r1
 800159e:	761a      	strb	r2, [r3, #24]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000e100 	.word	0xe000e100
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b089      	sub	sp, #36	; 0x24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f1c3 0307 	rsb	r3, r3, #7
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	bf28      	it	cs
 80015d2:	2304      	movcs	r3, #4
 80015d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3304      	adds	r3, #4
 80015da:	2b06      	cmp	r3, #6
 80015dc:	d902      	bls.n	80015e4 <NVIC_EncodePriority+0x30>
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3b03      	subs	r3, #3
 80015e2:	e000      	b.n	80015e6 <NVIC_EncodePriority+0x32>
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43da      	mvns	r2, r3
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	401a      	ands	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	fa01 f303 	lsl.w	r3, r1, r3
 8001606:	43d9      	mvns	r1, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	4313      	orrs	r3, r2
         );
}
 800160e:	4618      	mov	r0, r3
 8001610:	3724      	adds	r7, #36	; 0x24
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
	...

0800161c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3b01      	subs	r3, #1
 8001628:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800162c:	d301      	bcc.n	8001632 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800162e:	2301      	movs	r3, #1
 8001630:	e00f      	b.n	8001652 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001632:	4a0a      	ldr	r2, [pc, #40]	; (800165c <SysTick_Config+0x40>)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3b01      	subs	r3, #1
 8001638:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800163a:	210f      	movs	r1, #15
 800163c:	f04f 30ff 	mov.w	r0, #4294967295
 8001640:	f7ff ff8e 	bl	8001560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <SysTick_Config+0x40>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800164a:	4b04      	ldr	r3, [pc, #16]	; (800165c <SysTick_Config+0x40>)
 800164c:	2207      	movs	r2, #7
 800164e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	e000e010 	.word	0xe000e010

08001660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff ff29 	bl	80014c0 <__NVIC_SetPriorityGrouping>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001676:	b580      	push	{r7, lr}
 8001678:	b086      	sub	sp, #24
 800167a:	af00      	add	r7, sp, #0
 800167c:	4603      	mov	r3, r0
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
 8001682:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001688:	f7ff ff3e 	bl	8001508 <__NVIC_GetPriorityGrouping>
 800168c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	68b9      	ldr	r1, [r7, #8]
 8001692:	6978      	ldr	r0, [r7, #20]
 8001694:	f7ff ff8e 	bl	80015b4 <NVIC_EncodePriority>
 8001698:	4602      	mov	r2, r0
 800169a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169e:	4611      	mov	r1, r2
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff5d 	bl	8001560 <__NVIC_SetPriority>
}
 80016a6:	bf00      	nop
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	4603      	mov	r3, r0
 80016b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff31 	bl	8001524 <__NVIC_EnableIRQ>
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff ffa2 	bl	800161c <SysTick_Config>
 80016d8:	4603      	mov	r3, r0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b089      	sub	sp, #36	; 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
 80016fe:	e16b      	b.n	80019d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001700:	2201      	movs	r2, #1
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	429a      	cmp	r2, r3
 800171a:	f040 815a 	bne.w	80019d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	2b01      	cmp	r3, #1
 8001728:	d005      	beq.n	8001736 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001732:	2b02      	cmp	r3, #2
 8001734:	d130      	bne.n	8001798 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	2203      	movs	r2, #3
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	68da      	ldr	r2, [r3, #12]
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800176c:	2201      	movs	r2, #1
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	091b      	lsrs	r3, r3, #4
 8001782:	f003 0201 	and.w	r2, r3, #1
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	d017      	beq.n	80017d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	2203      	movs	r2, #3
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d123      	bne.n	8001828 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	08da      	lsrs	r2, r3, #3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3208      	adds	r2, #8
 80017e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	220f      	movs	r2, #15
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	691a      	ldr	r2, [r3, #16]
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	08da      	lsrs	r2, r3, #3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3208      	adds	r2, #8
 8001822:	69b9      	ldr	r1, [r7, #24]
 8001824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	2203      	movs	r2, #3
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0203 	and.w	r2, r3, #3
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 80b4 	beq.w	80019d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	4b60      	ldr	r3, [pc, #384]	; (80019f0 <HAL_GPIO_Init+0x30c>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	4a5f      	ldr	r2, [pc, #380]	; (80019f0 <HAL_GPIO_Init+0x30c>)
 8001874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001878:	6453      	str	r3, [r2, #68]	; 0x44
 800187a:	4b5d      	ldr	r3, [pc, #372]	; (80019f0 <HAL_GPIO_Init+0x30c>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001886:	4a5b      	ldr	r2, [pc, #364]	; (80019f4 <HAL_GPIO_Init+0x310>)
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	089b      	lsrs	r3, r3, #2
 800188c:	3302      	adds	r3, #2
 800188e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	220f      	movs	r2, #15
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a52      	ldr	r2, [pc, #328]	; (80019f8 <HAL_GPIO_Init+0x314>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d02b      	beq.n	800190a <HAL_GPIO_Init+0x226>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a51      	ldr	r2, [pc, #324]	; (80019fc <HAL_GPIO_Init+0x318>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d025      	beq.n	8001906 <HAL_GPIO_Init+0x222>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a50      	ldr	r2, [pc, #320]	; (8001a00 <HAL_GPIO_Init+0x31c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d01f      	beq.n	8001902 <HAL_GPIO_Init+0x21e>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a4f      	ldr	r2, [pc, #316]	; (8001a04 <HAL_GPIO_Init+0x320>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d019      	beq.n	80018fe <HAL_GPIO_Init+0x21a>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a4e      	ldr	r2, [pc, #312]	; (8001a08 <HAL_GPIO_Init+0x324>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d013      	beq.n	80018fa <HAL_GPIO_Init+0x216>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a4d      	ldr	r2, [pc, #308]	; (8001a0c <HAL_GPIO_Init+0x328>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d00d      	beq.n	80018f6 <HAL_GPIO_Init+0x212>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a4c      	ldr	r2, [pc, #304]	; (8001a10 <HAL_GPIO_Init+0x32c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d007      	beq.n	80018f2 <HAL_GPIO_Init+0x20e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4b      	ldr	r2, [pc, #300]	; (8001a14 <HAL_GPIO_Init+0x330>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d101      	bne.n	80018ee <HAL_GPIO_Init+0x20a>
 80018ea:	2307      	movs	r3, #7
 80018ec:	e00e      	b.n	800190c <HAL_GPIO_Init+0x228>
 80018ee:	2308      	movs	r3, #8
 80018f0:	e00c      	b.n	800190c <HAL_GPIO_Init+0x228>
 80018f2:	2306      	movs	r3, #6
 80018f4:	e00a      	b.n	800190c <HAL_GPIO_Init+0x228>
 80018f6:	2305      	movs	r3, #5
 80018f8:	e008      	b.n	800190c <HAL_GPIO_Init+0x228>
 80018fa:	2304      	movs	r3, #4
 80018fc:	e006      	b.n	800190c <HAL_GPIO_Init+0x228>
 80018fe:	2303      	movs	r3, #3
 8001900:	e004      	b.n	800190c <HAL_GPIO_Init+0x228>
 8001902:	2302      	movs	r3, #2
 8001904:	e002      	b.n	800190c <HAL_GPIO_Init+0x228>
 8001906:	2301      	movs	r3, #1
 8001908:	e000      	b.n	800190c <HAL_GPIO_Init+0x228>
 800190a:	2300      	movs	r3, #0
 800190c:	69fa      	ldr	r2, [r7, #28]
 800190e:	f002 0203 	and.w	r2, r2, #3
 8001912:	0092      	lsls	r2, r2, #2
 8001914:	4093      	lsls	r3, r2
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4313      	orrs	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800191c:	4935      	ldr	r1, [pc, #212]	; (80019f4 <HAL_GPIO_Init+0x310>)
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	089b      	lsrs	r3, r3, #2
 8001922:	3302      	adds	r3, #2
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800192a:	4b3b      	ldr	r3, [pc, #236]	; (8001a18 <HAL_GPIO_Init+0x334>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800194e:	4a32      	ldr	r2, [pc, #200]	; (8001a18 <HAL_GPIO_Init+0x334>)
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001954:	4b30      	ldr	r3, [pc, #192]	; (8001a18 <HAL_GPIO_Init+0x334>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001978:	4a27      	ldr	r2, [pc, #156]	; (8001a18 <HAL_GPIO_Init+0x334>)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800197e:	4b26      	ldr	r3, [pc, #152]	; (8001a18 <HAL_GPIO_Init+0x334>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	43db      	mvns	r3, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4013      	ands	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019a2:	4a1d      	ldr	r2, [pc, #116]	; (8001a18 <HAL_GPIO_Init+0x334>)
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019a8:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <HAL_GPIO_Init+0x334>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019cc:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <HAL_GPIO_Init+0x334>)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3301      	adds	r3, #1
 80019d6:	61fb      	str	r3, [r7, #28]
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	2b0f      	cmp	r3, #15
 80019dc:	f67f ae90 	bls.w	8001700 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	3724      	adds	r7, #36	; 0x24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40013800 	.word	0x40013800
 80019f8:	40020000 	.word	0x40020000
 80019fc:	40020400 	.word	0x40020400
 8001a00:	40020800 	.word	0x40020800
 8001a04:	40020c00 	.word	0x40020c00
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40021400 	.word	0x40021400
 8001a10:	40021800 	.word	0x40021800
 8001a14:	40021c00 	.word	0x40021c00
 8001a18:	40013c00 	.word	0x40013c00

08001a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	807b      	strh	r3, [r7, #2]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a2c:	787b      	ldrb	r3, [r7, #1]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a32:	887a      	ldrh	r2, [r7, #2]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a38:	e003      	b.n	8001a42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a3a:	887b      	ldrh	r3, [r7, #2]
 8001a3c:	041a      	lsls	r2, r3, #16
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	619a      	str	r2, [r3, #24]
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001a4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a50:	b08f      	sub	sp, #60	; 0x3c
 8001a52:	af0a      	add	r7, sp, #40	; 0x28
 8001a54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e054      	b.n	8001b0a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d106      	bne.n	8001a80 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f006 fdb0 	bl	80085e0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2203      	movs	r2, #3
 8001a84:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d102      	bne.n	8001a9a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f003 ff06 	bl	80058b0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	603b      	str	r3, [r7, #0]
 8001aaa:	687e      	ldr	r6, [r7, #4]
 8001aac:	466d      	mov	r5, sp
 8001aae:	f106 0410 	add.w	r4, r6, #16
 8001ab2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001abe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ac2:	1d33      	adds	r3, r6, #4
 8001ac4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ac6:	6838      	ldr	r0, [r7, #0]
 8001ac8:	f003 fe80 	bl	80057cc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f003 fefd 	bl	80058d2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	603b      	str	r3, [r7, #0]
 8001ade:	687e      	ldr	r6, [r7, #4]
 8001ae0:	466d      	mov	r5, sp
 8001ae2:	f106 0410 	add.w	r4, r6, #16
 8001ae6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ae8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001af2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001af6:	1d33      	adds	r3, r6, #4
 8001af8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001afa:	6838      	ldr	r0, [r7, #0]
 8001afc:	f004 f864 	bl	8005bc8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b12 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001b12:	b590      	push	{r4, r7, lr}
 8001b14:	b089      	sub	sp, #36	; 0x24
 8001b16:	af04      	add	r7, sp, #16
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	4608      	mov	r0, r1
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	461a      	mov	r2, r3
 8001b20:	4603      	mov	r3, r0
 8001b22:	70fb      	strb	r3, [r7, #3]
 8001b24:	460b      	mov	r3, r1
 8001b26:	70bb      	strb	r3, [r7, #2]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d101      	bne.n	8001b3a <HAL_HCD_HC_Init+0x28>
 8001b36:	2302      	movs	r3, #2
 8001b38:	e076      	b.n	8001c28 <HAL_HCD_HC_Init+0x116>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	212c      	movs	r1, #44	; 0x2c
 8001b48:	fb01 f303 	mul.w	r3, r1, r3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	333d      	adds	r3, #61	; 0x3d
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001b54:	78fb      	ldrb	r3, [r7, #3]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	212c      	movs	r1, #44	; 0x2c
 8001b5a:	fb01 f303 	mul.w	r3, r1, r3
 8001b5e:	4413      	add	r3, r2
 8001b60:	3338      	adds	r3, #56	; 0x38
 8001b62:	787a      	ldrb	r2, [r7, #1]
 8001b64:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001b66:	78fb      	ldrb	r3, [r7, #3]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	212c      	movs	r1, #44	; 0x2c
 8001b6c:	fb01 f303 	mul.w	r3, r1, r3
 8001b70:	4413      	add	r3, r2
 8001b72:	3340      	adds	r3, #64	; 0x40
 8001b74:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001b76:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	212c      	movs	r1, #44	; 0x2c
 8001b7e:	fb01 f303 	mul.w	r3, r1, r3
 8001b82:	4413      	add	r3, r2
 8001b84:	3339      	adds	r3, #57	; 0x39
 8001b86:	78fa      	ldrb	r2, [r7, #3]
 8001b88:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001b8a:	78fb      	ldrb	r3, [r7, #3]
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	212c      	movs	r1, #44	; 0x2c
 8001b90:	fb01 f303 	mul.w	r3, r1, r3
 8001b94:	4413      	add	r3, r2
 8001b96:	333f      	adds	r3, #63	; 0x3f
 8001b98:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001b9c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001b9e:	78fb      	ldrb	r3, [r7, #3]
 8001ba0:	78ba      	ldrb	r2, [r7, #2]
 8001ba2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ba6:	b2d0      	uxtb	r0, r2
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	212c      	movs	r1, #44	; 0x2c
 8001bac:	fb01 f303 	mul.w	r3, r1, r3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	333a      	adds	r3, #58	; 0x3a
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001bb8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	da09      	bge.n	8001bd4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	212c      	movs	r1, #44	; 0x2c
 8001bc6:	fb01 f303 	mul.w	r3, r1, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	333b      	adds	r3, #59	; 0x3b
 8001bce:	2201      	movs	r2, #1
 8001bd0:	701a      	strb	r2, [r3, #0]
 8001bd2:	e008      	b.n	8001be6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	212c      	movs	r1, #44	; 0x2c
 8001bda:	fb01 f303 	mul.w	r3, r1, r3
 8001bde:	4413      	add	r3, r2
 8001be0:	333b      	adds	r3, #59	; 0x3b
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	212c      	movs	r1, #44	; 0x2c
 8001bec:	fb01 f303 	mul.w	r3, r1, r3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	333c      	adds	r3, #60	; 0x3c
 8001bf4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001bf8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6818      	ldr	r0, [r3, #0]
 8001bfe:	787c      	ldrb	r4, [r7, #1]
 8001c00:	78ba      	ldrb	r2, [r7, #2]
 8001c02:	78f9      	ldrb	r1, [r7, #3]
 8001c04:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c06:	9302      	str	r3, [sp, #8]
 8001c08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c0c:	9301      	str	r3, [sp, #4]
 8001c0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	4623      	mov	r3, r4
 8001c16:	f004 f951 	bl	8005ebc <USB_HC_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd90      	pop	{r4, r7, pc}

08001c30 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d101      	bne.n	8001c4e <HAL_HCD_HC_Halt+0x1e>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e00f      	b.n	8001c6e <HAL_HCD_HC_Halt+0x3e>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	78fa      	ldrb	r2, [r7, #3]
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f004 fb8d 	bl	800637e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	4608      	mov	r0, r1
 8001c82:	4611      	mov	r1, r2
 8001c84:	461a      	mov	r2, r3
 8001c86:	4603      	mov	r3, r0
 8001c88:	70fb      	strb	r3, [r7, #3]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	70bb      	strb	r3, [r7, #2]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001c92:	78fb      	ldrb	r3, [r7, #3]
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	212c      	movs	r1, #44	; 0x2c
 8001c98:	fb01 f303 	mul.w	r3, r1, r3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	333b      	adds	r3, #59	; 0x3b
 8001ca0:	78ba      	ldrb	r2, [r7, #2]
 8001ca2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001ca4:	78fb      	ldrb	r3, [r7, #3]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	212c      	movs	r1, #44	; 0x2c
 8001caa:	fb01 f303 	mul.w	r3, r1, r3
 8001cae:	4413      	add	r3, r2
 8001cb0:	333f      	adds	r3, #63	; 0x3f
 8001cb2:	787a      	ldrb	r2, [r7, #1]
 8001cb4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001cb6:	7c3b      	ldrb	r3, [r7, #16]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d112      	bne.n	8001ce2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	212c      	movs	r1, #44	; 0x2c
 8001cc2:	fb01 f303 	mul.w	r3, r1, r3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3342      	adds	r3, #66	; 0x42
 8001cca:	2203      	movs	r2, #3
 8001ccc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001cce:	78fb      	ldrb	r3, [r7, #3]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	212c      	movs	r1, #44	; 0x2c
 8001cd4:	fb01 f303 	mul.w	r3, r1, r3
 8001cd8:	4413      	add	r3, r2
 8001cda:	333d      	adds	r3, #61	; 0x3d
 8001cdc:	7f3a      	ldrb	r2, [r7, #28]
 8001cde:	701a      	strb	r2, [r3, #0]
 8001ce0:	e008      	b.n	8001cf4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ce2:	78fb      	ldrb	r3, [r7, #3]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	212c      	movs	r1, #44	; 0x2c
 8001ce8:	fb01 f303 	mul.w	r3, r1, r3
 8001cec:	4413      	add	r3, r2
 8001cee:	3342      	adds	r3, #66	; 0x42
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001cf4:	787b      	ldrb	r3, [r7, #1]
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	f200 80c6 	bhi.w	8001e88 <HAL_HCD_HC_SubmitRequest+0x210>
 8001cfc:	a201      	add	r2, pc, #4	; (adr r2, 8001d04 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d02:	bf00      	nop
 8001d04:	08001d15 	.word	0x08001d15
 8001d08:	08001e75 	.word	0x08001e75
 8001d0c:	08001d79 	.word	0x08001d79
 8001d10:	08001df7 	.word	0x08001df7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001d14:	7c3b      	ldrb	r3, [r7, #16]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	f040 80b8 	bne.w	8001e8c <HAL_HCD_HC_SubmitRequest+0x214>
 8001d1c:	78bb      	ldrb	r3, [r7, #2]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f040 80b4 	bne.w	8001e8c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001d24:	8b3b      	ldrh	r3, [r7, #24]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d108      	bne.n	8001d3c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	212c      	movs	r1, #44	; 0x2c
 8001d30:	fb01 f303 	mul.w	r3, r1, r3
 8001d34:	4413      	add	r3, r2
 8001d36:	3355      	adds	r3, #85	; 0x55
 8001d38:	2201      	movs	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	212c      	movs	r1, #44	; 0x2c
 8001d42:	fb01 f303 	mul.w	r3, r1, r3
 8001d46:	4413      	add	r3, r2
 8001d48:	3355      	adds	r3, #85	; 0x55
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d109      	bne.n	8001d64 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	212c      	movs	r1, #44	; 0x2c
 8001d56:	fb01 f303 	mul.w	r3, r1, r3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3342      	adds	r3, #66	; 0x42
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d62:	e093      	b.n	8001e8c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	212c      	movs	r1, #44	; 0x2c
 8001d6a:	fb01 f303 	mul.w	r3, r1, r3
 8001d6e:	4413      	add	r3, r2
 8001d70:	3342      	adds	r3, #66	; 0x42
 8001d72:	2202      	movs	r2, #2
 8001d74:	701a      	strb	r2, [r3, #0]
      break;
 8001d76:	e089      	b.n	8001e8c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001d78:	78bb      	ldrb	r3, [r7, #2]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d11d      	bne.n	8001dba <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d7e:	78fb      	ldrb	r3, [r7, #3]
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	212c      	movs	r1, #44	; 0x2c
 8001d84:	fb01 f303 	mul.w	r3, r1, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	3355      	adds	r3, #85	; 0x55
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d109      	bne.n	8001da6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d92:	78fb      	ldrb	r3, [r7, #3]
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	212c      	movs	r1, #44	; 0x2c
 8001d98:	fb01 f303 	mul.w	r3, r1, r3
 8001d9c:	4413      	add	r3, r2
 8001d9e:	3342      	adds	r3, #66	; 0x42
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001da4:	e073      	b.n	8001e8e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001da6:	78fb      	ldrb	r3, [r7, #3]
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	212c      	movs	r1, #44	; 0x2c
 8001dac:	fb01 f303 	mul.w	r3, r1, r3
 8001db0:	4413      	add	r3, r2
 8001db2:	3342      	adds	r3, #66	; 0x42
 8001db4:	2202      	movs	r2, #2
 8001db6:	701a      	strb	r2, [r3, #0]
      break;
 8001db8:	e069      	b.n	8001e8e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001dba:	78fb      	ldrb	r3, [r7, #3]
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	212c      	movs	r1, #44	; 0x2c
 8001dc0:	fb01 f303 	mul.w	r3, r1, r3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3354      	adds	r3, #84	; 0x54
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d109      	bne.n	8001de2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	212c      	movs	r1, #44	; 0x2c
 8001dd4:	fb01 f303 	mul.w	r3, r1, r3
 8001dd8:	4413      	add	r3, r2
 8001dda:	3342      	adds	r3, #66	; 0x42
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
      break;
 8001de0:	e055      	b.n	8001e8e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001de2:	78fb      	ldrb	r3, [r7, #3]
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	212c      	movs	r1, #44	; 0x2c
 8001de8:	fb01 f303 	mul.w	r3, r1, r3
 8001dec:	4413      	add	r3, r2
 8001dee:	3342      	adds	r3, #66	; 0x42
 8001df0:	2202      	movs	r2, #2
 8001df2:	701a      	strb	r2, [r3, #0]
      break;
 8001df4:	e04b      	b.n	8001e8e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001df6:	78bb      	ldrb	r3, [r7, #2]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d11d      	bne.n	8001e38 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001dfc:	78fb      	ldrb	r3, [r7, #3]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	212c      	movs	r1, #44	; 0x2c
 8001e02:	fb01 f303 	mul.w	r3, r1, r3
 8001e06:	4413      	add	r3, r2
 8001e08:	3355      	adds	r3, #85	; 0x55
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d109      	bne.n	8001e24 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	212c      	movs	r1, #44	; 0x2c
 8001e16:	fb01 f303 	mul.w	r3, r1, r3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3342      	adds	r3, #66	; 0x42
 8001e1e:	2200      	movs	r2, #0
 8001e20:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001e22:	e034      	b.n	8001e8e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e24:	78fb      	ldrb	r3, [r7, #3]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	212c      	movs	r1, #44	; 0x2c
 8001e2a:	fb01 f303 	mul.w	r3, r1, r3
 8001e2e:	4413      	add	r3, r2
 8001e30:	3342      	adds	r3, #66	; 0x42
 8001e32:	2202      	movs	r2, #2
 8001e34:	701a      	strb	r2, [r3, #0]
      break;
 8001e36:	e02a      	b.n	8001e8e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e38:	78fb      	ldrb	r3, [r7, #3]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	212c      	movs	r1, #44	; 0x2c
 8001e3e:	fb01 f303 	mul.w	r3, r1, r3
 8001e42:	4413      	add	r3, r2
 8001e44:	3354      	adds	r3, #84	; 0x54
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d109      	bne.n	8001e60 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	212c      	movs	r1, #44	; 0x2c
 8001e52:	fb01 f303 	mul.w	r3, r1, r3
 8001e56:	4413      	add	r3, r2
 8001e58:	3342      	adds	r3, #66	; 0x42
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	701a      	strb	r2, [r3, #0]
      break;
 8001e5e:	e016      	b.n	8001e8e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	212c      	movs	r1, #44	; 0x2c
 8001e66:	fb01 f303 	mul.w	r3, r1, r3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3342      	adds	r3, #66	; 0x42
 8001e6e:	2202      	movs	r2, #2
 8001e70:	701a      	strb	r2, [r3, #0]
      break;
 8001e72:	e00c      	b.n	8001e8e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e74:	78fb      	ldrb	r3, [r7, #3]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	212c      	movs	r1, #44	; 0x2c
 8001e7a:	fb01 f303 	mul.w	r3, r1, r3
 8001e7e:	4413      	add	r3, r2
 8001e80:	3342      	adds	r3, #66	; 0x42
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]
      break;
 8001e86:	e002      	b.n	8001e8e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001e88:	bf00      	nop
 8001e8a:	e000      	b.n	8001e8e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001e8c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	212c      	movs	r1, #44	; 0x2c
 8001e94:	fb01 f303 	mul.w	r3, r1, r3
 8001e98:	4413      	add	r3, r2
 8001e9a:	3344      	adds	r3, #68	; 0x44
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	8b3a      	ldrh	r2, [r7, #24]
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	202c      	movs	r0, #44	; 0x2c
 8001ea8:	fb00 f303 	mul.w	r3, r0, r3
 8001eac:	440b      	add	r3, r1
 8001eae:	334c      	adds	r3, #76	; 0x4c
 8001eb0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001eb2:	78fb      	ldrb	r3, [r7, #3]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	212c      	movs	r1, #44	; 0x2c
 8001eb8:	fb01 f303 	mul.w	r3, r1, r3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3360      	adds	r3, #96	; 0x60
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001ec4:	78fb      	ldrb	r3, [r7, #3]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	212c      	movs	r1, #44	; 0x2c
 8001eca:	fb01 f303 	mul.w	r3, r1, r3
 8001ece:	4413      	add	r3, r2
 8001ed0:	3350      	adds	r3, #80	; 0x50
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ed6:	78fb      	ldrb	r3, [r7, #3]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	212c      	movs	r1, #44	; 0x2c
 8001edc:	fb01 f303 	mul.w	r3, r1, r3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3339      	adds	r3, #57	; 0x39
 8001ee4:	78fa      	ldrb	r2, [r7, #3]
 8001ee6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001ee8:	78fb      	ldrb	r3, [r7, #3]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	212c      	movs	r1, #44	; 0x2c
 8001eee:	fb01 f303 	mul.w	r3, r1, r3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3361      	adds	r3, #97	; 0x61
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	78fb      	ldrb	r3, [r7, #3]
 8001f00:	222c      	movs	r2, #44	; 0x2c
 8001f02:	fb02 f303 	mul.w	r3, r2, r3
 8001f06:	3338      	adds	r3, #56	; 0x38
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	18d1      	adds	r1, r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	f004 f8e0 	bl	80060d8 <USB_HC_StartXfer>
 8001f18:	4603      	mov	r3, r0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop

08001f24 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f003 fe03 	bl	8005b46 <USB_GetMode>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	f040 80f6 	bne.w	8002134 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f003 fde7 	bl	8005b20 <USB_ReadInterrupts>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 80ec 	beq.w	8002132 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f003 fdde 	bl	8005b20 <USB_ReadInterrupts>
 8001f64:	4603      	mov	r3, r0
 8001f66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f6e:	d104      	bne.n	8001f7a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f78:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f003 fdce 	bl	8005b20 <USB_ReadInterrupts>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f8e:	d104      	bne.n	8001f9a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f98:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f003 fdbe 	bl	8005b20 <USB_ReadInterrupts>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001faa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001fae:	d104      	bne.n	8001fba <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fb8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f003 fdae 	bl	8005b20 <USB_ReadInterrupts>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d103      	bne.n	8001fd6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f003 fda0 	bl	8005b20 <USB_ReadInterrupts>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fe6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fea:	d11c      	bne.n	8002026 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ff4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10f      	bne.n	8002026 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002006:	2110      	movs	r1, #16
 8002008:	6938      	ldr	r0, [r7, #16]
 800200a:	f003 fcaf 	bl	800596c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800200e:	6938      	ldr	r0, [r7, #16]
 8002010:	f003 fcd0 	bl	80059b4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2101      	movs	r1, #1
 800201a:	4618      	mov	r0, r3
 800201c:	f003 fe88 	bl	8005d30 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f006 fb5b 	bl	80086dc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f003 fd78 	bl	8005b20 <USB_ReadInterrupts>
 8002030:	4603      	mov	r3, r0
 8002032:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002036:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800203a:	d102      	bne.n	8002042 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f001 fa03 	bl	8003448 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f003 fd6a 	bl	8005b20 <USB_ReadInterrupts>
 800204c:	4603      	mov	r3, r0
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b08      	cmp	r3, #8
 8002054:	d106      	bne.n	8002064 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f006 fb24 	bl	80086a4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2208      	movs	r2, #8
 8002062:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f003 fd59 	bl	8005b20 <USB_ReadInterrupts>
 800206e:	4603      	mov	r3, r0
 8002070:	f003 0310 	and.w	r3, r3, #16
 8002074:	2b10      	cmp	r3, #16
 8002076:	d101      	bne.n	800207c <HAL_HCD_IRQHandler+0x158>
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <HAL_HCD_IRQHandler+0x15a>
 800207c:	2300      	movs	r3, #0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d012      	beq.n	80020a8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	699a      	ldr	r2, [r3, #24]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0210 	bic.w	r2, r2, #16
 8002090:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f001 f906 	bl	80032a4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0210 	orr.w	r2, r2, #16
 80020a6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f003 fd37 	bl	8005b20 <USB_ReadInterrupts>
 80020b2:	4603      	mov	r3, r0
 80020b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020bc:	d13a      	bne.n	8002134 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f004 f94a 	bl	800635c <USB_HC_ReadInterrupt>
 80020c8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	e025      	b.n	800211c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	fa22 f303 	lsr.w	r3, r2, r3
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d018      	beq.n	8002116 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	015a      	lsls	r2, r3, #5
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020fa:	d106      	bne.n	800210a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	4619      	mov	r1, r3
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f8ab 	bl	800225e <HCD_HC_IN_IRQHandler>
 8002108:	e005      	b.n	8002116 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	b2db      	uxtb	r3, r3
 800210e:	4619      	mov	r1, r3
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 fcc6 	bl	8002aa2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	3301      	adds	r3, #1
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	429a      	cmp	r2, r3
 8002124:	d3d4      	bcc.n	80020d0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800212e:	615a      	str	r2, [r3, #20]
 8002130:	e000      	b.n	8002134 <HAL_HCD_IRQHandler+0x210>
      return;
 8002132:	bf00      	nop
    }
  }
}
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002148:	2b01      	cmp	r3, #1
 800214a:	d101      	bne.n	8002150 <HAL_HCD_Start+0x16>
 800214c:	2302      	movs	r3, #2
 800214e:	e013      	b.n	8002178 <HAL_HCD_Start+0x3e>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2101      	movs	r1, #1
 800215e:	4618      	mov	r0, r3
 8002160:	f003 fe4a 	bl	8005df8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f003 fb90 	bl	800588e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <HAL_HCD_Stop+0x16>
 8002192:	2302      	movs	r3, #2
 8002194:	e00d      	b.n	80021b2 <HAL_HCD_Stop+0x32>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f004 fa44 	bl	8006630 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f003 fdec 	bl	8005da4 <USB_ResetPort>
 80021cc:	4603      	mov	r3, r0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	460b      	mov	r3, r1
 80021e0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80021e2:	78fb      	ldrb	r3, [r7, #3]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	212c      	movs	r1, #44	; 0x2c
 80021e8:	fb01 f303 	mul.w	r3, r1, r3
 80021ec:	4413      	add	r3, r2
 80021ee:	3360      	adds	r3, #96	; 0x60
 80021f0:	781b      	ldrb	r3, [r3, #0]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	460b      	mov	r3, r1
 8002208:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	212c      	movs	r1, #44	; 0x2c
 8002210:	fb01 f303 	mul.w	r3, r1, r3
 8002214:	4413      	add	r3, r2
 8002216:	3350      	adds	r3, #80	; 0x50
 8002218:	681b      	ldr	r3, [r3, #0]
}
 800221a:	4618      	mov	r0, r3
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f003 fe30 	bl	8005e98 <USB_GetCurrentFrame>
 8002238:	4603      	mov	r3, r0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f003 fe0b 	bl	8005e6a <USB_GetHostSpeed>
 8002254:	4603      	mov	r3, r0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b086      	sub	sp, #24
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	460b      	mov	r3, r1
 8002268:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	015a      	lsls	r2, r3, #5
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4413      	add	r3, r2
 8002280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 0304 	and.w	r3, r3, #4
 800228a:	2b04      	cmp	r3, #4
 800228c:	d119      	bne.n	80022c2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4413      	add	r3, r2
 8002296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229a:	461a      	mov	r2, r3
 800229c:	2304      	movs	r3, #4
 800229e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	015a      	lsls	r2, r3, #5
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4413      	add	r3, r2
 80022a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	0151      	lsls	r1, r2, #5
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	440a      	add	r2, r1
 80022b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022ba:	f043 0302 	orr.w	r3, r3, #2
 80022be:	60d3      	str	r3, [r2, #12]
 80022c0:	e101      	b.n	80024c6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	015a      	lsls	r2, r3, #5
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022d8:	d12b      	bne.n	8002332 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	015a      	lsls	r2, r3, #5
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e6:	461a      	mov	r2, r3
 80022e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	212c      	movs	r1, #44	; 0x2c
 80022f4:	fb01 f303 	mul.w	r3, r1, r3
 80022f8:	4413      	add	r3, r2
 80022fa:	3361      	adds	r3, #97	; 0x61
 80022fc:	2207      	movs	r2, #7
 80022fe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	015a      	lsls	r2, r3, #5
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4413      	add	r3, r2
 8002308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	0151      	lsls	r1, r2, #5
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	440a      	add	r2, r1
 8002316:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800231a:	f043 0302 	orr.w	r3, r3, #2
 800231e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	4611      	mov	r1, r2
 800232a:	4618      	mov	r0, r3
 800232c:	f004 f827 	bl	800637e <USB_HC_Halt>
 8002330:	e0c9      	b.n	80024c6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4413      	add	r3, r2
 800233a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 0320 	and.w	r3, r3, #32
 8002344:	2b20      	cmp	r3, #32
 8002346:	d109      	bne.n	800235c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4413      	add	r3, r2
 8002350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002354:	461a      	mov	r2, r3
 8002356:	2320      	movs	r3, #32
 8002358:	6093      	str	r3, [r2, #8]
 800235a:	e0b4      	b.n	80024c6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	015a      	lsls	r2, r3, #5
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4413      	add	r3, r2
 8002364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b08      	cmp	r3, #8
 8002370:	d133      	bne.n	80023da <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	015a      	lsls	r2, r3, #5
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4413      	add	r3, r2
 800237a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	0151      	lsls	r1, r2, #5
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	440a      	add	r2, r1
 8002388:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800238c:	f043 0302 	orr.w	r3, r3, #2
 8002390:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	212c      	movs	r1, #44	; 0x2c
 8002398:	fb01 f303 	mul.w	r3, r1, r3
 800239c:	4413      	add	r3, r2
 800239e:	3361      	adds	r3, #97	; 0x61
 80023a0:	2205      	movs	r2, #5
 80023a2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	015a      	lsls	r2, r3, #5
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b0:	461a      	mov	r2, r3
 80023b2:	2310      	movs	r3, #16
 80023b4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	015a      	lsls	r2, r3, #5
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4413      	add	r3, r2
 80023be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c2:	461a      	mov	r2, r3
 80023c4:	2308      	movs	r3, #8
 80023c6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	4611      	mov	r1, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f003 ffd3 	bl	800637e <USB_HC_Halt>
 80023d8:	e075      	b.n	80024c6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	015a      	lsls	r2, r3, #5
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4413      	add	r3, r2
 80023e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023f0:	d134      	bne.n	800245c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	015a      	lsls	r2, r3, #5
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4413      	add	r3, r2
 80023fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	0151      	lsls	r1, r2, #5
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	440a      	add	r2, r1
 8002408:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800240c:	f043 0302 	orr.w	r3, r3, #2
 8002410:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	212c      	movs	r1, #44	; 0x2c
 8002418:	fb01 f303 	mul.w	r3, r1, r3
 800241c:	4413      	add	r3, r2
 800241e:	3361      	adds	r3, #97	; 0x61
 8002420:	2208      	movs	r2, #8
 8002422:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	015a      	lsls	r2, r3, #5
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	4413      	add	r3, r2
 800242c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002430:	461a      	mov	r2, r3
 8002432:	2310      	movs	r3, #16
 8002434:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	015a      	lsls	r2, r3, #5
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4413      	add	r3, r2
 800243e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002442:	461a      	mov	r2, r3
 8002444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002448:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f003 ff92 	bl	800637e <USB_HC_Halt>
 800245a:	e034      	b.n	80024c6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	015a      	lsls	r2, r3, #5
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4413      	add	r3, r2
 8002464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246e:	2b80      	cmp	r3, #128	; 0x80
 8002470:	d129      	bne.n	80024c6 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	015a      	lsls	r2, r3, #5
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4413      	add	r3, r2
 800247a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	0151      	lsls	r1, r2, #5
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	440a      	add	r2, r1
 8002488:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800248c:	f043 0302 	orr.w	r3, r3, #2
 8002490:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	212c      	movs	r1, #44	; 0x2c
 8002498:	fb01 f303 	mul.w	r3, r1, r3
 800249c:	4413      	add	r3, r2
 800249e:	3361      	adds	r3, #97	; 0x61
 80024a0:	2206      	movs	r2, #6
 80024a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f003 ff65 	bl	800637e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	015a      	lsls	r2, r3, #5
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4413      	add	r3, r2
 80024bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c0:	461a      	mov	r2, r3
 80024c2:	2380      	movs	r3, #128	; 0x80
 80024c4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	015a      	lsls	r2, r3, #5
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024dc:	d122      	bne.n	8002524 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	015a      	lsls	r2, r3, #5
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	0151      	lsls	r1, r2, #5
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	440a      	add	r2, r1
 80024f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024f8:	f043 0302 	orr.w	r3, r3, #2
 80024fc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	4611      	mov	r1, r2
 8002508:	4618      	mov	r0, r3
 800250a:	f003 ff38 	bl	800637e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	015a      	lsls	r2, r3, #5
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4413      	add	r3, r2
 8002516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251a:	461a      	mov	r2, r3
 800251c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002520:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002522:	e2ba      	b.n	8002a9a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	015a      	lsls	r2, r3, #5
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4413      	add	r3, r2
 800252c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b01      	cmp	r3, #1
 8002538:	f040 811b 	bne.w	8002772 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d019      	beq.n	8002578 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	212c      	movs	r1, #44	; 0x2c
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	4413      	add	r3, r2
 8002550:	3348      	adds	r3, #72	; 0x48
 8002552:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	0159      	lsls	r1, r3, #5
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	440b      	add	r3, r1
 800255c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002566:	1ad2      	subs	r2, r2, r3
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	202c      	movs	r0, #44	; 0x2c
 800256e:	fb00 f303 	mul.w	r3, r0, r3
 8002572:	440b      	add	r3, r1
 8002574:	3350      	adds	r3, #80	; 0x50
 8002576:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	212c      	movs	r1, #44	; 0x2c
 800257e:	fb01 f303 	mul.w	r3, r1, r3
 8002582:	4413      	add	r3, r2
 8002584:	3361      	adds	r3, #97	; 0x61
 8002586:	2201      	movs	r2, #1
 8002588:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	212c      	movs	r1, #44	; 0x2c
 8002590:	fb01 f303 	mul.w	r3, r1, r3
 8002594:	4413      	add	r3, r2
 8002596:	335c      	adds	r3, #92	; 0x5c
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	015a      	lsls	r2, r3, #5
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a8:	461a      	mov	r2, r3
 80025aa:	2301      	movs	r3, #1
 80025ac:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	212c      	movs	r1, #44	; 0x2c
 80025b4:	fb01 f303 	mul.w	r3, r1, r3
 80025b8:	4413      	add	r3, r2
 80025ba:	333f      	adds	r3, #63	; 0x3f
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d009      	beq.n	80025d6 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	212c      	movs	r1, #44	; 0x2c
 80025c8:	fb01 f303 	mul.w	r3, r1, r3
 80025cc:	4413      	add	r3, r2
 80025ce:	333f      	adds	r3, #63	; 0x3f
 80025d0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d121      	bne.n	800261a <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	015a      	lsls	r2, r3, #5
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4413      	add	r3, r2
 80025de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	0151      	lsls	r1, r2, #5
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	440a      	add	r2, r1
 80025ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025f0:	f043 0302 	orr.w	r3, r3, #2
 80025f4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	4611      	mov	r1, r2
 8002600:	4618      	mov	r0, r3
 8002602:	f003 febc 	bl	800637e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4413      	add	r3, r2
 800260e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002612:	461a      	mov	r2, r3
 8002614:	2310      	movs	r3, #16
 8002616:	6093      	str	r3, [r2, #8]
 8002618:	e066      	b.n	80026e8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	212c      	movs	r1, #44	; 0x2c
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	4413      	add	r3, r2
 8002626:	333f      	adds	r3, #63	; 0x3f
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b03      	cmp	r3, #3
 800262c:	d127      	bne.n	800267e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4413      	add	r3, r2
 8002636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	0151      	lsls	r1, r2, #5
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	440a      	add	r2, r1
 8002644:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002648:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800264c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	212c      	movs	r1, #44	; 0x2c
 8002654:	fb01 f303 	mul.w	r3, r1, r3
 8002658:	4413      	add	r3, r2
 800265a:	3360      	adds	r3, #96	; 0x60
 800265c:	2201      	movs	r2, #1
 800265e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	b2d9      	uxtb	r1, r3
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	202c      	movs	r0, #44	; 0x2c
 800266a:	fb00 f303 	mul.w	r3, r0, r3
 800266e:	4413      	add	r3, r2
 8002670:	3360      	adds	r3, #96	; 0x60
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f006 f83e 	bl	80086f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800267c:	e034      	b.n	80026e8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	212c      	movs	r1, #44	; 0x2c
 8002684:	fb01 f303 	mul.w	r3, r1, r3
 8002688:	4413      	add	r3, r2
 800268a:	333f      	adds	r3, #63	; 0x3f
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d12a      	bne.n	80026e8 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	212c      	movs	r1, #44	; 0x2c
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	4413      	add	r3, r2
 800269e:	3360      	adds	r3, #96	; 0x60
 80026a0:	2201      	movs	r2, #1
 80026a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	212c      	movs	r1, #44	; 0x2c
 80026aa:	fb01 f303 	mul.w	r3, r1, r3
 80026ae:	4413      	add	r3, r2
 80026b0:	3354      	adds	r3, #84	; 0x54
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	f083 0301 	eor.w	r3, r3, #1
 80026b8:	b2d8      	uxtb	r0, r3
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	212c      	movs	r1, #44	; 0x2c
 80026c0:	fb01 f303 	mul.w	r3, r1, r3
 80026c4:	4413      	add	r3, r2
 80026c6:	3354      	adds	r3, #84	; 0x54
 80026c8:	4602      	mov	r2, r0
 80026ca:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	b2d9      	uxtb	r1, r3
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	202c      	movs	r0, #44	; 0x2c
 80026d6:	fb00 f303 	mul.w	r3, r0, r3
 80026da:	4413      	add	r3, r2
 80026dc:	3360      	adds	r3, #96	; 0x60
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	461a      	mov	r2, r3
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f006 f808 	bl	80086f8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d12b      	bne.n	8002748 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	212c      	movs	r1, #44	; 0x2c
 80026f6:	fb01 f303 	mul.w	r3, r1, r3
 80026fa:	4413      	add	r3, r2
 80026fc:	3348      	adds	r3, #72	; 0x48
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	202c      	movs	r0, #44	; 0x2c
 8002706:	fb00 f202 	mul.w	r2, r0, r2
 800270a:	440a      	add	r2, r1
 800270c:	3240      	adds	r2, #64	; 0x40
 800270e:	8812      	ldrh	r2, [r2, #0]
 8002710:	fbb3 f3f2 	udiv	r3, r3, r2
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 81be 	beq.w	8002a9a <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	212c      	movs	r1, #44	; 0x2c
 8002724:	fb01 f303 	mul.w	r3, r1, r3
 8002728:	4413      	add	r3, r2
 800272a:	3354      	adds	r3, #84	; 0x54
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	f083 0301 	eor.w	r3, r3, #1
 8002732:	b2d8      	uxtb	r0, r3
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	212c      	movs	r1, #44	; 0x2c
 800273a:	fb01 f303 	mul.w	r3, r1, r3
 800273e:	4413      	add	r3, r2
 8002740:	3354      	adds	r3, #84	; 0x54
 8002742:	4602      	mov	r2, r0
 8002744:	701a      	strb	r2, [r3, #0]
}
 8002746:	e1a8      	b.n	8002a9a <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	212c      	movs	r1, #44	; 0x2c
 800274e:	fb01 f303 	mul.w	r3, r1, r3
 8002752:	4413      	add	r3, r2
 8002754:	3354      	adds	r3, #84	; 0x54
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	f083 0301 	eor.w	r3, r3, #1
 800275c:	b2d8      	uxtb	r0, r3
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	212c      	movs	r1, #44	; 0x2c
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	4413      	add	r3, r2
 800276a:	3354      	adds	r3, #84	; 0x54
 800276c:	4602      	mov	r2, r0
 800276e:	701a      	strb	r2, [r3, #0]
}
 8002770:	e193      	b.n	8002a9a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	015a      	lsls	r2, r3, #5
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4413      	add	r3, r2
 800277a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b02      	cmp	r3, #2
 8002786:	f040 8106 	bne.w	8002996 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	015a      	lsls	r2, r3, #5
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	4413      	add	r3, r2
 8002792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	0151      	lsls	r1, r2, #5
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	440a      	add	r2, r1
 80027a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027a4:	f023 0302 	bic.w	r3, r3, #2
 80027a8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	212c      	movs	r1, #44	; 0x2c
 80027b0:	fb01 f303 	mul.w	r3, r1, r3
 80027b4:	4413      	add	r3, r2
 80027b6:	3361      	adds	r3, #97	; 0x61
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d109      	bne.n	80027d2 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	212c      	movs	r1, #44	; 0x2c
 80027c4:	fb01 f303 	mul.w	r3, r1, r3
 80027c8:	4413      	add	r3, r2
 80027ca:	3360      	adds	r3, #96	; 0x60
 80027cc:	2201      	movs	r2, #1
 80027ce:	701a      	strb	r2, [r3, #0]
 80027d0:	e0c9      	b.n	8002966 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	212c      	movs	r1, #44	; 0x2c
 80027d8:	fb01 f303 	mul.w	r3, r1, r3
 80027dc:	4413      	add	r3, r2
 80027de:	3361      	adds	r3, #97	; 0x61
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b05      	cmp	r3, #5
 80027e4:	d109      	bne.n	80027fa <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	212c      	movs	r1, #44	; 0x2c
 80027ec:	fb01 f303 	mul.w	r3, r1, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	3360      	adds	r3, #96	; 0x60
 80027f4:	2205      	movs	r2, #5
 80027f6:	701a      	strb	r2, [r3, #0]
 80027f8:	e0b5      	b.n	8002966 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	212c      	movs	r1, #44	; 0x2c
 8002800:	fb01 f303 	mul.w	r3, r1, r3
 8002804:	4413      	add	r3, r2
 8002806:	3361      	adds	r3, #97	; 0x61
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b06      	cmp	r3, #6
 800280c:	d009      	beq.n	8002822 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	212c      	movs	r1, #44	; 0x2c
 8002814:	fb01 f303 	mul.w	r3, r1, r3
 8002818:	4413      	add	r3, r2
 800281a:	3361      	adds	r3, #97	; 0x61
 800281c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800281e:	2b08      	cmp	r3, #8
 8002820:	d150      	bne.n	80028c4 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	212c      	movs	r1, #44	; 0x2c
 8002828:	fb01 f303 	mul.w	r3, r1, r3
 800282c:	4413      	add	r3, r2
 800282e:	335c      	adds	r3, #92	; 0x5c
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	1c5a      	adds	r2, r3, #1
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	202c      	movs	r0, #44	; 0x2c
 800283a:	fb00 f303 	mul.w	r3, r0, r3
 800283e:	440b      	add	r3, r1
 8002840:	335c      	adds	r3, #92	; 0x5c
 8002842:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	212c      	movs	r1, #44	; 0x2c
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	4413      	add	r3, r2
 8002850:	335c      	adds	r3, #92	; 0x5c
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b02      	cmp	r3, #2
 8002856:	d912      	bls.n	800287e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	212c      	movs	r1, #44	; 0x2c
 800285e:	fb01 f303 	mul.w	r3, r1, r3
 8002862:	4413      	add	r3, r2
 8002864:	335c      	adds	r3, #92	; 0x5c
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	212c      	movs	r1, #44	; 0x2c
 8002870:	fb01 f303 	mul.w	r3, r1, r3
 8002874:	4413      	add	r3, r2
 8002876:	3360      	adds	r3, #96	; 0x60
 8002878:	2204      	movs	r2, #4
 800287a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800287c:	e073      	b.n	8002966 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	212c      	movs	r1, #44	; 0x2c
 8002884:	fb01 f303 	mul.w	r3, r1, r3
 8002888:	4413      	add	r3, r2
 800288a:	3360      	adds	r3, #96	; 0x60
 800288c:	2202      	movs	r2, #2
 800288e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	015a      	lsls	r2, r3, #5
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4413      	add	r3, r2
 8002898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028a6:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028ae:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028bc:	461a      	mov	r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80028c2:	e050      	b.n	8002966 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	212c      	movs	r1, #44	; 0x2c
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	4413      	add	r3, r2
 80028d0:	3361      	adds	r3, #97	; 0x61
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d122      	bne.n	800291e <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	212c      	movs	r1, #44	; 0x2c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	3360      	adds	r3, #96	; 0x60
 80028e6:	2202      	movs	r2, #2
 80028e8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	015a      	lsls	r2, r3, #5
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002900:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002908:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4413      	add	r3, r2
 8002912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002916:	461a      	mov	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	e023      	b.n	8002966 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	212c      	movs	r1, #44	; 0x2c
 8002924:	fb01 f303 	mul.w	r3, r1, r3
 8002928:	4413      	add	r3, r2
 800292a:	3361      	adds	r3, #97	; 0x61
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b07      	cmp	r3, #7
 8002930:	d119      	bne.n	8002966 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	212c      	movs	r1, #44	; 0x2c
 8002938:	fb01 f303 	mul.w	r3, r1, r3
 800293c:	4413      	add	r3, r2
 800293e:	335c      	adds	r3, #92	; 0x5c
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	202c      	movs	r0, #44	; 0x2c
 800294a:	fb00 f303 	mul.w	r3, r0, r3
 800294e:	440b      	add	r3, r1
 8002950:	335c      	adds	r3, #92	; 0x5c
 8002952:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	212c      	movs	r1, #44	; 0x2c
 800295a:	fb01 f303 	mul.w	r3, r1, r3
 800295e:	4413      	add	r3, r2
 8002960:	3360      	adds	r3, #96	; 0x60
 8002962:	2204      	movs	r2, #4
 8002964:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	015a      	lsls	r2, r3, #5
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4413      	add	r3, r2
 800296e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002972:	461a      	mov	r2, r3
 8002974:	2302      	movs	r3, #2
 8002976:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	b2d9      	uxtb	r1, r3
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	202c      	movs	r0, #44	; 0x2c
 8002982:	fb00 f303 	mul.w	r3, r0, r3
 8002986:	4413      	add	r3, r2
 8002988:	3360      	adds	r3, #96	; 0x60
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	461a      	mov	r2, r3
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f005 feb2 	bl	80086f8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002994:	e081      	b.n	8002a9a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	015a      	lsls	r2, r3, #5
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4413      	add	r3, r2
 800299e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 0310 	and.w	r3, r3, #16
 80029a8:	2b10      	cmp	r3, #16
 80029aa:	d176      	bne.n	8002a9a <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	212c      	movs	r1, #44	; 0x2c
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	333f      	adds	r3, #63	; 0x3f
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d121      	bne.n	8002a04 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	212c      	movs	r1, #44	; 0x2c
 80029c6:	fb01 f303 	mul.w	r3, r1, r3
 80029ca:	4413      	add	r3, r2
 80029cc:	335c      	adds	r3, #92	; 0x5c
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	015a      	lsls	r2, r3, #5
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4413      	add	r3, r2
 80029da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	0151      	lsls	r1, r2, #5
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	440a      	add	r2, r1
 80029e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029ec:	f043 0302 	orr.w	r3, r3, #2
 80029f0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	4611      	mov	r1, r2
 80029fc:	4618      	mov	r0, r3
 80029fe:	f003 fcbe 	bl	800637e <USB_HC_Halt>
 8002a02:	e041      	b.n	8002a88 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	212c      	movs	r1, #44	; 0x2c
 8002a0a:	fb01 f303 	mul.w	r3, r1, r3
 8002a0e:	4413      	add	r3, r2
 8002a10:	333f      	adds	r3, #63	; 0x3f
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d009      	beq.n	8002a2c <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	212c      	movs	r1, #44	; 0x2c
 8002a1e:	fb01 f303 	mul.w	r3, r1, r3
 8002a22:	4413      	add	r3, r2
 8002a24:	333f      	adds	r3, #63	; 0x3f
 8002a26:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d12d      	bne.n	8002a88 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	212c      	movs	r1, #44	; 0x2c
 8002a32:	fb01 f303 	mul.w	r3, r1, r3
 8002a36:	4413      	add	r3, r2
 8002a38:	335c      	adds	r3, #92	; 0x5c
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d120      	bne.n	8002a88 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	212c      	movs	r1, #44	; 0x2c
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	4413      	add	r3, r2
 8002a52:	3361      	adds	r3, #97	; 0x61
 8002a54:	2203      	movs	r2, #3
 8002a56:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	0151      	lsls	r1, r2, #5
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	440a      	add	r2, r1
 8002a6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a72:	f043 0302 	orr.w	r3, r3, #2
 8002a76:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	4611      	mov	r1, r2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f003 fc7b 	bl	800637e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a94:	461a      	mov	r2, r3
 8002a96:	2310      	movs	r3, #16
 8002a98:	6093      	str	r3, [r2, #8]
}
 8002a9a:	bf00      	nop
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b088      	sub	sp, #32
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002ab8:	78fb      	ldrb	r3, [r7, #3]
 8002aba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d119      	bne.n	8002b06 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	015a      	lsls	r2, r3, #5
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	4413      	add	r3, r2
 8002ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ade:	461a      	mov	r2, r3
 8002ae0:	2304      	movs	r3, #4
 8002ae2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	015a      	lsls	r2, r3, #5
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	0151      	lsls	r1, r2, #5
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	440a      	add	r2, r1
 8002afa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002afe:	f043 0302 	orr.w	r3, r3, #2
 8002b02:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002b04:	e3ca      	b.n	800329c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	015a      	lsls	r2, r3, #5
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 0320 	and.w	r3, r3, #32
 8002b18:	2b20      	cmp	r3, #32
 8002b1a:	d13e      	bne.n	8002b9a <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b28:	461a      	mov	r2, r3
 8002b2a:	2320      	movs	r3, #32
 8002b2c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	212c      	movs	r1, #44	; 0x2c
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	333d      	adds	r3, #61	; 0x3d
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	f040 83ac 	bne.w	800329c <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	212c      	movs	r1, #44	; 0x2c
 8002b4a:	fb01 f303 	mul.w	r3, r1, r3
 8002b4e:	4413      	add	r3, r2
 8002b50:	333d      	adds	r3, #61	; 0x3d
 8002b52:	2200      	movs	r2, #0
 8002b54:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	212c      	movs	r1, #44	; 0x2c
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	4413      	add	r3, r2
 8002b62:	3360      	adds	r3, #96	; 0x60
 8002b64:	2202      	movs	r2, #2
 8002b66:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	0151      	lsls	r1, r2, #5
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	440a      	add	r2, r1
 8002b7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b82:	f043 0302 	orr.w	r3, r3, #2
 8002b86:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	4611      	mov	r1, r2
 8002b92:	4618      	mov	r0, r3
 8002b94:	f003 fbf3 	bl	800637e <USB_HC_Halt>
}
 8002b98:	e380      	b.n	800329c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	015a      	lsls	r2, r3, #5
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bb0:	d122      	bne.n	8002bf8 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	015a      	lsls	r2, r3, #5
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	4413      	add	r3, r2
 8002bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	0151      	lsls	r1, r2, #5
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	440a      	add	r2, r1
 8002bc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bcc:	f043 0302 	orr.w	r3, r3, #2
 8002bd0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	4611      	mov	r1, r2
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f003 fbce 	bl	800637e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	015a      	lsls	r2, r3, #5
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	4413      	add	r3, r2
 8002bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bee:	461a      	mov	r2, r3
 8002bf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bf4:	6093      	str	r3, [r2, #8]
}
 8002bf6:	e351      	b.n	800329c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	015a      	lsls	r2, r3, #5
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d150      	bne.n	8002cb0 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	212c      	movs	r1, #44	; 0x2c
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	335c      	adds	r3, #92	; 0x5c
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	015a      	lsls	r2, r3, #5
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	4413      	add	r3, r2
 8002c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c32:	2b40      	cmp	r3, #64	; 0x40
 8002c34:	d111      	bne.n	8002c5a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	212c      	movs	r1, #44	; 0x2c
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	4413      	add	r3, r2
 8002c42:	333d      	adds	r3, #61	; 0x3d
 8002c44:	2201      	movs	r2, #1
 8002c46:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c54:	461a      	mov	r2, r3
 8002c56:	2340      	movs	r3, #64	; 0x40
 8002c58:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	0151      	lsls	r1, r2, #5
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	440a      	add	r2, r1
 8002c70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c74:	f043 0302 	orr.w	r3, r3, #2
 8002c78:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	4611      	mov	r1, r2
 8002c84:	4618      	mov	r0, r3
 8002c86:	f003 fb7a 	bl	800637e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	015a      	lsls	r2, r3, #5
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	4413      	add	r3, r2
 8002c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c96:	461a      	mov	r2, r3
 8002c98:	2301      	movs	r3, #1
 8002c9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	212c      	movs	r1, #44	; 0x2c
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3361      	adds	r3, #97	; 0x61
 8002caa:	2201      	movs	r2, #1
 8002cac:	701a      	strb	r2, [r3, #0]
}
 8002cae:	e2f5      	b.n	800329c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc2:	2b40      	cmp	r3, #64	; 0x40
 8002cc4:	d13c      	bne.n	8002d40 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	212c      	movs	r1, #44	; 0x2c
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3361      	adds	r3, #97	; 0x61
 8002cd4:	2204      	movs	r2, #4
 8002cd6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	212c      	movs	r1, #44	; 0x2c
 8002cde:	fb01 f303 	mul.w	r3, r1, r3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	333d      	adds	r3, #61	; 0x3d
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	212c      	movs	r1, #44	; 0x2c
 8002cf0:	fb01 f303 	mul.w	r3, r1, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	335c      	adds	r3, #92	; 0x5c
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	015a      	lsls	r2, r3, #5
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	4413      	add	r3, r2
 8002d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	0151      	lsls	r1, r2, #5
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	440a      	add	r2, r1
 8002d12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d16:	f043 0302 	orr.w	r3, r3, #2
 8002d1a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	4611      	mov	r1, r2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f003 fb29 	bl	800637e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	015a      	lsls	r2, r3, #5
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d38:	461a      	mov	r2, r3
 8002d3a:	2340      	movs	r3, #64	; 0x40
 8002d3c:	6093      	str	r3, [r2, #8]
}
 8002d3e:	e2ad      	b.n	800329c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	015a      	lsls	r2, r3, #5
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	4413      	add	r3, r2
 8002d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d12a      	bne.n	8002dac <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	015a      	lsls	r2, r3, #5
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d62:	461a      	mov	r2, r3
 8002d64:	2308      	movs	r3, #8
 8002d66:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	0151      	lsls	r1, r2, #5
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	440a      	add	r2, r1
 8002d7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d82:	f043 0302 	orr.w	r3, r3, #2
 8002d86:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	4611      	mov	r1, r2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f003 faf3 	bl	800637e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	212c      	movs	r1, #44	; 0x2c
 8002d9e:	fb01 f303 	mul.w	r3, r1, r3
 8002da2:	4413      	add	r3, r2
 8002da4:	3361      	adds	r3, #97	; 0x61
 8002da6:	2205      	movs	r2, #5
 8002da8:	701a      	strb	r2, [r3, #0]
}
 8002daa:	e277      	b.n	800329c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	015a      	lsls	r2, r3, #5
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	4413      	add	r3, r2
 8002db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	2b10      	cmp	r3, #16
 8002dc0:	d150      	bne.n	8002e64 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	212c      	movs	r1, #44	; 0x2c
 8002dc8:	fb01 f303 	mul.w	r3, r1, r3
 8002dcc:	4413      	add	r3, r2
 8002dce:	335c      	adds	r3, #92	; 0x5c
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	212c      	movs	r1, #44	; 0x2c
 8002dda:	fb01 f303 	mul.w	r3, r1, r3
 8002dde:	4413      	add	r3, r2
 8002de0:	3361      	adds	r3, #97	; 0x61
 8002de2:	2203      	movs	r2, #3
 8002de4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	212c      	movs	r1, #44	; 0x2c
 8002dec:	fb01 f303 	mul.w	r3, r1, r3
 8002df0:	4413      	add	r3, r2
 8002df2:	333d      	adds	r3, #61	; 0x3d
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d112      	bne.n	8002e20 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	212c      	movs	r1, #44	; 0x2c
 8002e00:	fb01 f303 	mul.w	r3, r1, r3
 8002e04:	4413      	add	r3, r2
 8002e06:	333c      	adds	r3, #60	; 0x3c
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d108      	bne.n	8002e20 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	212c      	movs	r1, #44	; 0x2c
 8002e14:	fb01 f303 	mul.w	r3, r1, r3
 8002e18:	4413      	add	r3, r2
 8002e1a:	333d      	adds	r3, #61	; 0x3d
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	0151      	lsls	r1, r2, #5
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	440a      	add	r2, r1
 8002e36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e3a:	f043 0302 	orr.w	r3, r3, #2
 8002e3e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	4611      	mov	r1, r2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f003 fa97 	bl	800637e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	015a      	lsls	r2, r3, #5
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	4413      	add	r3, r2
 8002e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	2310      	movs	r3, #16
 8002e60:	6093      	str	r3, [r2, #8]
}
 8002e62:	e21b      	b.n	800329c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e76:	2b80      	cmp	r3, #128	; 0x80
 8002e78:	d174      	bne.n	8002f64 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d121      	bne.n	8002ec6 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	212c      	movs	r1, #44	; 0x2c
 8002e88:	fb01 f303 	mul.w	r3, r1, r3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	3361      	adds	r3, #97	; 0x61
 8002e90:	2206      	movs	r2, #6
 8002e92:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	0151      	lsls	r1, r2, #5
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	440a      	add	r2, r1
 8002eaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002eae:	f043 0302 	orr.w	r3, r3, #2
 8002eb2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f003 fa5d 	bl	800637e <USB_HC_Halt>
 8002ec4:	e044      	b.n	8002f50 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	212c      	movs	r1, #44	; 0x2c
 8002ecc:	fb01 f303 	mul.w	r3, r1, r3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	335c      	adds	r3, #92	; 0x5c
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	202c      	movs	r0, #44	; 0x2c
 8002ede:	fb00 f303 	mul.w	r3, r0, r3
 8002ee2:	440b      	add	r3, r1
 8002ee4:	335c      	adds	r3, #92	; 0x5c
 8002ee6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	212c      	movs	r1, #44	; 0x2c
 8002eee:	fb01 f303 	mul.w	r3, r1, r3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	335c      	adds	r3, #92	; 0x5c
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d920      	bls.n	8002f3e <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	212c      	movs	r1, #44	; 0x2c
 8002f02:	fb01 f303 	mul.w	r3, r1, r3
 8002f06:	4413      	add	r3, r2
 8002f08:	335c      	adds	r3, #92	; 0x5c
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	212c      	movs	r1, #44	; 0x2c
 8002f14:	fb01 f303 	mul.w	r3, r1, r3
 8002f18:	4413      	add	r3, r2
 8002f1a:	3360      	adds	r3, #96	; 0x60
 8002f1c:	2204      	movs	r2, #4
 8002f1e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	b2d9      	uxtb	r1, r3
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	202c      	movs	r0, #44	; 0x2c
 8002f2a:	fb00 f303 	mul.w	r3, r0, r3
 8002f2e:	4413      	add	r3, r2
 8002f30:	3360      	adds	r3, #96	; 0x60
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	461a      	mov	r2, r3
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f005 fbde 	bl	80086f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f3c:	e008      	b.n	8002f50 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	212c      	movs	r1, #44	; 0x2c
 8002f44:	fb01 f303 	mul.w	r3, r1, r3
 8002f48:	4413      	add	r3, r2
 8002f4a:	3360      	adds	r3, #96	; 0x60
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	015a      	lsls	r2, r3, #5
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	4413      	add	r3, r2
 8002f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	2380      	movs	r3, #128	; 0x80
 8002f60:	6093      	str	r3, [r2, #8]
}
 8002f62:	e19b      	b.n	800329c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f7a:	d134      	bne.n	8002fe6 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	015a      	lsls	r2, r3, #5
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	0151      	lsls	r1, r2, #5
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	440a      	add	r2, r1
 8002f92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f96:	f043 0302 	orr.w	r3, r3, #2
 8002f9a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f003 f9e9 	bl	800637e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb8:	461a      	mov	r2, r3
 8002fba:	2310      	movs	r3, #16
 8002fbc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fca:	461a      	mov	r2, r3
 8002fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fd0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	212c      	movs	r1, #44	; 0x2c
 8002fd8:	fb01 f303 	mul.w	r3, r1, r3
 8002fdc:	4413      	add	r3, r2
 8002fde:	3361      	adds	r3, #97	; 0x61
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	701a      	strb	r2, [r3, #0]
}
 8002fe4:	e15a      	b.n	800329c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	015a      	lsls	r2, r3, #5
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	4413      	add	r3, r2
 8002fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	f040 814f 	bne.w	800329c <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	4413      	add	r3, r2
 8003006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	0151      	lsls	r1, r2, #5
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	440a      	add	r2, r1
 8003014:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003018:	f023 0302 	bic.w	r3, r3, #2
 800301c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	212c      	movs	r1, #44	; 0x2c
 8003024:	fb01 f303 	mul.w	r3, r1, r3
 8003028:	4413      	add	r3, r2
 800302a:	3361      	adds	r3, #97	; 0x61
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d17d      	bne.n	800312e <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	212c      	movs	r1, #44	; 0x2c
 8003038:	fb01 f303 	mul.w	r3, r1, r3
 800303c:	4413      	add	r3, r2
 800303e:	3360      	adds	r3, #96	; 0x60
 8003040:	2201      	movs	r2, #1
 8003042:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	212c      	movs	r1, #44	; 0x2c
 800304a:	fb01 f303 	mul.w	r3, r1, r3
 800304e:	4413      	add	r3, r2
 8003050:	333f      	adds	r3, #63	; 0x3f
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b02      	cmp	r3, #2
 8003056:	d00a      	beq.n	800306e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	212c      	movs	r1, #44	; 0x2c
 800305e:	fb01 f303 	mul.w	r3, r1, r3
 8003062:	4413      	add	r3, r2
 8003064:	333f      	adds	r3, #63	; 0x3f
 8003066:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003068:	2b03      	cmp	r3, #3
 800306a:	f040 8100 	bne.w	800326e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d113      	bne.n	800309e <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	212c      	movs	r1, #44	; 0x2c
 800307c:	fb01 f303 	mul.w	r3, r1, r3
 8003080:	4413      	add	r3, r2
 8003082:	3355      	adds	r3, #85	; 0x55
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	f083 0301 	eor.w	r3, r3, #1
 800308a:	b2d8      	uxtb	r0, r3
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	212c      	movs	r1, #44	; 0x2c
 8003092:	fb01 f303 	mul.w	r3, r1, r3
 8003096:	4413      	add	r3, r2
 8003098:	3355      	adds	r3, #85	; 0x55
 800309a:	4602      	mov	r2, r0
 800309c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	f040 80e3 	bne.w	800326e <HCD_HC_OUT_IRQHandler+0x7cc>
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	212c      	movs	r1, #44	; 0x2c
 80030ae:	fb01 f303 	mul.w	r3, r1, r3
 80030b2:	4413      	add	r3, r2
 80030b4:	334c      	adds	r3, #76	; 0x4c
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 80d8 	beq.w	800326e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	212c      	movs	r1, #44	; 0x2c
 80030c4:	fb01 f303 	mul.w	r3, r1, r3
 80030c8:	4413      	add	r3, r2
 80030ca:	334c      	adds	r3, #76	; 0x4c
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	202c      	movs	r0, #44	; 0x2c
 80030d4:	fb00 f202 	mul.w	r2, r0, r2
 80030d8:	440a      	add	r2, r1
 80030da:	3240      	adds	r2, #64	; 0x40
 80030dc:	8812      	ldrh	r2, [r2, #0]
 80030de:	4413      	add	r3, r2
 80030e0:	3b01      	subs	r3, #1
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	202c      	movs	r0, #44	; 0x2c
 80030e8:	fb00 f202 	mul.w	r2, r0, r2
 80030ec:	440a      	add	r2, r1
 80030ee:	3240      	adds	r2, #64	; 0x40
 80030f0:	8812      	ldrh	r2, [r2, #0]
 80030f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 80b5 	beq.w	800326e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	212c      	movs	r1, #44	; 0x2c
 800310a:	fb01 f303 	mul.w	r3, r1, r3
 800310e:	4413      	add	r3, r2
 8003110:	3355      	adds	r3, #85	; 0x55
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	f083 0301 	eor.w	r3, r3, #1
 8003118:	b2d8      	uxtb	r0, r3
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	212c      	movs	r1, #44	; 0x2c
 8003120:	fb01 f303 	mul.w	r3, r1, r3
 8003124:	4413      	add	r3, r2
 8003126:	3355      	adds	r3, #85	; 0x55
 8003128:	4602      	mov	r2, r0
 800312a:	701a      	strb	r2, [r3, #0]
 800312c:	e09f      	b.n	800326e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	212c      	movs	r1, #44	; 0x2c
 8003134:	fb01 f303 	mul.w	r3, r1, r3
 8003138:	4413      	add	r3, r2
 800313a:	3361      	adds	r3, #97	; 0x61
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b03      	cmp	r3, #3
 8003140:	d109      	bne.n	8003156 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	212c      	movs	r1, #44	; 0x2c
 8003148:	fb01 f303 	mul.w	r3, r1, r3
 800314c:	4413      	add	r3, r2
 800314e:	3360      	adds	r3, #96	; 0x60
 8003150:	2202      	movs	r2, #2
 8003152:	701a      	strb	r2, [r3, #0]
 8003154:	e08b      	b.n	800326e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	212c      	movs	r1, #44	; 0x2c
 800315c:	fb01 f303 	mul.w	r3, r1, r3
 8003160:	4413      	add	r3, r2
 8003162:	3361      	adds	r3, #97	; 0x61
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b04      	cmp	r3, #4
 8003168:	d109      	bne.n	800317e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	212c      	movs	r1, #44	; 0x2c
 8003170:	fb01 f303 	mul.w	r3, r1, r3
 8003174:	4413      	add	r3, r2
 8003176:	3360      	adds	r3, #96	; 0x60
 8003178:	2202      	movs	r2, #2
 800317a:	701a      	strb	r2, [r3, #0]
 800317c:	e077      	b.n	800326e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	212c      	movs	r1, #44	; 0x2c
 8003184:	fb01 f303 	mul.w	r3, r1, r3
 8003188:	4413      	add	r3, r2
 800318a:	3361      	adds	r3, #97	; 0x61
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b05      	cmp	r3, #5
 8003190:	d109      	bne.n	80031a6 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	212c      	movs	r1, #44	; 0x2c
 8003198:	fb01 f303 	mul.w	r3, r1, r3
 800319c:	4413      	add	r3, r2
 800319e:	3360      	adds	r3, #96	; 0x60
 80031a0:	2205      	movs	r2, #5
 80031a2:	701a      	strb	r2, [r3, #0]
 80031a4:	e063      	b.n	800326e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	212c      	movs	r1, #44	; 0x2c
 80031ac:	fb01 f303 	mul.w	r3, r1, r3
 80031b0:	4413      	add	r3, r2
 80031b2:	3361      	adds	r3, #97	; 0x61
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b06      	cmp	r3, #6
 80031b8:	d009      	beq.n	80031ce <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	212c      	movs	r1, #44	; 0x2c
 80031c0:	fb01 f303 	mul.w	r3, r1, r3
 80031c4:	4413      	add	r3, r2
 80031c6:	3361      	adds	r3, #97	; 0x61
 80031c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d14f      	bne.n	800326e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	212c      	movs	r1, #44	; 0x2c
 80031d4:	fb01 f303 	mul.w	r3, r1, r3
 80031d8:	4413      	add	r3, r2
 80031da:	335c      	adds	r3, #92	; 0x5c
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	202c      	movs	r0, #44	; 0x2c
 80031e6:	fb00 f303 	mul.w	r3, r0, r3
 80031ea:	440b      	add	r3, r1
 80031ec:	335c      	adds	r3, #92	; 0x5c
 80031ee:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	212c      	movs	r1, #44	; 0x2c
 80031f6:	fb01 f303 	mul.w	r3, r1, r3
 80031fa:	4413      	add	r3, r2
 80031fc:	335c      	adds	r3, #92	; 0x5c
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b02      	cmp	r3, #2
 8003202:	d912      	bls.n	800322a <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	212c      	movs	r1, #44	; 0x2c
 800320a:	fb01 f303 	mul.w	r3, r1, r3
 800320e:	4413      	add	r3, r2
 8003210:	335c      	adds	r3, #92	; 0x5c
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	212c      	movs	r1, #44	; 0x2c
 800321c:	fb01 f303 	mul.w	r3, r1, r3
 8003220:	4413      	add	r3, r2
 8003222:	3360      	adds	r3, #96	; 0x60
 8003224:	2204      	movs	r2, #4
 8003226:	701a      	strb	r2, [r3, #0]
 8003228:	e021      	b.n	800326e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	212c      	movs	r1, #44	; 0x2c
 8003230:	fb01 f303 	mul.w	r3, r1, r3
 8003234:	4413      	add	r3, r2
 8003236:	3360      	adds	r3, #96	; 0x60
 8003238:	2202      	movs	r2, #2
 800323a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	4413      	add	r3, r2
 8003244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003252:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800325a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	4413      	add	r3, r2
 8003264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003268:	461a      	mov	r2, r3
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	015a      	lsls	r2, r3, #5
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	4413      	add	r3, r2
 8003276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327a:	461a      	mov	r2, r3
 800327c:	2302      	movs	r3, #2
 800327e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	b2d9      	uxtb	r1, r3
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	202c      	movs	r0, #44	; 0x2c
 800328a:	fb00 f303 	mul.w	r3, r0, r3
 800328e:	4413      	add	r3, r2
 8003290:	3360      	adds	r3, #96	; 0x60
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f005 fa2e 	bl	80086f8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800329c:	bf00      	nop
 800329e:	3720      	adds	r7, #32
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b08a      	sub	sp, #40	; 0x28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	0c5b      	lsrs	r3, r3, #17
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	091b      	lsrs	r3, r3, #4
 80032d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032d8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d004      	beq.n	80032ea <HCD_RXQLVL_IRQHandler+0x46>
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2b05      	cmp	r3, #5
 80032e4:	f000 80a9 	beq.w	800343a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80032e8:	e0aa      	b.n	8003440 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 80a6 	beq.w	800343e <HCD_RXQLVL_IRQHandler+0x19a>
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	212c      	movs	r1, #44	; 0x2c
 80032f8:	fb01 f303 	mul.w	r3, r1, r3
 80032fc:	4413      	add	r3, r2
 80032fe:	3344      	adds	r3, #68	; 0x44
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 809b 	beq.w	800343e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	212c      	movs	r1, #44	; 0x2c
 800330e:	fb01 f303 	mul.w	r3, r1, r3
 8003312:	4413      	add	r3, r2
 8003314:	3350      	adds	r3, #80	; 0x50
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	441a      	add	r2, r3
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	202c      	movs	r0, #44	; 0x2c
 8003322:	fb00 f303 	mul.w	r3, r0, r3
 8003326:	440b      	add	r3, r1
 8003328:	334c      	adds	r3, #76	; 0x4c
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d87a      	bhi.n	8003426 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6818      	ldr	r0, [r3, #0]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	212c      	movs	r1, #44	; 0x2c
 800333a:	fb01 f303 	mul.w	r3, r1, r3
 800333e:	4413      	add	r3, r2
 8003340:	3344      	adds	r3, #68	; 0x44
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	b292      	uxth	r2, r2
 8003348:	4619      	mov	r1, r3
 800334a:	f002 fb91 	bl	8005a70 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	212c      	movs	r1, #44	; 0x2c
 8003354:	fb01 f303 	mul.w	r3, r1, r3
 8003358:	4413      	add	r3, r2
 800335a:	3344      	adds	r3, #68	; 0x44
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	441a      	add	r2, r3
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	202c      	movs	r0, #44	; 0x2c
 8003368:	fb00 f303 	mul.w	r3, r0, r3
 800336c:	440b      	add	r3, r1
 800336e:	3344      	adds	r3, #68	; 0x44
 8003370:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	212c      	movs	r1, #44	; 0x2c
 8003378:	fb01 f303 	mul.w	r3, r1, r3
 800337c:	4413      	add	r3, r2
 800337e:	3350      	adds	r3, #80	; 0x50
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	441a      	add	r2, r3
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	202c      	movs	r0, #44	; 0x2c
 800338c:	fb00 f303 	mul.w	r3, r0, r3
 8003390:	440b      	add	r3, r1
 8003392:	3350      	adds	r3, #80	; 0x50
 8003394:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	015a      	lsls	r2, r3, #5
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	4413      	add	r3, r2
 800339e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	0cdb      	lsrs	r3, r3, #19
 80033a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033aa:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	212c      	movs	r1, #44	; 0x2c
 80033b2:	fb01 f303 	mul.w	r3, r1, r3
 80033b6:	4413      	add	r3, r2
 80033b8:	3340      	adds	r3, #64	; 0x40
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	461a      	mov	r2, r3
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d13c      	bne.n	800343e <HCD_RXQLVL_IRQHandler+0x19a>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d039      	beq.n	800343e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	015a      	lsls	r2, r3, #5
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	4413      	add	r3, r2
 80033d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033e0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033e8:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f6:	461a      	mov	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	212c      	movs	r1, #44	; 0x2c
 8003402:	fb01 f303 	mul.w	r3, r1, r3
 8003406:	4413      	add	r3, r2
 8003408:	3354      	adds	r3, #84	; 0x54
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	f083 0301 	eor.w	r3, r3, #1
 8003410:	b2d8      	uxtb	r0, r3
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	212c      	movs	r1, #44	; 0x2c
 8003418:	fb01 f303 	mul.w	r3, r1, r3
 800341c:	4413      	add	r3, r2
 800341e:	3354      	adds	r3, #84	; 0x54
 8003420:	4602      	mov	r2, r0
 8003422:	701a      	strb	r2, [r3, #0]
      break;
 8003424:	e00b      	b.n	800343e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	212c      	movs	r1, #44	; 0x2c
 800342c:	fb01 f303 	mul.w	r3, r1, r3
 8003430:	4413      	add	r3, r2
 8003432:	3360      	adds	r3, #96	; 0x60
 8003434:	2204      	movs	r2, #4
 8003436:	701a      	strb	r2, [r3, #0]
      break;
 8003438:	e001      	b.n	800343e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800343a:	bf00      	nop
 800343c:	e000      	b.n	8003440 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800343e:	bf00      	nop
  }
}
 8003440:	bf00      	nop
 8003442:	3728      	adds	r7, #40	; 0x28
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003474:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b02      	cmp	r3, #2
 800347e:	d10b      	bne.n	8003498 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b01      	cmp	r3, #1
 8003488:	d102      	bne.n	8003490 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f005 f918 	bl	80086c0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	f043 0302 	orr.w	r3, r3, #2
 8003496:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d132      	bne.n	8003508 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	f043 0308 	orr.w	r3, r3, #8
 80034a8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d126      	bne.n	8003502 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d113      	bne.n	80034e4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80034c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034c6:	d106      	bne.n	80034d6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2102      	movs	r1, #2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f002 fc2e 	bl	8005d30 <USB_InitFSLSPClkSel>
 80034d4:	e011      	b.n	80034fa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2101      	movs	r1, #1
 80034dc:	4618      	mov	r0, r3
 80034de:	f002 fc27 	bl	8005d30 <USB_InitFSLSPClkSel>
 80034e2:	e00a      	b.n	80034fa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d106      	bne.n	80034fa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034f2:	461a      	mov	r2, r3
 80034f4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80034f8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f005 f90a 	bl	8008714 <HAL_HCD_PortEnabled_Callback>
 8003500:	e002      	b.n	8003508 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f005 f914 	bl	8008730 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f003 0320 	and.w	r3, r3, #32
 800350e:	2b20      	cmp	r3, #32
 8003510:	d103      	bne.n	800351a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f043 0320 	orr.w	r3, r3, #32
 8003518:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003520:	461a      	mov	r2, r3
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	6013      	str	r3, [r2, #0]
}
 8003526:	bf00      	nop
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e12b      	b.n	800379a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d106      	bne.n	800355c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7fd fcde 	bl	8000f18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2224      	movs	r2, #36	; 0x24
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0201 	bic.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003582:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003592:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003594:	f001 fd14 	bl	8004fc0 <HAL_RCC_GetPCLK1Freq>
 8003598:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	4a81      	ldr	r2, [pc, #516]	; (80037a4 <HAL_I2C_Init+0x274>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d807      	bhi.n	80035b4 <HAL_I2C_Init+0x84>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4a80      	ldr	r2, [pc, #512]	; (80037a8 <HAL_I2C_Init+0x278>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	bf94      	ite	ls
 80035ac:	2301      	movls	r3, #1
 80035ae:	2300      	movhi	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	e006      	b.n	80035c2 <HAL_I2C_Init+0x92>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4a7d      	ldr	r2, [pc, #500]	; (80037ac <HAL_I2C_Init+0x27c>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	bf94      	ite	ls
 80035bc:	2301      	movls	r3, #1
 80035be:	2300      	movhi	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e0e7      	b.n	800379a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4a78      	ldr	r2, [pc, #480]	; (80037b0 <HAL_I2C_Init+0x280>)
 80035ce:	fba2 2303 	umull	r2, r3, r2, r3
 80035d2:	0c9b      	lsrs	r3, r3, #18
 80035d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	4a6a      	ldr	r2, [pc, #424]	; (80037a4 <HAL_I2C_Init+0x274>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d802      	bhi.n	8003604 <HAL_I2C_Init+0xd4>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	3301      	adds	r3, #1
 8003602:	e009      	b.n	8003618 <HAL_I2C_Init+0xe8>
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800360a:	fb02 f303 	mul.w	r3, r2, r3
 800360e:	4a69      	ldr	r2, [pc, #420]	; (80037b4 <HAL_I2C_Init+0x284>)
 8003610:	fba2 2303 	umull	r2, r3, r2, r3
 8003614:	099b      	lsrs	r3, r3, #6
 8003616:	3301      	adds	r3, #1
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6812      	ldr	r2, [r2, #0]
 800361c:	430b      	orrs	r3, r1
 800361e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800362a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	495c      	ldr	r1, [pc, #368]	; (80037a4 <HAL_I2C_Init+0x274>)
 8003634:	428b      	cmp	r3, r1
 8003636:	d819      	bhi.n	800366c <HAL_I2C_Init+0x13c>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	1e59      	subs	r1, r3, #1
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	fbb1 f3f3 	udiv	r3, r1, r3
 8003646:	1c59      	adds	r1, r3, #1
 8003648:	f640 73fc 	movw	r3, #4092	; 0xffc
 800364c:	400b      	ands	r3, r1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <HAL_I2C_Init+0x138>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	1e59      	subs	r1, r3, #1
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003660:	3301      	adds	r3, #1
 8003662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003666:	e051      	b.n	800370c <HAL_I2C_Init+0x1dc>
 8003668:	2304      	movs	r3, #4
 800366a:	e04f      	b.n	800370c <HAL_I2C_Init+0x1dc>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d111      	bne.n	8003698 <HAL_I2C_Init+0x168>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	1e58      	subs	r0, r3, #1
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6859      	ldr	r1, [r3, #4]
 800367c:	460b      	mov	r3, r1
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	440b      	add	r3, r1
 8003682:	fbb0 f3f3 	udiv	r3, r0, r3
 8003686:	3301      	adds	r3, #1
 8003688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800368c:	2b00      	cmp	r3, #0
 800368e:	bf0c      	ite	eq
 8003690:	2301      	moveq	r3, #1
 8003692:	2300      	movne	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	e012      	b.n	80036be <HAL_I2C_Init+0x18e>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	1e58      	subs	r0, r3, #1
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6859      	ldr	r1, [r3, #4]
 80036a0:	460b      	mov	r3, r1
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	440b      	add	r3, r1
 80036a6:	0099      	lsls	r1, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ae:	3301      	adds	r3, #1
 80036b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	bf0c      	ite	eq
 80036b8:	2301      	moveq	r3, #1
 80036ba:	2300      	movne	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_I2C_Init+0x196>
 80036c2:	2301      	movs	r3, #1
 80036c4:	e022      	b.n	800370c <HAL_I2C_Init+0x1dc>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10e      	bne.n	80036ec <HAL_I2C_Init+0x1bc>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1e58      	subs	r0, r3, #1
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6859      	ldr	r1, [r3, #4]
 80036d6:	460b      	mov	r3, r1
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	440b      	add	r3, r1
 80036dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80036e0:	3301      	adds	r3, #1
 80036e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ea:	e00f      	b.n	800370c <HAL_I2C_Init+0x1dc>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	1e58      	subs	r0, r3, #1
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6859      	ldr	r1, [r3, #4]
 80036f4:	460b      	mov	r3, r1
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	0099      	lsls	r1, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003702:	3301      	adds	r3, #1
 8003704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003708:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	6809      	ldr	r1, [r1, #0]
 8003710:	4313      	orrs	r3, r2
 8003712:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69da      	ldr	r2, [r3, #28]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800373a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6911      	ldr	r1, [r2, #16]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	68d2      	ldr	r2, [r2, #12]
 8003746:	4311      	orrs	r1, r2
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6812      	ldr	r2, [r2, #0]
 800374c:	430b      	orrs	r3, r1
 800374e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	695a      	ldr	r2, [r3, #20]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0201 	orr.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2220      	movs	r2, #32
 8003786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	000186a0 	.word	0x000186a0
 80037a8:	001e847f 	.word	0x001e847f
 80037ac:	003d08ff 	.word	0x003d08ff
 80037b0:	431bde83 	.word	0x431bde83
 80037b4:	10624dd3 	.word	0x10624dd3

080037b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b088      	sub	sp, #32
 80037bc:	af02      	add	r7, sp, #8
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	4608      	mov	r0, r1
 80037c2:	4611      	mov	r1, r2
 80037c4:	461a      	mov	r2, r3
 80037c6:	4603      	mov	r3, r0
 80037c8:	817b      	strh	r3, [r7, #10]
 80037ca:	460b      	mov	r3, r1
 80037cc:	813b      	strh	r3, [r7, #8]
 80037ce:	4613      	mov	r3, r2
 80037d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037d2:	f7fd fe45 	bl	8001460 <HAL_GetTick>
 80037d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b20      	cmp	r3, #32
 80037e2:	f040 80d9 	bne.w	8003998 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	2319      	movs	r3, #25
 80037ec:	2201      	movs	r2, #1
 80037ee:	496d      	ldr	r1, [pc, #436]	; (80039a4 <HAL_I2C_Mem_Write+0x1ec>)
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f971 	bl	8003ad8 <I2C_WaitOnFlagUntilTimeout>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80037fc:	2302      	movs	r3, #2
 80037fe:	e0cc      	b.n	800399a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_I2C_Mem_Write+0x56>
 800380a:	2302      	movs	r3, #2
 800380c:	e0c5      	b.n	800399a <HAL_I2C_Mem_Write+0x1e2>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b01      	cmp	r3, #1
 8003822:	d007      	beq.n	8003834 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003842:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2221      	movs	r2, #33	; 0x21
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2240      	movs	r2, #64	; 0x40
 8003850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6a3a      	ldr	r2, [r7, #32]
 800385e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003864:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4a4d      	ldr	r2, [pc, #308]	; (80039a8 <HAL_I2C_Mem_Write+0x1f0>)
 8003874:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003876:	88f8      	ldrh	r0, [r7, #6]
 8003878:	893a      	ldrh	r2, [r7, #8]
 800387a:	8979      	ldrh	r1, [r7, #10]
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	9301      	str	r3, [sp, #4]
 8003880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	4603      	mov	r3, r0
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 f890 	bl	80039ac <I2C_RequestMemoryWrite>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d052      	beq.n	8003938 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e081      	b.n	800399a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 f9f2 	bl	8003c84 <I2C_WaitOnTXEFlagUntilTimeout>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00d      	beq.n	80038c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	d107      	bne.n	80038be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e06b      	b.n	800399a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	781a      	ldrb	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	1c5a      	adds	r2, r3, #1
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d11b      	bne.n	8003938 <HAL_I2C_Mem_Write+0x180>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003904:	2b00      	cmp	r3, #0
 8003906:	d017      	beq.n	8003938 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	781a      	ldrb	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	1c5a      	adds	r2, r3, #1
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392e:	b29b      	uxth	r3, r3
 8003930:	3b01      	subs	r3, #1
 8003932:	b29a      	uxth	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1aa      	bne.n	8003896 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 f9de 	bl	8003d06 <I2C_WaitOnBTFFlagUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00d      	beq.n	800396c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	2b04      	cmp	r3, #4
 8003956:	d107      	bne.n	8003968 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003966:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e016      	b.n	800399a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800397a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003994:	2300      	movs	r3, #0
 8003996:	e000      	b.n	800399a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003998:	2302      	movs	r3, #2
  }
}
 800399a:	4618      	mov	r0, r3
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	00100002 	.word	0x00100002
 80039a8:	ffff0000 	.word	0xffff0000

080039ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af02      	add	r7, sp, #8
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	4608      	mov	r0, r1
 80039b6:	4611      	mov	r1, r2
 80039b8:	461a      	mov	r2, r3
 80039ba:	4603      	mov	r3, r0
 80039bc:	817b      	strh	r3, [r7, #10]
 80039be:	460b      	mov	r3, r1
 80039c0:	813b      	strh	r3, [r7, #8]
 80039c2:	4613      	mov	r3, r2
 80039c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	2200      	movs	r2, #0
 80039de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 f878 	bl	8003ad8 <I2C_WaitOnFlagUntilTimeout>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00d      	beq.n	8003a0a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039fc:	d103      	bne.n	8003a06 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e05f      	b.n	8003aca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a0a:	897b      	ldrh	r3, [r7, #10]
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	461a      	mov	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	6a3a      	ldr	r2, [r7, #32]
 8003a1e:	492d      	ldr	r1, [pc, #180]	; (8003ad4 <I2C_RequestMemoryWrite+0x128>)
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 f8b0 	bl	8003b86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e04c      	b.n	8003aca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a48:	6a39      	ldr	r1, [r7, #32]
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 f91a 	bl	8003c84 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00d      	beq.n	8003a72 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d107      	bne.n	8003a6e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e02b      	b.n	8003aca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a72:	88fb      	ldrh	r3, [r7, #6]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d105      	bne.n	8003a84 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a78:	893b      	ldrh	r3, [r7, #8]
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	611a      	str	r2, [r3, #16]
 8003a82:	e021      	b.n	8003ac8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a84:	893b      	ldrh	r3, [r7, #8]
 8003a86:	0a1b      	lsrs	r3, r3, #8
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a94:	6a39      	ldr	r1, [r7, #32]
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 f8f4 	bl	8003c84 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00d      	beq.n	8003abe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d107      	bne.n	8003aba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ab8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e005      	b.n	8003aca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003abe:	893b      	ldrh	r3, [r7, #8]
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3718      	adds	r7, #24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	00010002 	.word	0x00010002

08003ad8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	603b      	str	r3, [r7, #0]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ae8:	e025      	b.n	8003b36 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af0:	d021      	beq.n	8003b36 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af2:	f7fd fcb5 	bl	8001460 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d302      	bcc.n	8003b08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d116      	bne.n	8003b36 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2220      	movs	r2, #32
 8003b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f043 0220 	orr.w	r2, r3, #32
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e023      	b.n	8003b7e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	0c1b      	lsrs	r3, r3, #16
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d10d      	bne.n	8003b5c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	43da      	mvns	r2, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	bf0c      	ite	eq
 8003b52:	2301      	moveq	r3, #1
 8003b54:	2300      	movne	r3, #0
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	461a      	mov	r2, r3
 8003b5a:	e00c      	b.n	8003b76 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	43da      	mvns	r2, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	4013      	ands	r3, r2
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	bf0c      	ite	eq
 8003b6e:	2301      	moveq	r3, #1
 8003b70:	2300      	movne	r3, #0
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	461a      	mov	r2, r3
 8003b76:	79fb      	ldrb	r3, [r7, #7]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d0b6      	beq.n	8003aea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b084      	sub	sp, #16
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	607a      	str	r2, [r7, #4]
 8003b92:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b94:	e051      	b.n	8003c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ba4:	d123      	bne.n	8003bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bb4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bbe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	f043 0204 	orr.w	r2, r3, #4
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e046      	b.n	8003c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf4:	d021      	beq.n	8003c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf6:	f7fd fc33 	bl	8001460 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d302      	bcc.n	8003c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d116      	bne.n	8003c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2220      	movs	r2, #32
 8003c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	f043 0220 	orr.w	r2, r3, #32
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e020      	b.n	8003c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	0c1b      	lsrs	r3, r3, #16
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d10c      	bne.n	8003c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	43da      	mvns	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	bf14      	ite	ne
 8003c56:	2301      	movne	r3, #1
 8003c58:	2300      	moveq	r3, #0
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	e00b      	b.n	8003c76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	43da      	mvns	r2, r3
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	bf14      	ite	ne
 8003c70:	2301      	movne	r3, #1
 8003c72:	2300      	moveq	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d18d      	bne.n	8003b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c90:	e02d      	b.n	8003cee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 f878 	bl	8003d88 <I2C_IsAcknowledgeFailed>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e02d      	b.n	8003cfe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca8:	d021      	beq.n	8003cee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003caa:	f7fd fbd9 	bl	8001460 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d302      	bcc.n	8003cc0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d116      	bne.n	8003cee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	f043 0220 	orr.w	r2, r3, #32
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e007      	b.n	8003cfe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf8:	2b80      	cmp	r3, #128	; 0x80
 8003cfa:	d1ca      	bne.n	8003c92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b084      	sub	sp, #16
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d12:	e02d      	b.n	8003d70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 f837 	bl	8003d88 <I2C_IsAcknowledgeFailed>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e02d      	b.n	8003d80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2a:	d021      	beq.n	8003d70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d2c:	f7fd fb98 	bl	8001460 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d302      	bcc.n	8003d42 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d116      	bne.n	8003d70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	f043 0220 	orr.w	r2, r3, #32
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e007      	b.n	8003d80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d1ca      	bne.n	8003d14 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9e:	d11b      	bne.n	8003dd8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003da8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc4:	f043 0204 	orr.w	r2, r3, #4
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e000      	b.n	8003dda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
	...

08003de8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e128      	b.n	800404c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d109      	bne.n	8003e1a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a90      	ldr	r2, [pc, #576]	; (8004054 <HAL_I2S_Init+0x26c>)
 8003e12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7fd f8c7 	bl	8000fa8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6812      	ldr	r2, [r2, #0]
 8003e2c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003e30:	f023 030f 	bic.w	r3, r3, #15
 8003e34:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d060      	beq.n	8003f08 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d102      	bne.n	8003e54 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003e4e:	2310      	movs	r3, #16
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	e001      	b.n	8003e58 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003e54:	2320      	movs	r3, #32
 8003e56:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	2b20      	cmp	r3, #32
 8003e5e:	d802      	bhi.n	8003e66 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003e66:	2001      	movs	r0, #1
 8003e68:	f001 f9b4 	bl	80051d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003e6c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e76:	d125      	bne.n	8003ec4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d010      	beq.n	8003ea2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	461a      	mov	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9c:	3305      	adds	r3, #5
 8003e9e:	613b      	str	r3, [r7, #16]
 8003ea0:	e01f      	b.n	8003ee2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eac:	4613      	mov	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ebe:	3305      	adds	r3, #5
 8003ec0:	613b      	str	r3, [r7, #16]
 8003ec2:	e00e      	b.n	8003ee2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ecc:	4613      	mov	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ede:	3305      	adds	r3, #5
 8003ee0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	4a5c      	ldr	r2, [pc, #368]	; (8004058 <HAL_I2S_Init+0x270>)
 8003ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eea:	08db      	lsrs	r3, r3, #3
 8003eec:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	085b      	lsrs	r3, r3, #1
 8003efe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	021b      	lsls	r3, r3, #8
 8003f04:	61bb      	str	r3, [r7, #24]
 8003f06:	e003      	b.n	8003f10 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003f08:	2302      	movs	r3, #2
 8003f0a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d902      	bls.n	8003f1c <HAL_I2S_Init+0x134>
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	2bff      	cmp	r3, #255	; 0xff
 8003f1a:	d907      	bls.n	8003f2c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f20:	f043 0210 	orr.w	r2, r3, #16
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e08f      	b.n	800404c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691a      	ldr	r2, [r3, #16]
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	ea42 0103 	orr.w	r1, r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	69fa      	ldr	r2, [r7, #28]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003f4a:	f023 030f 	bic.w	r3, r3, #15
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6851      	ldr	r1, [r2, #4]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6892      	ldr	r2, [r2, #8]
 8003f56:	4311      	orrs	r1, r2
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	68d2      	ldr	r2, [r2, #12]
 8003f5c:	4311      	orrs	r1, r2
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6992      	ldr	r2, [r2, #24]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	431a      	orrs	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f6e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d161      	bne.n	800403c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a38      	ldr	r2, [pc, #224]	; (800405c <HAL_I2S_Init+0x274>)
 8003f7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a37      	ldr	r2, [pc, #220]	; (8004060 <HAL_I2S_Init+0x278>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d101      	bne.n	8003f8c <HAL_I2S_Init+0x1a4>
 8003f88:	4b36      	ldr	r3, [pc, #216]	; (8004064 <HAL_I2S_Init+0x27c>)
 8003f8a:	e001      	b.n	8003f90 <HAL_I2S_Init+0x1a8>
 8003f8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6812      	ldr	r2, [r2, #0]
 8003f96:	4932      	ldr	r1, [pc, #200]	; (8004060 <HAL_I2S_Init+0x278>)
 8003f98:	428a      	cmp	r2, r1
 8003f9a:	d101      	bne.n	8003fa0 <HAL_I2S_Init+0x1b8>
 8003f9c:	4a31      	ldr	r2, [pc, #196]	; (8004064 <HAL_I2S_Init+0x27c>)
 8003f9e:	e001      	b.n	8003fa4 <HAL_I2S_Init+0x1bc>
 8003fa0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003fa4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003fa8:	f023 030f 	bic.w	r3, r3, #15
 8003fac:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a2b      	ldr	r2, [pc, #172]	; (8004060 <HAL_I2S_Init+0x278>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d101      	bne.n	8003fbc <HAL_I2S_Init+0x1d4>
 8003fb8:	4b2a      	ldr	r3, [pc, #168]	; (8004064 <HAL_I2S_Init+0x27c>)
 8003fba:	e001      	b.n	8003fc0 <HAL_I2S_Init+0x1d8>
 8003fbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a25      	ldr	r2, [pc, #148]	; (8004060 <HAL_I2S_Init+0x278>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d101      	bne.n	8003fd2 <HAL_I2S_Init+0x1ea>
 8003fce:	4b25      	ldr	r3, [pc, #148]	; (8004064 <HAL_I2S_Init+0x27c>)
 8003fd0:	e001      	b.n	8003fd6 <HAL_I2S_Init+0x1ee>
 8003fd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fd6:	69db      	ldr	r3, [r3, #28]
 8003fd8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fe2:	d003      	beq.n	8003fec <HAL_I2S_Init+0x204>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d103      	bne.n	8003ff4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003fec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ff0:	613b      	str	r3, [r7, #16]
 8003ff2:	e001      	b.n	8003ff8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004002:	4313      	orrs	r3, r2
 8004004:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800400c:	4313      	orrs	r3, r2
 800400e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004016:	4313      	orrs	r3, r2
 8004018:	b29a      	uxth	r2, r3
 800401a:	897b      	ldrh	r3, [r7, #10]
 800401c:	4313      	orrs	r3, r2
 800401e:	b29b      	uxth	r3, r3
 8004020:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004024:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a0d      	ldr	r2, [pc, #52]	; (8004060 <HAL_I2S_Init+0x278>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d101      	bne.n	8004034 <HAL_I2S_Init+0x24c>
 8004030:	4b0c      	ldr	r3, [pc, #48]	; (8004064 <HAL_I2S_Init+0x27c>)
 8004032:	e001      	b.n	8004038 <HAL_I2S_Init+0x250>
 8004034:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004038:	897a      	ldrh	r2, [r7, #10]
 800403a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3720      	adds	r7, #32
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	0800415f 	.word	0x0800415f
 8004058:	cccccccd 	.word	0xcccccccd
 800405c:	08004275 	.word	0x08004275
 8004060:	40003800 	.word	0x40003800
 8004064:	40003400 	.word	0x40003400

08004068 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	881a      	ldrh	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	1c9a      	adds	r2, r3, #2
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	3b01      	subs	r3, #1
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10e      	bne.n	80040f8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040e8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7ff ffb8 	bl	8004068 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80040f8:	bf00      	nop
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004112:	b292      	uxth	r2, r2
 8004114:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411a:	1c9a      	adds	r2, r3, #2
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004124:	b29b      	uxth	r3, r3
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004132:	b29b      	uxth	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10e      	bne.n	8004156 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004146:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7ff ff93 	bl	800407c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004156:	bf00      	nop
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b086      	sub	sp, #24
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b04      	cmp	r3, #4
 8004178:	d13a      	bne.n	80041f0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b01      	cmp	r3, #1
 8004182:	d109      	bne.n	8004198 <I2S_IRQHandler+0x3a>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418e:	2b40      	cmp	r3, #64	; 0x40
 8004190:	d102      	bne.n	8004198 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7ff ffb4 	bl	8004100 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419e:	2b40      	cmp	r3, #64	; 0x40
 80041a0:	d126      	bne.n	80041f0 <I2S_IRQHandler+0x92>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f003 0320 	and.w	r3, r3, #32
 80041ac:	2b20      	cmp	r3, #32
 80041ae:	d11f      	bne.n	80041f0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041be:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80041c0:	2300      	movs	r3, #0
 80041c2:	613b      	str	r3, [r7, #16]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	613b      	str	r3, [r7, #16]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	613b      	str	r3, [r7, #16]
 80041d4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e2:	f043 0202 	orr.w	r2, r3, #2
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7ff ff50 	bl	8004090 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b03      	cmp	r3, #3
 80041fa:	d136      	bne.n	800426a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b02      	cmp	r3, #2
 8004204:	d109      	bne.n	800421a <I2S_IRQHandler+0xbc>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004210:	2b80      	cmp	r3, #128	; 0x80
 8004212:	d102      	bne.n	800421a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7ff ff45 	bl	80040a4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f003 0308 	and.w	r3, r3, #8
 8004220:	2b08      	cmp	r3, #8
 8004222:	d122      	bne.n	800426a <I2S_IRQHandler+0x10c>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f003 0320 	and.w	r3, r3, #32
 800422e:	2b20      	cmp	r3, #32
 8004230:	d11b      	bne.n	800426a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004240:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004242:	2300      	movs	r3, #0
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425c:	f043 0204 	orr.w	r2, r3, #4
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7ff ff13 	bl	8004090 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800426a:	bf00      	nop
 800426c:	3718      	adds	r7, #24
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
	...

08004274 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b088      	sub	sp, #32
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4aa2      	ldr	r2, [pc, #648]	; (8004514 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d101      	bne.n	8004292 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800428e:	4ba2      	ldr	r3, [pc, #648]	; (8004518 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004290:	e001      	b.n	8004296 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004292:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a9b      	ldr	r2, [pc, #620]	; (8004514 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d101      	bne.n	80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80042ac:	4b9a      	ldr	r3, [pc, #616]	; (8004518 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80042ae:	e001      	b.n	80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80042b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042c0:	d004      	beq.n	80042cc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f040 8099 	bne.w	80043fe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d107      	bne.n	80042e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f925 	bl	8004530 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d107      	bne.n	8004300 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f9c8 	bl	8004690 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004306:	2b40      	cmp	r3, #64	; 0x40
 8004308:	d13a      	bne.n	8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f003 0320 	and.w	r3, r3, #32
 8004310:	2b00      	cmp	r3, #0
 8004312:	d035      	beq.n	8004380 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a7e      	ldr	r2, [pc, #504]	; (8004514 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d101      	bne.n	8004322 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800431e:	4b7e      	ldr	r3, [pc, #504]	; (8004518 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004320:	e001      	b.n	8004326 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004322:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4979      	ldr	r1, [pc, #484]	; (8004514 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800432e:	428b      	cmp	r3, r1
 8004330:	d101      	bne.n	8004336 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004332:	4b79      	ldr	r3, [pc, #484]	; (8004518 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004334:	e001      	b.n	800433a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004336:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800433a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800433e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800434e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004350:	2300      	movs	r3, #0
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004372:	f043 0202 	orr.w	r2, r3, #2
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7ff fe88 	bl	8004090 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b08      	cmp	r3, #8
 8004388:	f040 80be 	bne.w	8004508 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f003 0320 	and.w	r3, r3, #32
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 80b8 	beq.w	8004508 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043a6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a59      	ldr	r2, [pc, #356]	; (8004514 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d101      	bne.n	80043b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80043b2:	4b59      	ldr	r3, [pc, #356]	; (8004518 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80043b4:	e001      	b.n	80043ba <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80043b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4954      	ldr	r1, [pc, #336]	; (8004514 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043c2:	428b      	cmp	r3, r1
 80043c4:	d101      	bne.n	80043ca <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80043c6:	4b54      	ldr	r3, [pc, #336]	; (8004518 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80043c8:	e001      	b.n	80043ce <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80043ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043d2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80043d4:	2300      	movs	r3, #0
 80043d6:	60bb      	str	r3, [r7, #8]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	60bb      	str	r3, [r7, #8]
 80043e0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ee:	f043 0204 	orr.w	r2, r3, #4
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7ff fe4a 	bl	8004090 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043fc:	e084      	b.n	8004508 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b02      	cmp	r3, #2
 8004406:	d107      	bne.n	8004418 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f8be 	bl	8004594 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b01      	cmp	r3, #1
 8004420:	d107      	bne.n	8004432 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f8fd 	bl	800462c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004438:	2b40      	cmp	r3, #64	; 0x40
 800443a:	d12f      	bne.n	800449c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f003 0320 	and.w	r3, r3, #32
 8004442:	2b00      	cmp	r3, #0
 8004444:	d02a      	beq.n	800449c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004454:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a2e      	ldr	r2, [pc, #184]	; (8004514 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d101      	bne.n	8004464 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004460:	4b2d      	ldr	r3, [pc, #180]	; (8004518 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004462:	e001      	b.n	8004468 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004464:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4929      	ldr	r1, [pc, #164]	; (8004514 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004470:	428b      	cmp	r3, r1
 8004472:	d101      	bne.n	8004478 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004474:	4b28      	ldr	r3, [pc, #160]	; (8004518 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004476:	e001      	b.n	800447c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004478:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800447c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004480:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448e:	f043 0202 	orr.w	r2, r3, #2
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7ff fdfa 	bl	8004090 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b08      	cmp	r3, #8
 80044a4:	d131      	bne.n	800450a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f003 0320 	and.w	r3, r3, #32
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d02c      	beq.n	800450a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a17      	ldr	r2, [pc, #92]	; (8004514 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d101      	bne.n	80044be <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80044ba:	4b17      	ldr	r3, [pc, #92]	; (8004518 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80044bc:	e001      	b.n	80044c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80044be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4912      	ldr	r1, [pc, #72]	; (8004514 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80044ca:	428b      	cmp	r3, r1
 80044cc:	d101      	bne.n	80044d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80044ce:	4b12      	ldr	r3, [pc, #72]	; (8004518 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80044d0:	e001      	b.n	80044d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80044d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044da:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044ea:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f8:	f043 0204 	orr.w	r2, r3, #4
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff fdc5 	bl	8004090 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004506:	e000      	b.n	800450a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004508:	bf00      	nop
}
 800450a:	bf00      	nop
 800450c:	3720      	adds	r7, #32
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	40003800 	.word	0x40003800
 8004518:	40003400 	.word	0x40003400

0800451c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	1c99      	adds	r1, r3, #2
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6251      	str	r1, [r2, #36]	; 0x24
 8004542:	881a      	ldrh	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454e:	b29b      	uxth	r3, r3
 8004550:	3b01      	subs	r3, #1
 8004552:	b29a      	uxth	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455c:	b29b      	uxth	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d113      	bne.n	800458a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004570:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004576:	b29b      	uxth	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d106      	bne.n	800458a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7ff ffc9 	bl	800451c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800458a:	bf00      	nop
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
	...

08004594 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	1c99      	adds	r1, r3, #2
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6251      	str	r1, [r2, #36]	; 0x24
 80045a6:	8819      	ldrh	r1, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a1d      	ldr	r2, [pc, #116]	; (8004624 <I2SEx_TxISR_I2SExt+0x90>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d101      	bne.n	80045b6 <I2SEx_TxISR_I2SExt+0x22>
 80045b2:	4b1d      	ldr	r3, [pc, #116]	; (8004628 <I2SEx_TxISR_I2SExt+0x94>)
 80045b4:	e001      	b.n	80045ba <I2SEx_TxISR_I2SExt+0x26>
 80045b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045ba:	460a      	mov	r2, r1
 80045bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	3b01      	subs	r3, #1
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d121      	bne.n	800461a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a12      	ldr	r2, [pc, #72]	; (8004624 <I2SEx_TxISR_I2SExt+0x90>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d101      	bne.n	80045e4 <I2SEx_TxISR_I2SExt+0x50>
 80045e0:	4b11      	ldr	r3, [pc, #68]	; (8004628 <I2SEx_TxISR_I2SExt+0x94>)
 80045e2:	e001      	b.n	80045e8 <I2SEx_TxISR_I2SExt+0x54>
 80045e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	490d      	ldr	r1, [pc, #52]	; (8004624 <I2SEx_TxISR_I2SExt+0x90>)
 80045f0:	428b      	cmp	r3, r1
 80045f2:	d101      	bne.n	80045f8 <I2SEx_TxISR_I2SExt+0x64>
 80045f4:	4b0c      	ldr	r3, [pc, #48]	; (8004628 <I2SEx_TxISR_I2SExt+0x94>)
 80045f6:	e001      	b.n	80045fc <I2SEx_TxISR_I2SExt+0x68>
 80045f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004600:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004606:	b29b      	uxth	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d106      	bne.n	800461a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7ff ff81 	bl	800451c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800461a:	bf00      	nop
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	40003800 	.word	0x40003800
 8004628:	40003400 	.word	0x40003400

0800462c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68d8      	ldr	r0, [r3, #12]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463e:	1c99      	adds	r1, r3, #2
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004644:	b282      	uxth	r2, r0
 8004646:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800464c:	b29b      	uxth	r3, r3
 800464e:	3b01      	subs	r3, #1
 8004650:	b29a      	uxth	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800465a:	b29b      	uxth	r3, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	d113      	bne.n	8004688 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800466e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004674:	b29b      	uxth	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d106      	bne.n	8004688 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7ff ff4a 	bl	800451c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004688:	bf00      	nop
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a20      	ldr	r2, [pc, #128]	; (8004720 <I2SEx_RxISR_I2SExt+0x90>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d101      	bne.n	80046a6 <I2SEx_RxISR_I2SExt+0x16>
 80046a2:	4b20      	ldr	r3, [pc, #128]	; (8004724 <I2SEx_RxISR_I2SExt+0x94>)
 80046a4:	e001      	b.n	80046aa <I2SEx_RxISR_I2SExt+0x1a>
 80046a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046aa:	68d8      	ldr	r0, [r3, #12]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b0:	1c99      	adds	r1, r3, #2
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80046b6:	b282      	uxth	r2, r0
 80046b8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80046be:	b29b      	uxth	r3, r3
 80046c0:	3b01      	subs	r3, #1
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d121      	bne.n	8004716 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a12      	ldr	r2, [pc, #72]	; (8004720 <I2SEx_RxISR_I2SExt+0x90>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d101      	bne.n	80046e0 <I2SEx_RxISR_I2SExt+0x50>
 80046dc:	4b11      	ldr	r3, [pc, #68]	; (8004724 <I2SEx_RxISR_I2SExt+0x94>)
 80046de:	e001      	b.n	80046e4 <I2SEx_RxISR_I2SExt+0x54>
 80046e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	490d      	ldr	r1, [pc, #52]	; (8004720 <I2SEx_RxISR_I2SExt+0x90>)
 80046ec:	428b      	cmp	r3, r1
 80046ee:	d101      	bne.n	80046f4 <I2SEx_RxISR_I2SExt+0x64>
 80046f0:	4b0c      	ldr	r3, [pc, #48]	; (8004724 <I2SEx_RxISR_I2SExt+0x94>)
 80046f2:	e001      	b.n	80046f8 <I2SEx_RxISR_I2SExt+0x68>
 80046f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046fc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004702:	b29b      	uxth	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d106      	bne.n	8004716 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff ff03 	bl	800451c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004716:	bf00      	nop
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40003800 	.word	0x40003800
 8004724:	40003400 	.word	0x40003400

08004728 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e264      	b.n	8004c04 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d075      	beq.n	8004832 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004746:	4ba3      	ldr	r3, [pc, #652]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 030c 	and.w	r3, r3, #12
 800474e:	2b04      	cmp	r3, #4
 8004750:	d00c      	beq.n	800476c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004752:	4ba0      	ldr	r3, [pc, #640]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800475a:	2b08      	cmp	r3, #8
 800475c:	d112      	bne.n	8004784 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800475e:	4b9d      	ldr	r3, [pc, #628]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800476a:	d10b      	bne.n	8004784 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800476c:	4b99      	ldr	r3, [pc, #612]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d05b      	beq.n	8004830 <HAL_RCC_OscConfig+0x108>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d157      	bne.n	8004830 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e23f      	b.n	8004c04 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800478c:	d106      	bne.n	800479c <HAL_RCC_OscConfig+0x74>
 800478e:	4b91      	ldr	r3, [pc, #580]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a90      	ldr	r2, [pc, #576]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 8004794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	e01d      	b.n	80047d8 <HAL_RCC_OscConfig+0xb0>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047a4:	d10c      	bne.n	80047c0 <HAL_RCC_OscConfig+0x98>
 80047a6:	4b8b      	ldr	r3, [pc, #556]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a8a      	ldr	r2, [pc, #552]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 80047ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	4b88      	ldr	r3, [pc, #544]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a87      	ldr	r2, [pc, #540]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 80047b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	e00b      	b.n	80047d8 <HAL_RCC_OscConfig+0xb0>
 80047c0:	4b84      	ldr	r3, [pc, #528]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a83      	ldr	r2, [pc, #524]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 80047c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	4b81      	ldr	r3, [pc, #516]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a80      	ldr	r2, [pc, #512]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 80047d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d013      	beq.n	8004808 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e0:	f7fc fe3e 	bl	8001460 <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047e8:	f7fc fe3a 	bl	8001460 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b64      	cmp	r3, #100	; 0x64
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e204      	b.n	8004c04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047fa:	4b76      	ldr	r3, [pc, #472]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0f0      	beq.n	80047e8 <HAL_RCC_OscConfig+0xc0>
 8004806:	e014      	b.n	8004832 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004808:	f7fc fe2a 	bl	8001460 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004810:	f7fc fe26 	bl	8001460 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b64      	cmp	r3, #100	; 0x64
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e1f0      	b.n	8004c04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004822:	4b6c      	ldr	r3, [pc, #432]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1f0      	bne.n	8004810 <HAL_RCC_OscConfig+0xe8>
 800482e:	e000      	b.n	8004832 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d063      	beq.n	8004906 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800483e:	4b65      	ldr	r3, [pc, #404]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 030c 	and.w	r3, r3, #12
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00b      	beq.n	8004862 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800484a:	4b62      	ldr	r3, [pc, #392]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004852:	2b08      	cmp	r3, #8
 8004854:	d11c      	bne.n	8004890 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004856:	4b5f      	ldr	r3, [pc, #380]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d116      	bne.n	8004890 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004862:	4b5c      	ldr	r3, [pc, #368]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d005      	beq.n	800487a <HAL_RCC_OscConfig+0x152>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d001      	beq.n	800487a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e1c4      	b.n	8004c04 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800487a:	4b56      	ldr	r3, [pc, #344]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	4952      	ldr	r1, [pc, #328]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 800488a:	4313      	orrs	r3, r2
 800488c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800488e:	e03a      	b.n	8004906 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d020      	beq.n	80048da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004898:	4b4f      	ldr	r3, [pc, #316]	; (80049d8 <HAL_RCC_OscConfig+0x2b0>)
 800489a:	2201      	movs	r2, #1
 800489c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489e:	f7fc fddf 	bl	8001460 <HAL_GetTick>
 80048a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048a6:	f7fc fddb 	bl	8001460 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e1a5      	b.n	8004c04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048b8:	4b46      	ldr	r3, [pc, #280]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0f0      	beq.n	80048a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c4:	4b43      	ldr	r3, [pc, #268]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	4940      	ldr	r1, [pc, #256]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	600b      	str	r3, [r1, #0]
 80048d8:	e015      	b.n	8004906 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048da:	4b3f      	ldr	r3, [pc, #252]	; (80049d8 <HAL_RCC_OscConfig+0x2b0>)
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e0:	f7fc fdbe 	bl	8001460 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048e8:	f7fc fdba 	bl	8001460 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e184      	b.n	8004c04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048fa:	4b36      	ldr	r3, [pc, #216]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1f0      	bne.n	80048e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b00      	cmp	r3, #0
 8004910:	d030      	beq.n	8004974 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d016      	beq.n	8004948 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800491a:	4b30      	ldr	r3, [pc, #192]	; (80049dc <HAL_RCC_OscConfig+0x2b4>)
 800491c:	2201      	movs	r2, #1
 800491e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004920:	f7fc fd9e 	bl	8001460 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004928:	f7fc fd9a 	bl	8001460 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e164      	b.n	8004c04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800493a:	4b26      	ldr	r3, [pc, #152]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 800493c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d0f0      	beq.n	8004928 <HAL_RCC_OscConfig+0x200>
 8004946:	e015      	b.n	8004974 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004948:	4b24      	ldr	r3, [pc, #144]	; (80049dc <HAL_RCC_OscConfig+0x2b4>)
 800494a:	2200      	movs	r2, #0
 800494c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800494e:	f7fc fd87 	bl	8001460 <HAL_GetTick>
 8004952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004954:	e008      	b.n	8004968 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004956:	f7fc fd83 	bl	8001460 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e14d      	b.n	8004c04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004968:	4b1a      	ldr	r3, [pc, #104]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 800496a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1f0      	bne.n	8004956 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 80a0 	beq.w	8004ac2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004982:	2300      	movs	r3, #0
 8004984:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004986:	4b13      	ldr	r3, [pc, #76]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10f      	bne.n	80049b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004992:	2300      	movs	r3, #0
 8004994:	60bb      	str	r3, [r7, #8]
 8004996:	4b0f      	ldr	r3, [pc, #60]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	4a0e      	ldr	r2, [pc, #56]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 800499c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049a0:	6413      	str	r3, [r2, #64]	; 0x40
 80049a2:	4b0c      	ldr	r3, [pc, #48]	; (80049d4 <HAL_RCC_OscConfig+0x2ac>)
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049aa:	60bb      	str	r3, [r7, #8]
 80049ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ae:	2301      	movs	r3, #1
 80049b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b2:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <HAL_RCC_OscConfig+0x2b8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d121      	bne.n	8004a02 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049be:	4b08      	ldr	r3, [pc, #32]	; (80049e0 <HAL_RCC_OscConfig+0x2b8>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a07      	ldr	r2, [pc, #28]	; (80049e0 <HAL_RCC_OscConfig+0x2b8>)
 80049c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ca:	f7fc fd49 	bl	8001460 <HAL_GetTick>
 80049ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d0:	e011      	b.n	80049f6 <HAL_RCC_OscConfig+0x2ce>
 80049d2:	bf00      	nop
 80049d4:	40023800 	.word	0x40023800
 80049d8:	42470000 	.word	0x42470000
 80049dc:	42470e80 	.word	0x42470e80
 80049e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049e4:	f7fc fd3c 	bl	8001460 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e106      	b.n	8004c04 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f6:	4b85      	ldr	r3, [pc, #532]	; (8004c0c <HAL_RCC_OscConfig+0x4e4>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0f0      	beq.n	80049e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d106      	bne.n	8004a18 <HAL_RCC_OscConfig+0x2f0>
 8004a0a:	4b81      	ldr	r3, [pc, #516]	; (8004c10 <HAL_RCC_OscConfig+0x4e8>)
 8004a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0e:	4a80      	ldr	r2, [pc, #512]	; (8004c10 <HAL_RCC_OscConfig+0x4e8>)
 8004a10:	f043 0301 	orr.w	r3, r3, #1
 8004a14:	6713      	str	r3, [r2, #112]	; 0x70
 8004a16:	e01c      	b.n	8004a52 <HAL_RCC_OscConfig+0x32a>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	2b05      	cmp	r3, #5
 8004a1e:	d10c      	bne.n	8004a3a <HAL_RCC_OscConfig+0x312>
 8004a20:	4b7b      	ldr	r3, [pc, #492]	; (8004c10 <HAL_RCC_OscConfig+0x4e8>)
 8004a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a24:	4a7a      	ldr	r2, [pc, #488]	; (8004c10 <HAL_RCC_OscConfig+0x4e8>)
 8004a26:	f043 0304 	orr.w	r3, r3, #4
 8004a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a2c:	4b78      	ldr	r3, [pc, #480]	; (8004c10 <HAL_RCC_OscConfig+0x4e8>)
 8004a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a30:	4a77      	ldr	r2, [pc, #476]	; (8004c10 <HAL_RCC_OscConfig+0x4e8>)
 8004a32:	f043 0301 	orr.w	r3, r3, #1
 8004a36:	6713      	str	r3, [r2, #112]	; 0x70
 8004a38:	e00b      	b.n	8004a52 <HAL_RCC_OscConfig+0x32a>
 8004a3a:	4b75      	ldr	r3, [pc, #468]	; (8004c10 <HAL_RCC_OscConfig+0x4e8>)
 8004a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3e:	4a74      	ldr	r2, [pc, #464]	; (8004c10 <HAL_RCC_OscConfig+0x4e8>)
 8004a40:	f023 0301 	bic.w	r3, r3, #1
 8004a44:	6713      	str	r3, [r2, #112]	; 0x70
 8004a46:	4b72      	ldr	r3, [pc, #456]	; (8004c10 <HAL_RCC_OscConfig+0x4e8>)
 8004a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4a:	4a71      	ldr	r2, [pc, #452]	; (8004c10 <HAL_RCC_OscConfig+0x4e8>)
 8004a4c:	f023 0304 	bic.w	r3, r3, #4
 8004a50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d015      	beq.n	8004a86 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5a:	f7fc fd01 	bl	8001460 <HAL_GetTick>
 8004a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a60:	e00a      	b.n	8004a78 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a62:	f7fc fcfd 	bl	8001460 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e0c5      	b.n	8004c04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a78:	4b65      	ldr	r3, [pc, #404]	; (8004c10 <HAL_RCC_OscConfig+0x4e8>)
 8004a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0ee      	beq.n	8004a62 <HAL_RCC_OscConfig+0x33a>
 8004a84:	e014      	b.n	8004ab0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a86:	f7fc fceb 	bl	8001460 <HAL_GetTick>
 8004a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a8c:	e00a      	b.n	8004aa4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a8e:	f7fc fce7 	bl	8001460 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e0af      	b.n	8004c04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aa4:	4b5a      	ldr	r3, [pc, #360]	; (8004c10 <HAL_RCC_OscConfig+0x4e8>)
 8004aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1ee      	bne.n	8004a8e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ab0:	7dfb      	ldrb	r3, [r7, #23]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d105      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ab6:	4b56      	ldr	r3, [pc, #344]	; (8004c10 <HAL_RCC_OscConfig+0x4e8>)
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	4a55      	ldr	r2, [pc, #340]	; (8004c10 <HAL_RCC_OscConfig+0x4e8>)
 8004abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ac0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f000 809b 	beq.w	8004c02 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004acc:	4b50      	ldr	r3, [pc, #320]	; (8004c10 <HAL_RCC_OscConfig+0x4e8>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f003 030c 	and.w	r3, r3, #12
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	d05c      	beq.n	8004b92 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d141      	bne.n	8004b64 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ae0:	4b4c      	ldr	r3, [pc, #304]	; (8004c14 <HAL_RCC_OscConfig+0x4ec>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae6:	f7fc fcbb 	bl	8001460 <HAL_GetTick>
 8004aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aec:	e008      	b.n	8004b00 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aee:	f7fc fcb7 	bl	8001460 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e081      	b.n	8004c04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b00:	4b43      	ldr	r3, [pc, #268]	; (8004c10 <HAL_RCC_OscConfig+0x4e8>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1f0      	bne.n	8004aee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	69da      	ldr	r2, [r3, #28]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	431a      	orrs	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1a:	019b      	lsls	r3, r3, #6
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b22:	085b      	lsrs	r3, r3, #1
 8004b24:	3b01      	subs	r3, #1
 8004b26:	041b      	lsls	r3, r3, #16
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2e:	061b      	lsls	r3, r3, #24
 8004b30:	4937      	ldr	r1, [pc, #220]	; (8004c10 <HAL_RCC_OscConfig+0x4e8>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b36:	4b37      	ldr	r3, [pc, #220]	; (8004c14 <HAL_RCC_OscConfig+0x4ec>)
 8004b38:	2201      	movs	r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3c:	f7fc fc90 	bl	8001460 <HAL_GetTick>
 8004b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b44:	f7fc fc8c 	bl	8001460 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e056      	b.n	8004c04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b56:	4b2e      	ldr	r3, [pc, #184]	; (8004c10 <HAL_RCC_OscConfig+0x4e8>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d0f0      	beq.n	8004b44 <HAL_RCC_OscConfig+0x41c>
 8004b62:	e04e      	b.n	8004c02 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b64:	4b2b      	ldr	r3, [pc, #172]	; (8004c14 <HAL_RCC_OscConfig+0x4ec>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b6a:	f7fc fc79 	bl	8001460 <HAL_GetTick>
 8004b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b70:	e008      	b.n	8004b84 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b72:	f7fc fc75 	bl	8001460 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e03f      	b.n	8004c04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b84:	4b22      	ldr	r3, [pc, #136]	; (8004c10 <HAL_RCC_OscConfig+0x4e8>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1f0      	bne.n	8004b72 <HAL_RCC_OscConfig+0x44a>
 8004b90:	e037      	b.n	8004c02 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d101      	bne.n	8004b9e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e032      	b.n	8004c04 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b9e:	4b1c      	ldr	r3, [pc, #112]	; (8004c10 <HAL_RCC_OscConfig+0x4e8>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d028      	beq.n	8004bfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d121      	bne.n	8004bfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d11a      	bne.n	8004bfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004bce:	4013      	ands	r3, r2
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bd4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d111      	bne.n	8004bfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be4:	085b      	lsrs	r3, r3, #1
 8004be6:	3b01      	subs	r3, #1
 8004be8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d107      	bne.n	8004bfe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d001      	beq.n	8004c02 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e000      	b.n	8004c04 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3718      	adds	r7, #24
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40007000 	.word	0x40007000
 8004c10:	40023800 	.word	0x40023800
 8004c14:	42470060 	.word	0x42470060

08004c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e0cc      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c2c:	4b68      	ldr	r3, [pc, #416]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d90c      	bls.n	8004c54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3a:	4b65      	ldr	r3, [pc, #404]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	b2d2      	uxtb	r2, r2
 8004c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c42:	4b63      	ldr	r3, [pc, #396]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d001      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e0b8      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d020      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d005      	beq.n	8004c78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c6c:	4b59      	ldr	r3, [pc, #356]	; (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	4a58      	ldr	r2, [pc, #352]	; (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0308 	and.w	r3, r3, #8
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d005      	beq.n	8004c90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c84:	4b53      	ldr	r3, [pc, #332]	; (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	4a52      	ldr	r2, [pc, #328]	; (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c90:	4b50      	ldr	r3, [pc, #320]	; (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	494d      	ldr	r1, [pc, #308]	; (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d044      	beq.n	8004d38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d107      	bne.n	8004cc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cb6:	4b47      	ldr	r3, [pc, #284]	; (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d119      	bne.n	8004cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e07f      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d003      	beq.n	8004cd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cd2:	2b03      	cmp	r3, #3
 8004cd4:	d107      	bne.n	8004ce6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cd6:	4b3f      	ldr	r3, [pc, #252]	; (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d109      	bne.n	8004cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e06f      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce6:	4b3b      	ldr	r3, [pc, #236]	; (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e067      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cf6:	4b37      	ldr	r3, [pc, #220]	; (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f023 0203 	bic.w	r2, r3, #3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	4934      	ldr	r1, [pc, #208]	; (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d08:	f7fc fbaa 	bl	8001460 <HAL_GetTick>
 8004d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d0e:	e00a      	b.n	8004d26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d10:	f7fc fba6 	bl	8001460 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e04f      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d26:	4b2b      	ldr	r3, [pc, #172]	; (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 020c 	and.w	r2, r3, #12
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d1eb      	bne.n	8004d10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d38:	4b25      	ldr	r3, [pc, #148]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d20c      	bcs.n	8004d60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d46:	4b22      	ldr	r3, [pc, #136]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d4e:	4b20      	ldr	r3, [pc, #128]	; (8004dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0307 	and.w	r3, r3, #7
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d001      	beq.n	8004d60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e032      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d008      	beq.n	8004d7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d6c:	4b19      	ldr	r3, [pc, #100]	; (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	4916      	ldr	r1, [pc, #88]	; (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d009      	beq.n	8004d9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d8a:	4b12      	ldr	r3, [pc, #72]	; (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	490e      	ldr	r1, [pc, #56]	; (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d9e:	f000 f821 	bl	8004de4 <HAL_RCC_GetSysClockFreq>
 8004da2:	4602      	mov	r2, r0
 8004da4:	4b0b      	ldr	r3, [pc, #44]	; (8004dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	091b      	lsrs	r3, r3, #4
 8004daa:	f003 030f 	and.w	r3, r3, #15
 8004dae:	490a      	ldr	r1, [pc, #40]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004db0:	5ccb      	ldrb	r3, [r1, r3]
 8004db2:	fa22 f303 	lsr.w	r3, r2, r3
 8004db6:	4a09      	ldr	r2, [pc, #36]	; (8004ddc <HAL_RCC_ClockConfig+0x1c4>)
 8004db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004dba:	4b09      	ldr	r3, [pc, #36]	; (8004de0 <HAL_RCC_ClockConfig+0x1c8>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fc fb0a 	bl	80013d8 <HAL_InitTick>

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	40023c00 	.word	0x40023c00
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	0800b58c 	.word	0x0800b58c
 8004ddc:	20000018 	.word	0x20000018
 8004de0:	2000001c 	.word	0x2000001c

08004de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004de4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004de8:	b084      	sub	sp, #16
 8004dea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	607b      	str	r3, [r7, #4]
 8004df0:	2300      	movs	r3, #0
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	2300      	movs	r3, #0
 8004df6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dfc:	4b67      	ldr	r3, [pc, #412]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f003 030c 	and.w	r3, r3, #12
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d00d      	beq.n	8004e24 <HAL_RCC_GetSysClockFreq+0x40>
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	f200 80bd 	bhi.w	8004f88 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d002      	beq.n	8004e18 <HAL_RCC_GetSysClockFreq+0x34>
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d003      	beq.n	8004e1e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e16:	e0b7      	b.n	8004f88 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e18:	4b61      	ldr	r3, [pc, #388]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004e1a:	60bb      	str	r3, [r7, #8]
       break;
 8004e1c:	e0b7      	b.n	8004f8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e1e:	4b61      	ldr	r3, [pc, #388]	; (8004fa4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004e20:	60bb      	str	r3, [r7, #8]
      break;
 8004e22:	e0b4      	b.n	8004f8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e24:	4b5d      	ldr	r3, [pc, #372]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e2c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e2e:	4b5b      	ldr	r3, [pc, #364]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d04d      	beq.n	8004ed6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e3a:	4b58      	ldr	r3, [pc, #352]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	099b      	lsrs	r3, r3, #6
 8004e40:	461a      	mov	r2, r3
 8004e42:	f04f 0300 	mov.w	r3, #0
 8004e46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e4a:	f04f 0100 	mov.w	r1, #0
 8004e4e:	ea02 0800 	and.w	r8, r2, r0
 8004e52:	ea03 0901 	and.w	r9, r3, r1
 8004e56:	4640      	mov	r0, r8
 8004e58:	4649      	mov	r1, r9
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	f04f 0300 	mov.w	r3, #0
 8004e62:	014b      	lsls	r3, r1, #5
 8004e64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e68:	0142      	lsls	r2, r0, #5
 8004e6a:	4610      	mov	r0, r2
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	ebb0 0008 	subs.w	r0, r0, r8
 8004e72:	eb61 0109 	sbc.w	r1, r1, r9
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	f04f 0300 	mov.w	r3, #0
 8004e7e:	018b      	lsls	r3, r1, #6
 8004e80:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e84:	0182      	lsls	r2, r0, #6
 8004e86:	1a12      	subs	r2, r2, r0
 8004e88:	eb63 0301 	sbc.w	r3, r3, r1
 8004e8c:	f04f 0000 	mov.w	r0, #0
 8004e90:	f04f 0100 	mov.w	r1, #0
 8004e94:	00d9      	lsls	r1, r3, #3
 8004e96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e9a:	00d0      	lsls	r0, r2, #3
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	eb12 0208 	adds.w	r2, r2, r8
 8004ea4:	eb43 0309 	adc.w	r3, r3, r9
 8004ea8:	f04f 0000 	mov.w	r0, #0
 8004eac:	f04f 0100 	mov.w	r1, #0
 8004eb0:	0259      	lsls	r1, r3, #9
 8004eb2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004eb6:	0250      	lsls	r0, r2, #9
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	4610      	mov	r0, r2
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	f04f 0300 	mov.w	r3, #0
 8004ec8:	f7fb f97e 	bl	80001c8 <__aeabi_uldivmod>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	e04a      	b.n	8004f6c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ed6:	4b31      	ldr	r3, [pc, #196]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	099b      	lsrs	r3, r3, #6
 8004edc:	461a      	mov	r2, r3
 8004ede:	f04f 0300 	mov.w	r3, #0
 8004ee2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004ee6:	f04f 0100 	mov.w	r1, #0
 8004eea:	ea02 0400 	and.w	r4, r2, r0
 8004eee:	ea03 0501 	and.w	r5, r3, r1
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	4629      	mov	r1, r5
 8004ef6:	f04f 0200 	mov.w	r2, #0
 8004efa:	f04f 0300 	mov.w	r3, #0
 8004efe:	014b      	lsls	r3, r1, #5
 8004f00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f04:	0142      	lsls	r2, r0, #5
 8004f06:	4610      	mov	r0, r2
 8004f08:	4619      	mov	r1, r3
 8004f0a:	1b00      	subs	r0, r0, r4
 8004f0c:	eb61 0105 	sbc.w	r1, r1, r5
 8004f10:	f04f 0200 	mov.w	r2, #0
 8004f14:	f04f 0300 	mov.w	r3, #0
 8004f18:	018b      	lsls	r3, r1, #6
 8004f1a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f1e:	0182      	lsls	r2, r0, #6
 8004f20:	1a12      	subs	r2, r2, r0
 8004f22:	eb63 0301 	sbc.w	r3, r3, r1
 8004f26:	f04f 0000 	mov.w	r0, #0
 8004f2a:	f04f 0100 	mov.w	r1, #0
 8004f2e:	00d9      	lsls	r1, r3, #3
 8004f30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f34:	00d0      	lsls	r0, r2, #3
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	1912      	adds	r2, r2, r4
 8004f3c:	eb45 0303 	adc.w	r3, r5, r3
 8004f40:	f04f 0000 	mov.w	r0, #0
 8004f44:	f04f 0100 	mov.w	r1, #0
 8004f48:	0299      	lsls	r1, r3, #10
 8004f4a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004f4e:	0290      	lsls	r0, r2, #10
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	4610      	mov	r0, r2
 8004f56:	4619      	mov	r1, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	f04f 0300 	mov.w	r3, #0
 8004f60:	f7fb f932 	bl	80001c8 <__aeabi_uldivmod>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4613      	mov	r3, r2
 8004f6a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f6c:	4b0b      	ldr	r3, [pc, #44]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	0c1b      	lsrs	r3, r3, #16
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	3301      	adds	r3, #1
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f84:	60bb      	str	r3, [r7, #8]
      break;
 8004f86:	e002      	b.n	8004f8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f88:	4b05      	ldr	r3, [pc, #20]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004f8a:	60bb      	str	r3, [r7, #8]
      break;
 8004f8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f8e:	68bb      	ldr	r3, [r7, #8]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004f9a:	bf00      	nop
 8004f9c:	40023800 	.word	0x40023800
 8004fa0:	00f42400 	.word	0x00f42400
 8004fa4:	007a1200 	.word	0x007a1200

08004fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fac:	4b03      	ldr	r3, [pc, #12]	; (8004fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8004fae:	681b      	ldr	r3, [r3, #0]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	20000018 	.word	0x20000018

08004fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fc4:	f7ff fff0 	bl	8004fa8 <HAL_RCC_GetHCLKFreq>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	4b05      	ldr	r3, [pc, #20]	; (8004fe0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	0a9b      	lsrs	r3, r3, #10
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	4903      	ldr	r1, [pc, #12]	; (8004fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fd6:	5ccb      	ldrb	r3, [r1, r3]
 8004fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	40023800 	.word	0x40023800
 8004fe4:	0800b59c 	.word	0x0800b59c

08004fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004fec:	f7ff ffdc 	bl	8004fa8 <HAL_RCC_GetHCLKFreq>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	4b05      	ldr	r3, [pc, #20]	; (8005008 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	0b5b      	lsrs	r3, r3, #13
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	4903      	ldr	r1, [pc, #12]	; (800500c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ffe:	5ccb      	ldrb	r3, [r1, r3]
 8005000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005004:	4618      	mov	r0, r3
 8005006:	bd80      	pop	{r7, pc}
 8005008:	40023800 	.word	0x40023800
 800500c:	0800b59c 	.word	0x0800b59c

08005010 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005018:	2300      	movs	r3, #0
 800501a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800501c:	2300      	movs	r3, #0
 800501e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b00      	cmp	r3, #0
 800502a:	d105      	bne.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005034:	2b00      	cmp	r3, #0
 8005036:	d035      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005038:	4b62      	ldr	r3, [pc, #392]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800503a:	2200      	movs	r2, #0
 800503c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800503e:	f7fc fa0f 	bl	8001460 <HAL_GetTick>
 8005042:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005044:	e008      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005046:	f7fc fa0b 	bl	8001460 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d901      	bls.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e0b0      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005058:	4b5b      	ldr	r3, [pc, #364]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1f0      	bne.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	019a      	lsls	r2, r3, #6
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	071b      	lsls	r3, r3, #28
 8005070:	4955      	ldr	r1, [pc, #340]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005072:	4313      	orrs	r3, r2
 8005074:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005078:	4b52      	ldr	r3, [pc, #328]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800507a:	2201      	movs	r2, #1
 800507c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800507e:	f7fc f9ef 	bl	8001460 <HAL_GetTick>
 8005082:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005084:	e008      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005086:	f7fc f9eb 	bl	8001460 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b02      	cmp	r3, #2
 8005092:	d901      	bls.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e090      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005098:	4b4b      	ldr	r3, [pc, #300]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d0f0      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 8083 	beq.w	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80050b2:	2300      	movs	r3, #0
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	4b44      	ldr	r3, [pc, #272]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	4a43      	ldr	r2, [pc, #268]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c0:	6413      	str	r3, [r2, #64]	; 0x40
 80050c2:	4b41      	ldr	r3, [pc, #260]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80050ce:	4b3f      	ldr	r3, [pc, #252]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a3e      	ldr	r2, [pc, #248]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80050d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80050da:	f7fc f9c1 	bl	8001460 <HAL_GetTick>
 80050de:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050e0:	e008      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80050e2:	f7fc f9bd 	bl	8001460 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d901      	bls.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e062      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050f4:	4b35      	ldr	r3, [pc, #212]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0f0      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005100:	4b31      	ldr	r3, [pc, #196]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005104:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005108:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d02f      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	429a      	cmp	r2, r3
 800511c:	d028      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800511e:	4b2a      	ldr	r3, [pc, #168]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005126:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005128:	4b29      	ldr	r3, [pc, #164]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800512a:	2201      	movs	r2, #1
 800512c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800512e:	4b28      	ldr	r3, [pc, #160]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005130:	2200      	movs	r2, #0
 8005132:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005134:	4a24      	ldr	r2, [pc, #144]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800513a:	4b23      	ldr	r3, [pc, #140]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800513c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b01      	cmp	r3, #1
 8005144:	d114      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005146:	f7fc f98b 	bl	8001460 <HAL_GetTick>
 800514a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800514c:	e00a      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800514e:	f7fc f987 	bl	8001460 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	f241 3288 	movw	r2, #5000	; 0x1388
 800515c:	4293      	cmp	r3, r2
 800515e:	d901      	bls.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e02a      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005164:	4b18      	ldr	r3, [pc, #96]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005168:	f003 0302 	and.w	r3, r3, #2
 800516c:	2b00      	cmp	r3, #0
 800516e:	d0ee      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005178:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800517c:	d10d      	bne.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800517e:	4b12      	ldr	r3, [pc, #72]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800518e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005192:	490d      	ldr	r1, [pc, #52]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005194:	4313      	orrs	r3, r2
 8005196:	608b      	str	r3, [r1, #8]
 8005198:	e005      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800519a:	4b0b      	ldr	r3, [pc, #44]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	4a0a      	ldr	r2, [pc, #40]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051a0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80051a4:	6093      	str	r3, [r2, #8]
 80051a6:	4b08      	ldr	r3, [pc, #32]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051b2:	4905      	ldr	r1, [pc, #20]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	42470068 	.word	0x42470068
 80051c8:	40023800 	.word	0x40023800
 80051cc:	40007000 	.word	0x40007000
 80051d0:	42470e40 	.word	0x42470e40

080051d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d13e      	bne.n	8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80051f2:	4b23      	ldr	r3, [pc, #140]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d005      	beq.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d12f      	bne.n	8005268 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005208:	4b1e      	ldr	r3, [pc, #120]	; (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800520a:	617b      	str	r3, [r7, #20]
          break;
 800520c:	e02f      	b.n	800526e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800520e:	4b1c      	ldr	r3, [pc, #112]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800521a:	d108      	bne.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800521c:	4b18      	ldr	r3, [pc, #96]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005224:	4a18      	ldr	r2, [pc, #96]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005226:	fbb2 f3f3 	udiv	r3, r2, r3
 800522a:	613b      	str	r3, [r7, #16]
 800522c:	e007      	b.n	800523e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800522e:	4b14      	ldr	r3, [pc, #80]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005236:	4a15      	ldr	r2, [pc, #84]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005238:	fbb2 f3f3 	udiv	r3, r2, r3
 800523c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800523e:	4b10      	ldr	r3, [pc, #64]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005240:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005244:	099b      	lsrs	r3, r3, #6
 8005246:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	fb02 f303 	mul.w	r3, r2, r3
 8005250:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005252:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005258:	0f1b      	lsrs	r3, r3, #28
 800525a:	f003 0307 	and.w	r3, r3, #7
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	fbb2 f3f3 	udiv	r3, r2, r3
 8005264:	617b      	str	r3, [r7, #20]
          break;
 8005266:	e002      	b.n	800526e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005268:	2300      	movs	r3, #0
 800526a:	617b      	str	r3, [r7, #20]
          break;
 800526c:	bf00      	nop
        }
      }
      break;
 800526e:	bf00      	nop
    }
  }
  return frequency;
 8005270:	697b      	ldr	r3, [r7, #20]
}
 8005272:	4618      	mov	r0, r3
 8005274:	371c      	adds	r7, #28
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	40023800 	.word	0x40023800
 8005284:	00bb8000 	.word	0x00bb8000
 8005288:	007a1200 	.word	0x007a1200
 800528c:	00f42400 	.word	0x00f42400

08005290 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e07b      	b.n	800539a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d108      	bne.n	80052bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052b2:	d009      	beq.n	80052c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	61da      	str	r2, [r3, #28]
 80052ba:	e005      	b.n	80052c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d106      	bne.n	80052e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7fb fec8 	bl	8001078 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005310:	431a      	orrs	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800531a:	431a      	orrs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	431a      	orrs	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005338:	431a      	orrs	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534c:	ea42 0103 	orr.w	r1, r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005354:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	0c1b      	lsrs	r3, r3, #16
 8005366:	f003 0104 	and.w	r1, r3, #4
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	f003 0210 	and.w	r2, r3, #16
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	69da      	ldr	r2, [r3, #28]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005388:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b082      	sub	sp, #8
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e03f      	b.n	8005434 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d106      	bne.n	80053ce <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7fb fe9d 	bl	8001108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2224      	movs	r2, #36	; 0x24
 80053d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68da      	ldr	r2, [r3, #12]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053e4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f828 	bl	800543c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	691a      	ldr	r2, [r3, #16]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053fa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695a      	ldr	r2, [r3, #20]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800540a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68da      	ldr	r2, [r3, #12]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800541a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2220      	movs	r2, #32
 8005426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2220      	movs	r2, #32
 800542e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800543c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005440:	b09f      	sub	sp, #124	; 0x7c
 8005442:	af00      	add	r7, sp, #0
 8005444:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005452:	68d9      	ldr	r1, [r3, #12]
 8005454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	ea40 0301 	orr.w	r3, r0, r1
 800545c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800545e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	431a      	orrs	r2, r3
 8005468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	431a      	orrs	r2, r3
 800546e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	4313      	orrs	r3, r2
 8005474:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005480:	f021 010c 	bic.w	r1, r1, #12
 8005484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800548a:	430b      	orrs	r3, r1
 800548c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800548e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800549a:	6999      	ldr	r1, [r3, #24]
 800549c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	ea40 0301 	orr.w	r3, r0, r1
 80054a4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	4bc5      	ldr	r3, [pc, #788]	; (80057c0 <UART_SetConfig+0x384>)
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d004      	beq.n	80054ba <UART_SetConfig+0x7e>
 80054b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	4bc3      	ldr	r3, [pc, #780]	; (80057c4 <UART_SetConfig+0x388>)
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d103      	bne.n	80054c2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054ba:	f7ff fd95 	bl	8004fe8 <HAL_RCC_GetPCLK2Freq>
 80054be:	6778      	str	r0, [r7, #116]	; 0x74
 80054c0:	e002      	b.n	80054c8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054c2:	f7ff fd7d 	bl	8004fc0 <HAL_RCC_GetPCLK1Freq>
 80054c6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054d0:	f040 80b6 	bne.w	8005640 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054d6:	461c      	mov	r4, r3
 80054d8:	f04f 0500 	mov.w	r5, #0
 80054dc:	4622      	mov	r2, r4
 80054de:	462b      	mov	r3, r5
 80054e0:	1891      	adds	r1, r2, r2
 80054e2:	6439      	str	r1, [r7, #64]	; 0x40
 80054e4:	415b      	adcs	r3, r3
 80054e6:	647b      	str	r3, [r7, #68]	; 0x44
 80054e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054ec:	1912      	adds	r2, r2, r4
 80054ee:	eb45 0303 	adc.w	r3, r5, r3
 80054f2:	f04f 0000 	mov.w	r0, #0
 80054f6:	f04f 0100 	mov.w	r1, #0
 80054fa:	00d9      	lsls	r1, r3, #3
 80054fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005500:	00d0      	lsls	r0, r2, #3
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	1911      	adds	r1, r2, r4
 8005508:	6639      	str	r1, [r7, #96]	; 0x60
 800550a:	416b      	adcs	r3, r5
 800550c:	667b      	str	r3, [r7, #100]	; 0x64
 800550e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	461a      	mov	r2, r3
 8005514:	f04f 0300 	mov.w	r3, #0
 8005518:	1891      	adds	r1, r2, r2
 800551a:	63b9      	str	r1, [r7, #56]	; 0x38
 800551c:	415b      	adcs	r3, r3
 800551e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005520:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005524:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005528:	f7fa fe4e 	bl	80001c8 <__aeabi_uldivmod>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	4ba5      	ldr	r3, [pc, #660]	; (80057c8 <UART_SetConfig+0x38c>)
 8005532:	fba3 2302 	umull	r2, r3, r3, r2
 8005536:	095b      	lsrs	r3, r3, #5
 8005538:	011e      	lsls	r6, r3, #4
 800553a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800553c:	461c      	mov	r4, r3
 800553e:	f04f 0500 	mov.w	r5, #0
 8005542:	4622      	mov	r2, r4
 8005544:	462b      	mov	r3, r5
 8005546:	1891      	adds	r1, r2, r2
 8005548:	6339      	str	r1, [r7, #48]	; 0x30
 800554a:	415b      	adcs	r3, r3
 800554c:	637b      	str	r3, [r7, #52]	; 0x34
 800554e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005552:	1912      	adds	r2, r2, r4
 8005554:	eb45 0303 	adc.w	r3, r5, r3
 8005558:	f04f 0000 	mov.w	r0, #0
 800555c:	f04f 0100 	mov.w	r1, #0
 8005560:	00d9      	lsls	r1, r3, #3
 8005562:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005566:	00d0      	lsls	r0, r2, #3
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	1911      	adds	r1, r2, r4
 800556e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005570:	416b      	adcs	r3, r5
 8005572:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	461a      	mov	r2, r3
 800557a:	f04f 0300 	mov.w	r3, #0
 800557e:	1891      	adds	r1, r2, r2
 8005580:	62b9      	str	r1, [r7, #40]	; 0x28
 8005582:	415b      	adcs	r3, r3
 8005584:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005586:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800558a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800558e:	f7fa fe1b 	bl	80001c8 <__aeabi_uldivmod>
 8005592:	4602      	mov	r2, r0
 8005594:	460b      	mov	r3, r1
 8005596:	4b8c      	ldr	r3, [pc, #560]	; (80057c8 <UART_SetConfig+0x38c>)
 8005598:	fba3 1302 	umull	r1, r3, r3, r2
 800559c:	095b      	lsrs	r3, r3, #5
 800559e:	2164      	movs	r1, #100	; 0x64
 80055a0:	fb01 f303 	mul.w	r3, r1, r3
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	3332      	adds	r3, #50	; 0x32
 80055aa:	4a87      	ldr	r2, [pc, #540]	; (80057c8 <UART_SetConfig+0x38c>)
 80055ac:	fba2 2303 	umull	r2, r3, r2, r3
 80055b0:	095b      	lsrs	r3, r3, #5
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80055b8:	441e      	add	r6, r3
 80055ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055bc:	4618      	mov	r0, r3
 80055be:	f04f 0100 	mov.w	r1, #0
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	1894      	adds	r4, r2, r2
 80055c8:	623c      	str	r4, [r7, #32]
 80055ca:	415b      	adcs	r3, r3
 80055cc:	627b      	str	r3, [r7, #36]	; 0x24
 80055ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055d2:	1812      	adds	r2, r2, r0
 80055d4:	eb41 0303 	adc.w	r3, r1, r3
 80055d8:	f04f 0400 	mov.w	r4, #0
 80055dc:	f04f 0500 	mov.w	r5, #0
 80055e0:	00dd      	lsls	r5, r3, #3
 80055e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80055e6:	00d4      	lsls	r4, r2, #3
 80055e8:	4622      	mov	r2, r4
 80055ea:	462b      	mov	r3, r5
 80055ec:	1814      	adds	r4, r2, r0
 80055ee:	653c      	str	r4, [r7, #80]	; 0x50
 80055f0:	414b      	adcs	r3, r1
 80055f2:	657b      	str	r3, [r7, #84]	; 0x54
 80055f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	461a      	mov	r2, r3
 80055fa:	f04f 0300 	mov.w	r3, #0
 80055fe:	1891      	adds	r1, r2, r2
 8005600:	61b9      	str	r1, [r7, #24]
 8005602:	415b      	adcs	r3, r3
 8005604:	61fb      	str	r3, [r7, #28]
 8005606:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800560a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800560e:	f7fa fddb 	bl	80001c8 <__aeabi_uldivmod>
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	4b6c      	ldr	r3, [pc, #432]	; (80057c8 <UART_SetConfig+0x38c>)
 8005618:	fba3 1302 	umull	r1, r3, r3, r2
 800561c:	095b      	lsrs	r3, r3, #5
 800561e:	2164      	movs	r1, #100	; 0x64
 8005620:	fb01 f303 	mul.w	r3, r1, r3
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	3332      	adds	r3, #50	; 0x32
 800562a:	4a67      	ldr	r2, [pc, #412]	; (80057c8 <UART_SetConfig+0x38c>)
 800562c:	fba2 2303 	umull	r2, r3, r2, r3
 8005630:	095b      	lsrs	r3, r3, #5
 8005632:	f003 0207 	and.w	r2, r3, #7
 8005636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4432      	add	r2, r6
 800563c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800563e:	e0b9      	b.n	80057b4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005640:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005642:	461c      	mov	r4, r3
 8005644:	f04f 0500 	mov.w	r5, #0
 8005648:	4622      	mov	r2, r4
 800564a:	462b      	mov	r3, r5
 800564c:	1891      	adds	r1, r2, r2
 800564e:	6139      	str	r1, [r7, #16]
 8005650:	415b      	adcs	r3, r3
 8005652:	617b      	str	r3, [r7, #20]
 8005654:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005658:	1912      	adds	r2, r2, r4
 800565a:	eb45 0303 	adc.w	r3, r5, r3
 800565e:	f04f 0000 	mov.w	r0, #0
 8005662:	f04f 0100 	mov.w	r1, #0
 8005666:	00d9      	lsls	r1, r3, #3
 8005668:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800566c:	00d0      	lsls	r0, r2, #3
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
 8005672:	eb12 0804 	adds.w	r8, r2, r4
 8005676:	eb43 0905 	adc.w	r9, r3, r5
 800567a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	4618      	mov	r0, r3
 8005680:	f04f 0100 	mov.w	r1, #0
 8005684:	f04f 0200 	mov.w	r2, #0
 8005688:	f04f 0300 	mov.w	r3, #0
 800568c:	008b      	lsls	r3, r1, #2
 800568e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005692:	0082      	lsls	r2, r0, #2
 8005694:	4640      	mov	r0, r8
 8005696:	4649      	mov	r1, r9
 8005698:	f7fa fd96 	bl	80001c8 <__aeabi_uldivmod>
 800569c:	4602      	mov	r2, r0
 800569e:	460b      	mov	r3, r1
 80056a0:	4b49      	ldr	r3, [pc, #292]	; (80057c8 <UART_SetConfig+0x38c>)
 80056a2:	fba3 2302 	umull	r2, r3, r3, r2
 80056a6:	095b      	lsrs	r3, r3, #5
 80056a8:	011e      	lsls	r6, r3, #4
 80056aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056ac:	4618      	mov	r0, r3
 80056ae:	f04f 0100 	mov.w	r1, #0
 80056b2:	4602      	mov	r2, r0
 80056b4:	460b      	mov	r3, r1
 80056b6:	1894      	adds	r4, r2, r2
 80056b8:	60bc      	str	r4, [r7, #8]
 80056ba:	415b      	adcs	r3, r3
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056c2:	1812      	adds	r2, r2, r0
 80056c4:	eb41 0303 	adc.w	r3, r1, r3
 80056c8:	f04f 0400 	mov.w	r4, #0
 80056cc:	f04f 0500 	mov.w	r5, #0
 80056d0:	00dd      	lsls	r5, r3, #3
 80056d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80056d6:	00d4      	lsls	r4, r2, #3
 80056d8:	4622      	mov	r2, r4
 80056da:	462b      	mov	r3, r5
 80056dc:	1814      	adds	r4, r2, r0
 80056de:	64bc      	str	r4, [r7, #72]	; 0x48
 80056e0:	414b      	adcs	r3, r1
 80056e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	4618      	mov	r0, r3
 80056ea:	f04f 0100 	mov.w	r1, #0
 80056ee:	f04f 0200 	mov.w	r2, #0
 80056f2:	f04f 0300 	mov.w	r3, #0
 80056f6:	008b      	lsls	r3, r1, #2
 80056f8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80056fc:	0082      	lsls	r2, r0, #2
 80056fe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005702:	f7fa fd61 	bl	80001c8 <__aeabi_uldivmod>
 8005706:	4602      	mov	r2, r0
 8005708:	460b      	mov	r3, r1
 800570a:	4b2f      	ldr	r3, [pc, #188]	; (80057c8 <UART_SetConfig+0x38c>)
 800570c:	fba3 1302 	umull	r1, r3, r3, r2
 8005710:	095b      	lsrs	r3, r3, #5
 8005712:	2164      	movs	r1, #100	; 0x64
 8005714:	fb01 f303 	mul.w	r3, r1, r3
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	3332      	adds	r3, #50	; 0x32
 800571e:	4a2a      	ldr	r2, [pc, #168]	; (80057c8 <UART_SetConfig+0x38c>)
 8005720:	fba2 2303 	umull	r2, r3, r2, r3
 8005724:	095b      	lsrs	r3, r3, #5
 8005726:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800572a:	441e      	add	r6, r3
 800572c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800572e:	4618      	mov	r0, r3
 8005730:	f04f 0100 	mov.w	r1, #0
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	1894      	adds	r4, r2, r2
 800573a:	603c      	str	r4, [r7, #0]
 800573c:	415b      	adcs	r3, r3
 800573e:	607b      	str	r3, [r7, #4]
 8005740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005744:	1812      	adds	r2, r2, r0
 8005746:	eb41 0303 	adc.w	r3, r1, r3
 800574a:	f04f 0400 	mov.w	r4, #0
 800574e:	f04f 0500 	mov.w	r5, #0
 8005752:	00dd      	lsls	r5, r3, #3
 8005754:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005758:	00d4      	lsls	r4, r2, #3
 800575a:	4622      	mov	r2, r4
 800575c:	462b      	mov	r3, r5
 800575e:	eb12 0a00 	adds.w	sl, r2, r0
 8005762:	eb43 0b01 	adc.w	fp, r3, r1
 8005766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	4618      	mov	r0, r3
 800576c:	f04f 0100 	mov.w	r1, #0
 8005770:	f04f 0200 	mov.w	r2, #0
 8005774:	f04f 0300 	mov.w	r3, #0
 8005778:	008b      	lsls	r3, r1, #2
 800577a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800577e:	0082      	lsls	r2, r0, #2
 8005780:	4650      	mov	r0, sl
 8005782:	4659      	mov	r1, fp
 8005784:	f7fa fd20 	bl	80001c8 <__aeabi_uldivmod>
 8005788:	4602      	mov	r2, r0
 800578a:	460b      	mov	r3, r1
 800578c:	4b0e      	ldr	r3, [pc, #56]	; (80057c8 <UART_SetConfig+0x38c>)
 800578e:	fba3 1302 	umull	r1, r3, r3, r2
 8005792:	095b      	lsrs	r3, r3, #5
 8005794:	2164      	movs	r1, #100	; 0x64
 8005796:	fb01 f303 	mul.w	r3, r1, r3
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	011b      	lsls	r3, r3, #4
 800579e:	3332      	adds	r3, #50	; 0x32
 80057a0:	4a09      	ldr	r2, [pc, #36]	; (80057c8 <UART_SetConfig+0x38c>)
 80057a2:	fba2 2303 	umull	r2, r3, r2, r3
 80057a6:	095b      	lsrs	r3, r3, #5
 80057a8:	f003 020f 	and.w	r2, r3, #15
 80057ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4432      	add	r2, r6
 80057b2:	609a      	str	r2, [r3, #8]
}
 80057b4:	bf00      	nop
 80057b6:	377c      	adds	r7, #124	; 0x7c
 80057b8:	46bd      	mov	sp, r7
 80057ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057be:	bf00      	nop
 80057c0:	40011000 	.word	0x40011000
 80057c4:	40011400 	.word	0x40011400
 80057c8:	51eb851f 	.word	0x51eb851f

080057cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057cc:	b084      	sub	sp, #16
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b084      	sub	sp, #16
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
 80057d6:	f107 001c 	add.w	r0, r7, #28
 80057da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d122      	bne.n	800582a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80057f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800580c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800580e:	2b01      	cmp	r3, #1
 8005810:	d105      	bne.n	800581e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f9a0 	bl	8005b64 <USB_CoreReset>
 8005824:	4603      	mov	r3, r0
 8005826:	73fb      	strb	r3, [r7, #15]
 8005828:	e01a      	b.n	8005860 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f994 	bl	8005b64 <USB_CoreReset>
 800583c:	4603      	mov	r3, r0
 800583e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005842:	2b00      	cmp	r3, #0
 8005844:	d106      	bne.n	8005854 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	639a      	str	r2, [r3, #56]	; 0x38
 8005852:	e005      	b.n	8005860 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005858:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005862:	2b01      	cmp	r3, #1
 8005864:	d10b      	bne.n	800587e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f043 0206 	orr.w	r2, r3, #6
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f043 0220 	orr.w	r2, r3, #32
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800587e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005880:	4618      	mov	r0, r3
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800588a:	b004      	add	sp, #16
 800588c:	4770      	bx	lr

0800588e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800588e:	b480      	push	{r7}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f043 0201 	orr.w	r2, r3, #1
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f023 0201 	bic.w	r2, r3, #1
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b084      	sub	sp, #16
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	460b      	mov	r3, r1
 80058dc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80058de:	2300      	movs	r3, #0
 80058e0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058ee:	78fb      	ldrb	r3, [r7, #3]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d115      	bne.n	8005920 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005900:	2001      	movs	r0, #1
 8005902:	f7fb fdb9 	bl	8001478 <HAL_Delay>
      ms++;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	3301      	adds	r3, #1
 800590a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f91a 	bl	8005b46 <USB_GetMode>
 8005912:	4603      	mov	r3, r0
 8005914:	2b01      	cmp	r3, #1
 8005916:	d01e      	beq.n	8005956 <USB_SetCurrentMode+0x84>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2b31      	cmp	r3, #49	; 0x31
 800591c:	d9f0      	bls.n	8005900 <USB_SetCurrentMode+0x2e>
 800591e:	e01a      	b.n	8005956 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005920:	78fb      	ldrb	r3, [r7, #3]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d115      	bne.n	8005952 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005932:	2001      	movs	r0, #1
 8005934:	f7fb fda0 	bl	8001478 <HAL_Delay>
      ms++;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	3301      	adds	r3, #1
 800593c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f901 	bl	8005b46 <USB_GetMode>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d005      	beq.n	8005956 <USB_SetCurrentMode+0x84>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2b31      	cmp	r3, #49	; 0x31
 800594e:	d9f0      	bls.n	8005932 <USB_SetCurrentMode+0x60>
 8005950:	e001      	b.n	8005956 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e005      	b.n	8005962 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b32      	cmp	r3, #50	; 0x32
 800595a:	d101      	bne.n	8005960 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e000      	b.n	8005962 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
	...

0800596c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005976:	2300      	movs	r3, #0
 8005978:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	019b      	lsls	r3, r3, #6
 800597e:	f043 0220 	orr.w	r2, r3, #32
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	3301      	adds	r3, #1
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	4a08      	ldr	r2, [pc, #32]	; (80059b0 <USB_FlushTxFifo+0x44>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d901      	bls.n	8005996 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e006      	b.n	80059a4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f003 0320 	and.w	r3, r3, #32
 800599e:	2b20      	cmp	r3, #32
 80059a0:	d0f1      	beq.n	8005986 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	00030d40 	.word	0x00030d40

080059b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2210      	movs	r2, #16
 80059c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	3301      	adds	r3, #1
 80059ca:	60fb      	str	r3, [r7, #12]
 80059cc:	4a08      	ldr	r2, [pc, #32]	; (80059f0 <USB_FlushRxFifo+0x3c>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d901      	bls.n	80059d6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e006      	b.n	80059e4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	f003 0310 	and.w	r3, r3, #16
 80059de:	2b10      	cmp	r3, #16
 80059e0:	d0f1      	beq.n	80059c6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3714      	adds	r7, #20
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	00030d40 	.word	0x00030d40

080059f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b089      	sub	sp, #36	; 0x24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	4611      	mov	r1, r2
 8005a00:	461a      	mov	r2, r3
 8005a02:	460b      	mov	r3, r1
 8005a04:	71fb      	strb	r3, [r7, #7]
 8005a06:	4613      	mov	r3, r2
 8005a08:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d123      	bne.n	8005a62 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a1a:	88bb      	ldrh	r3, [r7, #4]
 8005a1c:	3303      	adds	r3, #3
 8005a1e:	089b      	lsrs	r3, r3, #2
 8005a20:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a22:	2300      	movs	r3, #0
 8005a24:	61bb      	str	r3, [r7, #24]
 8005a26:	e018      	b.n	8005a5a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a28:	79fb      	ldrb	r3, [r7, #7]
 8005a2a:	031a      	lsls	r2, r3, #12
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a34:	461a      	mov	r2, r3
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	3301      	adds	r3, #1
 8005a46:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	3301      	adds	r3, #1
 8005a52:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	3301      	adds	r3, #1
 8005a58:	61bb      	str	r3, [r7, #24]
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d3e2      	bcc.n	8005a28 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3724      	adds	r7, #36	; 0x24
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b08b      	sub	sp, #44	; 0x2c
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a86:	88fb      	ldrh	r3, [r7, #6]
 8005a88:	089b      	lsrs	r3, r3, #2
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a8e:	88fb      	ldrh	r3, [r7, #6]
 8005a90:	f003 0303 	and.w	r3, r3, #3
 8005a94:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a96:	2300      	movs	r3, #0
 8005a98:	623b      	str	r3, [r7, #32]
 8005a9a:	e014      	b.n	8005ac6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	601a      	str	r2, [r3, #0]
    pDest++;
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	3301      	adds	r3, #1
 8005aac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abc:	3301      	adds	r3, #1
 8005abe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	623b      	str	r3, [r7, #32]
 8005ac6:	6a3a      	ldr	r2, [r7, #32]
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d3e6      	bcc.n	8005a9c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005ace:	8bfb      	ldrh	r3, [r7, #30]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d01e      	beq.n	8005b12 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ade:	461a      	mov	r2, r3
 8005ae0:	f107 0310 	add.w	r3, r7, #16
 8005ae4:	6812      	ldr	r2, [r2, #0]
 8005ae6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	00db      	lsls	r3, r3, #3
 8005af0:	fa22 f303 	lsr.w	r3, r2, r3
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af8:	701a      	strb	r2, [r3, #0]
      i++;
 8005afa:	6a3b      	ldr	r3, [r7, #32]
 8005afc:	3301      	adds	r3, #1
 8005afe:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	3301      	adds	r3, #1
 8005b04:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005b06:	8bfb      	ldrh	r3, [r7, #30]
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005b0c:	8bfb      	ldrh	r3, [r7, #30]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1ea      	bne.n	8005ae8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	372c      	adds	r7, #44	; 0x2c
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	4013      	ands	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b38:	68fb      	ldr	r3, [r7, #12]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr

08005b46 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b083      	sub	sp, #12
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	f003 0301 	and.w	r3, r3, #1
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
	...

08005b64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	3301      	adds	r3, #1
 8005b74:	60fb      	str	r3, [r7, #12]
 8005b76:	4a13      	ldr	r2, [pc, #76]	; (8005bc4 <USB_CoreReset+0x60>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d901      	bls.n	8005b80 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e01a      	b.n	8005bb6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	daf3      	bge.n	8005b70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	f043 0201 	orr.w	r2, r3, #1
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	60fb      	str	r3, [r7, #12]
 8005b9e:	4a09      	ldr	r2, [pc, #36]	; (8005bc4 <USB_CoreReset+0x60>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d901      	bls.n	8005ba8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e006      	b.n	8005bb6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d0f1      	beq.n	8005b98 <USB_CoreReset+0x34>

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	00030d40 	.word	0x00030d40

08005bc8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bc8:	b084      	sub	sp, #16
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b084      	sub	sp, #16
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
 8005bd2:	f107 001c 	add.w	r0, r7, #28
 8005bd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005be4:	461a      	mov	r2, r3
 8005be6:	2300      	movs	r3, #0
 8005be8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c06:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d018      	beq.n	8005c4c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d10a      	bne.n	8005c36 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c2e:	f043 0304 	orr.w	r3, r3, #4
 8005c32:	6013      	str	r3, [r2, #0]
 8005c34:	e014      	b.n	8005c60 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c44:	f023 0304 	bic.w	r3, r3, #4
 8005c48:	6013      	str	r3, [r2, #0]
 8005c4a:	e009      	b.n	8005c60 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c5a:	f023 0304 	bic.w	r3, r3, #4
 8005c5e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005c60:	2110      	movs	r1, #16
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7ff fe82 	bl	800596c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f7ff fea3 	bl	80059b4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	e015      	b.n	8005ca0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c80:	461a      	mov	r2, r3
 8005c82:	f04f 33ff 	mov.w	r3, #4294967295
 8005c86:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c94:	461a      	mov	r2, r3
 8005c96:	2300      	movs	r3, #0
 8005c98:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d3e5      	bcc.n	8005c74 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8005cb4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00b      	beq.n	8005cda <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cc8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a13      	ldr	r2, [pc, #76]	; (8005d1c <USB_HostInit+0x154>)
 8005cce:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a13      	ldr	r2, [pc, #76]	; (8005d20 <USB_HostInit+0x158>)
 8005cd4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005cd8:	e009      	b.n	8005cee <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2280      	movs	r2, #128	; 0x80
 8005cde:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a10      	ldr	r2, [pc, #64]	; (8005d24 <USB_HostInit+0x15c>)
 8005ce4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a0f      	ldr	r2, [pc, #60]	; (8005d28 <USB_HostInit+0x160>)
 8005cea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d105      	bne.n	8005d00 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	f043 0210 	orr.w	r2, r3, #16
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	699a      	ldr	r2, [r3, #24]
 8005d04:	4b09      	ldr	r3, [pc, #36]	; (8005d2c <USB_HostInit+0x164>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d18:	b004      	add	sp, #16
 8005d1a:	4770      	bx	lr
 8005d1c:	01000200 	.word	0x01000200
 8005d20:	00e00300 	.word	0x00e00300
 8005d24:	00600080 	.word	0x00600080
 8005d28:	004000e0 	.word	0x004000e0
 8005d2c:	a3200008 	.word	0xa3200008

08005d30 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	460b      	mov	r3, r1
 8005d3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d4e:	f023 0303 	bic.w	r3, r3, #3
 8005d52:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	78fb      	ldrb	r3, [r7, #3]
 8005d5e:	f003 0303 	and.w	r3, r3, #3
 8005d62:	68f9      	ldr	r1, [r7, #12]
 8005d64:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005d6c:	78fb      	ldrb	r3, [r7, #3]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d107      	bne.n	8005d82 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d78:	461a      	mov	r2, r3
 8005d7a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005d7e:	6053      	str	r3, [r2, #4]
 8005d80:	e009      	b.n	8005d96 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005d82:	78fb      	ldrb	r3, [r7, #3]
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d106      	bne.n	8005d96 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d8e:	461a      	mov	r2, r3
 8005d90:	f241 7370 	movw	r3, #6000	; 0x1770
 8005d94:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3714      	adds	r7, #20
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005dc4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dd2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005dd4:	2064      	movs	r0, #100	; 0x64
 8005dd6:	f7fb fb4f 	bl	8001478 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005de2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005de6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005de8:	200a      	movs	r0, #10
 8005dea:	f7fb fb45 	bl	8001478 <HAL_Delay>

  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	460b      	mov	r3, r1
 8005e02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e1c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d109      	bne.n	8005e3c <USB_DriveVbus+0x44>
 8005e28:	78fb      	ldrb	r3, [r7, #3]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d106      	bne.n	8005e3c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e3a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e46:	d109      	bne.n	8005e5c <USB_DriveVbus+0x64>
 8005e48:	78fb      	ldrb	r3, [r7, #3]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d106      	bne.n	8005e5c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e5a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b085      	sub	sp, #20
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	0c5b      	lsrs	r3, r3, #17
 8005e88:	f003 0303 	and.w	r3, r3, #3
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	b29b      	uxth	r3, r3
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
	...

08005ebc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b088      	sub	sp, #32
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	4608      	mov	r0, r1
 8005ec6:	4611      	mov	r1, r2
 8005ec8:	461a      	mov	r2, r3
 8005eca:	4603      	mov	r3, r0
 8005ecc:	70fb      	strb	r3, [r7, #3]
 8005ece:	460b      	mov	r3, r1
 8005ed0:	70bb      	strb	r3, [r7, #2]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005ede:	78fb      	ldrb	r3, [r7, #3]
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eea:	461a      	mov	r2, r3
 8005eec:	f04f 33ff 	mov.w	r3, #4294967295
 8005ef0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005ef2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d87e      	bhi.n	8005ff8 <USB_HC_Init+0x13c>
 8005efa:	a201      	add	r2, pc, #4	; (adr r2, 8005f00 <USB_HC_Init+0x44>)
 8005efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f00:	08005f11 	.word	0x08005f11
 8005f04:	08005fbb 	.word	0x08005fbb
 8005f08:	08005f11 	.word	0x08005f11
 8005f0c:	08005f7d 	.word	0x08005f7d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f10:	78fb      	ldrb	r3, [r7, #3]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005f22:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005f24:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	da10      	bge.n	8005f4e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f2c:	78fb      	ldrb	r3, [r7, #3]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	78fa      	ldrb	r2, [r7, #3]
 8005f3c:	0151      	lsls	r1, r2, #5
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	440a      	add	r2, r1
 8005f42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f4a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005f4c:	e057      	b.n	8005ffe <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d051      	beq.n	8005ffe <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005f5a:	78fb      	ldrb	r3, [r7, #3]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	78fa      	ldrb	r2, [r7, #3]
 8005f6a:	0151      	lsls	r1, r2, #5
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	440a      	add	r2, r1
 8005f70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f74:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005f78:	60d3      	str	r3, [r2, #12]
      break;
 8005f7a:	e040      	b.n	8005ffe <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f7c:	78fb      	ldrb	r3, [r7, #3]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f88:	461a      	mov	r2, r3
 8005f8a:	f240 639d 	movw	r3, #1693	; 0x69d
 8005f8e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f90:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	da34      	bge.n	8006002 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f98:	78fb      	ldrb	r3, [r7, #3]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	78fa      	ldrb	r2, [r7, #3]
 8005fa8:	0151      	lsls	r1, r2, #5
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	440a      	add	r2, r1
 8005fae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fb6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005fb8:	e023      	b.n	8006002 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005fba:	78fb      	ldrb	r3, [r7, #3]
 8005fbc:	015a      	lsls	r2, r3, #5
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	f240 2325 	movw	r3, #549	; 0x225
 8005fcc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005fce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	da17      	bge.n	8006006 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005fd6:	78fb      	ldrb	r3, [r7, #3]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	78fa      	ldrb	r2, [r7, #3]
 8005fe6:	0151      	lsls	r1, r2, #5
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	440a      	add	r2, r1
 8005fec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ff0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005ff4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005ff6:	e006      	b.n	8006006 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	77fb      	strb	r3, [r7, #31]
      break;
 8005ffc:	e004      	b.n	8006008 <USB_HC_Init+0x14c>
      break;
 8005ffe:	bf00      	nop
 8006000:	e002      	b.n	8006008 <USB_HC_Init+0x14c>
      break;
 8006002:	bf00      	nop
 8006004:	e000      	b.n	8006008 <USB_HC_Init+0x14c>
      break;
 8006006:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800600e:	699a      	ldr	r2, [r3, #24]
 8006010:	78fb      	ldrb	r3, [r7, #3]
 8006012:	f003 030f 	and.w	r3, r3, #15
 8006016:	2101      	movs	r1, #1
 8006018:	fa01 f303 	lsl.w	r3, r1, r3
 800601c:	6939      	ldr	r1, [r7, #16]
 800601e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006022:	4313      	orrs	r3, r2
 8006024:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006032:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006036:	2b00      	cmp	r3, #0
 8006038:	da03      	bge.n	8006042 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800603a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800603e:	61bb      	str	r3, [r7, #24]
 8006040:	e001      	b.n	8006046 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006042:	2300      	movs	r3, #0
 8006044:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7ff ff0f 	bl	8005e6a <USB_GetHostSpeed>
 800604c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800604e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006052:	2b02      	cmp	r3, #2
 8006054:	d106      	bne.n	8006064 <USB_HC_Init+0x1a8>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2b02      	cmp	r3, #2
 800605a:	d003      	beq.n	8006064 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800605c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006060:	617b      	str	r3, [r7, #20]
 8006062:	e001      	b.n	8006068 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006068:	787b      	ldrb	r3, [r7, #1]
 800606a:	059b      	lsls	r3, r3, #22
 800606c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006070:	78bb      	ldrb	r3, [r7, #2]
 8006072:	02db      	lsls	r3, r3, #11
 8006074:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006078:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800607a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800607e:	049b      	lsls	r3, r3, #18
 8006080:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006084:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006086:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006088:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800608c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006092:	78fb      	ldrb	r3, [r7, #3]
 8006094:	0159      	lsls	r1, r3, #5
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	440b      	add	r3, r1
 800609a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800609e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060a4:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80060a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060aa:	2b03      	cmp	r3, #3
 80060ac:	d10f      	bne.n	80060ce <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80060ae:	78fb      	ldrb	r3, [r7, #3]
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	78fa      	ldrb	r2, [r7, #3]
 80060be:	0151      	lsls	r1, r2, #5
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	440a      	add	r2, r1
 80060c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060cc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80060ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3720      	adds	r7, #32
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b08c      	sub	sp, #48	; 0x30
 80060dc:	af02      	add	r7, sp, #8
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	4613      	mov	r3, r2
 80060e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	785b      	ldrb	r3, [r3, #1]
 80060ee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80060f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060f4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d02d      	beq.n	800615e <USB_HC_StartXfer+0x86>
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	791b      	ldrb	r3, [r3, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d129      	bne.n	800615e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800610a:	79fb      	ldrb	r3, [r7, #7]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d117      	bne.n	8006140 <USB_HC_StartXfer+0x68>
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	79db      	ldrb	r3, [r3, #7]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d003      	beq.n	8006120 <USB_HC_StartXfer+0x48>
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	79db      	ldrb	r3, [r3, #7]
 800611c:	2b02      	cmp	r3, #2
 800611e:	d10f      	bne.n	8006140 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	4413      	add	r3, r2
 8006128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	69fa      	ldr	r2, [r7, #28]
 8006130:	0151      	lsls	r1, r2, #5
 8006132:	6a3a      	ldr	r2, [r7, #32]
 8006134:	440a      	add	r2, r1
 8006136:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800613a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006140:	79fb      	ldrb	r3, [r7, #7]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10b      	bne.n	800615e <USB_HC_StartXfer+0x86>
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	795b      	ldrb	r3, [r3, #5]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d107      	bne.n	800615e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	785b      	ldrb	r3, [r3, #1]
 8006152:	4619      	mov	r1, r3
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f000 fa2f 	bl	80065b8 <USB_DoPing>
      return HAL_OK;
 800615a:	2300      	movs	r3, #0
 800615c:	e0f8      	b.n	8006350 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d018      	beq.n	8006198 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	8912      	ldrh	r2, [r2, #8]
 800616e:	4413      	add	r3, r2
 8006170:	3b01      	subs	r3, #1
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	8912      	ldrh	r2, [r2, #8]
 8006176:	fbb3 f3f2 	udiv	r3, r3, r2
 800617a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800617c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800617e:	8b7b      	ldrh	r3, [r7, #26]
 8006180:	429a      	cmp	r2, r3
 8006182:	d90b      	bls.n	800619c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006184:	8b7b      	ldrh	r3, [r7, #26]
 8006186:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006188:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	8912      	ldrh	r2, [r2, #8]
 800618e:	fb02 f203 	mul.w	r2, r2, r3
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	611a      	str	r2, [r3, #16]
 8006196:	e001      	b.n	800619c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006198:	2301      	movs	r3, #1
 800619a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	78db      	ldrb	r3, [r3, #3]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d007      	beq.n	80061b4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	8912      	ldrh	r2, [r2, #8]
 80061aa:	fb02 f203 	mul.w	r2, r2, r3
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	611a      	str	r2, [r3, #16]
 80061b2:	e003      	b.n	80061bc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	695a      	ldr	r2, [r3, #20]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80061c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061c6:	04d9      	lsls	r1, r3, #19
 80061c8:	4b63      	ldr	r3, [pc, #396]	; (8006358 <USB_HC_StartXfer+0x280>)
 80061ca:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80061cc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	7a9b      	ldrb	r3, [r3, #10]
 80061d2:	075b      	lsls	r3, r3, #29
 80061d4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80061d8:	69f9      	ldr	r1, [r7, #28]
 80061da:	0148      	lsls	r0, r1, #5
 80061dc:	6a39      	ldr	r1, [r7, #32]
 80061de:	4401      	add	r1, r0
 80061e0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80061e4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80061e6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80061e8:	79fb      	ldrb	r3, [r7, #7]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d009      	beq.n	8006202 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	68d9      	ldr	r1, [r3, #12]
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	6a3b      	ldr	r3, [r7, #32]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061fe:	460a      	mov	r2, r1
 8006200:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	2b00      	cmp	r3, #0
 8006210:	bf0c      	ite	eq
 8006212:	2301      	moveq	r3, #1
 8006214:	2300      	movne	r3, #0
 8006216:	b2db      	uxtb	r3, r3
 8006218:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	4413      	add	r3, r2
 8006222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	69fa      	ldr	r2, [r7, #28]
 800622a:	0151      	lsls	r1, r2, #5
 800622c:	6a3a      	ldr	r2, [r7, #32]
 800622e:	440a      	add	r2, r1
 8006230:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006234:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006238:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	4413      	add	r3, r2
 8006242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	7e7b      	ldrb	r3, [r7, #25]
 800624a:	075b      	lsls	r3, r3, #29
 800624c:	69f9      	ldr	r1, [r7, #28]
 800624e:	0148      	lsls	r0, r1, #5
 8006250:	6a39      	ldr	r1, [r7, #32]
 8006252:	4401      	add	r1, r0
 8006254:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006258:	4313      	orrs	r3, r2
 800625a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	6a3b      	ldr	r3, [r7, #32]
 8006262:	4413      	add	r3, r2
 8006264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006272:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	78db      	ldrb	r3, [r3, #3]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d004      	beq.n	8006286 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006282:	613b      	str	r3, [r7, #16]
 8006284:	e003      	b.n	800628e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800628c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006294:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	015a      	lsls	r2, r3, #5
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	4413      	add	r3, r2
 800629e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a2:	461a      	mov	r2, r3
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80062a8:	79fb      	ldrb	r3, [r7, #7]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d001      	beq.n	80062b2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	e04e      	b.n	8006350 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	78db      	ldrb	r3, [r3, #3]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d149      	bne.n	800634e <USB_HC_StartXfer+0x276>
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d045      	beq.n	800634e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	79db      	ldrb	r3, [r3, #7]
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d830      	bhi.n	800632c <USB_HC_StartXfer+0x254>
 80062ca:	a201      	add	r2, pc, #4	; (adr r2, 80062d0 <USB_HC_StartXfer+0x1f8>)
 80062cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d0:	080062e1 	.word	0x080062e1
 80062d4:	08006305 	.word	0x08006305
 80062d8:	080062e1 	.word	0x080062e1
 80062dc:	08006305 	.word	0x08006305
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	695b      	ldr	r3, [r3, #20]
 80062e4:	3303      	adds	r3, #3
 80062e6:	089b      	lsrs	r3, r3, #2
 80062e8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80062ea:	8afa      	ldrh	r2, [r7, #22]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d91c      	bls.n	8006330 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	f043 0220 	orr.w	r2, r3, #32
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	619a      	str	r2, [r3, #24]
        }
        break;
 8006302:	e015      	b.n	8006330 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	3303      	adds	r3, #3
 800630a:	089b      	lsrs	r3, r3, #2
 800630c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800630e:	8afa      	ldrh	r2, [r7, #22]
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	b29b      	uxth	r3, r3
 800631a:	429a      	cmp	r2, r3
 800631c:	d90a      	bls.n	8006334 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	619a      	str	r2, [r3, #24]
        }
        break;
 800632a:	e003      	b.n	8006334 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800632c:	bf00      	nop
 800632e:	e002      	b.n	8006336 <USB_HC_StartXfer+0x25e>
        break;
 8006330:	bf00      	nop
 8006332:	e000      	b.n	8006336 <USB_HC_StartXfer+0x25e>
        break;
 8006334:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	68d9      	ldr	r1, [r3, #12]
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	785a      	ldrb	r2, [r3, #1]
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	b29b      	uxth	r3, r3
 8006344:	2000      	movs	r0, #0
 8006346:	9000      	str	r0, [sp, #0]
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f7ff fb53 	bl	80059f4 <USB_WritePacket>
  }

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3728      	adds	r7, #40	; 0x28
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	1ff80000 	.word	0x1ff80000

0800635c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	b29b      	uxth	r3, r3
}
 8006372:	4618      	mov	r0, r3
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800637e:	b480      	push	{r7}
 8006380:	b089      	sub	sp, #36	; 0x24
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
 8006386:	460b      	mov	r3, r1
 8006388:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800638e:	78fb      	ldrb	r3, [r7, #3]
 8006390:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8006392:	2300      	movs	r3, #0
 8006394:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	015a      	lsls	r2, r3, #5
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	4413      	add	r3, r2
 800639e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	0c9b      	lsrs	r3, r3, #18
 80063a6:	f003 0303 	and.w	r3, r3, #3
 80063aa:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	0fdb      	lsrs	r3, r3, #31
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f003 0320 	and.w	r3, r3, #32
 80063ca:	2b20      	cmp	r3, #32
 80063cc:	d104      	bne.n	80063d8 <USB_HC_Halt+0x5a>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80063d4:	2300      	movs	r3, #0
 80063d6:	e0e8      	b.n	80065aa <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d002      	beq.n	80063e4 <USB_HC_Halt+0x66>
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d173      	bne.n	80064cc <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	015a      	lsls	r2, r3, #5
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	0151      	lsls	r1, r2, #5
 80063f6:	69ba      	ldr	r2, [r7, #24]
 80063f8:	440a      	add	r2, r1
 80063fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006402:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f003 0320 	and.w	r3, r3, #32
 800640c:	2b00      	cmp	r3, #0
 800640e:	f040 80cb 	bne.w	80065a8 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006416:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d143      	bne.n	80064a6 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	4413      	add	r3, r2
 8006426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	0151      	lsls	r1, r2, #5
 8006430:	69ba      	ldr	r2, [r7, #24]
 8006432:	440a      	add	r2, r1
 8006434:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006438:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800643c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	4413      	add	r3, r2
 8006446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	0151      	lsls	r1, r2, #5
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	440a      	add	r2, r1
 8006454:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006458:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800645c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	015a      	lsls	r2, r3, #5
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	4413      	add	r3, r2
 8006466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	0151      	lsls	r1, r2, #5
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	440a      	add	r2, r1
 8006474:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006478:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800647c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	3301      	adds	r3, #1
 8006482:	61fb      	str	r3, [r7, #28]
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800648a:	d81d      	bhi.n	80064c8 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	4413      	add	r3, r2
 8006494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800649e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064a2:	d0ec      	beq.n	800647e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064a4:	e080      	b.n	80065a8 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	015a      	lsls	r2, r3, #5
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	0151      	lsls	r1, r2, #5
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	440a      	add	r2, r1
 80064bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064c4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064c6:	e06f      	b.n	80065a8 <USB_HC_Halt+0x22a>
            break;
 80064c8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064ca:	e06d      	b.n	80065a8 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	0151      	lsls	r1, r2, #5
 80064de:	69ba      	ldr	r2, [r7, #24]
 80064e0:	440a      	add	r2, r1
 80064e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064ea:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d143      	bne.n	8006584 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	4413      	add	r3, r2
 8006504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	0151      	lsls	r1, r2, #5
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	440a      	add	r2, r1
 8006512:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006516:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800651a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	4413      	add	r3, r2
 8006524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	0151      	lsls	r1, r2, #5
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	440a      	add	r2, r1
 8006532:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006536:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800653a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	4413      	add	r3, r2
 8006544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	0151      	lsls	r1, r2, #5
 800654e:	69ba      	ldr	r2, [r7, #24]
 8006550:	440a      	add	r2, r1
 8006552:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006556:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800655a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	3301      	adds	r3, #1
 8006560:	61fb      	str	r3, [r7, #28]
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006568:	d81d      	bhi.n	80065a6 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	4413      	add	r3, r2
 8006572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800657c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006580:	d0ec      	beq.n	800655c <USB_HC_Halt+0x1de>
 8006582:	e011      	b.n	80065a8 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	4413      	add	r3, r2
 800658c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	0151      	lsls	r1, r2, #5
 8006596:	69ba      	ldr	r2, [r7, #24]
 8006598:	440a      	add	r2, r1
 800659a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800659e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065a2:	6013      	str	r3, [r2, #0]
 80065a4:	e000      	b.n	80065a8 <USB_HC_Halt+0x22a>
          break;
 80065a6:	bf00      	nop
    }
  }

  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3724      	adds	r7, #36	; 0x24
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
	...

080065b8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	460b      	mov	r3, r1
 80065c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80065c8:	78fb      	ldrb	r3, [r7, #3]
 80065ca:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80065cc:	2301      	movs	r3, #1
 80065ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	04da      	lsls	r2, r3, #19
 80065d4:	4b15      	ldr	r3, [pc, #84]	; (800662c <USB_DoPing+0x74>)
 80065d6:	4013      	ands	r3, r2
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	0151      	lsls	r1, r2, #5
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	440a      	add	r2, r1
 80065e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065e8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	015a      	lsls	r2, r3, #5
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	4413      	add	r3, r2
 80065f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006600:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006608:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	015a      	lsls	r2, r3, #5
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	4413      	add	r3, r2
 8006612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006616:	461a      	mov	r2, r3
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	371c      	adds	r7, #28
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	1ff80000 	.word	0x1ff80000

08006630 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800663c:	2300      	movs	r3, #0
 800663e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f7ff f935 	bl	80058b0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006646:	2110      	movs	r1, #16
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f7ff f98f 	bl	800596c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7ff f9b0 	bl	80059b4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006654:	2300      	movs	r3, #0
 8006656:	613b      	str	r3, [r7, #16]
 8006658:	e01f      	b.n	800669a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4413      	add	r3, r2
 8006662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006670:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006678:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006680:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	4413      	add	r3, r2
 800668a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800668e:	461a      	mov	r2, r3
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	3301      	adds	r3, #1
 8006698:	613b      	str	r3, [r7, #16]
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	2b0f      	cmp	r3, #15
 800669e:	d9dc      	bls.n	800665a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80066a0:	2300      	movs	r3, #0
 80066a2:	613b      	str	r3, [r7, #16]
 80066a4:	e034      	b.n	8006710 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066bc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066c4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066cc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066da:	461a      	mov	r2, r3
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	3301      	adds	r3, #1
 80066e4:	617b      	str	r3, [r7, #20]
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066ec:	d80c      	bhi.n	8006708 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006700:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006704:	d0ec      	beq.n	80066e0 <USB_StopHost+0xb0>
 8006706:	e000      	b.n	800670a <USB_StopHost+0xda>
        break;
 8006708:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	3301      	adds	r3, #1
 800670e:	613b      	str	r3, [r7, #16]
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	2b0f      	cmp	r3, #15
 8006714:	d9c7      	bls.n	80066a6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800671c:	461a      	mov	r2, r3
 800671e:	f04f 33ff 	mov.w	r3, #4294967295
 8006722:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f04f 32ff 	mov.w	r2, #4294967295
 800672a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7ff f8ae 	bl	800588e <USB_EnableGlobalInt>

  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3718      	adds	r7, #24
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800673c:	b590      	push	{r4, r7, lr}
 800673e:	b089      	sub	sp, #36	; 0x24
 8006740:	af04      	add	r7, sp, #16
 8006742:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006744:	2301      	movs	r3, #1
 8006746:	2202      	movs	r2, #2
 8006748:	2102      	movs	r1, #2
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fc66 	bl	800701c <USBH_FindInterface>
 8006750:	4603      	mov	r3, r0
 8006752:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006754:	7bfb      	ldrb	r3, [r7, #15]
 8006756:	2bff      	cmp	r3, #255	; 0xff
 8006758:	d002      	beq.n	8006760 <USBH_CDC_InterfaceInit+0x24>
 800675a:	7bfb      	ldrb	r3, [r7, #15]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d901      	bls.n	8006764 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006760:	2302      	movs	r3, #2
 8006762:	e13d      	b.n	80069e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006764:	7bfb      	ldrb	r3, [r7, #15]
 8006766:	4619      	mov	r1, r3
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 fc3b 	bl	8006fe4 <USBH_SelectInterface>
 800676e:	4603      	mov	r3, r0
 8006770:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006772:	7bbb      	ldrb	r3, [r7, #14]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d001      	beq.n	800677c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006778:	2302      	movs	r3, #2
 800677a:	e131      	b.n	80069e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006782:	2050      	movs	r0, #80	; 0x50
 8006784:	f002 fa00 	bl	8008b88 <malloc>
 8006788:	4603      	mov	r3, r0
 800678a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006792:	69db      	ldr	r3, [r3, #28]
 8006794:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800679c:	2302      	movs	r3, #2
 800679e:	e11f      	b.n	80069e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80067a0:	2250      	movs	r2, #80	; 0x50
 80067a2:	2100      	movs	r1, #0
 80067a4:	68b8      	ldr	r0, [r7, #8]
 80067a6:	f002 f9ff 	bl	8008ba8 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80067aa:	7bfb      	ldrb	r3, [r7, #15]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	211a      	movs	r1, #26
 80067b0:	fb01 f303 	mul.w	r3, r1, r3
 80067b4:	4413      	add	r3, r2
 80067b6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	b25b      	sxtb	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	da15      	bge.n	80067ee <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80067c2:	7bfb      	ldrb	r3, [r7, #15]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	211a      	movs	r1, #26
 80067c8:	fb01 f303 	mul.w	r3, r1, r3
 80067cc:	4413      	add	r3, r2
 80067ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80067d2:	781a      	ldrb	r2, [r3, #0]
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	211a      	movs	r1, #26
 80067de:	fb01 f303 	mul.w	r3, r1, r3
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80067e8:	881a      	ldrh	r2, [r3, #0]
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	785b      	ldrb	r3, [r3, #1]
 80067f2:	4619      	mov	r1, r3
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f001 fe32 	bl	800845e <USBH_AllocPipe>
 80067fa:	4603      	mov	r3, r0
 80067fc:	461a      	mov	r2, r3
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	7819      	ldrb	r1, [r3, #0]
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	7858      	ldrb	r0, [r3, #1]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	8952      	ldrh	r2, [r2, #10]
 800681a:	9202      	str	r2, [sp, #8]
 800681c:	2203      	movs	r2, #3
 800681e:	9201      	str	r2, [sp, #4]
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	4623      	mov	r3, r4
 8006824:	4602      	mov	r2, r0
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f001 fdea 	bl	8008400 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	2200      	movs	r2, #0
 8006832:	4619      	mov	r1, r3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f002 f8f9 	bl	8008a2c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800683a:	2300      	movs	r3, #0
 800683c:	2200      	movs	r2, #0
 800683e:	210a      	movs	r1, #10
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fbeb 	bl	800701c <USBH_FindInterface>
 8006846:	4603      	mov	r3, r0
 8006848:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800684a:	7bfb      	ldrb	r3, [r7, #15]
 800684c:	2bff      	cmp	r3, #255	; 0xff
 800684e:	d002      	beq.n	8006856 <USBH_CDC_InterfaceInit+0x11a>
 8006850:	7bfb      	ldrb	r3, [r7, #15]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d901      	bls.n	800685a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006856:	2302      	movs	r3, #2
 8006858:	e0c2      	b.n	80069e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800685a:	7bfb      	ldrb	r3, [r7, #15]
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	211a      	movs	r1, #26
 8006860:	fb01 f303 	mul.w	r3, r1, r3
 8006864:	4413      	add	r3, r2
 8006866:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	b25b      	sxtb	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	da16      	bge.n	80068a0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006872:	7bfb      	ldrb	r3, [r7, #15]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	211a      	movs	r1, #26
 8006878:	fb01 f303 	mul.w	r3, r1, r3
 800687c:	4413      	add	r3, r2
 800687e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006882:	781a      	ldrb	r2, [r3, #0]
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006888:	7bfb      	ldrb	r3, [r7, #15]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	211a      	movs	r1, #26
 800688e:	fb01 f303 	mul.w	r3, r1, r3
 8006892:	4413      	add	r3, r2
 8006894:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006898:	881a      	ldrh	r2, [r3, #0]
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	835a      	strh	r2, [r3, #26]
 800689e:	e015      	b.n	80068cc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068a0:	7bfb      	ldrb	r3, [r7, #15]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	211a      	movs	r1, #26
 80068a6:	fb01 f303 	mul.w	r3, r1, r3
 80068aa:	4413      	add	r3, r2
 80068ac:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068b0:	781a      	ldrb	r2, [r3, #0]
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	211a      	movs	r1, #26
 80068bc:	fb01 f303 	mul.w	r3, r1, r3
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80068c6:	881a      	ldrh	r2, [r3, #0]
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	211a      	movs	r1, #26
 80068d2:	fb01 f303 	mul.w	r3, r1, r3
 80068d6:	4413      	add	r3, r2
 80068d8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	b25b      	sxtb	r3, r3
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	da16      	bge.n	8006912 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80068e4:	7bfb      	ldrb	r3, [r7, #15]
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	211a      	movs	r1, #26
 80068ea:	fb01 f303 	mul.w	r3, r1, r3
 80068ee:	4413      	add	r3, r2
 80068f0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80068f4:	781a      	ldrb	r2, [r3, #0]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80068fa:	7bfb      	ldrb	r3, [r7, #15]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	211a      	movs	r1, #26
 8006900:	fb01 f303 	mul.w	r3, r1, r3
 8006904:	4413      	add	r3, r2
 8006906:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800690a:	881a      	ldrh	r2, [r3, #0]
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	835a      	strh	r2, [r3, #26]
 8006910:	e015      	b.n	800693e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006912:	7bfb      	ldrb	r3, [r7, #15]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	211a      	movs	r1, #26
 8006918:	fb01 f303 	mul.w	r3, r1, r3
 800691c:	4413      	add	r3, r2
 800691e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006922:	781a      	ldrb	r2, [r3, #0]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006928:	7bfb      	ldrb	r3, [r7, #15]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	211a      	movs	r1, #26
 800692e:	fb01 f303 	mul.w	r3, r1, r3
 8006932:	4413      	add	r3, r2
 8006934:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006938:	881a      	ldrh	r2, [r3, #0]
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	7b9b      	ldrb	r3, [r3, #14]
 8006942:	4619      	mov	r1, r3
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f001 fd8a 	bl	800845e <USBH_AllocPipe>
 800694a:	4603      	mov	r3, r0
 800694c:	461a      	mov	r2, r3
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	7bdb      	ldrb	r3, [r3, #15]
 8006956:	4619      	mov	r1, r3
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f001 fd80 	bl	800845e <USBH_AllocPipe>
 800695e:	4603      	mov	r3, r0
 8006960:	461a      	mov	r2, r3
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	7b59      	ldrb	r1, [r3, #13]
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	7b98      	ldrb	r0, [r3, #14]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	8b12      	ldrh	r2, [r2, #24]
 800697e:	9202      	str	r2, [sp, #8]
 8006980:	2202      	movs	r2, #2
 8006982:	9201      	str	r2, [sp, #4]
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	4623      	mov	r3, r4
 8006988:	4602      	mov	r2, r0
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f001 fd38 	bl	8008400 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	7b19      	ldrb	r1, [r3, #12]
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	7bd8      	ldrb	r0, [r3, #15]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	8b52      	ldrh	r2, [r2, #26]
 80069a8:	9202      	str	r2, [sp, #8]
 80069aa:	2202      	movs	r2, #2
 80069ac:	9201      	str	r2, [sp, #4]
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	4623      	mov	r3, r4
 80069b2:	4602      	mov	r2, r0
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f001 fd23 	bl	8008400 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	7b5b      	ldrb	r3, [r3, #13]
 80069c6:	2200      	movs	r2, #0
 80069c8:	4619      	mov	r1, r3
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f002 f82e 	bl	8008a2c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	7b1b      	ldrb	r3, [r3, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	4619      	mov	r1, r3
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f002 f827 	bl	8008a2c <USBH_LL_SetToggle>

  return USBH_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3714      	adds	r7, #20
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd90      	pop	{r4, r7, pc}

080069e8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00e      	beq.n	8006a20 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	4619      	mov	r1, r3
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f001 fd18 	bl	800843e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	4619      	mov	r1, r3
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f001 fd43 	bl	80084a0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	7b1b      	ldrb	r3, [r3, #12]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00e      	beq.n	8006a46 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	7b1b      	ldrb	r3, [r3, #12]
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f001 fd05 	bl	800843e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	7b1b      	ldrb	r3, [r3, #12]
 8006a38:	4619      	mov	r1, r3
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f001 fd30 	bl	80084a0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	7b5b      	ldrb	r3, [r3, #13]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00e      	beq.n	8006a6c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	7b5b      	ldrb	r3, [r3, #13]
 8006a52:	4619      	mov	r1, r3
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f001 fcf2 	bl	800843e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	7b5b      	ldrb	r3, [r3, #13]
 8006a5e:	4619      	mov	r1, r3
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f001 fd1d 	bl	80084a0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00b      	beq.n	8006a90 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a7e:	69db      	ldr	r3, [r3, #28]
 8006a80:	4618      	mov	r0, r3
 8006a82:	f002 f889 	bl	8008b98 <free>
    phost->pActiveClass->pData = 0U;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b084      	sub	sp, #16
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	3340      	adds	r3, #64	; 0x40
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f8b1 	bl	8006c1a <GetLineCoding>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006abc:	7afb      	ldrb	r3, [r7, #11]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d105      	bne.n	8006ace <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ac8:	2102      	movs	r1, #2
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006ace:	7afb      	ldrb	r3, [r7, #11]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aee:	69db      	ldr	r3, [r3, #28]
 8006af0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006af8:	2b04      	cmp	r3, #4
 8006afa:	d877      	bhi.n	8006bec <USBH_CDC_Process+0x114>
 8006afc:	a201      	add	r2, pc, #4	; (adr r2, 8006b04 <USBH_CDC_Process+0x2c>)
 8006afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b02:	bf00      	nop
 8006b04:	08006b19 	.word	0x08006b19
 8006b08:	08006b1f 	.word	0x08006b1f
 8006b0c:	08006b4f 	.word	0x08006b4f
 8006b10:	08006bc3 	.word	0x08006bc3
 8006b14:	08006bd1 	.word	0x08006bd1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b1c:	e06d      	b.n	8006bfa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b22:	4619      	mov	r1, r3
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 f897 	bl	8006c58 <SetLineCoding>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b2e:	7bbb      	ldrb	r3, [r7, #14]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d104      	bne.n	8006b3e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2202      	movs	r2, #2
 8006b38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006b3c:	e058      	b.n	8006bf0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006b3e:	7bbb      	ldrb	r3, [r7, #14]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d055      	beq.n	8006bf0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	2204      	movs	r2, #4
 8006b48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006b4c:	e050      	b.n	8006bf0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	3340      	adds	r3, #64	; 0x40
 8006b52:	4619      	mov	r1, r3
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f860 	bl	8006c1a <GetLineCoding>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b5e:	7bbb      	ldrb	r3, [r7, #14]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d126      	bne.n	8006bb2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b76:	791b      	ldrb	r3, [r3, #4]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d13b      	bne.n	8006bf4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b86:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d133      	bne.n	8006bf4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b96:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d12b      	bne.n	8006bf4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ba4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d124      	bne.n	8006bf4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f958 	bl	8006e60 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006bb0:	e020      	b.n	8006bf4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006bb2:	7bbb      	ldrb	r3, [r7, #14]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d01d      	beq.n	8006bf4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	2204      	movs	r2, #4
 8006bbc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006bc0:	e018      	b.n	8006bf4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f867 	bl	8006c96 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 f8da 	bl	8006d82 <CDC_ProcessReception>
      break;
 8006bce:	e014      	b.n	8006bfa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 ffe3 	bl	8007b9e <USBH_ClrFeature>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006bdc:	7bbb      	ldrb	r3, [r7, #14]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10a      	bne.n	8006bf8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006bea:	e005      	b.n	8006bf8 <USBH_CDC_Process+0x120>

    default:
      break;
 8006bec:	bf00      	nop
 8006bee:	e004      	b.n	8006bfa <USBH_CDC_Process+0x122>
      break;
 8006bf0:	bf00      	nop
 8006bf2:	e002      	b.n	8006bfa <USBH_CDC_Process+0x122>
      break;
 8006bf4:	bf00      	nop
 8006bf6:	e000      	b.n	8006bfa <USBH_CDC_Process+0x122>
      break;
 8006bf8:	bf00      	nop

  }

  return status;
 8006bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	370c      	adds	r7, #12
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b082      	sub	sp, #8
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
 8006c22:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	22a1      	movs	r2, #161	; 0xa1
 8006c28:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2221      	movs	r2, #33	; 0x21
 8006c2e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2207      	movs	r2, #7
 8006c40:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	2207      	movs	r2, #7
 8006c46:	4619      	mov	r1, r3
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f001 f988 	bl	8007f5e <USBH_CtlReq>
 8006c4e:	4603      	mov	r3, r0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3708      	adds	r7, #8
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2221      	movs	r2, #33	; 0x21
 8006c66:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2207      	movs	r2, #7
 8006c7e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	2207      	movs	r2, #7
 8006c84:	4619      	mov	r1, r3
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f001 f969 	bl	8007f5e <USBH_CtlReq>
 8006c8c:	4603      	mov	r3, r0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b086      	sub	sp, #24
 8006c9a:	af02      	add	r7, sp, #8
 8006c9c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ca4:	69db      	ldr	r3, [r3, #28]
 8006ca6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d002      	beq.n	8006cbc <CDC_ProcessTransmission+0x26>
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d023      	beq.n	8006d02 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006cba:	e05e      	b.n	8006d7a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	8b12      	ldrh	r2, [r2, #24]
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d90b      	bls.n	8006ce0 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	69d9      	ldr	r1, [r3, #28]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	8b1a      	ldrh	r2, [r3, #24]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	7b5b      	ldrb	r3, [r3, #13]
 8006cd4:	2001      	movs	r0, #1
 8006cd6:	9000      	str	r0, [sp, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f001 fb4e 	bl	800837a <USBH_BulkSendData>
 8006cde:	e00b      	b.n	8006cf8 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	7b5b      	ldrb	r3, [r3, #13]
 8006cee:	2001      	movs	r0, #1
 8006cf0:	9000      	str	r0, [sp, #0]
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f001 fb41 	bl	800837a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d00:	e03b      	b.n	8006d7a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	7b5b      	ldrb	r3, [r3, #13]
 8006d06:	4619      	mov	r1, r3
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f001 fe65 	bl	80089d8 <USBH_LL_GetURBState>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006d12:	7afb      	ldrb	r3, [r7, #11]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d128      	bne.n	8006d6a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	8b12      	ldrh	r2, [r2, #24]
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d90e      	bls.n	8006d42 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	8b12      	ldrh	r2, [r2, #24]
 8006d2c:	1a9a      	subs	r2, r3, r2
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	8b12      	ldrh	r2, [r2, #24]
 8006d3a:	441a      	add	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	61da      	str	r2, [r3, #28]
 8006d40:	e002      	b.n	8006d48 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d004      	beq.n	8006d5a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d58:	e00e      	b.n	8006d78 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f868 	bl	8006e38 <USBH_CDC_TransmitCallback>
      break;
 8006d68:	e006      	b.n	8006d78 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006d6a:	7afb      	ldrb	r3, [r7, #11]
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d103      	bne.n	8006d78 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d78:	bf00      	nop
  }
}
 8006d7a:	bf00      	nop
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b086      	sub	sp, #24
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d90:	69db      	ldr	r3, [r3, #28]
 8006d92:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d94:	2300      	movs	r3, #0
 8006d96:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006d9e:	2b03      	cmp	r3, #3
 8006da0:	d002      	beq.n	8006da8 <CDC_ProcessReception+0x26>
 8006da2:	2b04      	cmp	r3, #4
 8006da4:	d00e      	beq.n	8006dc4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006da6:	e043      	b.n	8006e30 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	6a19      	ldr	r1, [r3, #32]
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	8b5a      	ldrh	r2, [r3, #26]
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	7b1b      	ldrb	r3, [r3, #12]
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f001 fb05 	bl	80083c4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	2204      	movs	r2, #4
 8006dbe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006dc2:	e035      	b.n	8006e30 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	7b1b      	ldrb	r3, [r3, #12]
 8006dc8:	4619      	mov	r1, r3
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f001 fe04 	bl	80089d8 <USBH_LL_GetURBState>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006dd4:	7cfb      	ldrb	r3, [r7, #19]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d129      	bne.n	8006e2e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	7b1b      	ldrb	r3, [r3, #12]
 8006dde:	4619      	mov	r1, r3
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f001 fd67 	bl	80088b4 <USBH_LL_GetLastXferSize>
 8006de6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d016      	beq.n	8006e20 <CDC_ProcessReception+0x9e>
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	8b5b      	ldrh	r3, [r3, #26]
 8006df6:	461a      	mov	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d910      	bls.n	8006e20 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	1ad2      	subs	r2, r2, r3
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	6a1a      	ldr	r2, [r3, #32]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	441a      	add	r2, r3
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	2203      	movs	r2, #3
 8006e1a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006e1e:	e006      	b.n	8006e2e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f80f 	bl	8006e4c <USBH_CDC_ReceiveCallback>
      break;
 8006e2e:	bf00      	nop
  }
}
 8006e30:	bf00      	nop
 8006e32:	3718      	adds	r7, #24
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e54:	bf00      	nop
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006e88:	2302      	movs	r3, #2
 8006e8a:	e029      	b.n	8006ee0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	79fa      	ldrb	r2, [r7, #7]
 8006e90:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f000 f81f 	bl	8006ee8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d003      	beq.n	8006ed8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	68ba      	ldr	r2, [r7, #8]
 8006ed4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f001 fc37 	bl	800874c <USBH_LL_Init>

  return USBH_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	60fb      	str	r3, [r7, #12]
 8006ef8:	e009      	b.n	8006f0e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	33e0      	adds	r3, #224	; 0xe0
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4413      	add	r3, r2
 8006f04:	2200      	movs	r2, #0
 8006f06:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	60fb      	str	r3, [r7, #12]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2b0e      	cmp	r3, #14
 8006f12:	d9f2      	bls.n	8006efa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f14:	2300      	movs	r3, #0
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	e009      	b.n	8006f2e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006f24:	2200      	movs	r2, #0
 8006f26:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	60fb      	str	r3, [r7, #12]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f34:	d3f1      	bcc.n	8006f1a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2240      	movs	r2, #64	; 0x40
 8006f5a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d016      	beq.n	8006fd2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10e      	bne.n	8006fcc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006fb4:	1c59      	adds	r1, r3, #1
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	33de      	adds	r3, #222	; 0xde
 8006fc0:	6839      	ldr	r1, [r7, #0]
 8006fc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	73fb      	strb	r3, [r7, #15]
 8006fca:	e004      	b.n	8006fd6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006fcc:	2302      	movs	r3, #2
 8006fce:	73fb      	strb	r3, [r7, #15]
 8006fd0:	e001      	b.n	8006fd6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006fd2:	2302      	movs	r3, #2
 8006fd4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3714      	adds	r7, #20
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	460b      	mov	r3, r1
 8006fee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006ffa:	78fa      	ldrb	r2, [r7, #3]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d204      	bcs.n	800700a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	78fa      	ldrb	r2, [r7, #3]
 8007004:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007008:	e001      	b.n	800700e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800700a:	2302      	movs	r3, #2
 800700c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800700e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007010:	4618      	mov	r0, r3
 8007012:	3714      	adds	r7, #20
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	4608      	mov	r0, r1
 8007026:	4611      	mov	r1, r2
 8007028:	461a      	mov	r2, r3
 800702a:	4603      	mov	r3, r0
 800702c:	70fb      	strb	r3, [r7, #3]
 800702e:	460b      	mov	r3, r1
 8007030:	70bb      	strb	r3, [r7, #2]
 8007032:	4613      	mov	r3, r2
 8007034:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007036:	2300      	movs	r3, #0
 8007038:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800703a:	2300      	movs	r3, #0
 800703c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007044:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007046:	e025      	b.n	8007094 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007048:	7dfb      	ldrb	r3, [r7, #23]
 800704a:	221a      	movs	r2, #26
 800704c:	fb02 f303 	mul.w	r3, r2, r3
 8007050:	3308      	adds	r3, #8
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	4413      	add	r3, r2
 8007056:	3302      	adds	r3, #2
 8007058:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	795b      	ldrb	r3, [r3, #5]
 800705e:	78fa      	ldrb	r2, [r7, #3]
 8007060:	429a      	cmp	r2, r3
 8007062:	d002      	beq.n	800706a <USBH_FindInterface+0x4e>
 8007064:	78fb      	ldrb	r3, [r7, #3]
 8007066:	2bff      	cmp	r3, #255	; 0xff
 8007068:	d111      	bne.n	800708e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800706e:	78ba      	ldrb	r2, [r7, #2]
 8007070:	429a      	cmp	r2, r3
 8007072:	d002      	beq.n	800707a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007074:	78bb      	ldrb	r3, [r7, #2]
 8007076:	2bff      	cmp	r3, #255	; 0xff
 8007078:	d109      	bne.n	800708e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800707e:	787a      	ldrb	r2, [r7, #1]
 8007080:	429a      	cmp	r2, r3
 8007082:	d002      	beq.n	800708a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007084:	787b      	ldrb	r3, [r7, #1]
 8007086:	2bff      	cmp	r3, #255	; 0xff
 8007088:	d101      	bne.n	800708e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800708a:	7dfb      	ldrb	r3, [r7, #23]
 800708c:	e006      	b.n	800709c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800708e:	7dfb      	ldrb	r3, [r7, #23]
 8007090:	3301      	adds	r3, #1
 8007092:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007094:	7dfb      	ldrb	r3, [r7, #23]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d9d6      	bls.n	8007048 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800709a:	23ff      	movs	r3, #255	; 0xff
}
 800709c:	4618      	mov	r0, r3
 800709e:	371c      	adds	r7, #28
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f001 fb87 	bl	80087c4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80070b6:	2101      	movs	r1, #1
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f001 fca0 	bl	80089fe <USBH_LL_DriverVBUS>

  return USBH_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b088      	sub	sp, #32
 80070cc:	af04      	add	r7, sp, #16
 80070ce:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80070d0:	2302      	movs	r3, #2
 80070d2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80070d4:	2300      	movs	r3, #0
 80070d6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d102      	bne.n	80070ea <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2203      	movs	r2, #3
 80070e8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b0b      	cmp	r3, #11
 80070f2:	f200 81b3 	bhi.w	800745c <USBH_Process+0x394>
 80070f6:	a201      	add	r2, pc, #4	; (adr r2, 80070fc <USBH_Process+0x34>)
 80070f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fc:	0800712d 	.word	0x0800712d
 8007100:	0800715f 	.word	0x0800715f
 8007104:	080071c7 	.word	0x080071c7
 8007108:	080073f7 	.word	0x080073f7
 800710c:	0800745d 	.word	0x0800745d
 8007110:	0800726b 	.word	0x0800726b
 8007114:	0800739d 	.word	0x0800739d
 8007118:	080072a1 	.word	0x080072a1
 800711c:	080072c1 	.word	0x080072c1
 8007120:	080072e1 	.word	0x080072e1
 8007124:	0800730f 	.word	0x0800730f
 8007128:	080073df 	.word	0x080073df
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b00      	cmp	r3, #0
 8007136:	f000 8193 	beq.w	8007460 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007140:	20c8      	movs	r0, #200	; 0xc8
 8007142:	f001 fca3 	bl	8008a8c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f001 fb99 	bl	800887e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800715c:	e180      	b.n	8007460 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007164:	2b01      	cmp	r3, #1
 8007166:	d107      	bne.n	8007178 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2202      	movs	r2, #2
 8007174:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007176:	e182      	b.n	800747e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800717e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007182:	d914      	bls.n	80071ae <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800718a:	3301      	adds	r3, #1
 800718c:	b2da      	uxtb	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800719a:	2b03      	cmp	r3, #3
 800719c:	d903      	bls.n	80071a6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	220d      	movs	r2, #13
 80071a2:	701a      	strb	r2, [r3, #0]
      break;
 80071a4:	e16b      	b.n	800747e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	701a      	strb	r2, [r3, #0]
      break;
 80071ac:	e167      	b.n	800747e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80071b4:	f103 020a 	add.w	r2, r3, #10
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80071be:	200a      	movs	r0, #10
 80071c0:	f001 fc64 	bl	8008a8c <USBH_Delay>
      break;
 80071c4:	e15b      	b.n	800747e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d005      	beq.n	80071dc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071d6:	2104      	movs	r1, #4
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80071dc:	2064      	movs	r0, #100	; 0x64
 80071de:	f001 fc55 	bl	8008a8c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f001 fb24 	bl	8008830 <USBH_LL_GetSpeed>
 80071e8:	4603      	mov	r3, r0
 80071ea:	461a      	mov	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2205      	movs	r2, #5
 80071f6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80071f8:	2100      	movs	r1, #0
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f001 f92f 	bl	800845e <USBH_AllocPipe>
 8007200:	4603      	mov	r3, r0
 8007202:	461a      	mov	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007208:	2180      	movs	r1, #128	; 0x80
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f001 f927 	bl	800845e <USBH_AllocPipe>
 8007210:	4603      	mov	r3, r0
 8007212:	461a      	mov	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	7919      	ldrb	r1, [r3, #4]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800722c:	b292      	uxth	r2, r2
 800722e:	9202      	str	r2, [sp, #8]
 8007230:	2200      	movs	r2, #0
 8007232:	9201      	str	r2, [sp, #4]
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	4603      	mov	r3, r0
 8007238:	2280      	movs	r2, #128	; 0x80
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f001 f8e0 	bl	8008400 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	7959      	ldrb	r1, [r3, #5]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007254:	b292      	uxth	r2, r2
 8007256:	9202      	str	r2, [sp, #8]
 8007258:	2200      	movs	r2, #0
 800725a:	9201      	str	r2, [sp, #4]
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	4603      	mov	r3, r0
 8007260:	2200      	movs	r2, #0
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f001 f8cc 	bl	8008400 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007268:	e109      	b.n	800747e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f90c 	bl	8007488 <USBH_HandleEnum>
 8007270:	4603      	mov	r3, r0
 8007272:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007274:	7bbb      	ldrb	r3, [r7, #14]
 8007276:	b2db      	uxtb	r3, r3
 8007278:	2b00      	cmp	r3, #0
 800727a:	f040 80f3 	bne.w	8007464 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800728c:	2b01      	cmp	r3, #1
 800728e:	d103      	bne.n	8007298 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2208      	movs	r2, #8
 8007294:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007296:	e0e5      	b.n	8007464 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2207      	movs	r2, #7
 800729c:	701a      	strb	r2, [r3, #0]
      break;
 800729e:	e0e1      	b.n	8007464 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f000 80de 	beq.w	8007468 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072b2:	2101      	movs	r1, #1
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2208      	movs	r2, #8
 80072bc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80072be:	e0d3      	b.n	8007468 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fc20 	bl	8007b10 <USBH_SetCfg>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	f040 80ca 	bne.w	800746c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2209      	movs	r2, #9
 80072dc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80072de:	e0c5      	b.n	800746c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80072e6:	f003 0320 	and.w	r3, r3, #32
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00b      	beq.n	8007306 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80072ee:	2101      	movs	r1, #1
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fc30 	bl	8007b56 <USBH_SetFeature>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f040 80b9 	bne.w	8007470 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	220a      	movs	r2, #10
 8007302:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007304:	e0b4      	b.n	8007470 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	220a      	movs	r2, #10
 800730a:	701a      	strb	r2, [r3, #0]
      break;
 800730c:	e0b0      	b.n	8007470 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 80ad 	beq.w	8007474 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007322:	2300      	movs	r3, #0
 8007324:	73fb      	strb	r3, [r7, #15]
 8007326:	e016      	b.n	8007356 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007328:	7bfa      	ldrb	r2, [r7, #15]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	32de      	adds	r2, #222	; 0xde
 800732e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007332:	791a      	ldrb	r2, [r3, #4]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800733a:	429a      	cmp	r2, r3
 800733c:	d108      	bne.n	8007350 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800733e:	7bfa      	ldrb	r2, [r7, #15]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	32de      	adds	r2, #222	; 0xde
 8007344:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800734e:	e005      	b.n	800735c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007350:	7bfb      	ldrb	r3, [r7, #15]
 8007352:	3301      	adds	r3, #1
 8007354:	73fb      	strb	r3, [r7, #15]
 8007356:	7bfb      	ldrb	r3, [r7, #15]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d0e5      	beq.n	8007328 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007362:	2b00      	cmp	r3, #0
 8007364:	d016      	beq.n	8007394 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	4798      	blx	r3
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d109      	bne.n	800738c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2206      	movs	r2, #6
 800737c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007384:	2103      	movs	r1, #3
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800738a:	e073      	b.n	8007474 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	220d      	movs	r2, #13
 8007390:	701a      	strb	r2, [r3, #0]
      break;
 8007392:	e06f      	b.n	8007474 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	220d      	movs	r2, #13
 8007398:	701a      	strb	r2, [r3, #0]
      break;
 800739a:	e06b      	b.n	8007474 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d017      	beq.n	80073d6 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	4798      	blx	r3
 80073b2:	4603      	mov	r3, r0
 80073b4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80073b6:	7bbb      	ldrb	r3, [r7, #14]
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d103      	bne.n	80073c6 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	220b      	movs	r2, #11
 80073c2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80073c4:	e058      	b.n	8007478 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80073c6:	7bbb      	ldrb	r3, [r7, #14]
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d154      	bne.n	8007478 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	220d      	movs	r2, #13
 80073d2:	701a      	strb	r2, [r3, #0]
      break;
 80073d4:	e050      	b.n	8007478 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	220d      	movs	r2, #13
 80073da:	701a      	strb	r2, [r3, #0]
      break;
 80073dc:	e04c      	b.n	8007478 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d049      	beq.n	800747c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073ee:	695b      	ldr	r3, [r3, #20]
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	4798      	blx	r3
      }
      break;
 80073f4:	e042      	b.n	800747c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7ff fd72 	bl	8006ee8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800740a:	2b00      	cmp	r3, #0
 800740c:	d009      	beq.n	8007422 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007428:	2b00      	cmp	r3, #0
 800742a:	d005      	beq.n	8007438 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007432:	2105      	movs	r1, #5
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800743e:	b2db      	uxtb	r3, r3
 8007440:	2b01      	cmp	r3, #1
 8007442:	d107      	bne.n	8007454 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f7ff fe2b 	bl	80070a8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007452:	e014      	b.n	800747e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f001 f9b5 	bl	80087c4 <USBH_LL_Start>
      break;
 800745a:	e010      	b.n	800747e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800745c:	bf00      	nop
 800745e:	e00e      	b.n	800747e <USBH_Process+0x3b6>
      break;
 8007460:	bf00      	nop
 8007462:	e00c      	b.n	800747e <USBH_Process+0x3b6>
      break;
 8007464:	bf00      	nop
 8007466:	e00a      	b.n	800747e <USBH_Process+0x3b6>
    break;
 8007468:	bf00      	nop
 800746a:	e008      	b.n	800747e <USBH_Process+0x3b6>
      break;
 800746c:	bf00      	nop
 800746e:	e006      	b.n	800747e <USBH_Process+0x3b6>
      break;
 8007470:	bf00      	nop
 8007472:	e004      	b.n	800747e <USBH_Process+0x3b6>
      break;
 8007474:	bf00      	nop
 8007476:	e002      	b.n	800747e <USBH_Process+0x3b6>
      break;
 8007478:	bf00      	nop
 800747a:	e000      	b.n	800747e <USBH_Process+0x3b6>
      break;
 800747c:	bf00      	nop
  }
  return USBH_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b088      	sub	sp, #32
 800748c:	af04      	add	r7, sp, #16
 800748e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007490:	2301      	movs	r3, #1
 8007492:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007494:	2301      	movs	r3, #1
 8007496:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	785b      	ldrb	r3, [r3, #1]
 800749c:	2b07      	cmp	r3, #7
 800749e:	f200 81c1 	bhi.w	8007824 <USBH_HandleEnum+0x39c>
 80074a2:	a201      	add	r2, pc, #4	; (adr r2, 80074a8 <USBH_HandleEnum+0x20>)
 80074a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a8:	080074c9 	.word	0x080074c9
 80074ac:	08007587 	.word	0x08007587
 80074b0:	080075f1 	.word	0x080075f1
 80074b4:	0800767f 	.word	0x0800767f
 80074b8:	080076e9 	.word	0x080076e9
 80074bc:	08007759 	.word	0x08007759
 80074c0:	0800779f 	.word	0x0800779f
 80074c4:	080077e5 	.word	0x080077e5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80074c8:	2108      	movs	r1, #8
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fa50 	bl	8007970 <USBH_Get_DevDesc>
 80074d0:	4603      	mov	r3, r0
 80074d2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074d4:	7bbb      	ldrb	r3, [r7, #14]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d130      	bne.n	800753c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	7919      	ldrb	r1, [r3, #4]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80074fe:	b292      	uxth	r2, r2
 8007500:	9202      	str	r2, [sp, #8]
 8007502:	2200      	movs	r2, #0
 8007504:	9201      	str	r2, [sp, #4]
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	4603      	mov	r3, r0
 800750a:	2280      	movs	r2, #128	; 0x80
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 ff77 	bl	8008400 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	7959      	ldrb	r1, [r3, #5]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007526:	b292      	uxth	r2, r2
 8007528:	9202      	str	r2, [sp, #8]
 800752a:	2200      	movs	r2, #0
 800752c:	9201      	str	r2, [sp, #4]
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	4603      	mov	r3, r0
 8007532:	2200      	movs	r2, #0
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 ff63 	bl	8008400 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800753a:	e175      	b.n	8007828 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800753c:	7bbb      	ldrb	r3, [r7, #14]
 800753e:	2b03      	cmp	r3, #3
 8007540:	f040 8172 	bne.w	8007828 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800754a:	3301      	adds	r3, #1
 800754c:	b2da      	uxtb	r2, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800755a:	2b03      	cmp	r3, #3
 800755c:	d903      	bls.n	8007566 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	220d      	movs	r2, #13
 8007562:	701a      	strb	r2, [r3, #0]
      break;
 8007564:	e160      	b.n	8007828 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	795b      	ldrb	r3, [r3, #5]
 800756a:	4619      	mov	r1, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 ff97 	bl	80084a0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	791b      	ldrb	r3, [r3, #4]
 8007576:	4619      	mov	r1, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 ff91 	bl	80084a0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	701a      	strb	r2, [r3, #0]
      break;
 8007584:	e150      	b.n	8007828 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007586:	2112      	movs	r1, #18
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f9f1 	bl	8007970 <USBH_Get_DevDesc>
 800758e:	4603      	mov	r3, r0
 8007590:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007592:	7bbb      	ldrb	r3, [r7, #14]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d103      	bne.n	80075a0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2202      	movs	r2, #2
 800759c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800759e:	e145      	b.n	800782c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075a0:	7bbb      	ldrb	r3, [r7, #14]
 80075a2:	2b03      	cmp	r3, #3
 80075a4:	f040 8142 	bne.w	800782c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075ae:	3301      	adds	r3, #1
 80075b0:	b2da      	uxtb	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075be:	2b03      	cmp	r3, #3
 80075c0:	d903      	bls.n	80075ca <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	220d      	movs	r2, #13
 80075c6:	701a      	strb	r2, [r3, #0]
      break;
 80075c8:	e130      	b.n	800782c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	795b      	ldrb	r3, [r3, #5]
 80075ce:	4619      	mov	r1, r3
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 ff65 	bl	80084a0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	791b      	ldrb	r3, [r3, #4]
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 ff5f 	bl	80084a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	701a      	strb	r2, [r3, #0]
      break;
 80075ee:	e11d      	b.n	800782c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80075f0:	2101      	movs	r1, #1
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 fa68 	bl	8007ac8 <USBH_SetAddress>
 80075f8:	4603      	mov	r3, r0
 80075fa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075fc:	7bbb      	ldrb	r3, [r7, #14]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d132      	bne.n	8007668 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007602:	2002      	movs	r0, #2
 8007604:	f001 fa42 	bl	8008a8c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2203      	movs	r2, #3
 8007614:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	7919      	ldrb	r1, [r3, #4]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800762a:	b292      	uxth	r2, r2
 800762c:	9202      	str	r2, [sp, #8]
 800762e:	2200      	movs	r2, #0
 8007630:	9201      	str	r2, [sp, #4]
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	4603      	mov	r3, r0
 8007636:	2280      	movs	r2, #128	; 0x80
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fee1 	bl	8008400 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	7959      	ldrb	r1, [r3, #5]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007652:	b292      	uxth	r2, r2
 8007654:	9202      	str	r2, [sp, #8]
 8007656:	2200      	movs	r2, #0
 8007658:	9201      	str	r2, [sp, #4]
 800765a:	9300      	str	r3, [sp, #0]
 800765c:	4603      	mov	r3, r0
 800765e:	2200      	movs	r2, #0
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 fecd 	bl	8008400 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007666:	e0e3      	b.n	8007830 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007668:	7bbb      	ldrb	r3, [r7, #14]
 800766a:	2b03      	cmp	r3, #3
 800766c:	f040 80e0 	bne.w	8007830 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	220d      	movs	r2, #13
 8007674:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	705a      	strb	r2, [r3, #1]
      break;
 800767c:	e0d8      	b.n	8007830 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800767e:	2109      	movs	r1, #9
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 f99d 	bl	80079c0 <USBH_Get_CfgDesc>
 8007686:	4603      	mov	r3, r0
 8007688:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800768a:	7bbb      	ldrb	r3, [r7, #14]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d103      	bne.n	8007698 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2204      	movs	r2, #4
 8007694:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007696:	e0cd      	b.n	8007834 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007698:	7bbb      	ldrb	r3, [r7, #14]
 800769a:	2b03      	cmp	r3, #3
 800769c:	f040 80ca 	bne.w	8007834 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076a6:	3301      	adds	r3, #1
 80076a8:	b2da      	uxtb	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076b6:	2b03      	cmp	r3, #3
 80076b8:	d903      	bls.n	80076c2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	220d      	movs	r2, #13
 80076be:	701a      	strb	r2, [r3, #0]
      break;
 80076c0:	e0b8      	b.n	8007834 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	795b      	ldrb	r3, [r3, #5]
 80076c6:	4619      	mov	r1, r3
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 fee9 	bl	80084a0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	791b      	ldrb	r3, [r3, #4]
 80076d2:	4619      	mov	r1, r3
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fee3 	bl	80084a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	701a      	strb	r2, [r3, #0]
      break;
 80076e6:	e0a5      	b.n	8007834 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80076ee:	4619      	mov	r1, r3
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f965 	bl	80079c0 <USBH_Get_CfgDesc>
 80076f6:	4603      	mov	r3, r0
 80076f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076fa:	7bbb      	ldrb	r3, [r7, #14]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d103      	bne.n	8007708 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2205      	movs	r2, #5
 8007704:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007706:	e097      	b.n	8007838 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007708:	7bbb      	ldrb	r3, [r7, #14]
 800770a:	2b03      	cmp	r3, #3
 800770c:	f040 8094 	bne.w	8007838 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007716:	3301      	adds	r3, #1
 8007718:	b2da      	uxtb	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007726:	2b03      	cmp	r3, #3
 8007728:	d903      	bls.n	8007732 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	220d      	movs	r2, #13
 800772e:	701a      	strb	r2, [r3, #0]
      break;
 8007730:	e082      	b.n	8007838 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	795b      	ldrb	r3, [r3, #5]
 8007736:	4619      	mov	r1, r3
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 feb1 	bl	80084a0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	791b      	ldrb	r3, [r3, #4]
 8007742:	4619      	mov	r1, r3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 feab 	bl	80084a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	701a      	strb	r2, [r3, #0]
      break;
 8007756:	e06f      	b.n	8007838 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800775e:	2b00      	cmp	r3, #0
 8007760:	d019      	beq.n	8007796 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800776e:	23ff      	movs	r3, #255	; 0xff
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 f949 	bl	8007a08 <USBH_Get_StringDesc>
 8007776:	4603      	mov	r3, r0
 8007778:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800777a:	7bbb      	ldrb	r3, [r7, #14]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d103      	bne.n	8007788 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2206      	movs	r2, #6
 8007784:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007786:	e059      	b.n	800783c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007788:	7bbb      	ldrb	r3, [r7, #14]
 800778a:	2b03      	cmp	r3, #3
 800778c:	d156      	bne.n	800783c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2206      	movs	r2, #6
 8007792:	705a      	strb	r2, [r3, #1]
      break;
 8007794:	e052      	b.n	800783c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2206      	movs	r2, #6
 800779a:	705a      	strb	r2, [r3, #1]
      break;
 800779c:	e04e      	b.n	800783c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d019      	beq.n	80077dc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80077b4:	23ff      	movs	r3, #255	; 0xff
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f926 	bl	8007a08 <USBH_Get_StringDesc>
 80077bc:	4603      	mov	r3, r0
 80077be:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80077c0:	7bbb      	ldrb	r3, [r7, #14]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d103      	bne.n	80077ce <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2207      	movs	r2, #7
 80077ca:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80077cc:	e038      	b.n	8007840 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077ce:	7bbb      	ldrb	r3, [r7, #14]
 80077d0:	2b03      	cmp	r3, #3
 80077d2:	d135      	bne.n	8007840 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2207      	movs	r2, #7
 80077d8:	705a      	strb	r2, [r3, #1]
      break;
 80077da:	e031      	b.n	8007840 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2207      	movs	r2, #7
 80077e0:	705a      	strb	r2, [r3, #1]
      break;
 80077e2:	e02d      	b.n	8007840 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d017      	beq.n	800781e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80077fa:	23ff      	movs	r3, #255	; 0xff
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 f903 	bl	8007a08 <USBH_Get_StringDesc>
 8007802:	4603      	mov	r3, r0
 8007804:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007806:	7bbb      	ldrb	r3, [r7, #14]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d102      	bne.n	8007812 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800780c:	2300      	movs	r3, #0
 800780e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007810:	e018      	b.n	8007844 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007812:	7bbb      	ldrb	r3, [r7, #14]
 8007814:	2b03      	cmp	r3, #3
 8007816:	d115      	bne.n	8007844 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007818:	2300      	movs	r3, #0
 800781a:	73fb      	strb	r3, [r7, #15]
      break;
 800781c:	e012      	b.n	8007844 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800781e:	2300      	movs	r3, #0
 8007820:	73fb      	strb	r3, [r7, #15]
      break;
 8007822:	e00f      	b.n	8007844 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007824:	bf00      	nop
 8007826:	e00e      	b.n	8007846 <USBH_HandleEnum+0x3be>
      break;
 8007828:	bf00      	nop
 800782a:	e00c      	b.n	8007846 <USBH_HandleEnum+0x3be>
      break;
 800782c:	bf00      	nop
 800782e:	e00a      	b.n	8007846 <USBH_HandleEnum+0x3be>
      break;
 8007830:	bf00      	nop
 8007832:	e008      	b.n	8007846 <USBH_HandleEnum+0x3be>
      break;
 8007834:	bf00      	nop
 8007836:	e006      	b.n	8007846 <USBH_HandleEnum+0x3be>
      break;
 8007838:	bf00      	nop
 800783a:	e004      	b.n	8007846 <USBH_HandleEnum+0x3be>
      break;
 800783c:	bf00      	nop
 800783e:	e002      	b.n	8007846 <USBH_HandleEnum+0x3be>
      break;
 8007840:	bf00      	nop
 8007842:	e000      	b.n	8007846 <USBH_HandleEnum+0x3be>
      break;
 8007844:	bf00      	nop
  }
  return Status;
 8007846:	7bfb      	ldrb	r3, [r7, #15]
}
 8007848:	4618      	mov	r0, r3
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	683a      	ldr	r2, [r7, #0]
 800785e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007862:	bf00      	nop
 8007864:	370c      	adds	r7, #12
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr

0800786e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b082      	sub	sp, #8
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800787c:	1c5a      	adds	r2, r3, #1
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f804 	bl	8007892 <USBH_HandleSof>
}
 800788a:	bf00      	nop
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b082      	sub	sp, #8
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	2b0b      	cmp	r3, #11
 80078a2:	d10a      	bne.n	80078ba <USBH_HandleSof+0x28>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d005      	beq.n	80078ba <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	4798      	blx	r3
  }
}
 80078ba:	bf00      	nop
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b083      	sub	sp, #12
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80078d2:	bf00      	nop
}
 80078d4:	370c      	adds	r7, #12
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80078de:	b480      	push	{r7}
 80078e0:	b083      	sub	sp, #12
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80078ee:	bf00      	nop
}
 80078f0:	370c      	adds	r7, #12
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b083      	sub	sp, #12
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 ff56 	bl	80087fa <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	791b      	ldrb	r3, [r3, #4]
 8007952:	4619      	mov	r1, r3
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fda3 	bl	80084a0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	795b      	ldrb	r3, [r3, #5]
 800795e:	4619      	mov	r1, r3
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 fd9d 	bl	80084a0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b086      	sub	sp, #24
 8007974:	af02      	add	r7, sp, #8
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	460b      	mov	r3, r1
 800797a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007982:	78fb      	ldrb	r3, [r7, #3]
 8007984:	b29b      	uxth	r3, r3
 8007986:	9300      	str	r3, [sp, #0]
 8007988:	4613      	mov	r3, r2
 800798a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800798e:	2100      	movs	r1, #0
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f864 	bl	8007a5e <USBH_GetDescriptor>
 8007996:	4603      	mov	r3, r0
 8007998:	73fb      	strb	r3, [r7, #15]
 800799a:	7bfb      	ldrb	r3, [r7, #15]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10a      	bne.n	80079b6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f203 3026 	addw	r0, r3, #806	; 0x326
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80079ac:	78fa      	ldrb	r2, [r7, #3]
 80079ae:	b292      	uxth	r2, r2
 80079b0:	4619      	mov	r1, r3
 80079b2:	f000 f918 	bl	8007be6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80079b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af02      	add	r7, sp, #8
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	460b      	mov	r3, r1
 80079ca:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	331c      	adds	r3, #28
 80079d0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80079d2:	887b      	ldrh	r3, [r7, #2]
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079dc:	2100      	movs	r1, #0
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f83d 	bl	8007a5e <USBH_GetDescriptor>
 80079e4:	4603      	mov	r3, r0
 80079e6:	72fb      	strb	r3, [r7, #11]
 80079e8:	7afb      	ldrb	r3, [r7, #11]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d107      	bne.n	80079fe <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80079f4:	887a      	ldrh	r2, [r7, #2]
 80079f6:	68f9      	ldr	r1, [r7, #12]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 f964 	bl	8007cc6 <USBH_ParseCfgDesc>
  }

  return status;
 80079fe:	7afb      	ldrb	r3, [r7, #11]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3710      	adds	r7, #16
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b088      	sub	sp, #32
 8007a0c:	af02      	add	r7, sp, #8
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	607a      	str	r2, [r7, #4]
 8007a12:	461a      	mov	r2, r3
 8007a14:	460b      	mov	r3, r1
 8007a16:	72fb      	strb	r3, [r7, #11]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007a1c:	7afb      	ldrb	r3, [r7, #11]
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007a24:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007a2c:	893b      	ldrh	r3, [r7, #8]
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	460b      	mov	r3, r1
 8007a32:	2100      	movs	r1, #0
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f000 f812 	bl	8007a5e <USBH_GetDescriptor>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	75fb      	strb	r3, [r7, #23]
 8007a3e:	7dfb      	ldrb	r3, [r7, #23]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d107      	bne.n	8007a54 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007a4a:	893a      	ldrh	r2, [r7, #8]
 8007a4c:	6879      	ldr	r1, [r7, #4]
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 fa37 	bl	8007ec2 <USBH_ParseStringDesc>
  }

  return status;
 8007a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3718      	adds	r7, #24
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b084      	sub	sp, #16
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	60f8      	str	r0, [r7, #12]
 8007a66:	607b      	str	r3, [r7, #4]
 8007a68:	460b      	mov	r3, r1
 8007a6a:	72fb      	strb	r3, [r7, #11]
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	789b      	ldrb	r3, [r3, #2]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d11c      	bne.n	8007ab2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007a78:	7afb      	ldrb	r3, [r7, #11]
 8007a7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a7e:	b2da      	uxtb	r2, r3
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2206      	movs	r2, #6
 8007a88:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	893a      	ldrh	r2, [r7, #8]
 8007a8e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007a90:	893b      	ldrh	r3, [r7, #8]
 8007a92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007a96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a9a:	d104      	bne.n	8007aa6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f240 4209 	movw	r2, #1033	; 0x409
 8007aa2:	829a      	strh	r2, [r3, #20]
 8007aa4:	e002      	b.n	8007aac <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	8b3a      	ldrh	r2, [r7, #24]
 8007ab0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007ab2:	8b3b      	ldrh	r3, [r7, #24]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	6879      	ldr	r1, [r7, #4]
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f000 fa50 	bl	8007f5e <USBH_CtlReq>
 8007abe:	4603      	mov	r3, r0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	789b      	ldrb	r3, [r3, #2]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d10f      	bne.n	8007afc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2205      	movs	r2, #5
 8007ae6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007ae8:	78fb      	ldrb	r3, [r7, #3]
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007afc:	2200      	movs	r2, #0
 8007afe:	2100      	movs	r1, #0
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fa2c 	bl	8007f5e <USBH_CtlReq>
 8007b06:	4603      	mov	r3, r0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	789b      	ldrb	r3, [r3, #2]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d10e      	bne.n	8007b42 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2209      	movs	r2, #9
 8007b2e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	887a      	ldrh	r2, [r7, #2]
 8007b34:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007b42:	2200      	movs	r2, #0
 8007b44:	2100      	movs	r1, #0
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 fa09 	bl	8007f5e <USBH_CtlReq>
 8007b4c:	4603      	mov	r3, r0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3708      	adds	r7, #8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b082      	sub	sp, #8
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
 8007b5e:	460b      	mov	r3, r1
 8007b60:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	789b      	ldrb	r3, [r3, #2]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d10f      	bne.n	8007b8a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2203      	movs	r2, #3
 8007b74:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007b76:	78fb      	ldrb	r3, [r7, #3]
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f9e5 	bl	8007f5e <USBH_CtlReq>
 8007b94:	4603      	mov	r3, r0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b082      	sub	sp, #8
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	789b      	ldrb	r3, [r3, #2]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d10f      	bne.n	8007bd2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2202      	movs	r2, #2
 8007bb6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007bc4:	78fb      	ldrb	r3, [r7, #3]
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f9c1 	bl	8007f5e <USBH_CtlReq>
 8007bdc:	4603      	mov	r3, r0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3708      	adds	r7, #8
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007be6:	b480      	push	{r7}
 8007be8:	b085      	sub	sp, #20
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	60f8      	str	r0, [r7, #12]
 8007bee:	60b9      	str	r1, [r7, #8]
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	781a      	ldrb	r2, [r3, #0]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	785a      	ldrb	r2, [r3, #1]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	3302      	adds	r3, #2
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	3303      	adds	r3, #3
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	021b      	lsls	r3, r3, #8
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	b29a      	uxth	r2, r3
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	791a      	ldrb	r2, [r3, #4]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	795a      	ldrb	r2, [r3, #5]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	799a      	ldrb	r2, [r3, #6]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	79da      	ldrb	r2, [r3, #7]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007c40:	88fb      	ldrh	r3, [r7, #6]
 8007c42:	2b08      	cmp	r3, #8
 8007c44:	d939      	bls.n	8007cba <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	3308      	adds	r3, #8
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	3309      	adds	r3, #9
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	021b      	lsls	r3, r3, #8
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	330a      	adds	r3, #10
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	330b      	adds	r3, #11
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	021b      	lsls	r3, r3, #8
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	4313      	orrs	r3, r2
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	330c      	adds	r3, #12
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	330d      	adds	r3, #13
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	021b      	lsls	r3, r3, #8
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	4313      	orrs	r3, r2
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	7b9a      	ldrb	r2, [r3, #14]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	7bda      	ldrb	r2, [r3, #15]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	7c1a      	ldrb	r2, [r3, #16]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	7c5a      	ldrb	r2, [r3, #17]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	745a      	strb	r2, [r3, #17]
  }
}
 8007cba:	bf00      	nop
 8007cbc:	3714      	adds	r7, #20
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b08a      	sub	sp, #40	; 0x28
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	60f8      	str	r0, [r7, #12]
 8007cce:	60b9      	str	r1, [r7, #8]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	781a      	ldrb	r2, [r3, #0]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	785a      	ldrb	r2, [r3, #1]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	3302      	adds	r3, #2
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	3303      	adds	r3, #3
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	021b      	lsls	r3, r3, #8
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	791a      	ldrb	r2, [r3, #4]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	795a      	ldrb	r2, [r3, #5]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	799a      	ldrb	r2, [r3, #6]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	79da      	ldrb	r2, [r3, #7]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	7a1a      	ldrb	r2, [r3, #8]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007d3c:	88fb      	ldrh	r3, [r7, #6]
 8007d3e:	2b09      	cmp	r3, #9
 8007d40:	d95f      	bls.n	8007e02 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007d42:	2309      	movs	r3, #9
 8007d44:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007d46:	2300      	movs	r3, #0
 8007d48:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007d4a:	e051      	b.n	8007df0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007d4c:	f107 0316 	add.w	r3, r7, #22
 8007d50:	4619      	mov	r1, r3
 8007d52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d54:	f000 f8e8 	bl	8007f28 <USBH_GetNextDesc>
 8007d58:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5c:	785b      	ldrb	r3, [r3, #1]
 8007d5e:	2b04      	cmp	r3, #4
 8007d60:	d146      	bne.n	8007df0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007d62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d66:	221a      	movs	r2, #26
 8007d68:	fb02 f303 	mul.w	r3, r2, r3
 8007d6c:	3308      	adds	r3, #8
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	4413      	add	r3, r2
 8007d72:	3302      	adds	r3, #2
 8007d74:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007d76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d78:	69f8      	ldr	r0, [r7, #28]
 8007d7a:	f000 f846 	bl	8007e0a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007d84:	2300      	movs	r3, #0
 8007d86:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007d88:	e022      	b.n	8007dd0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007d8a:	f107 0316 	add.w	r3, r7, #22
 8007d8e:	4619      	mov	r1, r3
 8007d90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d92:	f000 f8c9 	bl	8007f28 <USBH_GetNextDesc>
 8007d96:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9a:	785b      	ldrb	r3, [r3, #1]
 8007d9c:	2b05      	cmp	r3, #5
 8007d9e:	d117      	bne.n	8007dd0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007da0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007da4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007da8:	3201      	adds	r2, #1
 8007daa:	00d2      	lsls	r2, r2, #3
 8007dac:	211a      	movs	r1, #26
 8007dae:	fb01 f303 	mul.w	r3, r1, r3
 8007db2:	4413      	add	r3, r2
 8007db4:	3308      	adds	r3, #8
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	4413      	add	r3, r2
 8007dba:	3304      	adds	r3, #4
 8007dbc:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007dbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007dc0:	69b8      	ldr	r0, [r7, #24]
 8007dc2:	f000 f851 	bl	8007e68 <USBH_ParseEPDesc>
            ep_ix++;
 8007dc6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007dca:	3301      	adds	r3, #1
 8007dcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	791b      	ldrb	r3, [r3, #4]
 8007dd4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d204      	bcs.n	8007de6 <USBH_ParseCfgDesc+0x120>
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	885a      	ldrh	r2, [r3, #2]
 8007de0:	8afb      	ldrh	r3, [r7, #22]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d8d1      	bhi.n	8007d8a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007de6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007dea:	3301      	adds	r3, #1
 8007dec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007df0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d804      	bhi.n	8007e02 <USBH_ParseCfgDesc+0x13c>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	885a      	ldrh	r2, [r3, #2]
 8007dfc:	8afb      	ldrh	r3, [r7, #22]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d8a4      	bhi.n	8007d4c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007e02:	bf00      	nop
 8007e04:	3728      	adds	r7, #40	; 0x28
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b083      	sub	sp, #12
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	781a      	ldrb	r2, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	785a      	ldrb	r2, [r3, #1]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	789a      	ldrb	r2, [r3, #2]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	78da      	ldrb	r2, [r3, #3]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	791a      	ldrb	r2, [r3, #4]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	795a      	ldrb	r2, [r3, #5]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	799a      	ldrb	r2, [r3, #6]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	79da      	ldrb	r2, [r3, #7]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	7a1a      	ldrb	r2, [r3, #8]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	721a      	strb	r2, [r3, #8]
}
 8007e5c:	bf00      	nop
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	781a      	ldrb	r2, [r3, #0]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	785a      	ldrb	r2, [r3, #1]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	789a      	ldrb	r2, [r3, #2]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	78da      	ldrb	r2, [r3, #3]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	3304      	adds	r3, #4
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	3305      	adds	r3, #5
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	021b      	lsls	r3, r3, #8
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	799a      	ldrb	r2, [r3, #6]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	719a      	strb	r2, [r3, #6]
}
 8007eb6:	bf00      	nop
 8007eb8:	370c      	adds	r7, #12
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr

08007ec2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	b087      	sub	sp, #28
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	60f8      	str	r0, [r7, #12]
 8007eca:	60b9      	str	r1, [r7, #8]
 8007ecc:	4613      	mov	r3, r2
 8007ece:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	2b03      	cmp	r3, #3
 8007ed8:	d120      	bne.n	8007f1c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	1e9a      	subs	r2, r3, #2
 8007ee0:	88fb      	ldrh	r3, [r7, #6]
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	bf28      	it	cs
 8007ee6:	4613      	movcs	r3, r2
 8007ee8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	3302      	adds	r3, #2
 8007eee:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	82fb      	strh	r3, [r7, #22]
 8007ef4:	e00b      	b.n	8007f0e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007ef6:	8afb      	ldrh	r3, [r7, #22]
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	4413      	add	r3, r2
 8007efc:	781a      	ldrb	r2, [r3, #0]
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	3301      	adds	r3, #1
 8007f06:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007f08:	8afb      	ldrh	r3, [r7, #22]
 8007f0a:	3302      	adds	r3, #2
 8007f0c:	82fb      	strh	r3, [r7, #22]
 8007f0e:	8afa      	ldrh	r2, [r7, #22]
 8007f10:	8abb      	ldrh	r3, [r7, #20]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d3ef      	bcc.n	8007ef6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	701a      	strb	r2, [r3, #0]
  }
}
 8007f1c:	bf00      	nop
 8007f1e:	371c      	adds	r7, #28
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	881a      	ldrh	r2, [r3, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	4413      	add	r3, r2
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007f50:	68fb      	ldr	r3, [r7, #12]
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3714      	adds	r7, #20
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr

08007f5e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b086      	sub	sp, #24
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	60f8      	str	r0, [r7, #12]
 8007f66:	60b9      	str	r1, [r7, #8]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	789b      	ldrb	r3, [r3, #2]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d002      	beq.n	8007f7e <USBH_CtlReq+0x20>
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d00f      	beq.n	8007f9c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007f7c:	e027      	b.n	8007fce <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	68ba      	ldr	r2, [r7, #8]
 8007f82:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	88fa      	ldrh	r2, [r7, #6]
 8007f88:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2202      	movs	r2, #2
 8007f94:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007f96:	2301      	movs	r3, #1
 8007f98:	75fb      	strb	r3, [r7, #23]
      break;
 8007f9a:	e018      	b.n	8007fce <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f000 f81b 	bl	8007fd8 <USBH_HandleControl>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007fa6:	7dfb      	ldrb	r3, [r7, #23]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d002      	beq.n	8007fb2 <USBH_CtlReq+0x54>
 8007fac:	7dfb      	ldrb	r3, [r7, #23]
 8007fae:	2b03      	cmp	r3, #3
 8007fb0:	d106      	bne.n	8007fc0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	761a      	strb	r2, [r3, #24]
      break;
 8007fbe:	e005      	b.n	8007fcc <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007fc0:	7dfb      	ldrb	r3, [r7, #23]
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d102      	bne.n	8007fcc <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	709a      	strb	r2, [r3, #2]
      break;
 8007fcc:	bf00      	nop
  }
  return status;
 8007fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3718      	adds	r7, #24
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b086      	sub	sp, #24
 8007fdc:	af02      	add	r7, sp, #8
 8007fde:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	7e1b      	ldrb	r3, [r3, #24]
 8007fec:	3b01      	subs	r3, #1
 8007fee:	2b0a      	cmp	r3, #10
 8007ff0:	f200 8156 	bhi.w	80082a0 <USBH_HandleControl+0x2c8>
 8007ff4:	a201      	add	r2, pc, #4	; (adr r2, 8007ffc <USBH_HandleControl+0x24>)
 8007ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffa:	bf00      	nop
 8007ffc:	08008029 	.word	0x08008029
 8008000:	08008043 	.word	0x08008043
 8008004:	080080ad 	.word	0x080080ad
 8008008:	080080d3 	.word	0x080080d3
 800800c:	0800810b 	.word	0x0800810b
 8008010:	08008135 	.word	0x08008135
 8008014:	08008187 	.word	0x08008187
 8008018:	080081a9 	.word	0x080081a9
 800801c:	080081e5 	.word	0x080081e5
 8008020:	0800820b 	.word	0x0800820b
 8008024:	08008249 	.word	0x08008249
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f103 0110 	add.w	r1, r3, #16
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	795b      	ldrb	r3, [r3, #5]
 8008032:	461a      	mov	r2, r3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f943 	bl	80082c0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2202      	movs	r2, #2
 800803e:	761a      	strb	r2, [r3, #24]
      break;
 8008040:	e139      	b.n	80082b6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	795b      	ldrb	r3, [r3, #5]
 8008046:	4619      	mov	r1, r3
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fcc5 	bl	80089d8 <USBH_LL_GetURBState>
 800804e:	4603      	mov	r3, r0
 8008050:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008052:	7bbb      	ldrb	r3, [r7, #14]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d11e      	bne.n	8008096 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	7c1b      	ldrb	r3, [r3, #16]
 800805c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008060:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	8adb      	ldrh	r3, [r3, #22]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00a      	beq.n	8008080 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800806a:	7b7b      	ldrb	r3, [r7, #13]
 800806c:	2b80      	cmp	r3, #128	; 0x80
 800806e:	d103      	bne.n	8008078 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2203      	movs	r2, #3
 8008074:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008076:	e115      	b.n	80082a4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2205      	movs	r2, #5
 800807c:	761a      	strb	r2, [r3, #24]
      break;
 800807e:	e111      	b.n	80082a4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008080:	7b7b      	ldrb	r3, [r7, #13]
 8008082:	2b80      	cmp	r3, #128	; 0x80
 8008084:	d103      	bne.n	800808e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2209      	movs	r2, #9
 800808a:	761a      	strb	r2, [r3, #24]
      break;
 800808c:	e10a      	b.n	80082a4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2207      	movs	r2, #7
 8008092:	761a      	strb	r2, [r3, #24]
      break;
 8008094:	e106      	b.n	80082a4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008096:	7bbb      	ldrb	r3, [r7, #14]
 8008098:	2b04      	cmp	r3, #4
 800809a:	d003      	beq.n	80080a4 <USBH_HandleControl+0xcc>
 800809c:	7bbb      	ldrb	r3, [r7, #14]
 800809e:	2b02      	cmp	r3, #2
 80080a0:	f040 8100 	bne.w	80082a4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	220b      	movs	r2, #11
 80080a8:	761a      	strb	r2, [r3, #24]
      break;
 80080aa:	e0fb      	b.n	80082a4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6899      	ldr	r1, [r3, #8]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	899a      	ldrh	r2, [r3, #12]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	791b      	ldrb	r3, [r3, #4]
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 f93a 	bl	800833e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2204      	movs	r2, #4
 80080ce:	761a      	strb	r2, [r3, #24]
      break;
 80080d0:	e0f1      	b.n	80082b6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	791b      	ldrb	r3, [r3, #4]
 80080d6:	4619      	mov	r1, r3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 fc7d 	bl	80089d8 <USBH_LL_GetURBState>
 80080de:	4603      	mov	r3, r0
 80080e0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80080e2:	7bbb      	ldrb	r3, [r7, #14]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d102      	bne.n	80080ee <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2209      	movs	r2, #9
 80080ec:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80080ee:	7bbb      	ldrb	r3, [r7, #14]
 80080f0:	2b05      	cmp	r3, #5
 80080f2:	d102      	bne.n	80080fa <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80080f4:	2303      	movs	r3, #3
 80080f6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80080f8:	e0d6      	b.n	80082a8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80080fa:	7bbb      	ldrb	r3, [r7, #14]
 80080fc:	2b04      	cmp	r3, #4
 80080fe:	f040 80d3 	bne.w	80082a8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	220b      	movs	r2, #11
 8008106:	761a      	strb	r2, [r3, #24]
      break;
 8008108:	e0ce      	b.n	80082a8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6899      	ldr	r1, [r3, #8]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	899a      	ldrh	r2, [r3, #12]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	795b      	ldrb	r3, [r3, #5]
 8008116:	2001      	movs	r0, #1
 8008118:	9000      	str	r0, [sp, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f8ea 	bl	80082f4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008126:	b29a      	uxth	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2206      	movs	r2, #6
 8008130:	761a      	strb	r2, [r3, #24]
      break;
 8008132:	e0c0      	b.n	80082b6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	795b      	ldrb	r3, [r3, #5]
 8008138:	4619      	mov	r1, r3
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fc4c 	bl	80089d8 <USBH_LL_GetURBState>
 8008140:	4603      	mov	r3, r0
 8008142:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008144:	7bbb      	ldrb	r3, [r7, #14]
 8008146:	2b01      	cmp	r3, #1
 8008148:	d103      	bne.n	8008152 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2207      	movs	r2, #7
 800814e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008150:	e0ac      	b.n	80082ac <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008152:	7bbb      	ldrb	r3, [r7, #14]
 8008154:	2b05      	cmp	r3, #5
 8008156:	d105      	bne.n	8008164 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	220c      	movs	r2, #12
 800815c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800815e:	2303      	movs	r3, #3
 8008160:	73fb      	strb	r3, [r7, #15]
      break;
 8008162:	e0a3      	b.n	80082ac <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008164:	7bbb      	ldrb	r3, [r7, #14]
 8008166:	2b02      	cmp	r3, #2
 8008168:	d103      	bne.n	8008172 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2205      	movs	r2, #5
 800816e:	761a      	strb	r2, [r3, #24]
      break;
 8008170:	e09c      	b.n	80082ac <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008172:	7bbb      	ldrb	r3, [r7, #14]
 8008174:	2b04      	cmp	r3, #4
 8008176:	f040 8099 	bne.w	80082ac <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	220b      	movs	r2, #11
 800817e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008180:	2302      	movs	r3, #2
 8008182:	73fb      	strb	r3, [r7, #15]
      break;
 8008184:	e092      	b.n	80082ac <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	791b      	ldrb	r3, [r3, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	2100      	movs	r1, #0
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 f8d5 	bl	800833e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800819a:	b29a      	uxth	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2208      	movs	r2, #8
 80081a4:	761a      	strb	r2, [r3, #24]

      break;
 80081a6:	e086      	b.n	80082b6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	791b      	ldrb	r3, [r3, #4]
 80081ac:	4619      	mov	r1, r3
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fc12 	bl	80089d8 <USBH_LL_GetURBState>
 80081b4:	4603      	mov	r3, r0
 80081b6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80081b8:	7bbb      	ldrb	r3, [r7, #14]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d105      	bne.n	80081ca <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	220d      	movs	r2, #13
 80081c2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80081c4:	2300      	movs	r3, #0
 80081c6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80081c8:	e072      	b.n	80082b0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80081ca:	7bbb      	ldrb	r3, [r7, #14]
 80081cc:	2b04      	cmp	r3, #4
 80081ce:	d103      	bne.n	80081d8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	220b      	movs	r2, #11
 80081d4:	761a      	strb	r2, [r3, #24]
      break;
 80081d6:	e06b      	b.n	80082b0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80081d8:	7bbb      	ldrb	r3, [r7, #14]
 80081da:	2b05      	cmp	r3, #5
 80081dc:	d168      	bne.n	80082b0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80081de:	2303      	movs	r3, #3
 80081e0:	73fb      	strb	r3, [r7, #15]
      break;
 80081e2:	e065      	b.n	80082b0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	795b      	ldrb	r3, [r3, #5]
 80081e8:	2201      	movs	r2, #1
 80081ea:	9200      	str	r2, [sp, #0]
 80081ec:	2200      	movs	r2, #0
 80081ee:	2100      	movs	r1, #0
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 f87f 	bl	80082f4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80081fc:	b29a      	uxth	r2, r3
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	220a      	movs	r2, #10
 8008206:	761a      	strb	r2, [r3, #24]
      break;
 8008208:	e055      	b.n	80082b6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	795b      	ldrb	r3, [r3, #5]
 800820e:	4619      	mov	r1, r3
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 fbe1 	bl	80089d8 <USBH_LL_GetURBState>
 8008216:	4603      	mov	r3, r0
 8008218:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800821a:	7bbb      	ldrb	r3, [r7, #14]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d105      	bne.n	800822c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008220:	2300      	movs	r3, #0
 8008222:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	220d      	movs	r2, #13
 8008228:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800822a:	e043      	b.n	80082b4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800822c:	7bbb      	ldrb	r3, [r7, #14]
 800822e:	2b02      	cmp	r3, #2
 8008230:	d103      	bne.n	800823a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2209      	movs	r2, #9
 8008236:	761a      	strb	r2, [r3, #24]
      break;
 8008238:	e03c      	b.n	80082b4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800823a:	7bbb      	ldrb	r3, [r7, #14]
 800823c:	2b04      	cmp	r3, #4
 800823e:	d139      	bne.n	80082b4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	220b      	movs	r2, #11
 8008244:	761a      	strb	r2, [r3, #24]
      break;
 8008246:	e035      	b.n	80082b4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	7e5b      	ldrb	r3, [r3, #25]
 800824c:	3301      	adds	r3, #1
 800824e:	b2da      	uxtb	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	765a      	strb	r2, [r3, #25]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	7e5b      	ldrb	r3, [r3, #25]
 8008258:	2b02      	cmp	r3, #2
 800825a:	d806      	bhi.n	800826a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2201      	movs	r2, #1
 8008266:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008268:	e025      	b.n	80082b6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008270:	2106      	movs	r1, #6
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	795b      	ldrb	r3, [r3, #5]
 8008280:	4619      	mov	r1, r3
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f90c 	bl	80084a0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	791b      	ldrb	r3, [r3, #4]
 800828c:	4619      	mov	r1, r3
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f906 	bl	80084a0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800829a:	2302      	movs	r3, #2
 800829c:	73fb      	strb	r3, [r7, #15]
      break;
 800829e:	e00a      	b.n	80082b6 <USBH_HandleControl+0x2de>

    default:
      break;
 80082a0:	bf00      	nop
 80082a2:	e008      	b.n	80082b6 <USBH_HandleControl+0x2de>
      break;
 80082a4:	bf00      	nop
 80082a6:	e006      	b.n	80082b6 <USBH_HandleControl+0x2de>
      break;
 80082a8:	bf00      	nop
 80082aa:	e004      	b.n	80082b6 <USBH_HandleControl+0x2de>
      break;
 80082ac:	bf00      	nop
 80082ae:	e002      	b.n	80082b6 <USBH_HandleControl+0x2de>
      break;
 80082b0:	bf00      	nop
 80082b2:	e000      	b.n	80082b6 <USBH_HandleControl+0x2de>
      break;
 80082b4:	bf00      	nop
  }

  return status;
 80082b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b088      	sub	sp, #32
 80082c4:	af04      	add	r7, sp, #16
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	4613      	mov	r3, r2
 80082cc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80082ce:	79f9      	ldrb	r1, [r7, #7]
 80082d0:	2300      	movs	r3, #0
 80082d2:	9303      	str	r3, [sp, #12]
 80082d4:	2308      	movs	r3, #8
 80082d6:	9302      	str	r3, [sp, #8]
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	9301      	str	r3, [sp, #4]
 80082dc:	2300      	movs	r3, #0
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	2300      	movs	r3, #0
 80082e2:	2200      	movs	r2, #0
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f000 fb46 	bl	8008976 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3710      	adds	r7, #16
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b088      	sub	sp, #32
 80082f8:	af04      	add	r7, sp, #16
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	4611      	mov	r1, r2
 8008300:	461a      	mov	r2, r3
 8008302:	460b      	mov	r3, r1
 8008304:	80fb      	strh	r3, [r7, #6]
 8008306:	4613      	mov	r3, r2
 8008308:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008310:	2b00      	cmp	r3, #0
 8008312:	d001      	beq.n	8008318 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008314:	2300      	movs	r3, #0
 8008316:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008318:	7979      	ldrb	r1, [r7, #5]
 800831a:	7e3b      	ldrb	r3, [r7, #24]
 800831c:	9303      	str	r3, [sp, #12]
 800831e:	88fb      	ldrh	r3, [r7, #6]
 8008320:	9302      	str	r3, [sp, #8]
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	9301      	str	r3, [sp, #4]
 8008326:	2301      	movs	r3, #1
 8008328:	9300      	str	r3, [sp, #0]
 800832a:	2300      	movs	r3, #0
 800832c:	2200      	movs	r2, #0
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f000 fb21 	bl	8008976 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b088      	sub	sp, #32
 8008342:	af04      	add	r7, sp, #16
 8008344:	60f8      	str	r0, [r7, #12]
 8008346:	60b9      	str	r1, [r7, #8]
 8008348:	4611      	mov	r1, r2
 800834a:	461a      	mov	r2, r3
 800834c:	460b      	mov	r3, r1
 800834e:	80fb      	strh	r3, [r7, #6]
 8008350:	4613      	mov	r3, r2
 8008352:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008354:	7979      	ldrb	r1, [r7, #5]
 8008356:	2300      	movs	r3, #0
 8008358:	9303      	str	r3, [sp, #12]
 800835a:	88fb      	ldrh	r3, [r7, #6]
 800835c:	9302      	str	r3, [sp, #8]
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	9301      	str	r3, [sp, #4]
 8008362:	2301      	movs	r3, #1
 8008364:	9300      	str	r3, [sp, #0]
 8008366:	2300      	movs	r3, #0
 8008368:	2201      	movs	r2, #1
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f000 fb03 	bl	8008976 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008370:	2300      	movs	r3, #0

}
 8008372:	4618      	mov	r0, r3
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800837a:	b580      	push	{r7, lr}
 800837c:	b088      	sub	sp, #32
 800837e:	af04      	add	r7, sp, #16
 8008380:	60f8      	str	r0, [r7, #12]
 8008382:	60b9      	str	r1, [r7, #8]
 8008384:	4611      	mov	r1, r2
 8008386:	461a      	mov	r2, r3
 8008388:	460b      	mov	r3, r1
 800838a:	80fb      	strh	r3, [r7, #6]
 800838c:	4613      	mov	r3, r2
 800838e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008396:	2b00      	cmp	r3, #0
 8008398:	d001      	beq.n	800839e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800839a:	2300      	movs	r3, #0
 800839c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800839e:	7979      	ldrb	r1, [r7, #5]
 80083a0:	7e3b      	ldrb	r3, [r7, #24]
 80083a2:	9303      	str	r3, [sp, #12]
 80083a4:	88fb      	ldrh	r3, [r7, #6]
 80083a6:	9302      	str	r3, [sp, #8]
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	9301      	str	r3, [sp, #4]
 80083ac:	2301      	movs	r3, #1
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	2302      	movs	r3, #2
 80083b2:	2200      	movs	r2, #0
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f000 fade 	bl	8008976 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3710      	adds	r7, #16
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b088      	sub	sp, #32
 80083c8:	af04      	add	r7, sp, #16
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	4611      	mov	r1, r2
 80083d0:	461a      	mov	r2, r3
 80083d2:	460b      	mov	r3, r1
 80083d4:	80fb      	strh	r3, [r7, #6]
 80083d6:	4613      	mov	r3, r2
 80083d8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80083da:	7979      	ldrb	r1, [r7, #5]
 80083dc:	2300      	movs	r3, #0
 80083de:	9303      	str	r3, [sp, #12]
 80083e0:	88fb      	ldrh	r3, [r7, #6]
 80083e2:	9302      	str	r3, [sp, #8]
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	9301      	str	r3, [sp, #4]
 80083e8:	2301      	movs	r3, #1
 80083ea:	9300      	str	r3, [sp, #0]
 80083ec:	2302      	movs	r3, #2
 80083ee:	2201      	movs	r2, #1
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f000 fac0 	bl	8008976 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3710      	adds	r7, #16
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af04      	add	r7, sp, #16
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	4608      	mov	r0, r1
 800840a:	4611      	mov	r1, r2
 800840c:	461a      	mov	r2, r3
 800840e:	4603      	mov	r3, r0
 8008410:	70fb      	strb	r3, [r7, #3]
 8008412:	460b      	mov	r3, r1
 8008414:	70bb      	strb	r3, [r7, #2]
 8008416:	4613      	mov	r3, r2
 8008418:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800841a:	7878      	ldrb	r0, [r7, #1]
 800841c:	78ba      	ldrb	r2, [r7, #2]
 800841e:	78f9      	ldrb	r1, [r7, #3]
 8008420:	8b3b      	ldrh	r3, [r7, #24]
 8008422:	9302      	str	r3, [sp, #8]
 8008424:	7d3b      	ldrb	r3, [r7, #20]
 8008426:	9301      	str	r3, [sp, #4]
 8008428:	7c3b      	ldrb	r3, [r7, #16]
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	4603      	mov	r3, r0
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fa53 	bl	80088da <USBH_LL_OpenPipe>

  return USBH_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b082      	sub	sp, #8
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
 8008446:	460b      	mov	r3, r1
 8008448:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800844a:	78fb      	ldrb	r3, [r7, #3]
 800844c:	4619      	mov	r1, r3
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fa72 	bl	8008938 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3708      	adds	r7, #8
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b084      	sub	sp, #16
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
 8008466:	460b      	mov	r3, r1
 8008468:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 f836 	bl	80084dc <USBH_GetFreePipe>
 8008470:	4603      	mov	r3, r0
 8008472:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008474:	89fb      	ldrh	r3, [r7, #14]
 8008476:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800847a:	4293      	cmp	r3, r2
 800847c:	d00a      	beq.n	8008494 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800847e:	78fa      	ldrb	r2, [r7, #3]
 8008480:	89fb      	ldrh	r3, [r7, #14]
 8008482:	f003 030f 	and.w	r3, r3, #15
 8008486:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800848a:	6879      	ldr	r1, [r7, #4]
 800848c:	33e0      	adds	r3, #224	; 0xe0
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	440b      	add	r3, r1
 8008492:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008494:	89fb      	ldrh	r3, [r7, #14]
 8008496:	b2db      	uxtb	r3, r3
}
 8008498:	4618      	mov	r0, r3
 800849a:	3710      	adds	r7, #16
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	460b      	mov	r3, r1
 80084aa:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80084ac:	78fb      	ldrb	r3, [r7, #3]
 80084ae:	2b0a      	cmp	r3, #10
 80084b0:	d80d      	bhi.n	80084ce <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80084b2:	78fb      	ldrb	r3, [r7, #3]
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	33e0      	adds	r3, #224	; 0xe0
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	4413      	add	r3, r2
 80084bc:	685a      	ldr	r2, [r3, #4]
 80084be:	78fb      	ldrb	r3, [r7, #3]
 80084c0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80084c4:	6879      	ldr	r1, [r7, #4]
 80084c6:	33e0      	adds	r3, #224	; 0xe0
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	440b      	add	r3, r1
 80084cc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80084e4:	2300      	movs	r3, #0
 80084e6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80084e8:	2300      	movs	r3, #0
 80084ea:	73fb      	strb	r3, [r7, #15]
 80084ec:	e00f      	b.n	800850e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80084ee:	7bfb      	ldrb	r3, [r7, #15]
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	33e0      	adds	r3, #224	; 0xe0
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	4413      	add	r3, r2
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d102      	bne.n	8008508 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008502:	7bfb      	ldrb	r3, [r7, #15]
 8008504:	b29b      	uxth	r3, r3
 8008506:	e007      	b.n	8008518 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008508:	7bfb      	ldrb	r3, [r7, #15]
 800850a:	3301      	adds	r3, #1
 800850c:	73fb      	strb	r3, [r7, #15]
 800850e:	7bfb      	ldrb	r3, [r7, #15]
 8008510:	2b0a      	cmp	r3, #10
 8008512:	d9ec      	bls.n	80084ee <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008514:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008518:	4618      	mov	r0, r3
 800851a:	3714      	adds	r7, #20
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008528:	2201      	movs	r2, #1
 800852a:	490e      	ldr	r1, [pc, #56]	; (8008564 <MX_USB_HOST_Init+0x40>)
 800852c:	480e      	ldr	r0, [pc, #56]	; (8008568 <MX_USB_HOST_Init+0x44>)
 800852e:	f7fe fca1 	bl	8006e74 <USBH_Init>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008538:	f7f8 faca 	bl	8000ad0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800853c:	490b      	ldr	r1, [pc, #44]	; (800856c <MX_USB_HOST_Init+0x48>)
 800853e:	480a      	ldr	r0, [pc, #40]	; (8008568 <MX_USB_HOST_Init+0x44>)
 8008540:	f7fe fd26 	bl	8006f90 <USBH_RegisterClass>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d001      	beq.n	800854e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800854a:	f7f8 fac1 	bl	8000ad0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800854e:	4806      	ldr	r0, [pc, #24]	; (8008568 <MX_USB_HOST_Init+0x44>)
 8008550:	f7fe fdaa 	bl	80070a8 <USBH_Start>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d001      	beq.n	800855e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800855a:	f7f8 fab9 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800855e:	bf00      	nop
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	08008585 	.word	0x08008585
 8008568:	2000065c 	.word	0x2000065c
 800856c:	20000024 	.word	0x20000024

08008570 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008574:	4802      	ldr	r0, [pc, #8]	; (8008580 <MX_USB_HOST_Process+0x10>)
 8008576:	f7fe fda7 	bl	80070c8 <USBH_Process>
}
 800857a:	bf00      	nop
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	2000065c 	.word	0x2000065c

08008584 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	460b      	mov	r3, r1
 800858e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008590:	78fb      	ldrb	r3, [r7, #3]
 8008592:	3b01      	subs	r3, #1
 8008594:	2b04      	cmp	r3, #4
 8008596:	d819      	bhi.n	80085cc <USBH_UserProcess+0x48>
 8008598:	a201      	add	r2, pc, #4	; (adr r2, 80085a0 <USBH_UserProcess+0x1c>)
 800859a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859e:	bf00      	nop
 80085a0:	080085cd 	.word	0x080085cd
 80085a4:	080085bd 	.word	0x080085bd
 80085a8:	080085cd 	.word	0x080085cd
 80085ac:	080085c5 	.word	0x080085c5
 80085b0:	080085b5 	.word	0x080085b5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80085b4:	4b09      	ldr	r3, [pc, #36]	; (80085dc <USBH_UserProcess+0x58>)
 80085b6:	2203      	movs	r2, #3
 80085b8:	701a      	strb	r2, [r3, #0]
  break;
 80085ba:	e008      	b.n	80085ce <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80085bc:	4b07      	ldr	r3, [pc, #28]	; (80085dc <USBH_UserProcess+0x58>)
 80085be:	2202      	movs	r2, #2
 80085c0:	701a      	strb	r2, [r3, #0]
  break;
 80085c2:	e004      	b.n	80085ce <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80085c4:	4b05      	ldr	r3, [pc, #20]	; (80085dc <USBH_UserProcess+0x58>)
 80085c6:	2201      	movs	r2, #1
 80085c8:	701a      	strb	r2, [r3, #0]
  break;
 80085ca:	e000      	b.n	80085ce <USBH_UserProcess+0x4a>

  default:
  break;
 80085cc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80085ce:	bf00      	nop
 80085d0:	370c      	adds	r7, #12
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	200004d0 	.word	0x200004d0

080085e0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b08a      	sub	sp, #40	; 0x28
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085e8:	f107 0314 	add.w	r3, r7, #20
 80085ec:	2200      	movs	r2, #0
 80085ee:	601a      	str	r2, [r3, #0]
 80085f0:	605a      	str	r2, [r3, #4]
 80085f2:	609a      	str	r2, [r3, #8]
 80085f4:	60da      	str	r2, [r3, #12]
 80085f6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008600:	d147      	bne.n	8008692 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008602:	2300      	movs	r3, #0
 8008604:	613b      	str	r3, [r7, #16]
 8008606:	4b25      	ldr	r3, [pc, #148]	; (800869c <HAL_HCD_MspInit+0xbc>)
 8008608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800860a:	4a24      	ldr	r2, [pc, #144]	; (800869c <HAL_HCD_MspInit+0xbc>)
 800860c:	f043 0301 	orr.w	r3, r3, #1
 8008610:	6313      	str	r3, [r2, #48]	; 0x30
 8008612:	4b22      	ldr	r3, [pc, #136]	; (800869c <HAL_HCD_MspInit+0xbc>)
 8008614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008616:	f003 0301 	and.w	r3, r3, #1
 800861a:	613b      	str	r3, [r7, #16]
 800861c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800861e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008624:	2300      	movs	r3, #0
 8008626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008628:	2300      	movs	r3, #0
 800862a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800862c:	f107 0314 	add.w	r3, r7, #20
 8008630:	4619      	mov	r1, r3
 8008632:	481b      	ldr	r0, [pc, #108]	; (80086a0 <HAL_HCD_MspInit+0xc0>)
 8008634:	f7f9 f856 	bl	80016e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008638:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800863c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800863e:	2302      	movs	r3, #2
 8008640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008642:	2300      	movs	r3, #0
 8008644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008646:	2300      	movs	r3, #0
 8008648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800864a:	230a      	movs	r3, #10
 800864c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800864e:	f107 0314 	add.w	r3, r7, #20
 8008652:	4619      	mov	r1, r3
 8008654:	4812      	ldr	r0, [pc, #72]	; (80086a0 <HAL_HCD_MspInit+0xc0>)
 8008656:	f7f9 f845 	bl	80016e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800865a:	4b10      	ldr	r3, [pc, #64]	; (800869c <HAL_HCD_MspInit+0xbc>)
 800865c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800865e:	4a0f      	ldr	r2, [pc, #60]	; (800869c <HAL_HCD_MspInit+0xbc>)
 8008660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008664:	6353      	str	r3, [r2, #52]	; 0x34
 8008666:	2300      	movs	r3, #0
 8008668:	60fb      	str	r3, [r7, #12]
 800866a:	4b0c      	ldr	r3, [pc, #48]	; (800869c <HAL_HCD_MspInit+0xbc>)
 800866c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800866e:	4a0b      	ldr	r2, [pc, #44]	; (800869c <HAL_HCD_MspInit+0xbc>)
 8008670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008674:	6453      	str	r3, [r2, #68]	; 0x44
 8008676:	4b09      	ldr	r3, [pc, #36]	; (800869c <HAL_HCD_MspInit+0xbc>)
 8008678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800867a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800867e:	60fb      	str	r3, [r7, #12]
 8008680:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008682:	2200      	movs	r2, #0
 8008684:	2100      	movs	r1, #0
 8008686:	2043      	movs	r0, #67	; 0x43
 8008688:	f7f8 fff5 	bl	8001676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800868c:	2043      	movs	r0, #67	; 0x43
 800868e:	f7f9 f80e 	bl	80016ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008692:	bf00      	nop
 8008694:	3728      	adds	r7, #40	; 0x28
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	40023800 	.word	0x40023800
 80086a0:	40020000 	.word	0x40020000

080086a4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7ff f8db 	bl	800786e <USBH_LL_IncTimer>
}
 80086b8:	bf00      	nop
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7ff f913 	bl	80078fa <USBH_LL_Connect>
}
 80086d4:	bf00      	nop
 80086d6:	3708      	adds	r7, #8
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7ff f91c 	bl	8007928 <USBH_LL_Disconnect>
}
 80086f0:	bf00      	nop
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	460b      	mov	r3, r1
 8008702:	70fb      	strb	r3, [r7, #3]
 8008704:	4613      	mov	r3, r2
 8008706:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008708:	bf00      	nop
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008722:	4618      	mov	r0, r3
 8008724:	f7ff f8cd 	bl	80078c2 <USBH_LL_PortEnabled>
}
 8008728:	bf00      	nop
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800873e:	4618      	mov	r0, r3
 8008740:	f7ff f8cd 	bl	80078de <USBH_LL_PortDisabled>
}
 8008744:	bf00      	nop
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800875a:	2b01      	cmp	r3, #1
 800875c:	d12a      	bne.n	80087b4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800875e:	4a18      	ldr	r2, [pc, #96]	; (80087c0 <USBH_LL_Init+0x74>)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a15      	ldr	r2, [pc, #84]	; (80087c0 <USBH_LL_Init+0x74>)
 800876a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800876e:	4b14      	ldr	r3, [pc, #80]	; (80087c0 <USBH_LL_Init+0x74>)
 8008770:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008774:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008776:	4b12      	ldr	r3, [pc, #72]	; (80087c0 <USBH_LL_Init+0x74>)
 8008778:	2208      	movs	r2, #8
 800877a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800877c:	4b10      	ldr	r3, [pc, #64]	; (80087c0 <USBH_LL_Init+0x74>)
 800877e:	2201      	movs	r2, #1
 8008780:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008782:	4b0f      	ldr	r3, [pc, #60]	; (80087c0 <USBH_LL_Init+0x74>)
 8008784:	2200      	movs	r2, #0
 8008786:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008788:	4b0d      	ldr	r3, [pc, #52]	; (80087c0 <USBH_LL_Init+0x74>)
 800878a:	2202      	movs	r2, #2
 800878c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800878e:	4b0c      	ldr	r3, [pc, #48]	; (80087c0 <USBH_LL_Init+0x74>)
 8008790:	2200      	movs	r2, #0
 8008792:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008794:	480a      	ldr	r0, [pc, #40]	; (80087c0 <USBH_LL_Init+0x74>)
 8008796:	f7f9 f95a 	bl	8001a4e <HAL_HCD_Init>
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d001      	beq.n	80087a4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80087a0:	f7f8 f996 	bl	8000ad0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80087a4:	4806      	ldr	r0, [pc, #24]	; (80087c0 <USBH_LL_Init+0x74>)
 80087a6:	f7f9 fd3e 	bl	8002226 <HAL_HCD_GetCurrentFrame>
 80087aa:	4603      	mov	r3, r0
 80087ac:	4619      	mov	r1, r3
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f7ff f84e 	bl	8007850 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3708      	adds	r7, #8
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	20000a34 	.word	0x20000a34

080087c4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087cc:	2300      	movs	r3, #0
 80087ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087d0:	2300      	movs	r3, #0
 80087d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80087da:	4618      	mov	r0, r3
 80087dc:	f7f9 fcad 	bl	800213a <HAL_HCD_Start>
 80087e0:	4603      	mov	r3, r0
 80087e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80087e4:	7bfb      	ldrb	r3, [r7, #15]
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 f95c 	bl	8008aa4 <USBH_Get_USB_Status>
 80087ec:	4603      	mov	r3, r0
 80087ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b084      	sub	sp, #16
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008802:	2300      	movs	r3, #0
 8008804:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008806:	2300      	movs	r3, #0
 8008808:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008810:	4618      	mov	r0, r3
 8008812:	f7f9 fcb5 	bl	8002180 <HAL_HCD_Stop>
 8008816:	4603      	mov	r3, r0
 8008818:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800881a:	7bfb      	ldrb	r3, [r7, #15]
 800881c:	4618      	mov	r0, r3
 800881e:	f000 f941 	bl	8008aa4 <USBH_Get_USB_Status>
 8008822:	4603      	mov	r3, r0
 8008824:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008826:	7bbb      	ldrb	r3, [r7, #14]
}
 8008828:	4618      	mov	r0, r3
 800882a:	3710      	adds	r7, #16
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008838:	2301      	movs	r3, #1
 800883a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008842:	4618      	mov	r0, r3
 8008844:	f7f9 fcfd 	bl	8002242 <HAL_HCD_GetCurrentSpeed>
 8008848:	4603      	mov	r3, r0
 800884a:	2b02      	cmp	r3, #2
 800884c:	d00c      	beq.n	8008868 <USBH_LL_GetSpeed+0x38>
 800884e:	2b02      	cmp	r3, #2
 8008850:	d80d      	bhi.n	800886e <USBH_LL_GetSpeed+0x3e>
 8008852:	2b00      	cmp	r3, #0
 8008854:	d002      	beq.n	800885c <USBH_LL_GetSpeed+0x2c>
 8008856:	2b01      	cmp	r3, #1
 8008858:	d003      	beq.n	8008862 <USBH_LL_GetSpeed+0x32>
 800885a:	e008      	b.n	800886e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800885c:	2300      	movs	r3, #0
 800885e:	73fb      	strb	r3, [r7, #15]
    break;
 8008860:	e008      	b.n	8008874 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008862:	2301      	movs	r3, #1
 8008864:	73fb      	strb	r3, [r7, #15]
    break;
 8008866:	e005      	b.n	8008874 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008868:	2302      	movs	r3, #2
 800886a:	73fb      	strb	r3, [r7, #15]
    break;
 800886c:	e002      	b.n	8008874 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800886e:	2301      	movs	r3, #1
 8008870:	73fb      	strb	r3, [r7, #15]
    break;
 8008872:	bf00      	nop
  }
  return  speed;
 8008874:	7bfb      	ldrb	r3, [r7, #15]
}
 8008876:	4618      	mov	r0, r3
 8008878:	3710      	adds	r7, #16
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b084      	sub	sp, #16
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008886:	2300      	movs	r3, #0
 8008888:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800888a:	2300      	movs	r3, #0
 800888c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008894:	4618      	mov	r0, r3
 8008896:	f7f9 fc90 	bl	80021ba <HAL_HCD_ResetPort>
 800889a:	4603      	mov	r3, r0
 800889c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800889e:	7bfb      	ldrb	r3, [r7, #15]
 80088a0:	4618      	mov	r0, r3
 80088a2:	f000 f8ff 	bl	8008aa4 <USBH_Get_USB_Status>
 80088a6:	4603      	mov	r3, r0
 80088a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	460b      	mov	r3, r1
 80088be:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088c6:	78fa      	ldrb	r2, [r7, #3]
 80088c8:	4611      	mov	r1, r2
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7f9 fc97 	bl	80021fe <HAL_HCD_HC_GetXferCount>
 80088d0:	4603      	mov	r3, r0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80088da:	b590      	push	{r4, r7, lr}
 80088dc:	b089      	sub	sp, #36	; 0x24
 80088de:	af04      	add	r7, sp, #16
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	4608      	mov	r0, r1
 80088e4:	4611      	mov	r1, r2
 80088e6:	461a      	mov	r2, r3
 80088e8:	4603      	mov	r3, r0
 80088ea:	70fb      	strb	r3, [r7, #3]
 80088ec:	460b      	mov	r3, r1
 80088ee:	70bb      	strb	r3, [r7, #2]
 80088f0:	4613      	mov	r3, r2
 80088f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088f4:	2300      	movs	r3, #0
 80088f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088f8:	2300      	movs	r3, #0
 80088fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008902:	787c      	ldrb	r4, [r7, #1]
 8008904:	78ba      	ldrb	r2, [r7, #2]
 8008906:	78f9      	ldrb	r1, [r7, #3]
 8008908:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800890a:	9302      	str	r3, [sp, #8]
 800890c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008910:	9301      	str	r3, [sp, #4]
 8008912:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	4623      	mov	r3, r4
 800891a:	f7f9 f8fa 	bl	8001b12 <HAL_HCD_HC_Init>
 800891e:	4603      	mov	r3, r0
 8008920:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008922:	7bfb      	ldrb	r3, [r7, #15]
 8008924:	4618      	mov	r0, r3
 8008926:	f000 f8bd 	bl	8008aa4 <USBH_Get_USB_Status>
 800892a:	4603      	mov	r3, r0
 800892c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800892e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008930:	4618      	mov	r0, r3
 8008932:	3714      	adds	r7, #20
 8008934:	46bd      	mov	sp, r7
 8008936:	bd90      	pop	{r4, r7, pc}

08008938 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	460b      	mov	r3, r1
 8008942:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008944:	2300      	movs	r3, #0
 8008946:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008948:	2300      	movs	r3, #0
 800894a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008952:	78fa      	ldrb	r2, [r7, #3]
 8008954:	4611      	mov	r1, r2
 8008956:	4618      	mov	r0, r3
 8008958:	f7f9 f96a 	bl	8001c30 <HAL_HCD_HC_Halt>
 800895c:	4603      	mov	r3, r0
 800895e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008960:	7bfb      	ldrb	r3, [r7, #15]
 8008962:	4618      	mov	r0, r3
 8008964:	f000 f89e 	bl	8008aa4 <USBH_Get_USB_Status>
 8008968:	4603      	mov	r3, r0
 800896a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800896c:	7bbb      	ldrb	r3, [r7, #14]
}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008976:	b590      	push	{r4, r7, lr}
 8008978:	b089      	sub	sp, #36	; 0x24
 800897a:	af04      	add	r7, sp, #16
 800897c:	6078      	str	r0, [r7, #4]
 800897e:	4608      	mov	r0, r1
 8008980:	4611      	mov	r1, r2
 8008982:	461a      	mov	r2, r3
 8008984:	4603      	mov	r3, r0
 8008986:	70fb      	strb	r3, [r7, #3]
 8008988:	460b      	mov	r3, r1
 800898a:	70bb      	strb	r3, [r7, #2]
 800898c:	4613      	mov	r3, r2
 800898e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008990:	2300      	movs	r3, #0
 8008992:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008994:	2300      	movs	r3, #0
 8008996:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800899e:	787c      	ldrb	r4, [r7, #1]
 80089a0:	78ba      	ldrb	r2, [r7, #2]
 80089a2:	78f9      	ldrb	r1, [r7, #3]
 80089a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80089a8:	9303      	str	r3, [sp, #12]
 80089aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80089ac:	9302      	str	r3, [sp, #8]
 80089ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b0:	9301      	str	r3, [sp, #4]
 80089b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80089b6:	9300      	str	r3, [sp, #0]
 80089b8:	4623      	mov	r3, r4
 80089ba:	f7f9 f95d 	bl	8001c78 <HAL_HCD_HC_SubmitRequest>
 80089be:	4603      	mov	r3, r0
 80089c0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80089c2:	7bfb      	ldrb	r3, [r7, #15]
 80089c4:	4618      	mov	r0, r3
 80089c6:	f000 f86d 	bl	8008aa4 <USBH_Get_USB_Status>
 80089ca:	4603      	mov	r3, r0
 80089cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3714      	adds	r7, #20
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd90      	pop	{r4, r7, pc}

080089d8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	460b      	mov	r3, r1
 80089e2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089ea:	78fa      	ldrb	r2, [r7, #3]
 80089ec:	4611      	mov	r1, r2
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7f9 fbf1 	bl	80021d6 <HAL_HCD_HC_GetURBState>
 80089f4:	4603      	mov	r3, r0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3708      	adds	r7, #8
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b082      	sub	sp, #8
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	460b      	mov	r3, r1
 8008a08:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d103      	bne.n	8008a1c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008a14:	78fb      	ldrb	r3, [r7, #3]
 8008a16:	4618      	mov	r0, r3
 8008a18:	f000 f870 	bl	8008afc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008a1c:	20c8      	movs	r0, #200	; 0xc8
 8008a1e:	f7f8 fd2b 	bl	8001478 <HAL_Delay>
  return USBH_OK;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3708      	adds	r7, #8
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	460b      	mov	r3, r1
 8008a36:	70fb      	strb	r3, [r7, #3]
 8008a38:	4613      	mov	r3, r2
 8008a3a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a42:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008a44:	78fb      	ldrb	r3, [r7, #3]
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	212c      	movs	r1, #44	; 0x2c
 8008a4a:	fb01 f303 	mul.w	r3, r1, r3
 8008a4e:	4413      	add	r3, r2
 8008a50:	333b      	adds	r3, #59	; 0x3b
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d009      	beq.n	8008a6c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008a58:	78fb      	ldrb	r3, [r7, #3]
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	212c      	movs	r1, #44	; 0x2c
 8008a5e:	fb01 f303 	mul.w	r3, r1, r3
 8008a62:	4413      	add	r3, r2
 8008a64:	3354      	adds	r3, #84	; 0x54
 8008a66:	78ba      	ldrb	r2, [r7, #2]
 8008a68:	701a      	strb	r2, [r3, #0]
 8008a6a:	e008      	b.n	8008a7e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008a6c:	78fb      	ldrb	r3, [r7, #3]
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	212c      	movs	r1, #44	; 0x2c
 8008a72:	fb01 f303 	mul.w	r3, r1, r3
 8008a76:	4413      	add	r3, r2
 8008a78:	3355      	adds	r3, #85	; 0x55
 8008a7a:	78ba      	ldrb	r2, [r7, #2]
 8008a7c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3714      	adds	r7, #20
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f7f8 fcef 	bl	8001478 <HAL_Delay>
}
 8008a9a:	bf00      	nop
 8008a9c:	3708      	adds	r7, #8
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
	...

08008aa4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	4603      	mov	r3, r0
 8008aac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008ab2:	79fb      	ldrb	r3, [r7, #7]
 8008ab4:	2b03      	cmp	r3, #3
 8008ab6:	d817      	bhi.n	8008ae8 <USBH_Get_USB_Status+0x44>
 8008ab8:	a201      	add	r2, pc, #4	; (adr r2, 8008ac0 <USBH_Get_USB_Status+0x1c>)
 8008aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008abe:	bf00      	nop
 8008ac0:	08008ad1 	.word	0x08008ad1
 8008ac4:	08008ad7 	.word	0x08008ad7
 8008ac8:	08008add 	.word	0x08008add
 8008acc:	08008ae3 	.word	0x08008ae3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ad4:	e00b      	b.n	8008aee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008ad6:	2302      	movs	r3, #2
 8008ad8:	73fb      	strb	r3, [r7, #15]
    break;
 8008ada:	e008      	b.n	8008aee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008adc:	2301      	movs	r3, #1
 8008ade:	73fb      	strb	r3, [r7, #15]
    break;
 8008ae0:	e005      	b.n	8008aee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008ae2:	2302      	movs	r3, #2
 8008ae4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ae6:	e002      	b.n	8008aee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008ae8:	2302      	movs	r3, #2
 8008aea:	73fb      	strb	r3, [r7, #15]
    break;
 8008aec:	bf00      	nop
  }
  return usb_status;
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3714      	adds	r7, #20
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	4603      	mov	r3, r0
 8008b04:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008b06:	79fb      	ldrb	r3, [r7, #7]
 8008b08:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008b0a:	79fb      	ldrb	r3, [r7, #7]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d102      	bne.n	8008b16 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008b10:	2301      	movs	r3, #1
 8008b12:	73fb      	strb	r3, [r7, #15]
 8008b14:	e001      	b.n	8008b1a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008b16:	2300      	movs	r3, #0
 8008b18:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008b1a:	7bfb      	ldrb	r3, [r7, #15]
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	2101      	movs	r1, #1
 8008b20:	4803      	ldr	r0, [pc, #12]	; (8008b30 <MX_DriverVbusFS+0x34>)
 8008b22:	f7f8 ff7b 	bl	8001a1c <HAL_GPIO_WritePin>
}
 8008b26:	bf00      	nop
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	40020800 	.word	0x40020800

08008b34 <__errno>:
 8008b34:	4b01      	ldr	r3, [pc, #4]	; (8008b3c <__errno+0x8>)
 8008b36:	6818      	ldr	r0, [r3, #0]
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop
 8008b3c:	20000044 	.word	0x20000044

08008b40 <__libc_init_array>:
 8008b40:	b570      	push	{r4, r5, r6, lr}
 8008b42:	4d0d      	ldr	r5, [pc, #52]	; (8008b78 <__libc_init_array+0x38>)
 8008b44:	4c0d      	ldr	r4, [pc, #52]	; (8008b7c <__libc_init_array+0x3c>)
 8008b46:	1b64      	subs	r4, r4, r5
 8008b48:	10a4      	asrs	r4, r4, #2
 8008b4a:	2600      	movs	r6, #0
 8008b4c:	42a6      	cmp	r6, r4
 8008b4e:	d109      	bne.n	8008b64 <__libc_init_array+0x24>
 8008b50:	4d0b      	ldr	r5, [pc, #44]	; (8008b80 <__libc_init_array+0x40>)
 8008b52:	4c0c      	ldr	r4, [pc, #48]	; (8008b84 <__libc_init_array+0x44>)
 8008b54:	f000 f8f8 	bl	8008d48 <_init>
 8008b58:	1b64      	subs	r4, r4, r5
 8008b5a:	10a4      	asrs	r4, r4, #2
 8008b5c:	2600      	movs	r6, #0
 8008b5e:	42a6      	cmp	r6, r4
 8008b60:	d105      	bne.n	8008b6e <__libc_init_array+0x2e>
 8008b62:	bd70      	pop	{r4, r5, r6, pc}
 8008b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b68:	4798      	blx	r3
 8008b6a:	3601      	adds	r6, #1
 8008b6c:	e7ee      	b.n	8008b4c <__libc_init_array+0xc>
 8008b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b72:	4798      	blx	r3
 8008b74:	3601      	adds	r6, #1
 8008b76:	e7f2      	b.n	8008b5e <__libc_init_array+0x1e>
 8008b78:	0800b5ac 	.word	0x0800b5ac
 8008b7c:	0800b5ac 	.word	0x0800b5ac
 8008b80:	0800b5ac 	.word	0x0800b5ac
 8008b84:	0800b5b0 	.word	0x0800b5b0

08008b88 <malloc>:
 8008b88:	4b02      	ldr	r3, [pc, #8]	; (8008b94 <malloc+0xc>)
 8008b8a:	4601      	mov	r1, r0
 8008b8c:	6818      	ldr	r0, [r3, #0]
 8008b8e:	f000 b863 	b.w	8008c58 <_malloc_r>
 8008b92:	bf00      	nop
 8008b94:	20000044 	.word	0x20000044

08008b98 <free>:
 8008b98:	4b02      	ldr	r3, [pc, #8]	; (8008ba4 <free+0xc>)
 8008b9a:	4601      	mov	r1, r0
 8008b9c:	6818      	ldr	r0, [r3, #0]
 8008b9e:	f000 b80b 	b.w	8008bb8 <_free_r>
 8008ba2:	bf00      	nop
 8008ba4:	20000044 	.word	0x20000044

08008ba8 <memset>:
 8008ba8:	4402      	add	r2, r0
 8008baa:	4603      	mov	r3, r0
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d100      	bne.n	8008bb2 <memset+0xa>
 8008bb0:	4770      	bx	lr
 8008bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8008bb6:	e7f9      	b.n	8008bac <memset+0x4>

08008bb8 <_free_r>:
 8008bb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bba:	2900      	cmp	r1, #0
 8008bbc:	d048      	beq.n	8008c50 <_free_r+0x98>
 8008bbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bc2:	9001      	str	r0, [sp, #4]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f1a1 0404 	sub.w	r4, r1, #4
 8008bca:	bfb8      	it	lt
 8008bcc:	18e4      	addlt	r4, r4, r3
 8008bce:	f000 f8ad 	bl	8008d2c <__malloc_lock>
 8008bd2:	4a20      	ldr	r2, [pc, #128]	; (8008c54 <_free_r+0x9c>)
 8008bd4:	9801      	ldr	r0, [sp, #4]
 8008bd6:	6813      	ldr	r3, [r2, #0]
 8008bd8:	4615      	mov	r5, r2
 8008bda:	b933      	cbnz	r3, 8008bea <_free_r+0x32>
 8008bdc:	6063      	str	r3, [r4, #4]
 8008bde:	6014      	str	r4, [r2, #0]
 8008be0:	b003      	add	sp, #12
 8008be2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008be6:	f000 b8a7 	b.w	8008d38 <__malloc_unlock>
 8008bea:	42a3      	cmp	r3, r4
 8008bec:	d90b      	bls.n	8008c06 <_free_r+0x4e>
 8008bee:	6821      	ldr	r1, [r4, #0]
 8008bf0:	1862      	adds	r2, r4, r1
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	bf04      	itt	eq
 8008bf6:	681a      	ldreq	r2, [r3, #0]
 8008bf8:	685b      	ldreq	r3, [r3, #4]
 8008bfa:	6063      	str	r3, [r4, #4]
 8008bfc:	bf04      	itt	eq
 8008bfe:	1852      	addeq	r2, r2, r1
 8008c00:	6022      	streq	r2, [r4, #0]
 8008c02:	602c      	str	r4, [r5, #0]
 8008c04:	e7ec      	b.n	8008be0 <_free_r+0x28>
 8008c06:	461a      	mov	r2, r3
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	b10b      	cbz	r3, 8008c10 <_free_r+0x58>
 8008c0c:	42a3      	cmp	r3, r4
 8008c0e:	d9fa      	bls.n	8008c06 <_free_r+0x4e>
 8008c10:	6811      	ldr	r1, [r2, #0]
 8008c12:	1855      	adds	r5, r2, r1
 8008c14:	42a5      	cmp	r5, r4
 8008c16:	d10b      	bne.n	8008c30 <_free_r+0x78>
 8008c18:	6824      	ldr	r4, [r4, #0]
 8008c1a:	4421      	add	r1, r4
 8008c1c:	1854      	adds	r4, r2, r1
 8008c1e:	42a3      	cmp	r3, r4
 8008c20:	6011      	str	r1, [r2, #0]
 8008c22:	d1dd      	bne.n	8008be0 <_free_r+0x28>
 8008c24:	681c      	ldr	r4, [r3, #0]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	6053      	str	r3, [r2, #4]
 8008c2a:	4421      	add	r1, r4
 8008c2c:	6011      	str	r1, [r2, #0]
 8008c2e:	e7d7      	b.n	8008be0 <_free_r+0x28>
 8008c30:	d902      	bls.n	8008c38 <_free_r+0x80>
 8008c32:	230c      	movs	r3, #12
 8008c34:	6003      	str	r3, [r0, #0]
 8008c36:	e7d3      	b.n	8008be0 <_free_r+0x28>
 8008c38:	6825      	ldr	r5, [r4, #0]
 8008c3a:	1961      	adds	r1, r4, r5
 8008c3c:	428b      	cmp	r3, r1
 8008c3e:	bf04      	itt	eq
 8008c40:	6819      	ldreq	r1, [r3, #0]
 8008c42:	685b      	ldreq	r3, [r3, #4]
 8008c44:	6063      	str	r3, [r4, #4]
 8008c46:	bf04      	itt	eq
 8008c48:	1949      	addeq	r1, r1, r5
 8008c4a:	6021      	streq	r1, [r4, #0]
 8008c4c:	6054      	str	r4, [r2, #4]
 8008c4e:	e7c7      	b.n	8008be0 <_free_r+0x28>
 8008c50:	b003      	add	sp, #12
 8008c52:	bd30      	pop	{r4, r5, pc}
 8008c54:	200004d4 	.word	0x200004d4

08008c58 <_malloc_r>:
 8008c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5a:	1ccd      	adds	r5, r1, #3
 8008c5c:	f025 0503 	bic.w	r5, r5, #3
 8008c60:	3508      	adds	r5, #8
 8008c62:	2d0c      	cmp	r5, #12
 8008c64:	bf38      	it	cc
 8008c66:	250c      	movcc	r5, #12
 8008c68:	2d00      	cmp	r5, #0
 8008c6a:	4606      	mov	r6, r0
 8008c6c:	db01      	blt.n	8008c72 <_malloc_r+0x1a>
 8008c6e:	42a9      	cmp	r1, r5
 8008c70:	d903      	bls.n	8008c7a <_malloc_r+0x22>
 8008c72:	230c      	movs	r3, #12
 8008c74:	6033      	str	r3, [r6, #0]
 8008c76:	2000      	movs	r0, #0
 8008c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c7a:	f000 f857 	bl	8008d2c <__malloc_lock>
 8008c7e:	4921      	ldr	r1, [pc, #132]	; (8008d04 <_malloc_r+0xac>)
 8008c80:	680a      	ldr	r2, [r1, #0]
 8008c82:	4614      	mov	r4, r2
 8008c84:	b99c      	cbnz	r4, 8008cae <_malloc_r+0x56>
 8008c86:	4f20      	ldr	r7, [pc, #128]	; (8008d08 <_malloc_r+0xb0>)
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	b923      	cbnz	r3, 8008c96 <_malloc_r+0x3e>
 8008c8c:	4621      	mov	r1, r4
 8008c8e:	4630      	mov	r0, r6
 8008c90:	f000 f83c 	bl	8008d0c <_sbrk_r>
 8008c94:	6038      	str	r0, [r7, #0]
 8008c96:	4629      	mov	r1, r5
 8008c98:	4630      	mov	r0, r6
 8008c9a:	f000 f837 	bl	8008d0c <_sbrk_r>
 8008c9e:	1c43      	adds	r3, r0, #1
 8008ca0:	d123      	bne.n	8008cea <_malloc_r+0x92>
 8008ca2:	230c      	movs	r3, #12
 8008ca4:	6033      	str	r3, [r6, #0]
 8008ca6:	4630      	mov	r0, r6
 8008ca8:	f000 f846 	bl	8008d38 <__malloc_unlock>
 8008cac:	e7e3      	b.n	8008c76 <_malloc_r+0x1e>
 8008cae:	6823      	ldr	r3, [r4, #0]
 8008cb0:	1b5b      	subs	r3, r3, r5
 8008cb2:	d417      	bmi.n	8008ce4 <_malloc_r+0x8c>
 8008cb4:	2b0b      	cmp	r3, #11
 8008cb6:	d903      	bls.n	8008cc0 <_malloc_r+0x68>
 8008cb8:	6023      	str	r3, [r4, #0]
 8008cba:	441c      	add	r4, r3
 8008cbc:	6025      	str	r5, [r4, #0]
 8008cbe:	e004      	b.n	8008cca <_malloc_r+0x72>
 8008cc0:	6863      	ldr	r3, [r4, #4]
 8008cc2:	42a2      	cmp	r2, r4
 8008cc4:	bf0c      	ite	eq
 8008cc6:	600b      	streq	r3, [r1, #0]
 8008cc8:	6053      	strne	r3, [r2, #4]
 8008cca:	4630      	mov	r0, r6
 8008ccc:	f000 f834 	bl	8008d38 <__malloc_unlock>
 8008cd0:	f104 000b 	add.w	r0, r4, #11
 8008cd4:	1d23      	adds	r3, r4, #4
 8008cd6:	f020 0007 	bic.w	r0, r0, #7
 8008cda:	1ac2      	subs	r2, r0, r3
 8008cdc:	d0cc      	beq.n	8008c78 <_malloc_r+0x20>
 8008cde:	1a1b      	subs	r3, r3, r0
 8008ce0:	50a3      	str	r3, [r4, r2]
 8008ce2:	e7c9      	b.n	8008c78 <_malloc_r+0x20>
 8008ce4:	4622      	mov	r2, r4
 8008ce6:	6864      	ldr	r4, [r4, #4]
 8008ce8:	e7cc      	b.n	8008c84 <_malloc_r+0x2c>
 8008cea:	1cc4      	adds	r4, r0, #3
 8008cec:	f024 0403 	bic.w	r4, r4, #3
 8008cf0:	42a0      	cmp	r0, r4
 8008cf2:	d0e3      	beq.n	8008cbc <_malloc_r+0x64>
 8008cf4:	1a21      	subs	r1, r4, r0
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	f000 f808 	bl	8008d0c <_sbrk_r>
 8008cfc:	3001      	adds	r0, #1
 8008cfe:	d1dd      	bne.n	8008cbc <_malloc_r+0x64>
 8008d00:	e7cf      	b.n	8008ca2 <_malloc_r+0x4a>
 8008d02:	bf00      	nop
 8008d04:	200004d4 	.word	0x200004d4
 8008d08:	200004d8 	.word	0x200004d8

08008d0c <_sbrk_r>:
 8008d0c:	b538      	push	{r3, r4, r5, lr}
 8008d0e:	4d06      	ldr	r5, [pc, #24]	; (8008d28 <_sbrk_r+0x1c>)
 8008d10:	2300      	movs	r3, #0
 8008d12:	4604      	mov	r4, r0
 8008d14:	4608      	mov	r0, r1
 8008d16:	602b      	str	r3, [r5, #0]
 8008d18:	f7f8 faca 	bl	80012b0 <_sbrk>
 8008d1c:	1c43      	adds	r3, r0, #1
 8008d1e:	d102      	bne.n	8008d26 <_sbrk_r+0x1a>
 8008d20:	682b      	ldr	r3, [r5, #0]
 8008d22:	b103      	cbz	r3, 8008d26 <_sbrk_r+0x1a>
 8008d24:	6023      	str	r3, [r4, #0]
 8008d26:	bd38      	pop	{r3, r4, r5, pc}
 8008d28:	20000d38 	.word	0x20000d38

08008d2c <__malloc_lock>:
 8008d2c:	4801      	ldr	r0, [pc, #4]	; (8008d34 <__malloc_lock+0x8>)
 8008d2e:	f000 b809 	b.w	8008d44 <__retarget_lock_acquire_recursive>
 8008d32:	bf00      	nop
 8008d34:	20000d40 	.word	0x20000d40

08008d38 <__malloc_unlock>:
 8008d38:	4801      	ldr	r0, [pc, #4]	; (8008d40 <__malloc_unlock+0x8>)
 8008d3a:	f000 b804 	b.w	8008d46 <__retarget_lock_release_recursive>
 8008d3e:	bf00      	nop
 8008d40:	20000d40 	.word	0x20000d40

08008d44 <__retarget_lock_acquire_recursive>:
 8008d44:	4770      	bx	lr

08008d46 <__retarget_lock_release_recursive>:
 8008d46:	4770      	bx	lr

08008d48 <_init>:
 8008d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d4a:	bf00      	nop
 8008d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d4e:	bc08      	pop	{r3}
 8008d50:	469e      	mov	lr, r3
 8008d52:	4770      	bx	lr

08008d54 <_fini>:
 8008d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d56:	bf00      	nop
 8008d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d5a:	bc08      	pop	{r3}
 8008d5c:	469e      	mov	lr, r3
 8008d5e:	4770      	bx	lr
