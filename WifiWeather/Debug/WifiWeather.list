
WifiWeather.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08009338  08009338  00019338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094e8  080094e8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080094e8  080094e8  000194e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094f0  080094f0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094f0  080094f0  000194f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094f4  080094f4  000194f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080094f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000898  20000090  08009588  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000928  08009588  00020928  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f0a5  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fd5  00000000  00000000  0003f165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  00043140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001230  00000000  00000000  000444a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000247d1  00000000  00000000  000456d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aa81  00000000  00000000  00069ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdc6f  00000000  00000000  0008492a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00152599  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005538  00000000  00000000  001525ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009320 	.word	0x08009320

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08009320 	.word	0x08009320

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <PrintString>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PrintString(uint8_t * string)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)string, strlen((char *)string), 0xffff);
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f7ff fe25 	bl	80001d0 <strlen>
 8000586:	4603      	mov	r3, r0
 8000588:	b29a      	uxth	r2, r3
 800058a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800058e:	6879      	ldr	r1, [r7, #4]
 8000590:	4803      	ldr	r0, [pc, #12]	; (80005a0 <PrintString+0x28>)
 8000592:	f004 fd1f 	bl	8004fd4 <HAL_UART_Transmit>
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	200001ac 	.word	0x200001ac

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f000 ffd8 	bl	800155c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f81a 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 f982 	bl	80008b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005b4:	f000 f898 	bl	80006e8 <MX_I2C1_Init>
  MX_I2S3_Init();
 80005b8:	f000 f8c4 	bl	8000744 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005bc:	f000 f8f2 	bl	80007a4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80005c0:	f007 ff1e 	bl	8008400 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80005c4:	f000 f924 	bl	8000810 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005c8:	f000 f94c 	bl	8000864 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  	  PrintString((uint8_t *)"Hello Cortex-M\n\r");
 80005cc:	4804      	ldr	r0, [pc, #16]	; (80005e0 <main+0x3c>)
 80005ce:	f7ff ffd3 	bl	8000578 <PrintString>
  	  WifiSetup();
 80005d2:	f000 fceb 	bl	8000fac <WifiSetup>
  	  WifiWeather();
 80005d6:	f000 fe39 	bl	800124c <WifiWeather>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005da:	f007 ff37 	bl	800844c <MX_USB_HOST_Process>
 80005de:	e7fc      	b.n	80005da <main+0x36>
 80005e0:	08009338 	.word	0x08009338

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b098      	sub	sp, #96	; 0x60
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005ee:	2230      	movs	r2, #48	; 0x30
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f008 fa46 	bl	8008a84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 031c 	add.w	r3, r7, #28
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemClock_Config+0xfc>)
 800061c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061e:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemClock_Config+0xfc>)
 8000620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000624:	6413      	str	r3, [r2, #64]	; 0x40
 8000626:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemClock_Config+0xfc>)
 8000628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	4b2b      	ldr	r3, [pc, #172]	; (80006e4 <SystemClock_Config+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a2a      	ldr	r2, [pc, #168]	; (80006e4 <SystemClock_Config+0x100>)
 800063c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000640:	6013      	str	r3, [r2, #0]
 8000642:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <SystemClock_Config+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064e:	2301      	movs	r3, #1
 8000650:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000652:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000656:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000660:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000662:	2308      	movs	r3, #8
 8000664:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000666:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800066a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000670:	2307      	movs	r3, #7
 8000672:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000678:	4618      	mov	r0, r3
 800067a:	f003 fe21 	bl	80042c0 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000684:	f000 fa16 	bl	8000ab4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2302      	movs	r3, #2
 800068e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000694:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000698:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a0:	f107 031c 	add.w	r3, r7, #28
 80006a4:	2105      	movs	r1, #5
 80006a6:	4618      	mov	r0, r3
 80006a8:	f004 f882 	bl	80047b0 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006b2:	f000 f9ff 	bl	8000ab4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006b6:	2301      	movs	r3, #1
 80006b8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80006ba:	23c0      	movs	r3, #192	; 0xc0
 80006bc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006be:	2302      	movs	r3, #2
 80006c0:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	4618      	mov	r0, r3
 80006c8:	f004 fa6e 	bl	8004ba8 <HAL_RCCEx_PeriphCLKConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80006d2:	f000 f9ef 	bl	8000ab4 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3760      	adds	r7, #96	; 0x60
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_I2C1_Init+0x50>)
 80006ee:	4a13      	ldr	r2, [pc, #76]	; (800073c <MX_I2C1_Init+0x54>)
 80006f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_I2C1_Init+0x50>)
 80006f4:	4a12      	ldr	r2, [pc, #72]	; (8000740 <MX_I2C1_Init+0x58>)
 80006f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_I2C1_Init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_I2C1_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_I2C1_Init+0x50>)
 8000706:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800070a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <MX_I2C1_Init+0x50>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_I2C1_Init+0x50>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <MX_I2C1_Init+0x50>)
 8000726:	f002 ffe7 	bl	80036f8 <HAL_I2C_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000730:	f000 f9c0 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000100 	.word	0x20000100
 800073c:	40005400 	.word	0x40005400
 8000740:	000186a0 	.word	0x000186a0

08000744 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MX_I2S3_Init+0x54>)
 800074a:	4a14      	ldr	r2, [pc, #80]	; (800079c <MX_I2S3_Init+0x58>)
 800074c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_I2S3_Init+0x54>)
 8000750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000754:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_I2S3_Init+0x54>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_I2S3_Init+0x54>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000762:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <MX_I2S3_Init+0x54>)
 8000764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000768:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <MX_I2S3_Init+0x54>)
 800076c:	4a0c      	ldr	r2, [pc, #48]	; (80007a0 <MX_I2S3_Init+0x5c>)
 800076e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_I2S3_Init+0x54>)
 8000772:	2200      	movs	r2, #0
 8000774:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <MX_I2S3_Init+0x54>)
 8000778:	2200      	movs	r2, #0
 800077a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_I2S3_Init+0x54>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_I2S3_Init+0x54>)
 8000784:	f003 f8fc 	bl	8003980 <HAL_I2S_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800078e:	f000 f991 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200001f0 	.word	0x200001f0
 800079c:	40003c00 	.word	0x40003c00
 80007a0:	00017700 	.word	0x00017700

080007a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007a8:	4b17      	ldr	r3, [pc, #92]	; (8000808 <MX_SPI1_Init+0x64>)
 80007aa:	4a18      	ldr	r2, [pc, #96]	; (800080c <MX_SPI1_Init+0x68>)
 80007ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ae:	4b16      	ldr	r3, [pc, #88]	; (8000808 <MX_SPI1_Init+0x64>)
 80007b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_SPI1_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_SPI1_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_SPI1_Init+0x64>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_SPI1_Init+0x64>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_SPI1_Init+0x64>)
 80007d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_SPI1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007dc:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <MX_SPI1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_SPI1_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <MX_SPI1_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_SPI1_Init+0x64>)
 80007f0:	220a      	movs	r2, #10
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_SPI1_Init+0x64>)
 80007f6:	f004 fb17 	bl	8004e28 <HAL_SPI_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000800:	f000 f958 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000154 	.word	0x20000154
 800080c:	40013000 	.word	0x40013000

08000810 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000816:	4a12      	ldr	r2, [pc, #72]	; (8000860 <MX_USART2_UART_Init+0x50>)
 8000818:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <MX_USART2_UART_Init+0x4c>)
 800081c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000820:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_USART2_UART_Init+0x4c>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_USART2_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000848:	f004 fb77 	bl	8004f3a <HAL_UART_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000852:	f000 f92f 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200001ac 	.word	0x200001ac
 8000860:	40004400 	.word	0x40004400

08000864 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_USART3_UART_Init+0x4c>)
 800086a:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <MX_USART3_UART_Init+0x50>)
 800086c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MX_USART3_UART_Init+0x4c>)
 8000870:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000874:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_USART3_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_USART3_UART_Init+0x4c>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_USART3_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_USART3_UART_Init+0x4c>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_USART3_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_USART3_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_USART3_UART_Init+0x4c>)
 800089c:	f004 fb4d 	bl	8004f3a <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008a6:	f000 f905 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200000bc 	.word	0x200000bc
 80008b4:	40004800 	.word	0x40004800

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08c      	sub	sp, #48	; 0x30
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
 80008d2:	4b72      	ldr	r3, [pc, #456]	; (8000a9c <MX_GPIO_Init+0x1e4>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a71      	ldr	r2, [pc, #452]	; (8000a9c <MX_GPIO_Init+0x1e4>)
 80008d8:	f043 0310 	orr.w	r3, r3, #16
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b6f      	ldr	r3, [pc, #444]	; (8000a9c <MX_GPIO_Init+0x1e4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0310 	and.w	r3, r3, #16
 80008e6:	61bb      	str	r3, [r7, #24]
 80008e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
 80008ee:	4b6b      	ldr	r3, [pc, #428]	; (8000a9c <MX_GPIO_Init+0x1e4>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a6a      	ldr	r2, [pc, #424]	; (8000a9c <MX_GPIO_Init+0x1e4>)
 80008f4:	f043 0304 	orr.w	r3, r3, #4
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b68      	ldr	r3, [pc, #416]	; (8000a9c <MX_GPIO_Init+0x1e4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0304 	and.w	r3, r3, #4
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	4b64      	ldr	r3, [pc, #400]	; (8000a9c <MX_GPIO_Init+0x1e4>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a63      	ldr	r2, [pc, #396]	; (8000a9c <MX_GPIO_Init+0x1e4>)
 8000910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b61      	ldr	r3, [pc, #388]	; (8000a9c <MX_GPIO_Init+0x1e4>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	4b5d      	ldr	r3, [pc, #372]	; (8000a9c <MX_GPIO_Init+0x1e4>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a5c      	ldr	r2, [pc, #368]	; (8000a9c <MX_GPIO_Init+0x1e4>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b5a      	ldr	r3, [pc, #360]	; (8000a9c <MX_GPIO_Init+0x1e4>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	4b56      	ldr	r3, [pc, #344]	; (8000a9c <MX_GPIO_Init+0x1e4>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a55      	ldr	r2, [pc, #340]	; (8000a9c <MX_GPIO_Init+0x1e4>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b53      	ldr	r3, [pc, #332]	; (8000a9c <MX_GPIO_Init+0x1e4>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	4b4f      	ldr	r3, [pc, #316]	; (8000a9c <MX_GPIO_Init+0x1e4>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a4e      	ldr	r2, [pc, #312]	; (8000a9c <MX_GPIO_Init+0x1e4>)
 8000964:	f043 0308 	orr.w	r3, r3, #8
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b4c      	ldr	r3, [pc, #304]	; (8000a9c <MX_GPIO_Init+0x1e4>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0308 	and.w	r3, r3, #8
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2108      	movs	r1, #8
 800097a:	4849      	ldr	r0, [pc, #292]	; (8000aa0 <MX_GPIO_Init+0x1e8>)
 800097c:	f001 f932 	bl	8001be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	2101      	movs	r1, #1
 8000984:	4847      	ldr	r0, [pc, #284]	; (8000aa4 <MX_GPIO_Init+0x1ec>)
 8000986:	f001 f92d 	bl	8001be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800098a:	2200      	movs	r2, #0
 800098c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000990:	4845      	ldr	r0, [pc, #276]	; (8000aa8 <MX_GPIO_Init+0x1f0>)
 8000992:	f001 f927 	bl	8001be4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000996:	2308      	movs	r3, #8
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	483c      	ldr	r0, [pc, #240]	; (8000aa0 <MX_GPIO_Init+0x1e8>)
 80009ae:	f000 ff7d 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009b2:	2301      	movs	r3, #1
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	4836      	ldr	r0, [pc, #216]	; (8000aa4 <MX_GPIO_Init+0x1ec>)
 80009ca:	f000 ff6f 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009ce:	2308      	movs	r3, #8
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009de:	2305      	movs	r3, #5
 80009e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	482e      	ldr	r0, [pc, #184]	; (8000aa4 <MX_GPIO_Init+0x1ec>)
 80009ea:	f000 ff5f 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ee:	2301      	movs	r3, #1
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	482a      	ldr	r0, [pc, #168]	; (8000aac <MX_GPIO_Init+0x1f4>)
 8000a04:	f000 ff52 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a08:	2304      	movs	r3, #4
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4825      	ldr	r0, [pc, #148]	; (8000ab0 <MX_GPIO_Init+0x1f8>)
 8000a1c:	f000 ff46 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a32:	2305      	movs	r3, #5
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	481c      	ldr	r0, [pc, #112]	; (8000ab0 <MX_GPIO_Init+0x1f8>)
 8000a3e:	f000 ff35 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a42:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a46:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4813      	ldr	r0, [pc, #76]	; (8000aa8 <MX_GPIO_Init+0x1f0>)
 8000a5c:	f000 ff26 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a60:	2320      	movs	r3, #32
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a64:	2300      	movs	r3, #0
 8000a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <MX_GPIO_Init+0x1f0>)
 8000a74:	f000 ff1a 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a7c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <MX_GPIO_Init+0x1e8>)
 8000a8e:	f000 ff0d 	bl	80018ac <HAL_GPIO_Init>

}
 8000a92:	bf00      	nop
 8000a94:	3730      	adds	r7, #48	; 0x30
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40020800 	.word	0x40020800
 8000aa8:	40020c00 	.word	0x40020c00
 8000aac:	40020000 	.word	0x40020000
 8000ab0:	40020400 	.word	0x40020400

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	e7fe      	b.n	8000abc <Error_Handler+0x8>
	...

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <HAL_MspInit+0x4c>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	4a0f      	ldr	r2, [pc, #60]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <HAL_MspInit+0x4c>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	6413      	str	r3, [r2, #64]	; 0x40
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_MspInit+0x4c>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000afe:	2007      	movs	r0, #7
 8000b00:	f000 fe92 	bl	8001828 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40023800 	.word	0x40023800

08000b10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a19      	ldr	r2, [pc, #100]	; (8000b94 <HAL_I2C_MspInit+0x84>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d12c      	bne.n	8000b8c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b3c:	f043 0302 	orr.w	r3, r3, #2
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b4e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b54:	2312      	movs	r3, #18
 8000b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b60:	2304      	movs	r3, #4
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480c      	ldr	r0, [pc, #48]	; (8000b9c <HAL_I2C_MspInit+0x8c>)
 8000b6c:	f000 fe9e 	bl	80018ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	4a07      	ldr	r2, [pc, #28]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	; 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40005400 	.word	0x40005400
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020400 	.word	0x40020400

08000ba0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a28      	ldr	r2, [pc, #160]	; (8000c60 <HAL_I2S_MspInit+0xc0>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d14a      	bne.n	8000c58 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <HAL_I2S_MspInit+0xc4>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	4a26      	ldr	r2, [pc, #152]	; (8000c64 <HAL_I2S_MspInit+0xc4>)
 8000bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd2:	4b24      	ldr	r3, [pc, #144]	; (8000c64 <HAL_I2S_MspInit+0xc4>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b20      	ldr	r3, [pc, #128]	; (8000c64 <HAL_I2S_MspInit+0xc4>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a1f      	ldr	r2, [pc, #124]	; (8000c64 <HAL_I2S_MspInit+0xc4>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <HAL_I2S_MspInit+0xc4>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <HAL_I2S_MspInit+0xc4>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a18      	ldr	r2, [pc, #96]	; (8000c64 <HAL_I2S_MspInit+0xc4>)
 8000c04:	f043 0304 	orr.w	r3, r3, #4
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <HAL_I2S_MspInit+0xc4>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c16:	2310      	movs	r3, #16
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c26:	2306      	movs	r3, #6
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	480d      	ldr	r0, [pc, #52]	; (8000c68 <HAL_I2S_MspInit+0xc8>)
 8000c32:	f000 fe3b 	bl	80018ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c36:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c48:	2306      	movs	r3, #6
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4619      	mov	r1, r3
 8000c52:	4806      	ldr	r0, [pc, #24]	; (8000c6c <HAL_I2S_MspInit+0xcc>)
 8000c54:	f000 fe2a 	bl	80018ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c58:	bf00      	nop
 8000c5a:	3728      	adds	r7, #40	; 0x28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40003c00 	.word	0x40003c00
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020000 	.word	0x40020000
 8000c6c:	40020800 	.word	0x40020800

08000c70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a19      	ldr	r2, [pc, #100]	; (8000cf4 <HAL_SPI_MspInit+0x84>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d12b      	bne.n	8000cea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <HAL_SPI_MspInit+0x88>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	4a17      	ldr	r2, [pc, #92]	; (8000cf8 <HAL_SPI_MspInit+0x88>)
 8000c9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <HAL_SPI_MspInit+0x88>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <HAL_SPI_MspInit+0x88>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a10      	ldr	r2, [pc, #64]	; (8000cf8 <HAL_SPI_MspInit+0x88>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <HAL_SPI_MspInit+0x88>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cca:	23e0      	movs	r3, #224	; 0xe0
 8000ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cda:	2305      	movs	r3, #5
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <HAL_SPI_MspInit+0x8c>)
 8000ce6:	f000 fde1 	bl	80018ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cea:	bf00      	nop
 8000cec:	3728      	adds	r7, #40	; 0x28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40013000 	.word	0x40013000
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020000 	.word	0x40020000

08000d00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08c      	sub	sp, #48	; 0x30
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 031c 	add.w	r3, r7, #28
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a42      	ldr	r2, [pc, #264]	; (8000e28 <HAL_UART_MspInit+0x128>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d12c      	bne.n	8000d7c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	61bb      	str	r3, [r7, #24]
 8000d26:	4b41      	ldr	r3, [pc, #260]	; (8000e2c <HAL_UART_MspInit+0x12c>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	4a40      	ldr	r2, [pc, #256]	; (8000e2c <HAL_UART_MspInit+0x12c>)
 8000d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d30:	6413      	str	r3, [r2, #64]	; 0x40
 8000d32:	4b3e      	ldr	r3, [pc, #248]	; (8000e2c <HAL_UART_MspInit+0x12c>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3a:	61bb      	str	r3, [r7, #24]
 8000d3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
 8000d42:	4b3a      	ldr	r3, [pc, #232]	; (8000e2c <HAL_UART_MspInit+0x12c>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a39      	ldr	r2, [pc, #228]	; (8000e2c <HAL_UART_MspInit+0x12c>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b37      	ldr	r3, [pc, #220]	; (8000e2c <HAL_UART_MspInit+0x12c>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d5a:	230c      	movs	r3, #12
 8000d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d6a:	2307      	movs	r3, #7
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	482e      	ldr	r0, [pc, #184]	; (8000e30 <HAL_UART_MspInit+0x130>)
 8000d76:	f000 fd99 	bl	80018ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d7a:	e050      	b.n	8000e1e <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a2c      	ldr	r2, [pc, #176]	; (8000e34 <HAL_UART_MspInit+0x134>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d14b      	bne.n	8000e1e <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	4b28      	ldr	r3, [pc, #160]	; (8000e2c <HAL_UART_MspInit+0x12c>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	4a27      	ldr	r2, [pc, #156]	; (8000e2c <HAL_UART_MspInit+0x12c>)
 8000d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d94:	6413      	str	r3, [r2, #64]	; 0x40
 8000d96:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <HAL_UART_MspInit+0x12c>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <HAL_UART_MspInit+0x12c>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a20      	ldr	r2, [pc, #128]	; (8000e2c <HAL_UART_MspInit+0x12c>)
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b1e      	ldr	r3, [pc, #120]	; (8000e2c <HAL_UART_MspInit+0x12c>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <HAL_UART_MspInit+0x12c>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a19      	ldr	r2, [pc, #100]	; (8000e2c <HAL_UART_MspInit+0x12c>)
 8000dc8:	f043 0308 	orr.w	r3, r3, #8
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <HAL_UART_MspInit+0x12c>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0308 	and.w	r3, r3, #8
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000dda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de8:	2303      	movs	r3, #3
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dec:	2307      	movs	r3, #7
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	4619      	mov	r1, r3
 8000df6:	4810      	ldr	r0, [pc, #64]	; (8000e38 <HAL_UART_MspInit+0x138>)
 8000df8:	f000 fd58 	bl	80018ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e0e:	2307      	movs	r3, #7
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	4619      	mov	r1, r3
 8000e18:	4808      	ldr	r0, [pc, #32]	; (8000e3c <HAL_UART_MspInit+0x13c>)
 8000e1a:	f000 fd47 	bl	80018ac <HAL_GPIO_Init>
}
 8000e1e:	bf00      	nop
 8000e20:	3730      	adds	r7, #48	; 0x30
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40004400 	.word	0x40004400
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40020000 	.word	0x40020000
 8000e34:	40004800 	.word	0x40004800
 8000e38:	40020400 	.word	0x40020400
 8000e3c:	40020c00 	.word	0x40020c00

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <NMI_Handler+0x4>

08000e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <HardFault_Handler+0x4>

08000e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <MemManage_Handler+0x4>

08000e52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e8c:	f000 fbb8 	bl	8001600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <OTG_FS_IRQHandler+0x10>)
 8000e9a:	f001 f927 	bl	80020ec <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000614 	.word	0x20000614

08000ea8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb0:	4a14      	ldr	r2, [pc, #80]	; (8000f04 <_sbrk+0x5c>)
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <_sbrk+0x60>)
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <_sbrk+0x64>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d102      	bne.n	8000eca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <_sbrk+0x64>)
 8000ec6:	4a12      	ldr	r2, [pc, #72]	; (8000f10 <_sbrk+0x68>)
 8000ec8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <_sbrk+0x64>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d207      	bcs.n	8000ee8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed8:	f007 fd9a 	bl	8008a10 <__errno>
 8000edc:	4603      	mov	r3, r0
 8000ede:	220c      	movs	r2, #12
 8000ee0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee6:	e009      	b.n	8000efc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <_sbrk+0x64>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eee:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <_sbrk+0x64>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	4a05      	ldr	r2, [pc, #20]	; (8000f0c <_sbrk+0x64>)
 8000ef8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000efa:	68fb      	ldr	r3, [r7, #12]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20020000 	.word	0x20020000
 8000f08:	00000400 	.word	0x00000400
 8000f0c:	200000ac 	.word	0x200000ac
 8000f10:	20000928 	.word	0x20000928

08000f14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <SystemInit+0x20>)
 8000f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f1e:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <SystemInit+0x20>)
 8000f20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <my_itoa>:
extern UART_HandleTypeDef huart2;
extern UART_HandleTypeDef huart3;
void PrintString(uint8_t * string);

void my_itoa(uint32_t val, uint8_t* str, uint8_t len)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	4613      	mov	r3, r2
 8000f44:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for (i = 1; i <= len; i++)
 8000f46:	2301      	movs	r3, #1
 8000f48:	75fb      	strb	r3, [r7, #23]
 8000f4a:	e01c      	b.n	8000f86 <my_itoa+0x4e>
	{
		str[len - i] = (uint8_t)((val % 10UL) + '0');
 8000f4c:	68f9      	ldr	r1, [r7, #12]
 8000f4e:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <my_itoa+0x70>)
 8000f50:	fba3 2301 	umull	r2, r3, r3, r1
 8000f54:	08da      	lsrs	r2, r3, #3
 8000f56:	4613      	mov	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	1aca      	subs	r2, r1, r3
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	79f9      	ldrb	r1, [r7, #7]
 8000f64:	7dfb      	ldrb	r3, [r7, #23]
 8000f66:	1acb      	subs	r3, r1, r3
 8000f68:	4619      	mov	r1, r3
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	440b      	add	r3, r1
 8000f6e:	3230      	adds	r2, #48	; 0x30
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	701a      	strb	r2, [r3, #0]
		val /= 10;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4a0c      	ldr	r2, [pc, #48]	; (8000fa8 <my_itoa+0x70>)
 8000f78:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7c:	08db      	lsrs	r3, r3, #3
 8000f7e:	60fb      	str	r3, [r7, #12]
	for (i = 1; i <= len; i++)
 8000f80:	7dfb      	ldrb	r3, [r7, #23]
 8000f82:	3301      	adds	r3, #1
 8000f84:	75fb      	strb	r3, [r7, #23]
 8000f86:	7dfa      	ldrb	r2, [r7, #23]
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d9de      	bls.n	8000f4c <my_itoa+0x14>
	}
	str[i - 1] = '\0';
 8000f8e:	7dfb      	ldrb	r3, [r7, #23]
 8000f90:	3b01      	subs	r3, #1
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	4413      	add	r3, r2
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
}
 8000f9a:	bf00      	nop
 8000f9c:	371c      	adds	r7, #28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	cccccccd 	.word	0xcccccccd

08000fac <WifiSetup>:
void WifiSetup(void)
{
 8000fac:	b5b0      	push	{r4, r5, r7, lr}
 8000fae:	b0e6      	sub	sp, #408	; 0x198
 8000fb0:	af00      	add	r7, sp, #0
	uint8_t  string[200];
	uint8_t  buffer[200];
	int length;
	
	for (int i = 0; i < 200; i++)buffer[i] = ' ';	
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8000fb8:	e00a      	b.n	8000fd0 <WifiSetup+0x24>
 8000fba:	463a      	mov	r2, r7
 8000fbc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000fc0:	4413      	add	r3, r2
 8000fc2:	2220      	movs	r2, #32
 8000fc4:	701a      	strb	r2, [r3, #0]
 8000fc6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000fca:	3301      	adds	r3, #1
 8000fcc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8000fd0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000fd4:	2bc7      	cmp	r3, #199	; 0xc7
 8000fd6:	ddf0      	ble.n	8000fba <WifiSetup+0xe>
	strcpy((char *)string, "AT+CWMODE=3");
 8000fd8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000fdc:	4a53      	ldr	r2, [pc, #332]	; (800112c <WifiSetup+0x180>)
 8000fde:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fe0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	length = strlen((char *)string);
 8000fe4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff f8f1 	bl	80001d0 <strlen>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	string[length] = 0x0D;
 8000ff4:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000ff8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000ffc:	4413      	add	r3, r2
 8000ffe:	220d      	movs	r2, #13
 8001000:	701a      	strb	r2, [r3, #0]
	string[length + 1] = 0x0A;
 8001002:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001006:	3301      	adds	r3, #1
 8001008:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 800100c:	4413      	add	r3, r2
 800100e:	220a      	movs	r2, #10
 8001010:	f803 2cd0 	strb.w	r2, [r3, #-208]
	string[length + 2] = 0;
 8001014:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001018:	3302      	adds	r3, #2
 800101a:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 800101e:	4413      	add	r3, r2
 8001020:	2200      	movs	r2, #0
 8001022:	f803 2cd0 	strb.w	r2, [r3, #-208]
	HAL_UART_Transmit(&huart3, (uint8_t *)string, length + 2, 0xFFFF);	
 8001026:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800102a:	b29b      	uxth	r3, r3
 800102c:	3302      	adds	r3, #2
 800102e:	b29a      	uxth	r2, r3
 8001030:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001034:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001038:	483d      	ldr	r0, [pc, #244]	; (8001130 <WifiSetup+0x184>)
 800103a:	f003 ffcb 	bl	8004fd4 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, (uint8_t *)buffer, 100, 1000);  
 800103e:	4639      	mov	r1, r7
 8001040:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001044:	2264      	movs	r2, #100	; 0x64
 8001046:	483a      	ldr	r0, [pc, #232]	; (8001130 <WifiSetup+0x184>)
 8001048:	f004 f856 	bl	80050f8 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t *)buffer, 100, 0xFFFF);	
 800104c:	4639      	mov	r1, r7
 800104e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001052:	2264      	movs	r2, #100	; 0x64
 8001054:	4837      	ldr	r0, [pc, #220]	; (8001134 <WifiSetup+0x188>)
 8001056:	f003 ffbd 	bl	8004fd4 <HAL_UART_Transmit>
	string[0] = 0x0D;
 800105a:	230d      	movs	r3, #13
 800105c:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
	string[1] = 0x0A;
 8001060:	230a      	movs	r3, #10
 8001062:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
	HAL_UART_Transmit(&huart2, (uint8_t *)string, 2, 0xFFFF);	
 8001066:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 800106a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800106e:	2202      	movs	r2, #2
 8001070:	4830      	ldr	r0, [pc, #192]	; (8001134 <WifiSetup+0x188>)
 8001072:	f003 ffaf 	bl	8004fd4 <HAL_UART_Transmit>
	
	strcpy((char *)string, (char *)"AT+CWJAP=\"HY-DORM5-1107\",\"residence1107\"");
 8001076:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800107a:	4a2f      	ldr	r2, [pc, #188]	; (8001138 <WifiSetup+0x18c>)
 800107c:	461c      	mov	r4, r3
 800107e:	4615      	mov	r5, r2
 8001080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001088:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800108c:	c403      	stmia	r4!, {r0, r1}
 800108e:	7022      	strb	r2, [r4, #0]
	length = strlen((char *)string);
 8001090:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff f89b 	bl	80001d0 <strlen>
 800109a:	4603      	mov	r3, r0
 800109c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	string[length] = 0x0D;
 80010a0:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80010a4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80010a8:	4413      	add	r3, r2
 80010aa:	220d      	movs	r2, #13
 80010ac:	701a      	strb	r2, [r3, #0]
	string[length + 1] = 0x0A;
 80010ae:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80010b2:	3301      	adds	r3, #1
 80010b4:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 80010b8:	4413      	add	r3, r2
 80010ba:	220a      	movs	r2, #10
 80010bc:	f803 2cd0 	strb.w	r2, [r3, #-208]
	string[length + 2] = 0;
 80010c0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80010c4:	3302      	adds	r3, #2
 80010c6:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 80010ca:	4413      	add	r3, r2
 80010cc:	2200      	movs	r2, #0
 80010ce:	f803 2cd0 	strb.w	r2, [r3, #-208]
	HAL_UART_Transmit(&huart3, (uint8_t *)string, length + 2, 0xFFFF);	
 80010d2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	3302      	adds	r3, #2
 80010da:	b29a      	uxth	r2, r3
 80010dc:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80010e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010e4:	4812      	ldr	r0, [pc, #72]	; (8001130 <WifiSetup+0x184>)
 80010e6:	f003 ff75 	bl	8004fd4 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, (uint8_t *)buffer, 100, 4000); 
 80010ea:	4639      	mov	r1, r7
 80010ec:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80010f0:	2264      	movs	r2, #100	; 0x64
 80010f2:	480f      	ldr	r0, [pc, #60]	; (8001130 <WifiSetup+0x184>)
 80010f4:	f004 f800 	bl	80050f8 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t *)buffer, 100, 0xFFFF);	
 80010f8:	4639      	mov	r1, r7
 80010fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010fe:	2264      	movs	r2, #100	; 0x64
 8001100:	480c      	ldr	r0, [pc, #48]	; (8001134 <WifiSetup+0x188>)
 8001102:	f003 ff67 	bl	8004fd4 <HAL_UART_Transmit>
	string[0] = 0x0D;
 8001106:	230d      	movs	r3, #13
 8001108:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
	string[1] = 0x0A;
 800110c:	230a      	movs	r3, #10
 800110e:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
	HAL_UART_Transmit(&huart2, (uint8_t *)string, 2, 0xFFFF);
 8001112:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001116:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800111a:	2202      	movs	r2, #2
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <WifiSetup+0x188>)
 800111e:	f003 ff59 	bl	8004fd4 <HAL_UART_Transmit>
}
 8001122:	bf00      	nop
 8001124:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 8001128:	46bd      	mov	sp, r7
 800112a:	bdb0      	pop	{r4, r5, r7, pc}
 800112c:	0800934c 	.word	0x0800934c
 8001130:	200000bc 	.word	0x200000bc
 8001134:	200001ac 	.word	0x200001ac
 8001138:	08009358 	.word	0x08009358

0800113c <OpenWeather>:
void OpenWeather(void)
{
 800113c:	b5b0      	push	{r4, r5, r7, lr}
 800113e:	b0e8      	sub	sp, #416	; 0x1a0
 8001140:	af00      	add	r7, sp, #0
	int length;
	int ret;
	
	do
	{
		for (int i = 0; i < 200; i++)buffer[i] = ' ';
 8001142:	2300      	movs	r3, #0
 8001144:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001148:	e00a      	b.n	8001160 <OpenWeather+0x24>
 800114a:	1d3a      	adds	r2, r7, #4
 800114c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001150:	4413      	add	r3, r2
 8001152:	2220      	movs	r2, #32
 8001154:	701a      	strb	r2, [r3, #0]
 8001156:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800115a:	3301      	adds	r3, #1
 800115c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001160:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001164:	2bc7      	cmp	r3, #199	; 0xc7
 8001166:	ddf0      	ble.n	800114a <OpenWeather+0xe>
		strcpy((char *)string, (char *)"AT+CIPSTART=\"TCP\",\"www.kma.go.kr\",80");
 8001168:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800116c:	4a33      	ldr	r2, [pc, #204]	; (800123c <OpenWeather+0x100>)
 800116e:	461c      	mov	r4, r3
 8001170:	4615      	mov	r5, r2
 8001172:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001174:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001176:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001178:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800117a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800117e:	6020      	str	r0, [r4, #0]
 8001180:	3404      	adds	r4, #4
 8001182:	7021      	strb	r1, [r4, #0]
		length = strlen((char *)string);
 8001184:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f821 	bl	80001d0 <strlen>
 800118e:	4603      	mov	r3, r0
 8001190:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
		string[length] = 0x0D;
 8001194:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8001198:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800119c:	4413      	add	r3, r2
 800119e:	220d      	movs	r2, #13
 80011a0:	701a      	strb	r2, [r3, #0]
		string[length + 1] = 0x0A;
 80011a2:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80011a6:	3301      	adds	r3, #1
 80011a8:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80011ac:	4413      	add	r3, r2
 80011ae:	220a      	movs	r2, #10
 80011b0:	f803 2cd4 	strb.w	r2, [r3, #-212]
		string[length + 2] = 0;
 80011b4:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80011b8:	3302      	adds	r3, #2
 80011ba:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80011be:	4413      	add	r3, r2
 80011c0:	2200      	movs	r2, #0
 80011c2:	f803 2cd4 	strb.w	r2, [r3, #-212]
		HAL_UART_Transmit(&huart3, (uint8_t *)string, length + 2, 0xFFFF);	
 80011c6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	3302      	adds	r3, #2
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 80011d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011d8:	4819      	ldr	r0, [pc, #100]	; (8001240 <OpenWeather+0x104>)
 80011da:	f003 fefb 	bl	8004fd4 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart3, (uint8_t *)buffer, 100, 4000); 
 80011de:	1d39      	adds	r1, r7, #4
 80011e0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80011e4:	2264      	movs	r2, #100	; 0x64
 80011e6:	4816      	ldr	r0, [pc, #88]	; (8001240 <OpenWeather+0x104>)
 80011e8:	f003 ff86 	bl	80050f8 <HAL_UART_Receive>
		HAL_UART_Transmit(&huart2, (uint8_t *)buffer, 100, 0xFFFF);
 80011ec:	1d39      	adds	r1, r7, #4
 80011ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011f2:	2264      	movs	r2, #100	; 0x64
 80011f4:	4813      	ldr	r0, [pc, #76]	; (8001244 <OpenWeather+0x108>)
 80011f6:	f003 feed 	bl	8004fd4 <HAL_UART_Transmit>
		string[0] = 0x0D;
 80011fa:	230d      	movs	r3, #13
 80011fc:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
		string[1] = 0x0A;
 8001200:	230a      	movs	r3, #10
 8001202:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
		HAL_UART_Transmit(&huart2, (uint8_t *)string, 2, 0xFFFF);
 8001206:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 800120a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800120e:	2202      	movs	r2, #2
 8001210:	480c      	ldr	r0, [pc, #48]	; (8001244 <OpenWeather+0x108>)
 8001212:	f003 fedf 	bl	8004fd4 <HAL_UART_Transmit>
		ret = (int)strstr((char *)buffer, (char *)"CONNECT");
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	490b      	ldr	r1, [pc, #44]	; (8001248 <OpenWeather+0x10c>)
 800121a:	4618      	mov	r0, r3
 800121c:	f007 fd14 	bl	8008c48 <strstr>
 8001220:	4603      	mov	r3, r0
 8001222:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	} while (ret == 0);
 8001226:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800122a:	2b00      	cmp	r3, #0
 800122c:	d089      	beq.n	8001142 <OpenWeather+0x6>
}
 800122e:	bf00      	nop
 8001230:	bf00      	nop
 8001232:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 8001236:	46bd      	mov	sp, r7
 8001238:	bdb0      	pop	{r4, r5, r7, pc}
 800123a:	bf00      	nop
 800123c:	08009384 	.word	0x08009384
 8001240:	200000bc 	.word	0x200000bc
 8001244:	200001ac 	.word	0x200001ac
 8001248:	080093ac 	.word	0x080093ac

0800124c <WifiWeather>:
void WifiWeather(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	f5ad 6d2b 	sub.w	sp, sp, #2736	; 0xab0
 8001252:	af00      	add	r7, sp, #0
	uint8_t  query[500];
	uint8_t queryLength;
	uint8_t queryLengthString[5];
	int length;
	
	OpenWeather();
 8001254:	f7ff ff72 	bl	800113c <OpenWeather>
	for (;;)
	{    
		sprintf((char *)query, "GET /wid/queryDFSRSS.jsp?zone=4127152500 HTTP/1.1\r\nHost: www.kma.go.kr\r\nConnection: keep-alive\r\n\r\n");
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	499d      	ldr	r1, [pc, #628]	; (80014d4 <WifiWeather+0x288>)
 800125e:	4618      	mov	r0, r3
 8001260:	f007 fcd2 	bl	8008c08 <siprintf>
		queryLength = strlen((char *)query);
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	4618      	mov	r0, r3
 800126a:	f7fe ffb1 	bl	80001d0 <strlen>
 800126e:	4603      	mov	r3, r0
 8001270:	f887 3aa7 	strb.w	r3, [r7, #2727]	; 0xaa7
		
		for (int i = 0; i < 50; i++)buffer[i] = ' ';
 8001274:	2300      	movs	r3, #0
 8001276:	f8c7 3aac 	str.w	r3, [r7, #2732]	; 0xaac
 800127a:	e00b      	b.n	8001294 <WifiWeather+0x48>
 800127c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001280:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8001284:	4413      	add	r3, r2
 8001286:	2220      	movs	r2, #32
 8001288:	701a      	strb	r2, [r3, #0]
 800128a:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 800128e:	3301      	adds	r3, #1
 8001290:	f8c7 3aac 	str.w	r3, [r7, #2732]	; 0xaac
 8001294:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8001298:	2b31      	cmp	r3, #49	; 0x31
 800129a:	ddef      	ble.n	800127c <WifiWeather+0x30>
		my_itoa(queryLength, queryLengthString, 3);
 800129c:	f897 3aa7 	ldrb.w	r3, [r7, #2727]	; 0xaa7
 80012a0:	1d39      	adds	r1, r7, #4
 80012a2:	2203      	movs	r2, #3
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fe47 	bl	8000f38 <my_itoa>
		sprintf((char *)string, "AT+CIPSEND=%s", queryLengthString);
 80012aa:	1d3a      	adds	r2, r7, #4
 80012ac:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 80012b0:	4989      	ldr	r1, [pc, #548]	; (80014d8 <WifiWeather+0x28c>)
 80012b2:	4618      	mov	r0, r3
 80012b4:	f007 fca8 	bl	8008c08 <siprintf>
		length = strlen((char *)string);
 80012b8:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 80012bc:	4618      	mov	r0, r3
 80012be:	f7fe ff87 	bl	80001d0 <strlen>
 80012c2:	4603      	mov	r3, r0
 80012c4:	f8c7 3aa0 	str.w	r3, [r7, #2720]	; 0xaa0
		string[length] = 0x0D;
 80012c8:	f507 621d 	add.w	r2, r7, #2512	; 0x9d0
 80012cc:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 80012d0:	4413      	add	r3, r2
 80012d2:	220d      	movs	r2, #13
 80012d4:	701a      	strb	r2, [r3, #0]
		string[length + 1] = 0x0A;
 80012d6:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 80012da:	3301      	adds	r3, #1
 80012dc:	f507 622b 	add.w	r2, r7, #2736	; 0xab0
 80012e0:	4413      	add	r3, r2
 80012e2:	220a      	movs	r2, #10
 80012e4:	f803 2ce0 	strb.w	r2, [r3, #-224]
		string[length + 2] = 0;
 80012e8:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 80012ec:	3302      	adds	r3, #2
 80012ee:	f507 622b 	add.w	r2, r7, #2736	; 0xab0
 80012f2:	4413      	add	r3, r2
 80012f4:	2200      	movs	r2, #0
 80012f6:	f803 2ce0 	strb.w	r2, [r3, #-224]
		HAL_UART_Transmit(&huart3, (uint8_t *)string, length + 2, 0xFFFF);	
 80012fa:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 80012fe:	b29b      	uxth	r3, r3
 8001300:	3302      	adds	r3, #2
 8001302:	b29a      	uxth	r2, r3
 8001304:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 8001308:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800130c:	4873      	ldr	r0, [pc, #460]	; (80014dc <WifiWeather+0x290>)
 800130e:	f003 fe61 	bl	8004fd4 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart3, (uint8_t *)buffer, 23, 4000);	
 8001312:	f507 7100 	add.w	r1, r7, #512	; 0x200
 8001316:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800131a:	2217      	movs	r2, #23
 800131c:	486f      	ldr	r0, [pc, #444]	; (80014dc <WifiWeather+0x290>)
 800131e:	f003 feeb 	bl	80050f8 <HAL_UART_Receive>
		
		for (int i = 0; i < 2000; i++)buffer[i] = ' ';
 8001322:	2300      	movs	r3, #0
 8001324:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
 8001328:	e00b      	b.n	8001342 <WifiWeather+0xf6>
 800132a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800132e:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8001332:	4413      	add	r3, r2
 8001334:	2220      	movs	r2, #32
 8001336:	701a      	strb	r2, [r3, #0]
 8001338:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 800133c:	3301      	adds	r3, #1
 800133e:	f8c7 3aa8 	str.w	r3, [r7, #2728]	; 0xaa8
 8001342:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8001346:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800134a:	dbee      	blt.n	800132a <WifiWeather+0xde>
		HAL_Delay(1);
 800134c:	2001      	movs	r0, #1
 800134e:	f000 f977 	bl	8001640 <HAL_Delay>
		HAL_UART_Transmit(&huart3, (uint8_t *)(query), queryLength, 0xFFFF);
 8001352:	f897 3aa7 	ldrb.w	r3, [r7, #2727]	; 0xaa7
 8001356:	b29a      	uxth	r2, r3
 8001358:	f107 010c 	add.w	r1, r7, #12
 800135c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001360:	485e      	ldr	r0, [pc, #376]	; (80014dc <WifiWeather+0x290>)
 8001362:	f003 fe37 	bl	8004fd4 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart3, (uint8_t *)buffer, 2000, 4000);
 8001366:	f507 7100 	add.w	r1, r7, #512	; 0x200
 800136a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800136e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001372:	485a      	ldr	r0, [pc, #360]	; (80014dc <WifiWeather+0x290>)
 8001374:	f003 fec0 	bl	80050f8 <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart2, (uint8_t *)buffer, 2000, 0xFFFF);
		string[0] = 0x0D;
 8001378:	230d      	movs	r3, #13
 800137a:	f887 39d0 	strb.w	r3, [r7, #2512]	; 0x9d0
		string[1] = 0x0A;
 800137e:	230a      	movs	r3, #10
 8001380:	f887 39d1 	strb.w	r3, [r7, #2513]	; 0x9d1
		HAL_UART_Transmit(&huart2, (uint8_t *)string, 2, 0xFFFF);
 8001384:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 8001388:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800138c:	2202      	movs	r2, #2
 800138e:	4854      	ldr	r0, [pc, #336]	; (80014e0 <WifiWeather+0x294>)
 8001390:	f003 fe20 	bl	8004fd4 <HAL_UART_Transmit>
		
		int ret1,ret2;
		
		ret1 = (int)strstr((char *)buffer, (char *)"ERROR");
 8001394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001398:	4952      	ldr	r1, [pc, #328]	; (80014e4 <WifiWeather+0x298>)
 800139a:	4618      	mov	r0, r3
 800139c:	f007 fc54 	bl	8008c48 <strstr>
 80013a0:	4603      	mov	r3, r0
 80013a2:	f8c7 3a9c 	str.w	r3, [r7, #2716]	; 0xa9c
		if (ret1 != 0) break;
 80013a6:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f040 8089 	bne.w	80014c2 <WifiWeather+0x276>
		
		ret1 = (int)strstr((char *)buffer, (char *)"GMT");
 80013b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013b4:	494c      	ldr	r1, [pc, #304]	; (80014e8 <WifiWeather+0x29c>)
 80013b6:	4618      	mov	r0, r3
 80013b8:	f007 fc46 	bl	8008c48 <strstr>
 80013bc:	4603      	mov	r3, r0
 80013be:	f8c7 3a9c 	str.w	r3, [r7, #2716]	; 0xa9c
		HAL_UART_Transmit(&huart2, (uint8_t *)(ret1 -9), 12, 0xFFFF);
 80013c2:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 80013c6:	3b09      	subs	r3, #9
 80013c8:	4619      	mov	r1, r3
 80013ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ce:	220c      	movs	r2, #12
 80013d0:	4843      	ldr	r0, [pc, #268]	; (80014e0 <WifiWeather+0x294>)
 80013d2:	f003 fdff 	bl	8004fd4 <HAL_UART_Transmit>
		
		ret1 = (int)strstr((char *)buffer, (char *)"<hour>");
 80013d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013da:	4944      	ldr	r1, [pc, #272]	; (80014ec <WifiWeather+0x2a0>)
 80013dc:	4618      	mov	r0, r3
 80013de:	f007 fc33 	bl	8008c48 <strstr>
 80013e2:	4603      	mov	r3, r0
 80013e4:	f8c7 3a9c 	str.w	r3, [r7, #2716]	; 0xa9c
		ret2 = (int)strstr((char *)buffer, (char *)"</hour>");
 80013e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ec:	4940      	ldr	r1, [pc, #256]	; (80014f0 <WifiWeather+0x2a4>)
 80013ee:	4618      	mov	r0, r3
 80013f0:	f007 fc2a 	bl	8008c48 <strstr>
 80013f4:	4603      	mov	r3, r0
 80013f6:	f8c7 3a98 	str.w	r3, [r7, #2712]	; 0xa98
		HAL_UART_Transmit(&huart2, (uint8_t *)(ret1), ret2 - ret1, 0xFFFF);
 80013fa:	f8d7 1a9c 	ldr.w	r1, [r7, #2716]	; 0xa9c
 80013fe:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8001402:	b29a      	uxth	r2, r3
 8001404:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 8001408:	b29b      	uxth	r3, r3
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	b29a      	uxth	r2, r3
 800140e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001412:	4833      	ldr	r0, [pc, #204]	; (80014e0 <WifiWeather+0x294>)
 8001414:	f003 fdde 	bl	8004fd4 <HAL_UART_Transmit>
		
		ret1 = (int)strstr((char *)buffer, (char *)"<temp>");
 8001418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800141c:	4935      	ldr	r1, [pc, #212]	; (80014f4 <WifiWeather+0x2a8>)
 800141e:	4618      	mov	r0, r3
 8001420:	f007 fc12 	bl	8008c48 <strstr>
 8001424:	4603      	mov	r3, r0
 8001426:	f8c7 3a9c 	str.w	r3, [r7, #2716]	; 0xa9c
		ret2 = (int)strstr((char *)buffer, (char *)"</temp>");
 800142a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800142e:	4932      	ldr	r1, [pc, #200]	; (80014f8 <WifiWeather+0x2ac>)
 8001430:	4618      	mov	r0, r3
 8001432:	f007 fc09 	bl	8008c48 <strstr>
 8001436:	4603      	mov	r3, r0
 8001438:	f8c7 3a98 	str.w	r3, [r7, #2712]	; 0xa98
		HAL_UART_Transmit(&huart2, (uint8_t *)(ret1), ret2 - ret1, 0xFFFF);
 800143c:	f8d7 1a9c 	ldr.w	r1, [r7, #2716]	; 0xa9c
 8001440:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8001444:	b29a      	uxth	r2, r3
 8001446:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 800144a:	b29b      	uxth	r3, r3
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	b29a      	uxth	r2, r3
 8001450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001454:	4822      	ldr	r0, [pc, #136]	; (80014e0 <WifiWeather+0x294>)
 8001456:	f003 fdbd 	bl	8004fd4 <HAL_UART_Transmit>
		
		ret1 = (int)strstr((char *)buffer, (char *)"<wfEn>");
 800145a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800145e:	4927      	ldr	r1, [pc, #156]	; (80014fc <WifiWeather+0x2b0>)
 8001460:	4618      	mov	r0, r3
 8001462:	f007 fbf1 	bl	8008c48 <strstr>
 8001466:	4603      	mov	r3, r0
 8001468:	f8c7 3a9c 	str.w	r3, [r7, #2716]	; 0xa9c
		ret2 = (int)strstr((char *)buffer, (char *)"</wfEn>");
 800146c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001470:	4923      	ldr	r1, [pc, #140]	; (8001500 <WifiWeather+0x2b4>)
 8001472:	4618      	mov	r0, r3
 8001474:	f007 fbe8 	bl	8008c48 <strstr>
 8001478:	4603      	mov	r3, r0
 800147a:	f8c7 3a98 	str.w	r3, [r7, #2712]	; 0xa98
		HAL_UART_Transmit(&huart2, (uint8_t *)(ret1), ret2 - ret1, 0xFFFF);
 800147e:	f8d7 1a9c 	ldr.w	r1, [r7, #2716]	; 0xa9c
 8001482:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8001486:	b29a      	uxth	r2, r3
 8001488:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 800148c:	b29b      	uxth	r3, r3
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	b29a      	uxth	r2, r3
 8001492:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001496:	4812      	ldr	r0, [pc, #72]	; (80014e0 <WifiWeather+0x294>)
 8001498:	f003 fd9c 	bl	8004fd4 <HAL_UART_Transmit>
		
		string[0] = 0x0D;
 800149c:	230d      	movs	r3, #13
 800149e:	f887 39d0 	strb.w	r3, [r7, #2512]	; 0x9d0
		string[1] = 0x0A;
 80014a2:	230a      	movs	r3, #10
 80014a4:	f887 39d1 	strb.w	r3, [r7, #2513]	; 0x9d1
		HAL_UART_Transmit(&huart2, (uint8_t *)string, 2, 0xFFFF);
 80014a8:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 80014ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014b0:	2202      	movs	r2, #2
 80014b2:	480b      	ldr	r0, [pc, #44]	; (80014e0 <WifiWeather+0x294>)
 80014b4:	f003 fd8e 	bl	8004fd4 <HAL_UART_Transmit>
        /* wait for a while to slow down */    
		HAL_Delay(2000);
 80014b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014bc:	f000 f8c0 	bl	8001640 <HAL_Delay>
	{    
 80014c0:	e6ca      	b.n	8001258 <WifiWeather+0xc>
		if (ret1 != 0) break;
 80014c2:	bf00      	nop
	}	
	PrintString((uint8_t *)"ERROR: Connection Closed. Restart the program.\r\n");
 80014c4:	480f      	ldr	r0, [pc, #60]	; (8001504 <WifiWeather+0x2b8>)
 80014c6:	f7ff f857 	bl	8000578 <PrintString>
}
 80014ca:	bf00      	nop
 80014cc:	f507 672b 	add.w	r7, r7, #2736	; 0xab0
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	080093b4 	.word	0x080093b4
 80014d8:	08009418 	.word	0x08009418
 80014dc:	200000bc 	.word	0x200000bc
 80014e0:	200001ac 	.word	0x200001ac
 80014e4:	08009428 	.word	0x08009428
 80014e8:	08009430 	.word	0x08009430
 80014ec:	08009434 	.word	0x08009434
 80014f0:	0800943c 	.word	0x0800943c
 80014f4:	08009444 	.word	0x08009444
 80014f8:	0800944c 	.word	0x0800944c
 80014fc:	08009454 	.word	0x08009454
 8001500:	0800945c 	.word	0x0800945c
 8001504:	08009464 	.word	0x08009464

08001508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001508:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001540 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800150c:	480d      	ldr	r0, [pc, #52]	; (8001544 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800150e:	490e      	ldr	r1, [pc, #56]	; (8001548 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001510:	4a0e      	ldr	r2, [pc, #56]	; (800154c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001514:	e002      	b.n	800151c <LoopCopyDataInit>

08001516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151a:	3304      	adds	r3, #4

0800151c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800151c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001520:	d3f9      	bcc.n	8001516 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001522:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001524:	4c0b      	ldr	r4, [pc, #44]	; (8001554 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001528:	e001      	b.n	800152e <LoopFillZerobss>

0800152a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800152c:	3204      	adds	r2, #4

0800152e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001530:	d3fb      	bcc.n	800152a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001532:	f7ff fcef 	bl	8000f14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001536:	f007 fa71 	bl	8008a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800153a:	f7ff f833 	bl	80005a4 <main>
  bx  lr    
 800153e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001540:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001548:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800154c:	080094f8 	.word	0x080094f8
  ldr r2, =_sbss
 8001550:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001554:	20000928 	.word	0x20000928

08001558 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001558:	e7fe      	b.n	8001558 <ADC_IRQHandler>
	...

0800155c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <HAL_Init+0x40>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0d      	ldr	r2, [pc, #52]	; (800159c <HAL_Init+0x40>)
 8001566:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800156a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <HAL_Init+0x40>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a0a      	ldr	r2, [pc, #40]	; (800159c <HAL_Init+0x40>)
 8001572:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001576:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001578:	4b08      	ldr	r3, [pc, #32]	; (800159c <HAL_Init+0x40>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a07      	ldr	r2, [pc, #28]	; (800159c <HAL_Init+0x40>)
 800157e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001582:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001584:	2003      	movs	r0, #3
 8001586:	f000 f94f 	bl	8001828 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800158a:	2000      	movs	r0, #0
 800158c:	f000 f808 	bl	80015a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001590:	f7ff fa96 	bl	8000ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023c00 	.word	0x40023c00

080015a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <HAL_InitTick+0x54>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_InitTick+0x58>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	4619      	mov	r1, r3
 80015b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 f967 	bl	8001892 <HAL_SYSTICK_Config>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e00e      	b.n	80015ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b0f      	cmp	r3, #15
 80015d2:	d80a      	bhi.n	80015ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d4:	2200      	movs	r2, #0
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	f04f 30ff 	mov.w	r0, #4294967295
 80015dc:	f000 f92f 	bl	800183e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e0:	4a06      	ldr	r2, [pc, #24]	; (80015fc <HAL_InitTick+0x5c>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015e6:	2300      	movs	r3, #0
 80015e8:	e000      	b.n	80015ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000000 	.word	0x20000000
 80015f8:	20000008 	.word	0x20000008
 80015fc:	20000004 	.word	0x20000004

08001600 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_IncTick+0x20>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_IncTick+0x24>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4413      	add	r3, r2
 8001610:	4a04      	ldr	r2, [pc, #16]	; (8001624 <HAL_IncTick+0x24>)
 8001612:	6013      	str	r3, [r2, #0]
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000008 	.word	0x20000008
 8001624:	20000238 	.word	0x20000238

08001628 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return uwTick;
 800162c:	4b03      	ldr	r3, [pc, #12]	; (800163c <HAL_GetTick+0x14>)
 800162e:	681b      	ldr	r3, [r3, #0]
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	20000238 	.word	0x20000238

08001640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001648:	f7ff ffee 	bl	8001628 <HAL_GetTick>
 800164c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001658:	d005      	beq.n	8001666 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800165a:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <HAL_Delay+0x44>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	461a      	mov	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4413      	add	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001666:	bf00      	nop
 8001668:	f7ff ffde 	bl	8001628 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	429a      	cmp	r2, r3
 8001676:	d8f7      	bhi.n	8001668 <HAL_Delay+0x28>
  {
  }
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000008 	.word	0x20000008

08001688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a4:	4013      	ands	r3, r2
 80016a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ba:	4a04      	ldr	r2, [pc, #16]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	60d3      	str	r3, [r2, #12]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <__NVIC_GetPriorityGrouping+0x18>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	0a1b      	lsrs	r3, r3, #8
 80016da:	f003 0307 	and.w	r3, r3, #7
}
 80016de:	4618      	mov	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	db0b      	blt.n	8001716 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	f003 021f 	and.w	r2, r3, #31
 8001704:	4907      	ldr	r1, [pc, #28]	; (8001724 <__NVIC_EnableIRQ+0x38>)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	095b      	lsrs	r3, r3, #5
 800170c:	2001      	movs	r0, #1
 800170e:	fa00 f202 	lsl.w	r2, r0, r2
 8001712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000e100 	.word	0xe000e100

08001728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	6039      	str	r1, [r7, #0]
 8001732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001738:	2b00      	cmp	r3, #0
 800173a:	db0a      	blt.n	8001752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	b2da      	uxtb	r2, r3
 8001740:	490c      	ldr	r1, [pc, #48]	; (8001774 <__NVIC_SetPriority+0x4c>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	0112      	lsls	r2, r2, #4
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	440b      	add	r3, r1
 800174c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001750:	e00a      	b.n	8001768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4908      	ldr	r1, [pc, #32]	; (8001778 <__NVIC_SetPriority+0x50>)
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	3b04      	subs	r3, #4
 8001760:	0112      	lsls	r2, r2, #4
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	440b      	add	r3, r1
 8001766:	761a      	strb	r2, [r3, #24]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000e100 	.word	0xe000e100
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800177c:	b480      	push	{r7}
 800177e:	b089      	sub	sp, #36	; 0x24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f1c3 0307 	rsb	r3, r3, #7
 8001796:	2b04      	cmp	r3, #4
 8001798:	bf28      	it	cs
 800179a:	2304      	movcs	r3, #4
 800179c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3304      	adds	r3, #4
 80017a2:	2b06      	cmp	r3, #6
 80017a4:	d902      	bls.n	80017ac <NVIC_EncodePriority+0x30>
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3b03      	subs	r3, #3
 80017aa:	e000      	b.n	80017ae <NVIC_EncodePriority+0x32>
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	f04f 32ff 	mov.w	r2, #4294967295
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43da      	mvns	r2, r3
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	401a      	ands	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c4:	f04f 31ff 	mov.w	r1, #4294967295
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	fa01 f303 	lsl.w	r3, r1, r3
 80017ce:	43d9      	mvns	r1, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	4313      	orrs	r3, r2
         );
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3724      	adds	r7, #36	; 0x24
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017f4:	d301      	bcc.n	80017fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017f6:	2301      	movs	r3, #1
 80017f8:	e00f      	b.n	800181a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017fa:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <SysTick_Config+0x40>)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3b01      	subs	r3, #1
 8001800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001802:	210f      	movs	r1, #15
 8001804:	f04f 30ff 	mov.w	r0, #4294967295
 8001808:	f7ff ff8e 	bl	8001728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <SysTick_Config+0x40>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001812:	4b04      	ldr	r3, [pc, #16]	; (8001824 <SysTick_Config+0x40>)
 8001814:	2207      	movs	r2, #7
 8001816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	e000e010 	.word	0xe000e010

08001828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff ff29 	bl	8001688 <__NVIC_SetPriorityGrouping>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800183e:	b580      	push	{r7, lr}
 8001840:	b086      	sub	sp, #24
 8001842:	af00      	add	r7, sp, #0
 8001844:	4603      	mov	r3, r0
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
 800184a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001850:	f7ff ff3e 	bl	80016d0 <__NVIC_GetPriorityGrouping>
 8001854:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	68b9      	ldr	r1, [r7, #8]
 800185a:	6978      	ldr	r0, [r7, #20]
 800185c:	f7ff ff8e 	bl	800177c <NVIC_EncodePriority>
 8001860:	4602      	mov	r2, r0
 8001862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff5d 	bl	8001728 <__NVIC_SetPriority>
}
 800186e:	bf00      	nop
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	4603      	mov	r3, r0
 800187e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff31 	bl	80016ec <__NVIC_EnableIRQ>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ffa2 	bl	80017e4 <SysTick_Config>
 80018a0:	4603      	mov	r3, r0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
 80018c6:	e16b      	b.n	8001ba0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018c8:	2201      	movs	r2, #1
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	f040 815a 	bne.w	8001b9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d005      	beq.n	80018fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d130      	bne.n	8001960 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	2203      	movs	r2, #3
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001934:	2201      	movs	r2, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	091b      	lsrs	r3, r3, #4
 800194a:	f003 0201 	and.w	r2, r3, #1
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	2b03      	cmp	r3, #3
 800196a:	d017      	beq.n	800199c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	2203      	movs	r2, #3
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d123      	bne.n	80019f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	08da      	lsrs	r2, r3, #3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3208      	adds	r2, #8
 80019b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	220f      	movs	r2, #15
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	691a      	ldr	r2, [r3, #16]
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	08da      	lsrs	r2, r3, #3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3208      	adds	r2, #8
 80019ea:	69b9      	ldr	r1, [r7, #24]
 80019ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	2203      	movs	r2, #3
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0203 	and.w	r2, r3, #3
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 80b4 	beq.w	8001b9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b60      	ldr	r3, [pc, #384]	; (8001bb8 <HAL_GPIO_Init+0x30c>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	4a5f      	ldr	r2, [pc, #380]	; (8001bb8 <HAL_GPIO_Init+0x30c>)
 8001a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a40:	6453      	str	r3, [r2, #68]	; 0x44
 8001a42:	4b5d      	ldr	r3, [pc, #372]	; (8001bb8 <HAL_GPIO_Init+0x30c>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a4e:	4a5b      	ldr	r2, [pc, #364]	; (8001bbc <HAL_GPIO_Init+0x310>)
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	089b      	lsrs	r3, r3, #2
 8001a54:	3302      	adds	r3, #2
 8001a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	220f      	movs	r2, #15
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a52      	ldr	r2, [pc, #328]	; (8001bc0 <HAL_GPIO_Init+0x314>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d02b      	beq.n	8001ad2 <HAL_GPIO_Init+0x226>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a51      	ldr	r2, [pc, #324]	; (8001bc4 <HAL_GPIO_Init+0x318>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d025      	beq.n	8001ace <HAL_GPIO_Init+0x222>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a50      	ldr	r2, [pc, #320]	; (8001bc8 <HAL_GPIO_Init+0x31c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d01f      	beq.n	8001aca <HAL_GPIO_Init+0x21e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a4f      	ldr	r2, [pc, #316]	; (8001bcc <HAL_GPIO_Init+0x320>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d019      	beq.n	8001ac6 <HAL_GPIO_Init+0x21a>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a4e      	ldr	r2, [pc, #312]	; (8001bd0 <HAL_GPIO_Init+0x324>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d013      	beq.n	8001ac2 <HAL_GPIO_Init+0x216>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a4d      	ldr	r2, [pc, #308]	; (8001bd4 <HAL_GPIO_Init+0x328>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d00d      	beq.n	8001abe <HAL_GPIO_Init+0x212>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a4c      	ldr	r2, [pc, #304]	; (8001bd8 <HAL_GPIO_Init+0x32c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d007      	beq.n	8001aba <HAL_GPIO_Init+0x20e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a4b      	ldr	r2, [pc, #300]	; (8001bdc <HAL_GPIO_Init+0x330>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d101      	bne.n	8001ab6 <HAL_GPIO_Init+0x20a>
 8001ab2:	2307      	movs	r3, #7
 8001ab4:	e00e      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001ab6:	2308      	movs	r3, #8
 8001ab8:	e00c      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001aba:	2306      	movs	r3, #6
 8001abc:	e00a      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001abe:	2305      	movs	r3, #5
 8001ac0:	e008      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	e006      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e004      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e002      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <HAL_GPIO_Init+0x228>
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	69fa      	ldr	r2, [r7, #28]
 8001ad6:	f002 0203 	and.w	r2, r2, #3
 8001ada:	0092      	lsls	r2, r2, #2
 8001adc:	4093      	lsls	r3, r2
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ae4:	4935      	ldr	r1, [pc, #212]	; (8001bbc <HAL_GPIO_Init+0x310>)
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	089b      	lsrs	r3, r3, #2
 8001aea:	3302      	adds	r3, #2
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001af2:	4b3b      	ldr	r3, [pc, #236]	; (8001be0 <HAL_GPIO_Init+0x334>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4013      	ands	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b16:	4a32      	ldr	r2, [pc, #200]	; (8001be0 <HAL_GPIO_Init+0x334>)
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b1c:	4b30      	ldr	r3, [pc, #192]	; (8001be0 <HAL_GPIO_Init+0x334>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b40:	4a27      	ldr	r2, [pc, #156]	; (8001be0 <HAL_GPIO_Init+0x334>)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b46:	4b26      	ldr	r3, [pc, #152]	; (8001be0 <HAL_GPIO_Init+0x334>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b6a:	4a1d      	ldr	r2, [pc, #116]	; (8001be0 <HAL_GPIO_Init+0x334>)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b70:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <HAL_GPIO_Init+0x334>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b94:	4a12      	ldr	r2, [pc, #72]	; (8001be0 <HAL_GPIO_Init+0x334>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	61fb      	str	r3, [r7, #28]
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	2b0f      	cmp	r3, #15
 8001ba4:	f67f ae90 	bls.w	80018c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ba8:	bf00      	nop
 8001baa:	bf00      	nop
 8001bac:	3724      	adds	r7, #36	; 0x24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40013800 	.word	0x40013800
 8001bc0:	40020000 	.word	0x40020000
 8001bc4:	40020400 	.word	0x40020400
 8001bc8:	40020800 	.word	0x40020800
 8001bcc:	40020c00 	.word	0x40020c00
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40021400 	.word	0x40021400
 8001bd8:	40021800 	.word	0x40021800
 8001bdc:	40021c00 	.word	0x40021c00
 8001be0:	40013c00 	.word	0x40013c00

08001be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	807b      	strh	r3, [r7, #2]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bf4:	787b      	ldrb	r3, [r7, #1]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bfa:	887a      	ldrh	r2, [r7, #2]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c00:	e003      	b.n	8001c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c02:	887b      	ldrh	r3, [r7, #2]
 8001c04:	041a      	lsls	r2, r3, #16
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	619a      	str	r2, [r3, #24]
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001c16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c18:	b08f      	sub	sp, #60	; 0x3c
 8001c1a:	af0a      	add	r7, sp, #40	; 0x28
 8001c1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e054      	b.n	8001cd2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d106      	bne.n	8001c48 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f006 fc3a 	bl	80084bc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d102      	bne.n	8001c62 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f003 fd90 	bl	800578c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	603b      	str	r3, [r7, #0]
 8001c72:	687e      	ldr	r6, [r7, #4]
 8001c74:	466d      	mov	r5, sp
 8001c76:	f106 0410 	add.w	r4, r6, #16
 8001c7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c86:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c8a:	1d33      	adds	r3, r6, #4
 8001c8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c8e:	6838      	ldr	r0, [r7, #0]
 8001c90:	f003 fd0a 	bl	80056a8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2101      	movs	r1, #1
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f003 fd87 	bl	80057ae <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	603b      	str	r3, [r7, #0]
 8001ca6:	687e      	ldr	r6, [r7, #4]
 8001ca8:	466d      	mov	r5, sp
 8001caa:	f106 0410 	add.w	r4, r6, #16
 8001cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cba:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cbe:	1d33      	adds	r3, r6, #4
 8001cc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cc2:	6838      	ldr	r0, [r7, #0]
 8001cc4:	f003 feee 	bl	8005aa4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cda <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001cda:	b590      	push	{r4, r7, lr}
 8001cdc:	b089      	sub	sp, #36	; 0x24
 8001cde:	af04      	add	r7, sp, #16
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	4608      	mov	r0, r1
 8001ce4:	4611      	mov	r1, r2
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4603      	mov	r3, r0
 8001cea:	70fb      	strb	r3, [r7, #3]
 8001cec:	460b      	mov	r3, r1
 8001cee:	70bb      	strb	r3, [r7, #2]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d101      	bne.n	8001d02 <HAL_HCD_HC_Init+0x28>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e076      	b.n	8001df0 <HAL_HCD_HC_Init+0x116>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001d0a:	78fb      	ldrb	r3, [r7, #3]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	212c      	movs	r1, #44	; 0x2c
 8001d10:	fb01 f303 	mul.w	r3, r1, r3
 8001d14:	4413      	add	r3, r2
 8001d16:	333d      	adds	r3, #61	; 0x3d
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001d1c:	78fb      	ldrb	r3, [r7, #3]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	212c      	movs	r1, #44	; 0x2c
 8001d22:	fb01 f303 	mul.w	r3, r1, r3
 8001d26:	4413      	add	r3, r2
 8001d28:	3338      	adds	r3, #56	; 0x38
 8001d2a:	787a      	ldrb	r2, [r7, #1]
 8001d2c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001d2e:	78fb      	ldrb	r3, [r7, #3]
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	212c      	movs	r1, #44	; 0x2c
 8001d34:	fb01 f303 	mul.w	r3, r1, r3
 8001d38:	4413      	add	r3, r2
 8001d3a:	3340      	adds	r3, #64	; 0x40
 8001d3c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001d3e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	212c      	movs	r1, #44	; 0x2c
 8001d46:	fb01 f303 	mul.w	r3, r1, r3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3339      	adds	r3, #57	; 0x39
 8001d4e:	78fa      	ldrb	r2, [r7, #3]
 8001d50:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001d52:	78fb      	ldrb	r3, [r7, #3]
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	212c      	movs	r1, #44	; 0x2c
 8001d58:	fb01 f303 	mul.w	r3, r1, r3
 8001d5c:	4413      	add	r3, r2
 8001d5e:	333f      	adds	r3, #63	; 0x3f
 8001d60:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001d64:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001d66:	78fb      	ldrb	r3, [r7, #3]
 8001d68:	78ba      	ldrb	r2, [r7, #2]
 8001d6a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d6e:	b2d0      	uxtb	r0, r2
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	212c      	movs	r1, #44	; 0x2c
 8001d74:	fb01 f303 	mul.w	r3, r1, r3
 8001d78:	4413      	add	r3, r2
 8001d7a:	333a      	adds	r3, #58	; 0x3a
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001d80:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	da09      	bge.n	8001d9c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001d88:	78fb      	ldrb	r3, [r7, #3]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	212c      	movs	r1, #44	; 0x2c
 8001d8e:	fb01 f303 	mul.w	r3, r1, r3
 8001d92:	4413      	add	r3, r2
 8001d94:	333b      	adds	r3, #59	; 0x3b
 8001d96:	2201      	movs	r2, #1
 8001d98:	701a      	strb	r2, [r3, #0]
 8001d9a:	e008      	b.n	8001dae <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	212c      	movs	r1, #44	; 0x2c
 8001da2:	fb01 f303 	mul.w	r3, r1, r3
 8001da6:	4413      	add	r3, r2
 8001da8:	333b      	adds	r3, #59	; 0x3b
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001dae:	78fb      	ldrb	r3, [r7, #3]
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	212c      	movs	r1, #44	; 0x2c
 8001db4:	fb01 f303 	mul.w	r3, r1, r3
 8001db8:	4413      	add	r3, r2
 8001dba:	333c      	adds	r3, #60	; 0x3c
 8001dbc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001dc0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	787c      	ldrb	r4, [r7, #1]
 8001dc8:	78ba      	ldrb	r2, [r7, #2]
 8001dca:	78f9      	ldrb	r1, [r7, #3]
 8001dcc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001dce:	9302      	str	r3, [sp, #8]
 8001dd0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	4623      	mov	r3, r4
 8001dde:	f003 ffdb 	bl	8005d98 <USB_HC_Init>
 8001de2:	4603      	mov	r3, r0
 8001de4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd90      	pop	{r4, r7, pc}

08001df8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001e04:	2300      	movs	r3, #0
 8001e06:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d101      	bne.n	8001e16 <HAL_HCD_HC_Halt+0x1e>
 8001e12:	2302      	movs	r3, #2
 8001e14:	e00f      	b.n	8001e36 <HAL_HCD_HC_Halt+0x3e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	78fa      	ldrb	r2, [r7, #3]
 8001e24:	4611      	mov	r1, r2
 8001e26:	4618      	mov	r0, r3
 8001e28:	f004 fa17 	bl	800625a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	4608      	mov	r0, r1
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4603      	mov	r3, r0
 8001e50:	70fb      	strb	r3, [r7, #3]
 8001e52:	460b      	mov	r3, r1
 8001e54:	70bb      	strb	r3, [r7, #2]
 8001e56:	4613      	mov	r3, r2
 8001e58:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001e5a:	78fb      	ldrb	r3, [r7, #3]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	212c      	movs	r1, #44	; 0x2c
 8001e60:	fb01 f303 	mul.w	r3, r1, r3
 8001e64:	4413      	add	r3, r2
 8001e66:	333b      	adds	r3, #59	; 0x3b
 8001e68:	78ba      	ldrb	r2, [r7, #2]
 8001e6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	212c      	movs	r1, #44	; 0x2c
 8001e72:	fb01 f303 	mul.w	r3, r1, r3
 8001e76:	4413      	add	r3, r2
 8001e78:	333f      	adds	r3, #63	; 0x3f
 8001e7a:	787a      	ldrb	r2, [r7, #1]
 8001e7c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001e7e:	7c3b      	ldrb	r3, [r7, #16]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d112      	bne.n	8001eaa <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001e84:	78fb      	ldrb	r3, [r7, #3]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	212c      	movs	r1, #44	; 0x2c
 8001e8a:	fb01 f303 	mul.w	r3, r1, r3
 8001e8e:	4413      	add	r3, r2
 8001e90:	3342      	adds	r3, #66	; 0x42
 8001e92:	2203      	movs	r2, #3
 8001e94:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001e96:	78fb      	ldrb	r3, [r7, #3]
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	212c      	movs	r1, #44	; 0x2c
 8001e9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	333d      	adds	r3, #61	; 0x3d
 8001ea4:	7f3a      	ldrb	r2, [r7, #28]
 8001ea6:	701a      	strb	r2, [r3, #0]
 8001ea8:	e008      	b.n	8001ebc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001eaa:	78fb      	ldrb	r3, [r7, #3]
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	212c      	movs	r1, #44	; 0x2c
 8001eb0:	fb01 f303 	mul.w	r3, r1, r3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3342      	adds	r3, #66	; 0x42
 8001eb8:	2202      	movs	r2, #2
 8001eba:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001ebc:	787b      	ldrb	r3, [r7, #1]
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	f200 80c6 	bhi.w	8002050 <HAL_HCD_HC_SubmitRequest+0x210>
 8001ec4:	a201      	add	r2, pc, #4	; (adr r2, 8001ecc <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eca:	bf00      	nop
 8001ecc:	08001edd 	.word	0x08001edd
 8001ed0:	0800203d 	.word	0x0800203d
 8001ed4:	08001f41 	.word	0x08001f41
 8001ed8:	08001fbf 	.word	0x08001fbf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001edc:	7c3b      	ldrb	r3, [r7, #16]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	f040 80b8 	bne.w	8002054 <HAL_HCD_HC_SubmitRequest+0x214>
 8001ee4:	78bb      	ldrb	r3, [r7, #2]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f040 80b4 	bne.w	8002054 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001eec:	8b3b      	ldrh	r3, [r7, #24]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d108      	bne.n	8001f04 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	212c      	movs	r1, #44	; 0x2c
 8001ef8:	fb01 f303 	mul.w	r3, r1, r3
 8001efc:	4413      	add	r3, r2
 8001efe:	3355      	adds	r3, #85	; 0x55
 8001f00:	2201      	movs	r2, #1
 8001f02:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	212c      	movs	r1, #44	; 0x2c
 8001f0a:	fb01 f303 	mul.w	r3, r1, r3
 8001f0e:	4413      	add	r3, r2
 8001f10:	3355      	adds	r3, #85	; 0x55
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d109      	bne.n	8001f2c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	212c      	movs	r1, #44	; 0x2c
 8001f1e:	fb01 f303 	mul.w	r3, r1, r3
 8001f22:	4413      	add	r3, r2
 8001f24:	3342      	adds	r3, #66	; 0x42
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001f2a:	e093      	b.n	8002054 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	212c      	movs	r1, #44	; 0x2c
 8001f32:	fb01 f303 	mul.w	r3, r1, r3
 8001f36:	4413      	add	r3, r2
 8001f38:	3342      	adds	r3, #66	; 0x42
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	701a      	strb	r2, [r3, #0]
      break;
 8001f3e:	e089      	b.n	8002054 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001f40:	78bb      	ldrb	r3, [r7, #2]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d11d      	bne.n	8001f82 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f46:	78fb      	ldrb	r3, [r7, #3]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	212c      	movs	r1, #44	; 0x2c
 8001f4c:	fb01 f303 	mul.w	r3, r1, r3
 8001f50:	4413      	add	r3, r2
 8001f52:	3355      	adds	r3, #85	; 0x55
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d109      	bne.n	8001f6e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f5a:	78fb      	ldrb	r3, [r7, #3]
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	212c      	movs	r1, #44	; 0x2c
 8001f60:	fb01 f303 	mul.w	r3, r1, r3
 8001f64:	4413      	add	r3, r2
 8001f66:	3342      	adds	r3, #66	; 0x42
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001f6c:	e073      	b.n	8002056 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f6e:	78fb      	ldrb	r3, [r7, #3]
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	212c      	movs	r1, #44	; 0x2c
 8001f74:	fb01 f303 	mul.w	r3, r1, r3
 8001f78:	4413      	add	r3, r2
 8001f7a:	3342      	adds	r3, #66	; 0x42
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	701a      	strb	r2, [r3, #0]
      break;
 8001f80:	e069      	b.n	8002056 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	212c      	movs	r1, #44	; 0x2c
 8001f88:	fb01 f303 	mul.w	r3, r1, r3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	3354      	adds	r3, #84	; 0x54
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d109      	bne.n	8001faa <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	212c      	movs	r1, #44	; 0x2c
 8001f9c:	fb01 f303 	mul.w	r3, r1, r3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3342      	adds	r3, #66	; 0x42
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
      break;
 8001fa8:	e055      	b.n	8002056 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001faa:	78fb      	ldrb	r3, [r7, #3]
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	212c      	movs	r1, #44	; 0x2c
 8001fb0:	fb01 f303 	mul.w	r3, r1, r3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3342      	adds	r3, #66	; 0x42
 8001fb8:	2202      	movs	r2, #2
 8001fba:	701a      	strb	r2, [r3, #0]
      break;
 8001fbc:	e04b      	b.n	8002056 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001fbe:	78bb      	ldrb	r3, [r7, #2]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d11d      	bne.n	8002000 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	212c      	movs	r1, #44	; 0x2c
 8001fca:	fb01 f303 	mul.w	r3, r1, r3
 8001fce:	4413      	add	r3, r2
 8001fd0:	3355      	adds	r3, #85	; 0x55
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d109      	bne.n	8001fec <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	212c      	movs	r1, #44	; 0x2c
 8001fde:	fb01 f303 	mul.w	r3, r1, r3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	3342      	adds	r3, #66	; 0x42
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001fea:	e034      	b.n	8002056 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fec:	78fb      	ldrb	r3, [r7, #3]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	212c      	movs	r1, #44	; 0x2c
 8001ff2:	fb01 f303 	mul.w	r3, r1, r3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3342      	adds	r3, #66	; 0x42
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	701a      	strb	r2, [r3, #0]
      break;
 8001ffe:	e02a      	b.n	8002056 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	212c      	movs	r1, #44	; 0x2c
 8002006:	fb01 f303 	mul.w	r3, r1, r3
 800200a:	4413      	add	r3, r2
 800200c:	3354      	adds	r3, #84	; 0x54
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d109      	bne.n	8002028 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	212c      	movs	r1, #44	; 0x2c
 800201a:	fb01 f303 	mul.w	r3, r1, r3
 800201e:	4413      	add	r3, r2
 8002020:	3342      	adds	r3, #66	; 0x42
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
      break;
 8002026:	e016      	b.n	8002056 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	212c      	movs	r1, #44	; 0x2c
 800202e:	fb01 f303 	mul.w	r3, r1, r3
 8002032:	4413      	add	r3, r2
 8002034:	3342      	adds	r3, #66	; 0x42
 8002036:	2202      	movs	r2, #2
 8002038:	701a      	strb	r2, [r3, #0]
      break;
 800203a:	e00c      	b.n	8002056 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	212c      	movs	r1, #44	; 0x2c
 8002042:	fb01 f303 	mul.w	r3, r1, r3
 8002046:	4413      	add	r3, r2
 8002048:	3342      	adds	r3, #66	; 0x42
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
      break;
 800204e:	e002      	b.n	8002056 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002050:	bf00      	nop
 8002052:	e000      	b.n	8002056 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002054:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002056:	78fb      	ldrb	r3, [r7, #3]
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	212c      	movs	r1, #44	; 0x2c
 800205c:	fb01 f303 	mul.w	r3, r1, r3
 8002060:	4413      	add	r3, r2
 8002062:	3344      	adds	r3, #68	; 0x44
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	8b3a      	ldrh	r2, [r7, #24]
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	202c      	movs	r0, #44	; 0x2c
 8002070:	fb00 f303 	mul.w	r3, r0, r3
 8002074:	440b      	add	r3, r1
 8002076:	334c      	adds	r3, #76	; 0x4c
 8002078:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	212c      	movs	r1, #44	; 0x2c
 8002080:	fb01 f303 	mul.w	r3, r1, r3
 8002084:	4413      	add	r3, r2
 8002086:	3360      	adds	r3, #96	; 0x60
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	212c      	movs	r1, #44	; 0x2c
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	4413      	add	r3, r2
 8002098:	3350      	adds	r3, #80	; 0x50
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800209e:	78fb      	ldrb	r3, [r7, #3]
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	212c      	movs	r1, #44	; 0x2c
 80020a4:	fb01 f303 	mul.w	r3, r1, r3
 80020a8:	4413      	add	r3, r2
 80020aa:	3339      	adds	r3, #57	; 0x39
 80020ac:	78fa      	ldrb	r2, [r7, #3]
 80020ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80020b0:	78fb      	ldrb	r3, [r7, #3]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	212c      	movs	r1, #44	; 0x2c
 80020b6:	fb01 f303 	mul.w	r3, r1, r3
 80020ba:	4413      	add	r3, r2
 80020bc:	3361      	adds	r3, #97	; 0x61
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	78fb      	ldrb	r3, [r7, #3]
 80020c8:	222c      	movs	r2, #44	; 0x2c
 80020ca:	fb02 f303 	mul.w	r3, r2, r3
 80020ce:	3338      	adds	r3, #56	; 0x38
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	18d1      	adds	r1, r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	461a      	mov	r2, r3
 80020dc:	f003 ff6a 	bl	8005fb4 <USB_HC_StartXfer>
 80020e0:	4603      	mov	r3, r0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop

080020ec <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f003 fc8d 	bl	8005a22 <USB_GetMode>
 8002108:	4603      	mov	r3, r0
 800210a:	2b01      	cmp	r3, #1
 800210c:	f040 80f6 	bne.w	80022fc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f003 fc71 	bl	80059fc <USB_ReadInterrupts>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80ec 	beq.w	80022fa <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f003 fc68 	bl	80059fc <USB_ReadInterrupts>
 800212c:	4603      	mov	r3, r0
 800212e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002132:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002136:	d104      	bne.n	8002142 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002140:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f003 fc58 	bl	80059fc <USB_ReadInterrupts>
 800214c:	4603      	mov	r3, r0
 800214e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002156:	d104      	bne.n	8002162 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002160:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f003 fc48 	bl	80059fc <USB_ReadInterrupts>
 800216c:	4603      	mov	r3, r0
 800216e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002172:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002176:	d104      	bne.n	8002182 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002180:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f003 fc38 	bl	80059fc <USB_ReadInterrupts>
 800218c:	4603      	mov	r3, r0
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b02      	cmp	r3, #2
 8002194:	d103      	bne.n	800219e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2202      	movs	r2, #2
 800219c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f003 fc2a 	bl	80059fc <USB_ReadInterrupts>
 80021a8:	4603      	mov	r3, r0
 80021aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021b2:	d11c      	bne.n	80021ee <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80021bc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10f      	bne.n	80021ee <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80021ce:	2110      	movs	r1, #16
 80021d0:	6938      	ldr	r0, [r7, #16]
 80021d2:	f003 fb39 	bl	8005848 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80021d6:	6938      	ldr	r0, [r7, #16]
 80021d8:	f003 fb5a 	bl	8005890 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2101      	movs	r1, #1
 80021e2:	4618      	mov	r0, r3
 80021e4:	f003 fd12 	bl	8005c0c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f006 f9e5 	bl	80085b8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f003 fc02 	bl	80059fc <USB_ReadInterrupts>
 80021f8:	4603      	mov	r3, r0
 80021fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002202:	d102      	bne.n	800220a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f001 fa03 	bl	8003610 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f003 fbf4 	bl	80059fc <USB_ReadInterrupts>
 8002214:	4603      	mov	r3, r0
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b08      	cmp	r3, #8
 800221c:	d106      	bne.n	800222c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f006 f9ae 	bl	8008580 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2208      	movs	r2, #8
 800222a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f003 fbe3 	bl	80059fc <USB_ReadInterrupts>
 8002236:	4603      	mov	r3, r0
 8002238:	f003 0310 	and.w	r3, r3, #16
 800223c:	2b10      	cmp	r3, #16
 800223e:	d101      	bne.n	8002244 <HAL_HCD_IRQHandler+0x158>
 8002240:	2301      	movs	r3, #1
 8002242:	e000      	b.n	8002246 <HAL_HCD_IRQHandler+0x15a>
 8002244:	2300      	movs	r3, #0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d012      	beq.n	8002270 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	699a      	ldr	r2, [r3, #24]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0210 	bic.w	r2, r2, #16
 8002258:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f001 f906 	bl	800346c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699a      	ldr	r2, [r3, #24]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0210 	orr.w	r2, r2, #16
 800226e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f003 fbc1 	bl	80059fc <USB_ReadInterrupts>
 800227a:	4603      	mov	r3, r0
 800227c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002280:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002284:	d13a      	bne.n	80022fc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f003 ffd4 	bl	8006238 <USB_HC_ReadInterrupt>
 8002290:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	e025      	b.n	80022e4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	fa22 f303 	lsr.w	r3, r2, r3
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d018      	beq.n	80022de <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	015a      	lsls	r2, r3, #5
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4413      	add	r3, r2
 80022b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022c2:	d106      	bne.n	80022d2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	4619      	mov	r1, r3
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f8ab 	bl	8002426 <HCD_HC_IN_IRQHandler>
 80022d0:	e005      	b.n	80022de <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	4619      	mov	r1, r3
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 fcc6 	bl	8002c6a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	3301      	adds	r3, #1
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d3d4      	bcc.n	8002298 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022f6:	615a      	str	r2, [r3, #20]
 80022f8:	e000      	b.n	80022fc <HAL_HCD_IRQHandler+0x210>
      return;
 80022fa:	bf00      	nop
    }
  }
}
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <HAL_HCD_Start+0x16>
 8002314:	2302      	movs	r3, #2
 8002316:	e013      	b.n	8002340 <HAL_HCD_Start+0x3e>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2101      	movs	r1, #1
 8002326:	4618      	mov	r0, r3
 8002328:	f003 fcd4 	bl	8005cd4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f003 fa1a 	bl	800576a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_HCD_Stop+0x16>
 800235a:	2302      	movs	r3, #2
 800235c:	e00d      	b.n	800237a <HAL_HCD_Stop+0x32>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f004 f8ce 	bl	800650c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f003 fc76 	bl	8005c80 <USB_ResetPort>
 8002394:	4603      	mov	r3, r0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	460b      	mov	r3, r1
 80023a8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80023aa:	78fb      	ldrb	r3, [r7, #3]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	212c      	movs	r1, #44	; 0x2c
 80023b0:	fb01 f303 	mul.w	r3, r1, r3
 80023b4:	4413      	add	r3, r2
 80023b6:	3360      	adds	r3, #96	; 0x60
 80023b8:	781b      	ldrb	r3, [r3, #0]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
 80023ce:	460b      	mov	r3, r1
 80023d0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80023d2:	78fb      	ldrb	r3, [r7, #3]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	212c      	movs	r1, #44	; 0x2c
 80023d8:	fb01 f303 	mul.w	r3, r1, r3
 80023dc:	4413      	add	r3, r2
 80023de:	3350      	adds	r3, #80	; 0x50
 80023e0:	681b      	ldr	r3, [r3, #0]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f003 fcba 	bl	8005d74 <USB_GetCurrentFrame>
 8002400:	4603      	mov	r3, r0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f003 fc95 	bl	8005d46 <USB_GetHostSpeed>
 800241c:	4603      	mov	r3, r0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b086      	sub	sp, #24
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	460b      	mov	r3, r1
 8002430:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800243c:	78fb      	ldrb	r3, [r7, #3]
 800243e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	015a      	lsls	r2, r3, #5
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4413      	add	r3, r2
 8002448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b04      	cmp	r3, #4
 8002454:	d119      	bne.n	800248a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	015a      	lsls	r2, r3, #5
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4413      	add	r3, r2
 800245e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002462:	461a      	mov	r2, r3
 8002464:	2304      	movs	r3, #4
 8002466:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	015a      	lsls	r2, r3, #5
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4413      	add	r3, r2
 8002470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	0151      	lsls	r1, r2, #5
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	440a      	add	r2, r1
 800247e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002482:	f043 0302 	orr.w	r3, r3, #2
 8002486:	60d3      	str	r3, [r2, #12]
 8002488:	e101      	b.n	800268e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	015a      	lsls	r2, r3, #5
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	4413      	add	r3, r2
 8002492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024a0:	d12b      	bne.n	80024fa <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	015a      	lsls	r2, r3, #5
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ae:	461a      	mov	r2, r3
 80024b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	212c      	movs	r1, #44	; 0x2c
 80024bc:	fb01 f303 	mul.w	r3, r1, r3
 80024c0:	4413      	add	r3, r2
 80024c2:	3361      	adds	r3, #97	; 0x61
 80024c4:	2207      	movs	r2, #7
 80024c6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	015a      	lsls	r2, r3, #5
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	0151      	lsls	r1, r2, #5
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	440a      	add	r2, r1
 80024de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024e2:	f043 0302 	orr.w	r3, r3, #2
 80024e6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	4611      	mov	r1, r2
 80024f2:	4618      	mov	r0, r3
 80024f4:	f003 feb1 	bl	800625a <USB_HC_Halt>
 80024f8:	e0c9      	b.n	800268e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4413      	add	r3, r2
 8002502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 0320 	and.w	r3, r3, #32
 800250c:	2b20      	cmp	r3, #32
 800250e:	d109      	bne.n	8002524 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4413      	add	r3, r2
 8002518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251c:	461a      	mov	r2, r3
 800251e:	2320      	movs	r3, #32
 8002520:	6093      	str	r3, [r2, #8]
 8002522:	e0b4      	b.n	800268e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	015a      	lsls	r2, r3, #5
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4413      	add	r3, r2
 800252c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b08      	cmp	r3, #8
 8002538:	d133      	bne.n	80025a2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	015a      	lsls	r2, r3, #5
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4413      	add	r3, r2
 8002542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	0151      	lsls	r1, r2, #5
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	440a      	add	r2, r1
 8002550:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	212c      	movs	r1, #44	; 0x2c
 8002560:	fb01 f303 	mul.w	r3, r1, r3
 8002564:	4413      	add	r3, r2
 8002566:	3361      	adds	r3, #97	; 0x61
 8002568:	2205      	movs	r2, #5
 800256a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	015a      	lsls	r2, r3, #5
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4413      	add	r3, r2
 8002574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002578:	461a      	mov	r2, r3
 800257a:	2310      	movs	r3, #16
 800257c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	015a      	lsls	r2, r3, #5
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4413      	add	r3, r2
 8002586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258a:	461a      	mov	r2, r3
 800258c:	2308      	movs	r3, #8
 800258e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	4611      	mov	r1, r2
 800259a:	4618      	mov	r0, r3
 800259c:	f003 fe5d 	bl	800625a <USB_HC_Halt>
 80025a0:	e075      	b.n	800268e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	015a      	lsls	r2, r3, #5
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4413      	add	r3, r2
 80025aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025b8:	d134      	bne.n	8002624 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	015a      	lsls	r2, r3, #5
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	4413      	add	r3, r2
 80025c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	0151      	lsls	r1, r2, #5
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	440a      	add	r2, r1
 80025d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025d4:	f043 0302 	orr.w	r3, r3, #2
 80025d8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	212c      	movs	r1, #44	; 0x2c
 80025e0:	fb01 f303 	mul.w	r3, r1, r3
 80025e4:	4413      	add	r3, r2
 80025e6:	3361      	adds	r3, #97	; 0x61
 80025e8:	2208      	movs	r2, #8
 80025ea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	015a      	lsls	r2, r3, #5
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4413      	add	r3, r2
 80025f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f8:	461a      	mov	r2, r3
 80025fa:	2310      	movs	r3, #16
 80025fc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	015a      	lsls	r2, r3, #5
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4413      	add	r3, r2
 8002606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260a:	461a      	mov	r2, r3
 800260c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002610:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	4611      	mov	r1, r2
 800261c:	4618      	mov	r0, r3
 800261e:	f003 fe1c 	bl	800625a <USB_HC_Halt>
 8002622:	e034      	b.n	800268e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	015a      	lsls	r2, r3, #5
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4413      	add	r3, r2
 800262c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002636:	2b80      	cmp	r3, #128	; 0x80
 8002638:	d129      	bne.n	800268e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	015a      	lsls	r2, r3, #5
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4413      	add	r3, r2
 8002642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	0151      	lsls	r1, r2, #5
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	440a      	add	r2, r1
 8002650:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002654:	f043 0302 	orr.w	r3, r3, #2
 8002658:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	212c      	movs	r1, #44	; 0x2c
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	4413      	add	r3, r2
 8002666:	3361      	adds	r3, #97	; 0x61
 8002668:	2206      	movs	r2, #6
 800266a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	4611      	mov	r1, r2
 8002676:	4618      	mov	r0, r3
 8002678:	f003 fdef 	bl	800625a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4413      	add	r3, r2
 8002684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002688:	461a      	mov	r2, r3
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4413      	add	r3, r2
 8002696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026a4:	d122      	bne.n	80026ec <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	015a      	lsls	r2, r3, #5
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	0151      	lsls	r1, r2, #5
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	440a      	add	r2, r1
 80026bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026c0:	f043 0302 	orr.w	r3, r3, #2
 80026c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	4611      	mov	r1, r2
 80026d0:	4618      	mov	r0, r3
 80026d2:	f003 fdc2 	bl	800625a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	015a      	lsls	r2, r3, #5
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4413      	add	r3, r2
 80026de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e2:	461a      	mov	r2, r3
 80026e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026e8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80026ea:	e2ba      	b.n	8002c62 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b01      	cmp	r3, #1
 8002700:	f040 811b 	bne.w	800293a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d019      	beq.n	8002740 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	212c      	movs	r1, #44	; 0x2c
 8002712:	fb01 f303 	mul.w	r3, r1, r3
 8002716:	4413      	add	r3, r2
 8002718:	3348      	adds	r3, #72	; 0x48
 800271a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	0159      	lsls	r1, r3, #5
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	440b      	add	r3, r1
 8002724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800272e:	1ad2      	subs	r2, r2, r3
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	202c      	movs	r0, #44	; 0x2c
 8002736:	fb00 f303 	mul.w	r3, r0, r3
 800273a:	440b      	add	r3, r1
 800273c:	3350      	adds	r3, #80	; 0x50
 800273e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	212c      	movs	r1, #44	; 0x2c
 8002746:	fb01 f303 	mul.w	r3, r1, r3
 800274a:	4413      	add	r3, r2
 800274c:	3361      	adds	r3, #97	; 0x61
 800274e:	2201      	movs	r2, #1
 8002750:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	212c      	movs	r1, #44	; 0x2c
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	4413      	add	r3, r2
 800275e:	335c      	adds	r3, #92	; 0x5c
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4413      	add	r3, r2
 800276c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002770:	461a      	mov	r2, r3
 8002772:	2301      	movs	r3, #1
 8002774:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	212c      	movs	r1, #44	; 0x2c
 800277c:	fb01 f303 	mul.w	r3, r1, r3
 8002780:	4413      	add	r3, r2
 8002782:	333f      	adds	r3, #63	; 0x3f
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d009      	beq.n	800279e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	212c      	movs	r1, #44	; 0x2c
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	4413      	add	r3, r2
 8002796:	333f      	adds	r3, #63	; 0x3f
 8002798:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800279a:	2b02      	cmp	r3, #2
 800279c:	d121      	bne.n	80027e2 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	015a      	lsls	r2, r3, #5
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4413      	add	r3, r2
 80027a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	0151      	lsls	r1, r2, #5
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	440a      	add	r2, r1
 80027b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027b8:	f043 0302 	orr.w	r3, r3, #2
 80027bc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	4611      	mov	r1, r2
 80027c8:	4618      	mov	r0, r3
 80027ca:	f003 fd46 	bl	800625a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027da:	461a      	mov	r2, r3
 80027dc:	2310      	movs	r3, #16
 80027de:	6093      	str	r3, [r2, #8]
 80027e0:	e066      	b.n	80028b0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	212c      	movs	r1, #44	; 0x2c
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	4413      	add	r3, r2
 80027ee:	333f      	adds	r3, #63	; 0x3f
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d127      	bne.n	8002846 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	015a      	lsls	r2, r3, #5
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	0151      	lsls	r1, r2, #5
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	440a      	add	r2, r1
 800280c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002810:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002814:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	212c      	movs	r1, #44	; 0x2c
 800281c:	fb01 f303 	mul.w	r3, r1, r3
 8002820:	4413      	add	r3, r2
 8002822:	3360      	adds	r3, #96	; 0x60
 8002824:	2201      	movs	r2, #1
 8002826:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	b2d9      	uxtb	r1, r3
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	202c      	movs	r0, #44	; 0x2c
 8002832:	fb00 f303 	mul.w	r3, r0, r3
 8002836:	4413      	add	r3, r2
 8002838:	3360      	adds	r3, #96	; 0x60
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f005 fec8 	bl	80085d4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002844:	e034      	b.n	80028b0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	212c      	movs	r1, #44	; 0x2c
 800284c:	fb01 f303 	mul.w	r3, r1, r3
 8002850:	4413      	add	r3, r2
 8002852:	333f      	adds	r3, #63	; 0x3f
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d12a      	bne.n	80028b0 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	212c      	movs	r1, #44	; 0x2c
 8002860:	fb01 f303 	mul.w	r3, r1, r3
 8002864:	4413      	add	r3, r2
 8002866:	3360      	adds	r3, #96	; 0x60
 8002868:	2201      	movs	r2, #1
 800286a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	212c      	movs	r1, #44	; 0x2c
 8002872:	fb01 f303 	mul.w	r3, r1, r3
 8002876:	4413      	add	r3, r2
 8002878:	3354      	adds	r3, #84	; 0x54
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	f083 0301 	eor.w	r3, r3, #1
 8002880:	b2d8      	uxtb	r0, r3
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	212c      	movs	r1, #44	; 0x2c
 8002888:	fb01 f303 	mul.w	r3, r1, r3
 800288c:	4413      	add	r3, r2
 800288e:	3354      	adds	r3, #84	; 0x54
 8002890:	4602      	mov	r2, r0
 8002892:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	b2d9      	uxtb	r1, r3
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	202c      	movs	r0, #44	; 0x2c
 800289e:	fb00 f303 	mul.w	r3, r0, r3
 80028a2:	4413      	add	r3, r2
 80028a4:	3360      	adds	r3, #96	; 0x60
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f005 fe92 	bl	80085d4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d12b      	bne.n	8002910 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	212c      	movs	r1, #44	; 0x2c
 80028be:	fb01 f303 	mul.w	r3, r1, r3
 80028c2:	4413      	add	r3, r2
 80028c4:	3348      	adds	r3, #72	; 0x48
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	202c      	movs	r0, #44	; 0x2c
 80028ce:	fb00 f202 	mul.w	r2, r0, r2
 80028d2:	440a      	add	r2, r1
 80028d4:	3240      	adds	r2, #64	; 0x40
 80028d6:	8812      	ldrh	r2, [r2, #0]
 80028d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 81be 	beq.w	8002c62 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	212c      	movs	r1, #44	; 0x2c
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	3354      	adds	r3, #84	; 0x54
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	f083 0301 	eor.w	r3, r3, #1
 80028fa:	b2d8      	uxtb	r0, r3
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	212c      	movs	r1, #44	; 0x2c
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	4413      	add	r3, r2
 8002908:	3354      	adds	r3, #84	; 0x54
 800290a:	4602      	mov	r2, r0
 800290c:	701a      	strb	r2, [r3, #0]
}
 800290e:	e1a8      	b.n	8002c62 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	212c      	movs	r1, #44	; 0x2c
 8002916:	fb01 f303 	mul.w	r3, r1, r3
 800291a:	4413      	add	r3, r2
 800291c:	3354      	adds	r3, #84	; 0x54
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	f083 0301 	eor.w	r3, r3, #1
 8002924:	b2d8      	uxtb	r0, r3
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	212c      	movs	r1, #44	; 0x2c
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	4413      	add	r3, r2
 8002932:	3354      	adds	r3, #84	; 0x54
 8002934:	4602      	mov	r2, r0
 8002936:	701a      	strb	r2, [r3, #0]
}
 8002938:	e193      	b.n	8002c62 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	015a      	lsls	r2, r3, #5
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	4413      	add	r3, r2
 8002942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b02      	cmp	r3, #2
 800294e:	f040 8106 	bne.w	8002b5e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	015a      	lsls	r2, r3, #5
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4413      	add	r3, r2
 800295a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	0151      	lsls	r1, r2, #5
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	440a      	add	r2, r1
 8002968:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800296c:	f023 0302 	bic.w	r3, r3, #2
 8002970:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	212c      	movs	r1, #44	; 0x2c
 8002978:	fb01 f303 	mul.w	r3, r1, r3
 800297c:	4413      	add	r3, r2
 800297e:	3361      	adds	r3, #97	; 0x61
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d109      	bne.n	800299a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	212c      	movs	r1, #44	; 0x2c
 800298c:	fb01 f303 	mul.w	r3, r1, r3
 8002990:	4413      	add	r3, r2
 8002992:	3360      	adds	r3, #96	; 0x60
 8002994:	2201      	movs	r2, #1
 8002996:	701a      	strb	r2, [r3, #0]
 8002998:	e0c9      	b.n	8002b2e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	212c      	movs	r1, #44	; 0x2c
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	4413      	add	r3, r2
 80029a6:	3361      	adds	r3, #97	; 0x61
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b05      	cmp	r3, #5
 80029ac:	d109      	bne.n	80029c2 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	3360      	adds	r3, #96	; 0x60
 80029bc:	2205      	movs	r2, #5
 80029be:	701a      	strb	r2, [r3, #0]
 80029c0:	e0b5      	b.n	8002b2e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	212c      	movs	r1, #44	; 0x2c
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	4413      	add	r3, r2
 80029ce:	3361      	adds	r3, #97	; 0x61
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b06      	cmp	r3, #6
 80029d4:	d009      	beq.n	80029ea <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	212c      	movs	r1, #44	; 0x2c
 80029dc:	fb01 f303 	mul.w	r3, r1, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	3361      	adds	r3, #97	; 0x61
 80029e4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d150      	bne.n	8002a8c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	212c      	movs	r1, #44	; 0x2c
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	4413      	add	r3, r2
 80029f6:	335c      	adds	r3, #92	; 0x5c
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	1c5a      	adds	r2, r3, #1
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	202c      	movs	r0, #44	; 0x2c
 8002a02:	fb00 f303 	mul.w	r3, r0, r3
 8002a06:	440b      	add	r3, r1
 8002a08:	335c      	adds	r3, #92	; 0x5c
 8002a0a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	212c      	movs	r1, #44	; 0x2c
 8002a12:	fb01 f303 	mul.w	r3, r1, r3
 8002a16:	4413      	add	r3, r2
 8002a18:	335c      	adds	r3, #92	; 0x5c
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d912      	bls.n	8002a46 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	212c      	movs	r1, #44	; 0x2c
 8002a26:	fb01 f303 	mul.w	r3, r1, r3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	335c      	adds	r3, #92	; 0x5c
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	212c      	movs	r1, #44	; 0x2c
 8002a38:	fb01 f303 	mul.w	r3, r1, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3360      	adds	r3, #96	; 0x60
 8002a40:	2204      	movs	r2, #4
 8002a42:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a44:	e073      	b.n	8002b2e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	212c      	movs	r1, #44	; 0x2c
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	4413      	add	r3, r2
 8002a52:	3360      	adds	r3, #96	; 0x60
 8002a54:	2202      	movs	r2, #2
 8002a56:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a6e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a76:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	015a      	lsls	r2, r3, #5
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a84:	461a      	mov	r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a8a:	e050      	b.n	8002b2e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	212c      	movs	r1, #44	; 0x2c
 8002a92:	fb01 f303 	mul.w	r3, r1, r3
 8002a96:	4413      	add	r3, r2
 8002a98:	3361      	adds	r3, #97	; 0x61
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d122      	bne.n	8002ae6 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	212c      	movs	r1, #44	; 0x2c
 8002aa6:	fb01 f303 	mul.w	r3, r1, r3
 8002aaa:	4413      	add	r3, r2
 8002aac:	3360      	adds	r3, #96	; 0x60
 8002aae:	2202      	movs	r2, #2
 8002ab0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	015a      	lsls	r2, r3, #5
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ac8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ad0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	015a      	lsls	r2, r3, #5
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4413      	add	r3, r2
 8002ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ade:	461a      	mov	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	6013      	str	r3, [r2, #0]
 8002ae4:	e023      	b.n	8002b2e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	212c      	movs	r1, #44	; 0x2c
 8002aec:	fb01 f303 	mul.w	r3, r1, r3
 8002af0:	4413      	add	r3, r2
 8002af2:	3361      	adds	r3, #97	; 0x61
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b07      	cmp	r3, #7
 8002af8:	d119      	bne.n	8002b2e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	212c      	movs	r1, #44	; 0x2c
 8002b00:	fb01 f303 	mul.w	r3, r1, r3
 8002b04:	4413      	add	r3, r2
 8002b06:	335c      	adds	r3, #92	; 0x5c
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	1c5a      	adds	r2, r3, #1
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	202c      	movs	r0, #44	; 0x2c
 8002b12:	fb00 f303 	mul.w	r3, r0, r3
 8002b16:	440b      	add	r3, r1
 8002b18:	335c      	adds	r3, #92	; 0x5c
 8002b1a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	212c      	movs	r1, #44	; 0x2c
 8002b22:	fb01 f303 	mul.w	r3, r1, r3
 8002b26:	4413      	add	r3, r2
 8002b28:	3360      	adds	r3, #96	; 0x60
 8002b2a:	2204      	movs	r2, #4
 8002b2c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	b2d9      	uxtb	r1, r3
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	202c      	movs	r0, #44	; 0x2c
 8002b4a:	fb00 f303 	mul.w	r3, r0, r3
 8002b4e:	4413      	add	r3, r2
 8002b50:	3360      	adds	r3, #96	; 0x60
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	461a      	mov	r2, r3
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f005 fd3c 	bl	80085d4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b5c:	e081      	b.n	8002c62 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 0310 	and.w	r3, r3, #16
 8002b70:	2b10      	cmp	r3, #16
 8002b72:	d176      	bne.n	8002c62 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	212c      	movs	r1, #44	; 0x2c
 8002b7a:	fb01 f303 	mul.w	r3, r1, r3
 8002b7e:	4413      	add	r3, r2
 8002b80:	333f      	adds	r3, #63	; 0x3f
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d121      	bne.n	8002bcc <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	212c      	movs	r1, #44	; 0x2c
 8002b8e:	fb01 f303 	mul.w	r3, r1, r3
 8002b92:	4413      	add	r3, r2
 8002b94:	335c      	adds	r3, #92	; 0x5c
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	015a      	lsls	r2, r3, #5
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	0151      	lsls	r1, r2, #5
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	440a      	add	r2, r1
 8002bb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bb4:	f043 0302 	orr.w	r3, r3, #2
 8002bb8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f003 fb48 	bl	800625a <USB_HC_Halt>
 8002bca:	e041      	b.n	8002c50 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	212c      	movs	r1, #44	; 0x2c
 8002bd2:	fb01 f303 	mul.w	r3, r1, r3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	333f      	adds	r3, #63	; 0x3f
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d009      	beq.n	8002bf4 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	212c      	movs	r1, #44	; 0x2c
 8002be6:	fb01 f303 	mul.w	r3, r1, r3
 8002bea:	4413      	add	r3, r2
 8002bec:	333f      	adds	r3, #63	; 0x3f
 8002bee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d12d      	bne.n	8002c50 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	212c      	movs	r1, #44	; 0x2c
 8002bfa:	fb01 f303 	mul.w	r3, r1, r3
 8002bfe:	4413      	add	r3, r2
 8002c00:	335c      	adds	r3, #92	; 0x5c
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d120      	bne.n	8002c50 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	212c      	movs	r1, #44	; 0x2c
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	3361      	adds	r3, #97	; 0x61
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	015a      	lsls	r2, r3, #5
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	4413      	add	r3, r2
 8002c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	0151      	lsls	r1, r2, #5
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	440a      	add	r2, r1
 8002c36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c3a:	f043 0302 	orr.w	r3, r3, #2
 8002c3e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f003 fb05 	bl	800625a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	2310      	movs	r3, #16
 8002c60:	6093      	str	r3, [r2, #8]
}
 8002c62:	bf00      	nop
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b088      	sub	sp, #32
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	460b      	mov	r3, r1
 8002c74:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002c80:	78fb      	ldrb	r3, [r7, #3]
 8002c82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 0304 	and.w	r3, r3, #4
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d119      	bne.n	8002cce <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	015a      	lsls	r2, r3, #5
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	2304      	movs	r3, #4
 8002caa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	015a      	lsls	r2, r3, #5
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	0151      	lsls	r1, r2, #5
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	440a      	add	r2, r1
 8002cc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cc6:	f043 0302 	orr.w	r3, r3, #2
 8002cca:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002ccc:	e3ca      	b.n	8003464 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	015a      	lsls	r2, r3, #5
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 0320 	and.w	r3, r3, #32
 8002ce0:	2b20      	cmp	r3, #32
 8002ce2:	d13e      	bne.n	8002d62 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	015a      	lsls	r2, r3, #5
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	4413      	add	r3, r2
 8002cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	2320      	movs	r3, #32
 8002cf4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	212c      	movs	r1, #44	; 0x2c
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	333d      	adds	r3, #61	; 0x3d
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	f040 83ac 	bne.w	8003464 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	212c      	movs	r1, #44	; 0x2c
 8002d12:	fb01 f303 	mul.w	r3, r1, r3
 8002d16:	4413      	add	r3, r2
 8002d18:	333d      	adds	r3, #61	; 0x3d
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	212c      	movs	r1, #44	; 0x2c
 8002d24:	fb01 f303 	mul.w	r3, r1, r3
 8002d28:	4413      	add	r3, r2
 8002d2a:	3360      	adds	r3, #96	; 0x60
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	015a      	lsls	r2, r3, #5
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	4413      	add	r3, r2
 8002d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	0151      	lsls	r1, r2, #5
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	440a      	add	r2, r1
 8002d46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d4a:	f043 0302 	orr.w	r3, r3, #2
 8002d4e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	4611      	mov	r1, r2
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f003 fa7d 	bl	800625a <USB_HC_Halt>
}
 8002d60:	e380      	b.n	8003464 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d78:	d122      	bne.n	8002dc0 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	015a      	lsls	r2, r3, #5
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	0151      	lsls	r1, r2, #5
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	440a      	add	r2, r1
 8002d90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d94:	f043 0302 	orr.w	r3, r3, #2
 8002d98:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	4611      	mov	r1, r2
 8002da4:	4618      	mov	r0, r3
 8002da6:	f003 fa58 	bl	800625a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db6:	461a      	mov	r2, r3
 8002db8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dbc:	6093      	str	r3, [r2, #8]
}
 8002dbe:	e351      	b.n	8003464 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	015a      	lsls	r2, r3, #5
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d150      	bne.n	8002e78 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	212c      	movs	r1, #44	; 0x2c
 8002ddc:	fb01 f303 	mul.w	r3, r1, r3
 8002de0:	4413      	add	r3, r2
 8002de2:	335c      	adds	r3, #92	; 0x5c
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	015a      	lsls	r2, r3, #5
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	4413      	add	r3, r2
 8002df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfa:	2b40      	cmp	r3, #64	; 0x40
 8002dfc:	d111      	bne.n	8002e22 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	212c      	movs	r1, #44	; 0x2c
 8002e04:	fb01 f303 	mul.w	r3, r1, r3
 8002e08:	4413      	add	r3, r2
 8002e0a:	333d      	adds	r3, #61	; 0x3d
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	015a      	lsls	r2, r3, #5
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	4413      	add	r3, r2
 8002e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	2340      	movs	r3, #64	; 0x40
 8002e20:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	015a      	lsls	r2, r3, #5
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	0151      	lsls	r1, r2, #5
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	440a      	add	r2, r1
 8002e38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e3c:	f043 0302 	orr.w	r3, r3, #2
 8002e40:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f003 fa04 	bl	800625a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	015a      	lsls	r2, r3, #5
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e5e:	461a      	mov	r2, r3
 8002e60:	2301      	movs	r3, #1
 8002e62:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	212c      	movs	r1, #44	; 0x2c
 8002e6a:	fb01 f303 	mul.w	r3, r1, r3
 8002e6e:	4413      	add	r3, r2
 8002e70:	3361      	adds	r3, #97	; 0x61
 8002e72:	2201      	movs	r2, #1
 8002e74:	701a      	strb	r2, [r3, #0]
}
 8002e76:	e2f5      	b.n	8003464 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8a:	2b40      	cmp	r3, #64	; 0x40
 8002e8c:	d13c      	bne.n	8002f08 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	212c      	movs	r1, #44	; 0x2c
 8002e94:	fb01 f303 	mul.w	r3, r1, r3
 8002e98:	4413      	add	r3, r2
 8002e9a:	3361      	adds	r3, #97	; 0x61
 8002e9c:	2204      	movs	r2, #4
 8002e9e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	212c      	movs	r1, #44	; 0x2c
 8002ea6:	fb01 f303 	mul.w	r3, r1, r3
 8002eaa:	4413      	add	r3, r2
 8002eac:	333d      	adds	r3, #61	; 0x3d
 8002eae:	2201      	movs	r2, #1
 8002eb0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	212c      	movs	r1, #44	; 0x2c
 8002eb8:	fb01 f303 	mul.w	r3, r1, r3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	335c      	adds	r3, #92	; 0x5c
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	0151      	lsls	r1, r2, #5
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	440a      	add	r2, r1
 8002eda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ede:	f043 0302 	orr.w	r3, r3, #2
 8002ee2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	4611      	mov	r1, r2
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f003 f9b3 	bl	800625a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	015a      	lsls	r2, r3, #5
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	4413      	add	r3, r2
 8002efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f00:	461a      	mov	r2, r3
 8002f02:	2340      	movs	r3, #64	; 0x40
 8002f04:	6093      	str	r3, [r2, #8]
}
 8002f06:	e2ad      	b.n	8003464 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	015a      	lsls	r2, r3, #5
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	4413      	add	r3, r2
 8002f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d12a      	bne.n	8002f74 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	015a      	lsls	r2, r3, #5
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	4413      	add	r3, r2
 8002f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	2308      	movs	r3, #8
 8002f2e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	0151      	lsls	r1, r2, #5
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	440a      	add	r2, r1
 8002f46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f4a:	f043 0302 	orr.w	r3, r3, #2
 8002f4e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	4611      	mov	r1, r2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f003 f97d 	bl	800625a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	212c      	movs	r1, #44	; 0x2c
 8002f66:	fb01 f303 	mul.w	r3, r1, r3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3361      	adds	r3, #97	; 0x61
 8002f6e:	2205      	movs	r2, #5
 8002f70:	701a      	strb	r2, [r3, #0]
}
 8002f72:	e277      	b.n	8003464 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	015a      	lsls	r2, r3, #5
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 0310 	and.w	r3, r3, #16
 8002f86:	2b10      	cmp	r3, #16
 8002f88:	d150      	bne.n	800302c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	212c      	movs	r1, #44	; 0x2c
 8002f90:	fb01 f303 	mul.w	r3, r1, r3
 8002f94:	4413      	add	r3, r2
 8002f96:	335c      	adds	r3, #92	; 0x5c
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	212c      	movs	r1, #44	; 0x2c
 8002fa2:	fb01 f303 	mul.w	r3, r1, r3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3361      	adds	r3, #97	; 0x61
 8002faa:	2203      	movs	r2, #3
 8002fac:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	212c      	movs	r1, #44	; 0x2c
 8002fb4:	fb01 f303 	mul.w	r3, r1, r3
 8002fb8:	4413      	add	r3, r2
 8002fba:	333d      	adds	r3, #61	; 0x3d
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d112      	bne.n	8002fe8 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	212c      	movs	r1, #44	; 0x2c
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	4413      	add	r3, r2
 8002fce:	333c      	adds	r3, #60	; 0x3c
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d108      	bne.n	8002fe8 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	212c      	movs	r1, #44	; 0x2c
 8002fdc:	fb01 f303 	mul.w	r3, r1, r3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	333d      	adds	r3, #61	; 0x3d
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	0151      	lsls	r1, r2, #5
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	440a      	add	r2, r1
 8002ffe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003002:	f043 0302 	orr.w	r3, r3, #2
 8003006:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	4611      	mov	r1, r2
 8003012:	4618      	mov	r0, r3
 8003014:	f003 f921 	bl	800625a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	4413      	add	r3, r2
 8003020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003024:	461a      	mov	r2, r3
 8003026:	2310      	movs	r3, #16
 8003028:	6093      	str	r3, [r2, #8]
}
 800302a:	e21b      	b.n	8003464 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	015a      	lsls	r2, r3, #5
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	4413      	add	r3, r2
 8003034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303e:	2b80      	cmp	r3, #128	; 0x80
 8003040:	d174      	bne.n	800312c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d121      	bne.n	800308e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	212c      	movs	r1, #44	; 0x2c
 8003050:	fb01 f303 	mul.w	r3, r1, r3
 8003054:	4413      	add	r3, r2
 8003056:	3361      	adds	r3, #97	; 0x61
 8003058:	2206      	movs	r2, #6
 800305a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	4413      	add	r3, r2
 8003064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	0151      	lsls	r1, r2, #5
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	440a      	add	r2, r1
 8003072:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003076:	f043 0302 	orr.w	r3, r3, #2
 800307a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	4611      	mov	r1, r2
 8003086:	4618      	mov	r0, r3
 8003088:	f003 f8e7 	bl	800625a <USB_HC_Halt>
 800308c:	e044      	b.n	8003118 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	212c      	movs	r1, #44	; 0x2c
 8003094:	fb01 f303 	mul.w	r3, r1, r3
 8003098:	4413      	add	r3, r2
 800309a:	335c      	adds	r3, #92	; 0x5c
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	1c5a      	adds	r2, r3, #1
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	202c      	movs	r0, #44	; 0x2c
 80030a6:	fb00 f303 	mul.w	r3, r0, r3
 80030aa:	440b      	add	r3, r1
 80030ac:	335c      	adds	r3, #92	; 0x5c
 80030ae:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	212c      	movs	r1, #44	; 0x2c
 80030b6:	fb01 f303 	mul.w	r3, r1, r3
 80030ba:	4413      	add	r3, r2
 80030bc:	335c      	adds	r3, #92	; 0x5c
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d920      	bls.n	8003106 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	212c      	movs	r1, #44	; 0x2c
 80030ca:	fb01 f303 	mul.w	r3, r1, r3
 80030ce:	4413      	add	r3, r2
 80030d0:	335c      	adds	r3, #92	; 0x5c
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	212c      	movs	r1, #44	; 0x2c
 80030dc:	fb01 f303 	mul.w	r3, r1, r3
 80030e0:	4413      	add	r3, r2
 80030e2:	3360      	adds	r3, #96	; 0x60
 80030e4:	2204      	movs	r2, #4
 80030e6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	b2d9      	uxtb	r1, r3
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	202c      	movs	r0, #44	; 0x2c
 80030f2:	fb00 f303 	mul.w	r3, r0, r3
 80030f6:	4413      	add	r3, r2
 80030f8:	3360      	adds	r3, #96	; 0x60
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f005 fa68 	bl	80085d4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003104:	e008      	b.n	8003118 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	212c      	movs	r1, #44	; 0x2c
 800310c:	fb01 f303 	mul.w	r3, r1, r3
 8003110:	4413      	add	r3, r2
 8003112:	3360      	adds	r3, #96	; 0x60
 8003114:	2202      	movs	r2, #2
 8003116:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	4413      	add	r3, r2
 8003120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003124:	461a      	mov	r2, r3
 8003126:	2380      	movs	r3, #128	; 0x80
 8003128:	6093      	str	r3, [r2, #8]
}
 800312a:	e19b      	b.n	8003464 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	4413      	add	r3, r2
 8003134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800313e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003142:	d134      	bne.n	80031ae <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	015a      	lsls	r2, r3, #5
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	4413      	add	r3, r2
 800314c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	0151      	lsls	r1, r2, #5
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	440a      	add	r2, r1
 800315a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800315e:	f043 0302 	orr.w	r3, r3, #2
 8003162:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	4611      	mov	r1, r2
 800316e:	4618      	mov	r0, r3
 8003170:	f003 f873 	bl	800625a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	4413      	add	r3, r2
 800317c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003180:	461a      	mov	r2, r3
 8003182:	2310      	movs	r3, #16
 8003184:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	4413      	add	r3, r2
 800318e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003192:	461a      	mov	r2, r3
 8003194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003198:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	212c      	movs	r1, #44	; 0x2c
 80031a0:	fb01 f303 	mul.w	r3, r1, r3
 80031a4:	4413      	add	r3, r2
 80031a6:	3361      	adds	r3, #97	; 0x61
 80031a8:	2208      	movs	r2, #8
 80031aa:	701a      	strb	r2, [r3, #0]
}
 80031ac:	e15a      	b.n	8003464 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	015a      	lsls	r2, r3, #5
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	f040 814f 	bne.w	8003464 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	015a      	lsls	r2, r3, #5
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	4413      	add	r3, r2
 80031ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	0151      	lsls	r1, r2, #5
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	440a      	add	r2, r1
 80031dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031e0:	f023 0302 	bic.w	r3, r3, #2
 80031e4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	212c      	movs	r1, #44	; 0x2c
 80031ec:	fb01 f303 	mul.w	r3, r1, r3
 80031f0:	4413      	add	r3, r2
 80031f2:	3361      	adds	r3, #97	; 0x61
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d17d      	bne.n	80032f6 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	212c      	movs	r1, #44	; 0x2c
 8003200:	fb01 f303 	mul.w	r3, r1, r3
 8003204:	4413      	add	r3, r2
 8003206:	3360      	adds	r3, #96	; 0x60
 8003208:	2201      	movs	r2, #1
 800320a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	212c      	movs	r1, #44	; 0x2c
 8003212:	fb01 f303 	mul.w	r3, r1, r3
 8003216:	4413      	add	r3, r2
 8003218:	333f      	adds	r3, #63	; 0x3f
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b02      	cmp	r3, #2
 800321e:	d00a      	beq.n	8003236 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	212c      	movs	r1, #44	; 0x2c
 8003226:	fb01 f303 	mul.w	r3, r1, r3
 800322a:	4413      	add	r3, r2
 800322c:	333f      	adds	r3, #63	; 0x3f
 800322e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003230:	2b03      	cmp	r3, #3
 8003232:	f040 8100 	bne.w	8003436 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d113      	bne.n	8003266 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	212c      	movs	r1, #44	; 0x2c
 8003244:	fb01 f303 	mul.w	r3, r1, r3
 8003248:	4413      	add	r3, r2
 800324a:	3355      	adds	r3, #85	; 0x55
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	f083 0301 	eor.w	r3, r3, #1
 8003252:	b2d8      	uxtb	r0, r3
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	212c      	movs	r1, #44	; 0x2c
 800325a:	fb01 f303 	mul.w	r3, r1, r3
 800325e:	4413      	add	r3, r2
 8003260:	3355      	adds	r3, #85	; 0x55
 8003262:	4602      	mov	r2, r0
 8003264:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	2b01      	cmp	r3, #1
 800326c:	f040 80e3 	bne.w	8003436 <HCD_HC_OUT_IRQHandler+0x7cc>
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	212c      	movs	r1, #44	; 0x2c
 8003276:	fb01 f303 	mul.w	r3, r1, r3
 800327a:	4413      	add	r3, r2
 800327c:	334c      	adds	r3, #76	; 0x4c
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 80d8 	beq.w	8003436 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	212c      	movs	r1, #44	; 0x2c
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	4413      	add	r3, r2
 8003292:	334c      	adds	r3, #76	; 0x4c
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	202c      	movs	r0, #44	; 0x2c
 800329c:	fb00 f202 	mul.w	r2, r0, r2
 80032a0:	440a      	add	r2, r1
 80032a2:	3240      	adds	r2, #64	; 0x40
 80032a4:	8812      	ldrh	r2, [r2, #0]
 80032a6:	4413      	add	r3, r2
 80032a8:	3b01      	subs	r3, #1
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	202c      	movs	r0, #44	; 0x2c
 80032b0:	fb00 f202 	mul.w	r2, r0, r2
 80032b4:	440a      	add	r2, r1
 80032b6:	3240      	adds	r2, #64	; 0x40
 80032b8:	8812      	ldrh	r2, [r2, #0]
 80032ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80032be:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 80b5 	beq.w	8003436 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	212c      	movs	r1, #44	; 0x2c
 80032d2:	fb01 f303 	mul.w	r3, r1, r3
 80032d6:	4413      	add	r3, r2
 80032d8:	3355      	adds	r3, #85	; 0x55
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	f083 0301 	eor.w	r3, r3, #1
 80032e0:	b2d8      	uxtb	r0, r3
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	212c      	movs	r1, #44	; 0x2c
 80032e8:	fb01 f303 	mul.w	r3, r1, r3
 80032ec:	4413      	add	r3, r2
 80032ee:	3355      	adds	r3, #85	; 0x55
 80032f0:	4602      	mov	r2, r0
 80032f2:	701a      	strb	r2, [r3, #0]
 80032f4:	e09f      	b.n	8003436 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	212c      	movs	r1, #44	; 0x2c
 80032fc:	fb01 f303 	mul.w	r3, r1, r3
 8003300:	4413      	add	r3, r2
 8003302:	3361      	adds	r3, #97	; 0x61
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b03      	cmp	r3, #3
 8003308:	d109      	bne.n	800331e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	212c      	movs	r1, #44	; 0x2c
 8003310:	fb01 f303 	mul.w	r3, r1, r3
 8003314:	4413      	add	r3, r2
 8003316:	3360      	adds	r3, #96	; 0x60
 8003318:	2202      	movs	r2, #2
 800331a:	701a      	strb	r2, [r3, #0]
 800331c:	e08b      	b.n	8003436 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	212c      	movs	r1, #44	; 0x2c
 8003324:	fb01 f303 	mul.w	r3, r1, r3
 8003328:	4413      	add	r3, r2
 800332a:	3361      	adds	r3, #97	; 0x61
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	2b04      	cmp	r3, #4
 8003330:	d109      	bne.n	8003346 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	212c      	movs	r1, #44	; 0x2c
 8003338:	fb01 f303 	mul.w	r3, r1, r3
 800333c:	4413      	add	r3, r2
 800333e:	3360      	adds	r3, #96	; 0x60
 8003340:	2202      	movs	r2, #2
 8003342:	701a      	strb	r2, [r3, #0]
 8003344:	e077      	b.n	8003436 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	212c      	movs	r1, #44	; 0x2c
 800334c:	fb01 f303 	mul.w	r3, r1, r3
 8003350:	4413      	add	r3, r2
 8003352:	3361      	adds	r3, #97	; 0x61
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b05      	cmp	r3, #5
 8003358:	d109      	bne.n	800336e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	212c      	movs	r1, #44	; 0x2c
 8003360:	fb01 f303 	mul.w	r3, r1, r3
 8003364:	4413      	add	r3, r2
 8003366:	3360      	adds	r3, #96	; 0x60
 8003368:	2205      	movs	r2, #5
 800336a:	701a      	strb	r2, [r3, #0]
 800336c:	e063      	b.n	8003436 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	212c      	movs	r1, #44	; 0x2c
 8003374:	fb01 f303 	mul.w	r3, r1, r3
 8003378:	4413      	add	r3, r2
 800337a:	3361      	adds	r3, #97	; 0x61
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	2b06      	cmp	r3, #6
 8003380:	d009      	beq.n	8003396 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	212c      	movs	r1, #44	; 0x2c
 8003388:	fb01 f303 	mul.w	r3, r1, r3
 800338c:	4413      	add	r3, r2
 800338e:	3361      	adds	r3, #97	; 0x61
 8003390:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003392:	2b08      	cmp	r3, #8
 8003394:	d14f      	bne.n	8003436 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	212c      	movs	r1, #44	; 0x2c
 800339c:	fb01 f303 	mul.w	r3, r1, r3
 80033a0:	4413      	add	r3, r2
 80033a2:	335c      	adds	r3, #92	; 0x5c
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	202c      	movs	r0, #44	; 0x2c
 80033ae:	fb00 f303 	mul.w	r3, r0, r3
 80033b2:	440b      	add	r3, r1
 80033b4:	335c      	adds	r3, #92	; 0x5c
 80033b6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	212c      	movs	r1, #44	; 0x2c
 80033be:	fb01 f303 	mul.w	r3, r1, r3
 80033c2:	4413      	add	r3, r2
 80033c4:	335c      	adds	r3, #92	; 0x5c
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d912      	bls.n	80033f2 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	212c      	movs	r1, #44	; 0x2c
 80033d2:	fb01 f303 	mul.w	r3, r1, r3
 80033d6:	4413      	add	r3, r2
 80033d8:	335c      	adds	r3, #92	; 0x5c
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	212c      	movs	r1, #44	; 0x2c
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	4413      	add	r3, r2
 80033ea:	3360      	adds	r3, #96	; 0x60
 80033ec:	2204      	movs	r2, #4
 80033ee:	701a      	strb	r2, [r3, #0]
 80033f0:	e021      	b.n	8003436 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	212c      	movs	r1, #44	; 0x2c
 80033f8:	fb01 f303 	mul.w	r3, r1, r3
 80033fc:	4413      	add	r3, r2
 80033fe:	3360      	adds	r3, #96	; 0x60
 8003400:	2202      	movs	r2, #2
 8003402:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	015a      	lsls	r2, r3, #5
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	4413      	add	r3, r2
 800340c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800341a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003422:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	015a      	lsls	r2, r3, #5
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	4413      	add	r3, r2
 800342c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003430:	461a      	mov	r2, r3
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	4413      	add	r3, r2
 800343e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003442:	461a      	mov	r2, r3
 8003444:	2302      	movs	r3, #2
 8003446:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	b2d9      	uxtb	r1, r3
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	202c      	movs	r0, #44	; 0x2c
 8003452:	fb00 f303 	mul.w	r3, r0, r3
 8003456:	4413      	add	r3, r2
 8003458:	3360      	adds	r3, #96	; 0x60
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f005 f8b8 	bl	80085d4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003464:	bf00      	nop
 8003466:	3720      	adds	r7, #32
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08a      	sub	sp, #40	; 0x28
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	f003 030f 	and.w	r3, r3, #15
 800348c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	0c5b      	lsrs	r3, r3, #17
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	091b      	lsrs	r3, r3, #4
 800349c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034a0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d004      	beq.n	80034b2 <HCD_RXQLVL_IRQHandler+0x46>
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2b05      	cmp	r3, #5
 80034ac:	f000 80a9 	beq.w	8003602 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80034b0:	e0aa      	b.n	8003608 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 80a6 	beq.w	8003606 <HCD_RXQLVL_IRQHandler+0x19a>
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	212c      	movs	r1, #44	; 0x2c
 80034c0:	fb01 f303 	mul.w	r3, r1, r3
 80034c4:	4413      	add	r3, r2
 80034c6:	3344      	adds	r3, #68	; 0x44
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 809b 	beq.w	8003606 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	212c      	movs	r1, #44	; 0x2c
 80034d6:	fb01 f303 	mul.w	r3, r1, r3
 80034da:	4413      	add	r3, r2
 80034dc:	3350      	adds	r3, #80	; 0x50
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	441a      	add	r2, r3
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	202c      	movs	r0, #44	; 0x2c
 80034ea:	fb00 f303 	mul.w	r3, r0, r3
 80034ee:	440b      	add	r3, r1
 80034f0:	334c      	adds	r3, #76	; 0x4c
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d87a      	bhi.n	80035ee <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	212c      	movs	r1, #44	; 0x2c
 8003502:	fb01 f303 	mul.w	r3, r1, r3
 8003506:	4413      	add	r3, r2
 8003508:	3344      	adds	r3, #68	; 0x44
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	b292      	uxth	r2, r2
 8003510:	4619      	mov	r1, r3
 8003512:	f002 fa1b 	bl	800594c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	212c      	movs	r1, #44	; 0x2c
 800351c:	fb01 f303 	mul.w	r3, r1, r3
 8003520:	4413      	add	r3, r2
 8003522:	3344      	adds	r3, #68	; 0x44
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	441a      	add	r2, r3
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	202c      	movs	r0, #44	; 0x2c
 8003530:	fb00 f303 	mul.w	r3, r0, r3
 8003534:	440b      	add	r3, r1
 8003536:	3344      	adds	r3, #68	; 0x44
 8003538:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	212c      	movs	r1, #44	; 0x2c
 8003540:	fb01 f303 	mul.w	r3, r1, r3
 8003544:	4413      	add	r3, r2
 8003546:	3350      	adds	r3, #80	; 0x50
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	441a      	add	r2, r3
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	202c      	movs	r0, #44	; 0x2c
 8003554:	fb00 f303 	mul.w	r3, r0, r3
 8003558:	440b      	add	r3, r1
 800355a:	3350      	adds	r3, #80	; 0x50
 800355c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	4413      	add	r3, r2
 8003566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	0cdb      	lsrs	r3, r3, #19
 800356e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003572:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	212c      	movs	r1, #44	; 0x2c
 800357a:	fb01 f303 	mul.w	r3, r1, r3
 800357e:	4413      	add	r3, r2
 8003580:	3340      	adds	r3, #64	; 0x40
 8003582:	881b      	ldrh	r3, [r3, #0]
 8003584:	461a      	mov	r2, r3
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4293      	cmp	r3, r2
 800358a:	d13c      	bne.n	8003606 <HCD_RXQLVL_IRQHandler+0x19a>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d039      	beq.n	8003606 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	015a      	lsls	r2, r3, #5
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	4413      	add	r3, r2
 800359a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035a8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035b0:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	015a      	lsls	r2, r3, #5
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035be:	461a      	mov	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	212c      	movs	r1, #44	; 0x2c
 80035ca:	fb01 f303 	mul.w	r3, r1, r3
 80035ce:	4413      	add	r3, r2
 80035d0:	3354      	adds	r3, #84	; 0x54
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	f083 0301 	eor.w	r3, r3, #1
 80035d8:	b2d8      	uxtb	r0, r3
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	212c      	movs	r1, #44	; 0x2c
 80035e0:	fb01 f303 	mul.w	r3, r1, r3
 80035e4:	4413      	add	r3, r2
 80035e6:	3354      	adds	r3, #84	; 0x54
 80035e8:	4602      	mov	r2, r0
 80035ea:	701a      	strb	r2, [r3, #0]
      break;
 80035ec:	e00b      	b.n	8003606 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	212c      	movs	r1, #44	; 0x2c
 80035f4:	fb01 f303 	mul.w	r3, r1, r3
 80035f8:	4413      	add	r3, r2
 80035fa:	3360      	adds	r3, #96	; 0x60
 80035fc:	2204      	movs	r2, #4
 80035fe:	701a      	strb	r2, [r3, #0]
      break;
 8003600:	e001      	b.n	8003606 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003602:	bf00      	nop
 8003604:	e000      	b.n	8003608 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003606:	bf00      	nop
  }
}
 8003608:	bf00      	nop
 800360a:	3728      	adds	r7, #40	; 0x28
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800363c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b02      	cmp	r3, #2
 8003646:	d10b      	bne.n	8003660 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b01      	cmp	r3, #1
 8003650:	d102      	bne.n	8003658 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f004 ffa2 	bl	800859c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f043 0302 	orr.w	r3, r3, #2
 800365e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b08      	cmp	r3, #8
 8003668:	d132      	bne.n	80036d0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f043 0308 	orr.w	r3, r3, #8
 8003670:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b04      	cmp	r3, #4
 800367a:	d126      	bne.n	80036ca <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	2b02      	cmp	r3, #2
 8003682:	d113      	bne.n	80036ac <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800368a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800368e:	d106      	bne.n	800369e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2102      	movs	r1, #2
 8003696:	4618      	mov	r0, r3
 8003698:	f002 fab8 	bl	8005c0c <USB_InitFSLSPClkSel>
 800369c:	e011      	b.n	80036c2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2101      	movs	r1, #1
 80036a4:	4618      	mov	r0, r3
 80036a6:	f002 fab1 	bl	8005c0c <USB_InitFSLSPClkSel>
 80036aa:	e00a      	b.n	80036c2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d106      	bne.n	80036c2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036ba:	461a      	mov	r2, r3
 80036bc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80036c0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f004 ff94 	bl	80085f0 <HAL_HCD_PortEnabled_Callback>
 80036c8:	e002      	b.n	80036d0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f004 ff9e 	bl	800860c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 0320 	and.w	r3, r3, #32
 80036d6:	2b20      	cmp	r3, #32
 80036d8:	d103      	bne.n	80036e2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f043 0320 	orr.w	r3, r3, #32
 80036e0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036e8:	461a      	mov	r2, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	6013      	str	r3, [r2, #0]
}
 80036ee:	bf00      	nop
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e12b      	b.n	8003962 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fd f9f6 	bl	8000b10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2224      	movs	r2, #36	; 0x24
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0201 	bic.w	r2, r2, #1
 800373a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800374a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800375a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800375c:	f001 f9fc 	bl	8004b58 <HAL_RCC_GetPCLK1Freq>
 8003760:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	4a81      	ldr	r2, [pc, #516]	; (800396c <HAL_I2C_Init+0x274>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d807      	bhi.n	800377c <HAL_I2C_Init+0x84>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4a80      	ldr	r2, [pc, #512]	; (8003970 <HAL_I2C_Init+0x278>)
 8003770:	4293      	cmp	r3, r2
 8003772:	bf94      	ite	ls
 8003774:	2301      	movls	r3, #1
 8003776:	2300      	movhi	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	e006      	b.n	800378a <HAL_I2C_Init+0x92>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4a7d      	ldr	r2, [pc, #500]	; (8003974 <HAL_I2C_Init+0x27c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	bf94      	ite	ls
 8003784:	2301      	movls	r3, #1
 8003786:	2300      	movhi	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e0e7      	b.n	8003962 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4a78      	ldr	r2, [pc, #480]	; (8003978 <HAL_I2C_Init+0x280>)
 8003796:	fba2 2303 	umull	r2, r3, r2, r3
 800379a:	0c9b      	lsrs	r3, r3, #18
 800379c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	4a6a      	ldr	r2, [pc, #424]	; (800396c <HAL_I2C_Init+0x274>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d802      	bhi.n	80037cc <HAL_I2C_Init+0xd4>
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	3301      	adds	r3, #1
 80037ca:	e009      	b.n	80037e0 <HAL_I2C_Init+0xe8>
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	4a69      	ldr	r2, [pc, #420]	; (800397c <HAL_I2C_Init+0x284>)
 80037d8:	fba2 2303 	umull	r2, r3, r2, r3
 80037dc:	099b      	lsrs	r3, r3, #6
 80037de:	3301      	adds	r3, #1
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6812      	ldr	r2, [r2, #0]
 80037e4:	430b      	orrs	r3, r1
 80037e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	495c      	ldr	r1, [pc, #368]	; (800396c <HAL_I2C_Init+0x274>)
 80037fc:	428b      	cmp	r3, r1
 80037fe:	d819      	bhi.n	8003834 <HAL_I2C_Init+0x13c>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	1e59      	subs	r1, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	fbb1 f3f3 	udiv	r3, r1, r3
 800380e:	1c59      	adds	r1, r3, #1
 8003810:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003814:	400b      	ands	r3, r1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00a      	beq.n	8003830 <HAL_I2C_Init+0x138>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	1e59      	subs	r1, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	fbb1 f3f3 	udiv	r3, r1, r3
 8003828:	3301      	adds	r3, #1
 800382a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800382e:	e051      	b.n	80038d4 <HAL_I2C_Init+0x1dc>
 8003830:	2304      	movs	r3, #4
 8003832:	e04f      	b.n	80038d4 <HAL_I2C_Init+0x1dc>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d111      	bne.n	8003860 <HAL_I2C_Init+0x168>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	1e58      	subs	r0, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6859      	ldr	r1, [r3, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	440b      	add	r3, r1
 800384a:	fbb0 f3f3 	udiv	r3, r0, r3
 800384e:	3301      	adds	r3, #1
 8003850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003854:	2b00      	cmp	r3, #0
 8003856:	bf0c      	ite	eq
 8003858:	2301      	moveq	r3, #1
 800385a:	2300      	movne	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	e012      	b.n	8003886 <HAL_I2C_Init+0x18e>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	1e58      	subs	r0, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6859      	ldr	r1, [r3, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	0099      	lsls	r1, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	fbb0 f3f3 	udiv	r3, r0, r3
 8003876:	3301      	adds	r3, #1
 8003878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387c:	2b00      	cmp	r3, #0
 800387e:	bf0c      	ite	eq
 8003880:	2301      	moveq	r3, #1
 8003882:	2300      	movne	r3, #0
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_I2C_Init+0x196>
 800388a:	2301      	movs	r3, #1
 800388c:	e022      	b.n	80038d4 <HAL_I2C_Init+0x1dc>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10e      	bne.n	80038b4 <HAL_I2C_Init+0x1bc>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1e58      	subs	r0, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6859      	ldr	r1, [r3, #4]
 800389e:	460b      	mov	r3, r1
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	440b      	add	r3, r1
 80038a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80038a8:	3301      	adds	r3, #1
 80038aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038b2:	e00f      	b.n	80038d4 <HAL_I2C_Init+0x1dc>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	1e58      	subs	r0, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6859      	ldr	r1, [r3, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	0099      	lsls	r1, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ca:	3301      	adds	r3, #1
 80038cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	6809      	ldr	r1, [r1, #0]
 80038d8:	4313      	orrs	r3, r2
 80038da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69da      	ldr	r2, [r3, #28]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003902:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6911      	ldr	r1, [r2, #16]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	68d2      	ldr	r2, [r2, #12]
 800390e:	4311      	orrs	r1, r2
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6812      	ldr	r2, [r2, #0]
 8003914:	430b      	orrs	r3, r1
 8003916:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695a      	ldr	r2, [r3, #20]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2220      	movs	r2, #32
 800394e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	000186a0 	.word	0x000186a0
 8003970:	001e847f 	.word	0x001e847f
 8003974:	003d08ff 	.word	0x003d08ff
 8003978:	431bde83 	.word	0x431bde83
 800397c:	10624dd3 	.word	0x10624dd3

08003980 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e128      	b.n	8003be4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a90      	ldr	r2, [pc, #576]	; (8003bec <HAL_I2S_Init+0x26c>)
 80039aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7fd f8f7 	bl	8000ba0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2202      	movs	r2, #2
 80039b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80039c8:	f023 030f 	bic.w	r3, r3, #15
 80039cc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2202      	movs	r2, #2
 80039d4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d060      	beq.n	8003aa0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d102      	bne.n	80039ec <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80039e6:	2310      	movs	r3, #16
 80039e8:	617b      	str	r3, [r7, #20]
 80039ea:	e001      	b.n	80039f0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80039ec:	2320      	movs	r3, #32
 80039ee:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	2b20      	cmp	r3, #32
 80039f6:	d802      	bhi.n	80039fe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80039fe:	2001      	movs	r0, #1
 8003a00:	f001 f9b4 	bl	8004d6c <HAL_RCCEx_GetPeriphCLKFreq>
 8003a04:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a0e:	d125      	bne.n	8003a5c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d010      	beq.n	8003a3a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a22:	4613      	mov	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a34:	3305      	adds	r3, #5
 8003a36:	613b      	str	r3, [r7, #16]
 8003a38:	e01f      	b.n	8003a7a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a56:	3305      	adds	r3, #5
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	e00e      	b.n	8003a7a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a76:	3305      	adds	r3, #5
 8003a78:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	4a5c      	ldr	r2, [pc, #368]	; (8003bf0 <HAL_I2S_Init+0x270>)
 8003a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a82:	08db      	lsrs	r3, r3, #3
 8003a84:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	085b      	lsrs	r3, r3, #1
 8003a96:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	021b      	lsls	r3, r3, #8
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	e003      	b.n	8003aa8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d902      	bls.n	8003ab4 <HAL_I2S_Init+0x134>
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	2bff      	cmp	r3, #255	; 0xff
 8003ab2:	d907      	bls.n	8003ac4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab8:	f043 0210 	orr.w	r2, r3, #16
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e08f      	b.n	8003be4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691a      	ldr	r2, [r3, #16]
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	ea42 0103 	orr.w	r1, r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	69fa      	ldr	r2, [r7, #28]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ae2:	f023 030f 	bic.w	r3, r3, #15
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6851      	ldr	r1, [r2, #4]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6892      	ldr	r2, [r2, #8]
 8003aee:	4311      	orrs	r1, r2
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	68d2      	ldr	r2, [r2, #12]
 8003af4:	4311      	orrs	r1, r2
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6992      	ldr	r2, [r2, #24]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b06:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d161      	bne.n	8003bd4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a38      	ldr	r2, [pc, #224]	; (8003bf4 <HAL_I2S_Init+0x274>)
 8003b14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a37      	ldr	r2, [pc, #220]	; (8003bf8 <HAL_I2S_Init+0x278>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d101      	bne.n	8003b24 <HAL_I2S_Init+0x1a4>
 8003b20:	4b36      	ldr	r3, [pc, #216]	; (8003bfc <HAL_I2S_Init+0x27c>)
 8003b22:	e001      	b.n	8003b28 <HAL_I2S_Init+0x1a8>
 8003b24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6812      	ldr	r2, [r2, #0]
 8003b2e:	4932      	ldr	r1, [pc, #200]	; (8003bf8 <HAL_I2S_Init+0x278>)
 8003b30:	428a      	cmp	r2, r1
 8003b32:	d101      	bne.n	8003b38 <HAL_I2S_Init+0x1b8>
 8003b34:	4a31      	ldr	r2, [pc, #196]	; (8003bfc <HAL_I2S_Init+0x27c>)
 8003b36:	e001      	b.n	8003b3c <HAL_I2S_Init+0x1bc>
 8003b38:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003b3c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b40:	f023 030f 	bic.w	r3, r3, #15
 8003b44:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a2b      	ldr	r2, [pc, #172]	; (8003bf8 <HAL_I2S_Init+0x278>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d101      	bne.n	8003b54 <HAL_I2S_Init+0x1d4>
 8003b50:	4b2a      	ldr	r3, [pc, #168]	; (8003bfc <HAL_I2S_Init+0x27c>)
 8003b52:	e001      	b.n	8003b58 <HAL_I2S_Init+0x1d8>
 8003b54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b58:	2202      	movs	r2, #2
 8003b5a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a25      	ldr	r2, [pc, #148]	; (8003bf8 <HAL_I2S_Init+0x278>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d101      	bne.n	8003b6a <HAL_I2S_Init+0x1ea>
 8003b66:	4b25      	ldr	r3, [pc, #148]	; (8003bfc <HAL_I2S_Init+0x27c>)
 8003b68:	e001      	b.n	8003b6e <HAL_I2S_Init+0x1ee>
 8003b6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b7a:	d003      	beq.n	8003b84 <HAL_I2S_Init+0x204>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d103      	bne.n	8003b8c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003b84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	e001      	b.n	8003b90 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	897b      	ldrh	r3, [r7, #10]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003bbc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a0d      	ldr	r2, [pc, #52]	; (8003bf8 <HAL_I2S_Init+0x278>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d101      	bne.n	8003bcc <HAL_I2S_Init+0x24c>
 8003bc8:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <HAL_I2S_Init+0x27c>)
 8003bca:	e001      	b.n	8003bd0 <HAL_I2S_Init+0x250>
 8003bcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bd0:	897a      	ldrh	r2, [r7, #10]
 8003bd2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3720      	adds	r7, #32
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	08003cf7 	.word	0x08003cf7
 8003bf0:	cccccccd 	.word	0xcccccccd
 8003bf4:	08003e0d 	.word	0x08003e0d
 8003bf8:	40003800 	.word	0x40003800
 8003bfc:	40003400 	.word	0x40003400

08003c00 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	881a      	ldrh	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	1c9a      	adds	r2, r3, #2
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10e      	bne.n	8003c90 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c80:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7ff ffb8 	bl	8003c00 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c90:	bf00      	nop
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003caa:	b292      	uxth	r2, r2
 8003cac:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	1c9a      	adds	r2, r3, #2
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10e      	bne.n	8003cee <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cde:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7ff ff93 	bl	8003c14 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cee:	bf00      	nop
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b086      	sub	sp, #24
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d13a      	bne.n	8003d88 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d109      	bne.n	8003d30 <I2S_IRQHandler+0x3a>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d26:	2b40      	cmp	r3, #64	; 0x40
 8003d28:	d102      	bne.n	8003d30 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7ff ffb4 	bl	8003c98 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d36:	2b40      	cmp	r3, #64	; 0x40
 8003d38:	d126      	bne.n	8003d88 <I2S_IRQHandler+0x92>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f003 0320 	and.w	r3, r3, #32
 8003d44:	2b20      	cmp	r3, #32
 8003d46:	d11f      	bne.n	8003d88 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d56:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d58:	2300      	movs	r3, #0
 8003d5a:	613b      	str	r3, [r7, #16]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	613b      	str	r3, [r7, #16]
 8003d6c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7a:	f043 0202 	orr.w	r2, r3, #2
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff ff50 	bl	8003c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d136      	bne.n	8003e02 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d109      	bne.n	8003db2 <I2S_IRQHandler+0xbc>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da8:	2b80      	cmp	r3, #128	; 0x80
 8003daa:	d102      	bne.n	8003db2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff ff45 	bl	8003c3c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d122      	bne.n	8003e02 <I2S_IRQHandler+0x10c>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f003 0320 	and.w	r3, r3, #32
 8003dc6:	2b20      	cmp	r3, #32
 8003dc8:	d11b      	bne.n	8003e02 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dd8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df4:	f043 0204 	orr.w	r2, r3, #4
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff ff13 	bl	8003c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e02:	bf00      	nop
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4aa2      	ldr	r2, [pc, #648]	; (80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d101      	bne.n	8003e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003e26:	4ba2      	ldr	r3, [pc, #648]	; (80040b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e28:	e001      	b.n	8003e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003e2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a9b      	ldr	r2, [pc, #620]	; (80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d101      	bne.n	8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e44:	4b9a      	ldr	r3, [pc, #616]	; (80040b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e46:	e001      	b.n	8003e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e58:	d004      	beq.n	8003e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f040 8099 	bne.w	8003f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d107      	bne.n	8003e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f925 	bl	80040c8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d107      	bne.n	8003e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f9c8 	bl	8004228 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9e:	2b40      	cmp	r3, #64	; 0x40
 8003ea0:	d13a      	bne.n	8003f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f003 0320 	and.w	r3, r3, #32
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d035      	beq.n	8003f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a7e      	ldr	r2, [pc, #504]	; (80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d101      	bne.n	8003eba <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003eb6:	4b7e      	ldr	r3, [pc, #504]	; (80040b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003eb8:	e001      	b.n	8003ebe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003eba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4979      	ldr	r1, [pc, #484]	; (80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ec6:	428b      	cmp	r3, r1
 8003ec8:	d101      	bne.n	8003ece <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003eca:	4b79      	ldr	r3, [pc, #484]	; (80040b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ecc:	e001      	b.n	8003ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003ece:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ed2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ed6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ee6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0a:	f043 0202 	orr.w	r2, r3, #2
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7ff fe88 	bl	8003c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	f040 80be 	bne.w	80040a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f003 0320 	and.w	r3, r3, #32
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 80b8 	beq.w	80040a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f3e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a59      	ldr	r2, [pc, #356]	; (80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d101      	bne.n	8003f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f4a:	4b59      	ldr	r3, [pc, #356]	; (80040b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f4c:	e001      	b.n	8003f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4954      	ldr	r1, [pc, #336]	; (80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f5a:	428b      	cmp	r3, r1
 8003f5c:	d101      	bne.n	8003f62 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003f5e:	4b54      	ldr	r3, [pc, #336]	; (80040b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f60:	e001      	b.n	8003f66 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003f62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f6a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60bb      	str	r3, [r7, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	60bb      	str	r3, [r7, #8]
 8003f78:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f86:	f043 0204 	orr.w	r2, r3, #4
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff fe4a 	bl	8003c28 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f94:	e084      	b.n	80040a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d107      	bne.n	8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f8be 	bl	800412c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d107      	bne.n	8003fca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f8fd 	bl	80041c4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd0:	2b40      	cmp	r3, #64	; 0x40
 8003fd2:	d12f      	bne.n	8004034 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d02a      	beq.n	8004034 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fec:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a2e      	ldr	r2, [pc, #184]	; (80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d101      	bne.n	8003ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003ff8:	4b2d      	ldr	r3, [pc, #180]	; (80040b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ffa:	e001      	b.n	8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003ffc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4929      	ldr	r1, [pc, #164]	; (80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004008:	428b      	cmp	r3, r1
 800400a:	d101      	bne.n	8004010 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800400c:	4b28      	ldr	r3, [pc, #160]	; (80040b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800400e:	e001      	b.n	8004014 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004010:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004014:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004018:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	f043 0202 	orr.w	r2, r3, #2
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7ff fdfa 	bl	8003c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b08      	cmp	r3, #8
 800403c:	d131      	bne.n	80040a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f003 0320 	and.w	r3, r3, #32
 8004044:	2b00      	cmp	r3, #0
 8004046:	d02c      	beq.n	80040a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a17      	ldr	r2, [pc, #92]	; (80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d101      	bne.n	8004056 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004052:	4b17      	ldr	r3, [pc, #92]	; (80040b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004054:	e001      	b.n	800405a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004056:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4912      	ldr	r1, [pc, #72]	; (80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004062:	428b      	cmp	r3, r1
 8004064:	d101      	bne.n	800406a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004066:	4b12      	ldr	r3, [pc, #72]	; (80040b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004068:	e001      	b.n	800406e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800406a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800406e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004072:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004082:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004090:	f043 0204 	orr.w	r2, r3, #4
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7ff fdc5 	bl	8003c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800409e:	e000      	b.n	80040a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040a0:	bf00      	nop
}
 80040a2:	bf00      	nop
 80040a4:	3720      	adds	r7, #32
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40003800 	.word	0x40003800
 80040b0:	40003400 	.word	0x40003400

080040b4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	1c99      	adds	r1, r3, #2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6251      	str	r1, [r2, #36]	; 0x24
 80040da:	881a      	ldrh	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d113      	bne.n	8004122 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004108:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d106      	bne.n	8004122 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7ff ffc9 	bl	80040b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004122:	bf00      	nop
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
	...

0800412c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	1c99      	adds	r1, r3, #2
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6251      	str	r1, [r2, #36]	; 0x24
 800413e:	8819      	ldrh	r1, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a1d      	ldr	r2, [pc, #116]	; (80041bc <I2SEx_TxISR_I2SExt+0x90>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d101      	bne.n	800414e <I2SEx_TxISR_I2SExt+0x22>
 800414a:	4b1d      	ldr	r3, [pc, #116]	; (80041c0 <I2SEx_TxISR_I2SExt+0x94>)
 800414c:	e001      	b.n	8004152 <I2SEx_TxISR_I2SExt+0x26>
 800414e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004152:	460a      	mov	r2, r1
 8004154:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d121      	bne.n	80041b2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a12      	ldr	r2, [pc, #72]	; (80041bc <I2SEx_TxISR_I2SExt+0x90>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d101      	bne.n	800417c <I2SEx_TxISR_I2SExt+0x50>
 8004178:	4b11      	ldr	r3, [pc, #68]	; (80041c0 <I2SEx_TxISR_I2SExt+0x94>)
 800417a:	e001      	b.n	8004180 <I2SEx_TxISR_I2SExt+0x54>
 800417c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	490d      	ldr	r1, [pc, #52]	; (80041bc <I2SEx_TxISR_I2SExt+0x90>)
 8004188:	428b      	cmp	r3, r1
 800418a:	d101      	bne.n	8004190 <I2SEx_TxISR_I2SExt+0x64>
 800418c:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <I2SEx_TxISR_I2SExt+0x94>)
 800418e:	e001      	b.n	8004194 <I2SEx_TxISR_I2SExt+0x68>
 8004190:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004194:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004198:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800419e:	b29b      	uxth	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d106      	bne.n	80041b2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7ff ff81 	bl	80040b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041b2:	bf00      	nop
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	40003800 	.word	0x40003800
 80041c0:	40003400 	.word	0x40003400

080041c4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68d8      	ldr	r0, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d6:	1c99      	adds	r1, r3, #2
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	62d1      	str	r1, [r2, #44]	; 0x2c
 80041dc:	b282      	uxth	r2, r0
 80041de:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	3b01      	subs	r3, #1
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d113      	bne.n	8004220 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004206:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d106      	bne.n	8004220 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7ff ff4a 	bl	80040b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004220:	bf00      	nop
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a20      	ldr	r2, [pc, #128]	; (80042b8 <I2SEx_RxISR_I2SExt+0x90>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d101      	bne.n	800423e <I2SEx_RxISR_I2SExt+0x16>
 800423a:	4b20      	ldr	r3, [pc, #128]	; (80042bc <I2SEx_RxISR_I2SExt+0x94>)
 800423c:	e001      	b.n	8004242 <I2SEx_RxISR_I2SExt+0x1a>
 800423e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004242:	68d8      	ldr	r0, [r3, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004248:	1c99      	adds	r1, r3, #2
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800424e:	b282      	uxth	r2, r0
 8004250:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004264:	b29b      	uxth	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d121      	bne.n	80042ae <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a12      	ldr	r2, [pc, #72]	; (80042b8 <I2SEx_RxISR_I2SExt+0x90>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d101      	bne.n	8004278 <I2SEx_RxISR_I2SExt+0x50>
 8004274:	4b11      	ldr	r3, [pc, #68]	; (80042bc <I2SEx_RxISR_I2SExt+0x94>)
 8004276:	e001      	b.n	800427c <I2SEx_RxISR_I2SExt+0x54>
 8004278:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	490d      	ldr	r1, [pc, #52]	; (80042b8 <I2SEx_RxISR_I2SExt+0x90>)
 8004284:	428b      	cmp	r3, r1
 8004286:	d101      	bne.n	800428c <I2SEx_RxISR_I2SExt+0x64>
 8004288:	4b0c      	ldr	r3, [pc, #48]	; (80042bc <I2SEx_RxISR_I2SExt+0x94>)
 800428a:	e001      	b.n	8004290 <I2SEx_RxISR_I2SExt+0x68>
 800428c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004290:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004294:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429a:	b29b      	uxth	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d106      	bne.n	80042ae <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7ff ff03 	bl	80040b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042ae:	bf00      	nop
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40003800 	.word	0x40003800
 80042bc:	40003400 	.word	0x40003400

080042c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e264      	b.n	800479c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d075      	beq.n	80043ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042de:	4ba3      	ldr	r3, [pc, #652]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 030c 	and.w	r3, r3, #12
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d00c      	beq.n	8004304 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ea:	4ba0      	ldr	r3, [pc, #640]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d112      	bne.n	800431c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042f6:	4b9d      	ldr	r3, [pc, #628]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004302:	d10b      	bne.n	800431c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004304:	4b99      	ldr	r3, [pc, #612]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d05b      	beq.n	80043c8 <HAL_RCC_OscConfig+0x108>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d157      	bne.n	80043c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e23f      	b.n	800479c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004324:	d106      	bne.n	8004334 <HAL_RCC_OscConfig+0x74>
 8004326:	4b91      	ldr	r3, [pc, #580]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a90      	ldr	r2, [pc, #576]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 800432c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	e01d      	b.n	8004370 <HAL_RCC_OscConfig+0xb0>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800433c:	d10c      	bne.n	8004358 <HAL_RCC_OscConfig+0x98>
 800433e:	4b8b      	ldr	r3, [pc, #556]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a8a      	ldr	r2, [pc, #552]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 8004344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	4b88      	ldr	r3, [pc, #544]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a87      	ldr	r2, [pc, #540]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 8004350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	e00b      	b.n	8004370 <HAL_RCC_OscConfig+0xb0>
 8004358:	4b84      	ldr	r3, [pc, #528]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a83      	ldr	r2, [pc, #524]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 800435e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	4b81      	ldr	r3, [pc, #516]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a80      	ldr	r2, [pc, #512]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 800436a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800436e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d013      	beq.n	80043a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004378:	f7fd f956 	bl	8001628 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004380:	f7fd f952 	bl	8001628 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b64      	cmp	r3, #100	; 0x64
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e204      	b.n	800479c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004392:	4b76      	ldr	r3, [pc, #472]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0f0      	beq.n	8004380 <HAL_RCC_OscConfig+0xc0>
 800439e:	e014      	b.n	80043ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a0:	f7fd f942 	bl	8001628 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043a8:	f7fd f93e 	bl	8001628 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b64      	cmp	r3, #100	; 0x64
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e1f0      	b.n	800479c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ba:	4b6c      	ldr	r3, [pc, #432]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1f0      	bne.n	80043a8 <HAL_RCC_OscConfig+0xe8>
 80043c6:	e000      	b.n	80043ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d063      	beq.n	800449e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043d6:	4b65      	ldr	r3, [pc, #404]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 030c 	and.w	r3, r3, #12
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00b      	beq.n	80043fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043e2:	4b62      	ldr	r3, [pc, #392]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d11c      	bne.n	8004428 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ee:	4b5f      	ldr	r3, [pc, #380]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d116      	bne.n	8004428 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043fa:	4b5c      	ldr	r3, [pc, #368]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <HAL_RCC_OscConfig+0x152>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d001      	beq.n	8004412 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e1c4      	b.n	800479c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004412:	4b56      	ldr	r3, [pc, #344]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	4952      	ldr	r1, [pc, #328]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 8004422:	4313      	orrs	r3, r2
 8004424:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004426:	e03a      	b.n	800449e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d020      	beq.n	8004472 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004430:	4b4f      	ldr	r3, [pc, #316]	; (8004570 <HAL_RCC_OscConfig+0x2b0>)
 8004432:	2201      	movs	r2, #1
 8004434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004436:	f7fd f8f7 	bl	8001628 <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800443e:	f7fd f8f3 	bl	8001628 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e1a5      	b.n	800479c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004450:	4b46      	ldr	r3, [pc, #280]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0f0      	beq.n	800443e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800445c:	4b43      	ldr	r3, [pc, #268]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	4940      	ldr	r1, [pc, #256]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 800446c:	4313      	orrs	r3, r2
 800446e:	600b      	str	r3, [r1, #0]
 8004470:	e015      	b.n	800449e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004472:	4b3f      	ldr	r3, [pc, #252]	; (8004570 <HAL_RCC_OscConfig+0x2b0>)
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7fd f8d6 	bl	8001628 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004480:	f7fd f8d2 	bl	8001628 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e184      	b.n	800479c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004492:	4b36      	ldr	r3, [pc, #216]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d030      	beq.n	800450c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d016      	beq.n	80044e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044b2:	4b30      	ldr	r3, [pc, #192]	; (8004574 <HAL_RCC_OscConfig+0x2b4>)
 80044b4:	2201      	movs	r2, #1
 80044b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b8:	f7fd f8b6 	bl	8001628 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044c0:	f7fd f8b2 	bl	8001628 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e164      	b.n	800479c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044d2:	4b26      	ldr	r3, [pc, #152]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 80044d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0f0      	beq.n	80044c0 <HAL_RCC_OscConfig+0x200>
 80044de:	e015      	b.n	800450c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044e0:	4b24      	ldr	r3, [pc, #144]	; (8004574 <HAL_RCC_OscConfig+0x2b4>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e6:	f7fd f89f 	bl	8001628 <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ec:	e008      	b.n	8004500 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044ee:	f7fd f89b 	bl	8001628 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e14d      	b.n	800479c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004500:	4b1a      	ldr	r3, [pc, #104]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 8004502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1f0      	bne.n	80044ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 80a0 	beq.w	800465a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800451a:	2300      	movs	r3, #0
 800451c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800451e:	4b13      	ldr	r3, [pc, #76]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10f      	bne.n	800454a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800452a:	2300      	movs	r3, #0
 800452c:	60bb      	str	r3, [r7, #8]
 800452e:	4b0f      	ldr	r3, [pc, #60]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	4a0e      	ldr	r2, [pc, #56]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 8004534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004538:	6413      	str	r3, [r2, #64]	; 0x40
 800453a:	4b0c      	ldr	r3, [pc, #48]	; (800456c <HAL_RCC_OscConfig+0x2ac>)
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004542:	60bb      	str	r3, [r7, #8]
 8004544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004546:	2301      	movs	r3, #1
 8004548:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454a:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <HAL_RCC_OscConfig+0x2b8>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004552:	2b00      	cmp	r3, #0
 8004554:	d121      	bne.n	800459a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004556:	4b08      	ldr	r3, [pc, #32]	; (8004578 <HAL_RCC_OscConfig+0x2b8>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a07      	ldr	r2, [pc, #28]	; (8004578 <HAL_RCC_OscConfig+0x2b8>)
 800455c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004562:	f7fd f861 	bl	8001628 <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004568:	e011      	b.n	800458e <HAL_RCC_OscConfig+0x2ce>
 800456a:	bf00      	nop
 800456c:	40023800 	.word	0x40023800
 8004570:	42470000 	.word	0x42470000
 8004574:	42470e80 	.word	0x42470e80
 8004578:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800457c:	f7fd f854 	bl	8001628 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e106      	b.n	800479c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800458e:	4b85      	ldr	r3, [pc, #532]	; (80047a4 <HAL_RCC_OscConfig+0x4e4>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0f0      	beq.n	800457c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d106      	bne.n	80045b0 <HAL_RCC_OscConfig+0x2f0>
 80045a2:	4b81      	ldr	r3, [pc, #516]	; (80047a8 <HAL_RCC_OscConfig+0x4e8>)
 80045a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a6:	4a80      	ldr	r2, [pc, #512]	; (80047a8 <HAL_RCC_OscConfig+0x4e8>)
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	6713      	str	r3, [r2, #112]	; 0x70
 80045ae:	e01c      	b.n	80045ea <HAL_RCC_OscConfig+0x32a>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2b05      	cmp	r3, #5
 80045b6:	d10c      	bne.n	80045d2 <HAL_RCC_OscConfig+0x312>
 80045b8:	4b7b      	ldr	r3, [pc, #492]	; (80047a8 <HAL_RCC_OscConfig+0x4e8>)
 80045ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045bc:	4a7a      	ldr	r2, [pc, #488]	; (80047a8 <HAL_RCC_OscConfig+0x4e8>)
 80045be:	f043 0304 	orr.w	r3, r3, #4
 80045c2:	6713      	str	r3, [r2, #112]	; 0x70
 80045c4:	4b78      	ldr	r3, [pc, #480]	; (80047a8 <HAL_RCC_OscConfig+0x4e8>)
 80045c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c8:	4a77      	ldr	r2, [pc, #476]	; (80047a8 <HAL_RCC_OscConfig+0x4e8>)
 80045ca:	f043 0301 	orr.w	r3, r3, #1
 80045ce:	6713      	str	r3, [r2, #112]	; 0x70
 80045d0:	e00b      	b.n	80045ea <HAL_RCC_OscConfig+0x32a>
 80045d2:	4b75      	ldr	r3, [pc, #468]	; (80047a8 <HAL_RCC_OscConfig+0x4e8>)
 80045d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d6:	4a74      	ldr	r2, [pc, #464]	; (80047a8 <HAL_RCC_OscConfig+0x4e8>)
 80045d8:	f023 0301 	bic.w	r3, r3, #1
 80045dc:	6713      	str	r3, [r2, #112]	; 0x70
 80045de:	4b72      	ldr	r3, [pc, #456]	; (80047a8 <HAL_RCC_OscConfig+0x4e8>)
 80045e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e2:	4a71      	ldr	r2, [pc, #452]	; (80047a8 <HAL_RCC_OscConfig+0x4e8>)
 80045e4:	f023 0304 	bic.w	r3, r3, #4
 80045e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d015      	beq.n	800461e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f2:	f7fd f819 	bl	8001628 <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f8:	e00a      	b.n	8004610 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045fa:	f7fd f815 	bl	8001628 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	f241 3288 	movw	r2, #5000	; 0x1388
 8004608:	4293      	cmp	r3, r2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e0c5      	b.n	800479c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004610:	4b65      	ldr	r3, [pc, #404]	; (80047a8 <HAL_RCC_OscConfig+0x4e8>)
 8004612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0ee      	beq.n	80045fa <HAL_RCC_OscConfig+0x33a>
 800461c:	e014      	b.n	8004648 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800461e:	f7fd f803 	bl	8001628 <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004624:	e00a      	b.n	800463c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004626:	f7fc ffff 	bl	8001628 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	f241 3288 	movw	r2, #5000	; 0x1388
 8004634:	4293      	cmp	r3, r2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e0af      	b.n	800479c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800463c:	4b5a      	ldr	r3, [pc, #360]	; (80047a8 <HAL_RCC_OscConfig+0x4e8>)
 800463e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1ee      	bne.n	8004626 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004648:	7dfb      	ldrb	r3, [r7, #23]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d105      	bne.n	800465a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800464e:	4b56      	ldr	r3, [pc, #344]	; (80047a8 <HAL_RCC_OscConfig+0x4e8>)
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	4a55      	ldr	r2, [pc, #340]	; (80047a8 <HAL_RCC_OscConfig+0x4e8>)
 8004654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004658:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 809b 	beq.w	800479a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004664:	4b50      	ldr	r3, [pc, #320]	; (80047a8 <HAL_RCC_OscConfig+0x4e8>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f003 030c 	and.w	r3, r3, #12
 800466c:	2b08      	cmp	r3, #8
 800466e:	d05c      	beq.n	800472a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	2b02      	cmp	r3, #2
 8004676:	d141      	bne.n	80046fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004678:	4b4c      	ldr	r3, [pc, #304]	; (80047ac <HAL_RCC_OscConfig+0x4ec>)
 800467a:	2200      	movs	r2, #0
 800467c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800467e:	f7fc ffd3 	bl	8001628 <HAL_GetTick>
 8004682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004684:	e008      	b.n	8004698 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004686:	f7fc ffcf 	bl	8001628 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d901      	bls.n	8004698 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e081      	b.n	800479c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004698:	4b43      	ldr	r3, [pc, #268]	; (80047a8 <HAL_RCC_OscConfig+0x4e8>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1f0      	bne.n	8004686 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	69da      	ldr	r2, [r3, #28]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	431a      	orrs	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	019b      	lsls	r3, r3, #6
 80046b4:	431a      	orrs	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ba:	085b      	lsrs	r3, r3, #1
 80046bc:	3b01      	subs	r3, #1
 80046be:	041b      	lsls	r3, r3, #16
 80046c0:	431a      	orrs	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c6:	061b      	lsls	r3, r3, #24
 80046c8:	4937      	ldr	r1, [pc, #220]	; (80047a8 <HAL_RCC_OscConfig+0x4e8>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046ce:	4b37      	ldr	r3, [pc, #220]	; (80047ac <HAL_RCC_OscConfig+0x4ec>)
 80046d0:	2201      	movs	r2, #1
 80046d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d4:	f7fc ffa8 	bl	8001628 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046dc:	f7fc ffa4 	bl	8001628 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e056      	b.n	800479c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ee:	4b2e      	ldr	r3, [pc, #184]	; (80047a8 <HAL_RCC_OscConfig+0x4e8>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0f0      	beq.n	80046dc <HAL_RCC_OscConfig+0x41c>
 80046fa:	e04e      	b.n	800479a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046fc:	4b2b      	ldr	r3, [pc, #172]	; (80047ac <HAL_RCC_OscConfig+0x4ec>)
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004702:	f7fc ff91 	bl	8001628 <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004708:	e008      	b.n	800471c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800470a:	f7fc ff8d 	bl	8001628 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e03f      	b.n	800479c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800471c:	4b22      	ldr	r3, [pc, #136]	; (80047a8 <HAL_RCC_OscConfig+0x4e8>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1f0      	bne.n	800470a <HAL_RCC_OscConfig+0x44a>
 8004728:	e037      	b.n	800479a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d101      	bne.n	8004736 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e032      	b.n	800479c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004736:	4b1c      	ldr	r3, [pc, #112]	; (80047a8 <HAL_RCC_OscConfig+0x4e8>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d028      	beq.n	8004796 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800474e:	429a      	cmp	r2, r3
 8004750:	d121      	bne.n	8004796 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800475c:	429a      	cmp	r2, r3
 800475e:	d11a      	bne.n	8004796 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004766:	4013      	ands	r3, r2
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800476c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800476e:	4293      	cmp	r3, r2
 8004770:	d111      	bne.n	8004796 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477c:	085b      	lsrs	r3, r3, #1
 800477e:	3b01      	subs	r3, #1
 8004780:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004782:	429a      	cmp	r2, r3
 8004784:	d107      	bne.n	8004796 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004790:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004792:	429a      	cmp	r2, r3
 8004794:	d001      	beq.n	800479a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e000      	b.n	800479c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	40007000 	.word	0x40007000
 80047a8:	40023800 	.word	0x40023800
 80047ac:	42470060 	.word	0x42470060

080047b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e0cc      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047c4:	4b68      	ldr	r3, [pc, #416]	; (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d90c      	bls.n	80047ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047d2:	4b65      	ldr	r3, [pc, #404]	; (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047da:	4b63      	ldr	r3, [pc, #396]	; (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0307 	and.w	r3, r3, #7
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d001      	beq.n	80047ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e0b8      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d020      	beq.n	800483a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004804:	4b59      	ldr	r3, [pc, #356]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4a58      	ldr	r2, [pc, #352]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800480e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b00      	cmp	r3, #0
 800481a:	d005      	beq.n	8004828 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800481c:	4b53      	ldr	r3, [pc, #332]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	4a52      	ldr	r2, [pc, #328]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004822:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004826:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004828:	4b50      	ldr	r3, [pc, #320]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	494d      	ldr	r1, [pc, #308]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	4313      	orrs	r3, r2
 8004838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d044      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d107      	bne.n	800485e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484e:	4b47      	ldr	r3, [pc, #284]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d119      	bne.n	800488e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e07f      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b02      	cmp	r3, #2
 8004864:	d003      	beq.n	800486e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800486a:	2b03      	cmp	r3, #3
 800486c:	d107      	bne.n	800487e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800486e:	4b3f      	ldr	r3, [pc, #252]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d109      	bne.n	800488e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e06f      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487e:	4b3b      	ldr	r3, [pc, #236]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e067      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800488e:	4b37      	ldr	r3, [pc, #220]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f023 0203 	bic.w	r2, r3, #3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	4934      	ldr	r1, [pc, #208]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800489c:	4313      	orrs	r3, r2
 800489e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048a0:	f7fc fec2 	bl	8001628 <HAL_GetTick>
 80048a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a6:	e00a      	b.n	80048be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048a8:	f7fc febe 	bl	8001628 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e04f      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048be:	4b2b      	ldr	r3, [pc, #172]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 020c 	and.w	r2, r3, #12
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d1eb      	bne.n	80048a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048d0:	4b25      	ldr	r3, [pc, #148]	; (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d20c      	bcs.n	80048f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048de:	4b22      	ldr	r3, [pc, #136]	; (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e6:	4b20      	ldr	r3, [pc, #128]	; (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d001      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e032      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b00      	cmp	r3, #0
 8004902:	d008      	beq.n	8004916 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004904:	4b19      	ldr	r3, [pc, #100]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	4916      	ldr	r1, [pc, #88]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	4313      	orrs	r3, r2
 8004914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b00      	cmp	r3, #0
 8004920:	d009      	beq.n	8004936 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004922:	4b12      	ldr	r3, [pc, #72]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	490e      	ldr	r1, [pc, #56]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004932:	4313      	orrs	r3, r2
 8004934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004936:	f000 f821 	bl	800497c <HAL_RCC_GetSysClockFreq>
 800493a:	4602      	mov	r2, r0
 800493c:	4b0b      	ldr	r3, [pc, #44]	; (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	091b      	lsrs	r3, r3, #4
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	490a      	ldr	r1, [pc, #40]	; (8004970 <HAL_RCC_ClockConfig+0x1c0>)
 8004948:	5ccb      	ldrb	r3, [r1, r3]
 800494a:	fa22 f303 	lsr.w	r3, r2, r3
 800494e:	4a09      	ldr	r2, [pc, #36]	; (8004974 <HAL_RCC_ClockConfig+0x1c4>)
 8004950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004952:	4b09      	ldr	r3, [pc, #36]	; (8004978 <HAL_RCC_ClockConfig+0x1c8>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f7fc fe22 	bl	80015a0 <HAL_InitTick>

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	40023c00 	.word	0x40023c00
 800496c:	40023800 	.word	0x40023800
 8004970:	0800949c 	.word	0x0800949c
 8004974:	20000000 	.word	0x20000000
 8004978:	20000004 	.word	0x20000004

0800497c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800497c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004980:	b084      	sub	sp, #16
 8004982:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	607b      	str	r3, [r7, #4]
 8004988:	2300      	movs	r3, #0
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	2300      	movs	r3, #0
 800498e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004994:	4b67      	ldr	r3, [pc, #412]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f003 030c 	and.w	r3, r3, #12
 800499c:	2b08      	cmp	r3, #8
 800499e:	d00d      	beq.n	80049bc <HAL_RCC_GetSysClockFreq+0x40>
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	f200 80bd 	bhi.w	8004b20 <HAL_RCC_GetSysClockFreq+0x1a4>
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <HAL_RCC_GetSysClockFreq+0x34>
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d003      	beq.n	80049b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80049ae:	e0b7      	b.n	8004b20 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049b0:	4b61      	ldr	r3, [pc, #388]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80049b2:	60bb      	str	r3, [r7, #8]
       break;
 80049b4:	e0b7      	b.n	8004b26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049b6:	4b61      	ldr	r3, [pc, #388]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80049b8:	60bb      	str	r3, [r7, #8]
      break;
 80049ba:	e0b4      	b.n	8004b26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049bc:	4b5d      	ldr	r3, [pc, #372]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049c6:	4b5b      	ldr	r3, [pc, #364]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d04d      	beq.n	8004a6e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049d2:	4b58      	ldr	r3, [pc, #352]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	099b      	lsrs	r3, r3, #6
 80049d8:	461a      	mov	r2, r3
 80049da:	f04f 0300 	mov.w	r3, #0
 80049de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049e2:	f04f 0100 	mov.w	r1, #0
 80049e6:	ea02 0800 	and.w	r8, r2, r0
 80049ea:	ea03 0901 	and.w	r9, r3, r1
 80049ee:	4640      	mov	r0, r8
 80049f0:	4649      	mov	r1, r9
 80049f2:	f04f 0200 	mov.w	r2, #0
 80049f6:	f04f 0300 	mov.w	r3, #0
 80049fa:	014b      	lsls	r3, r1, #5
 80049fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a00:	0142      	lsls	r2, r0, #5
 8004a02:	4610      	mov	r0, r2
 8004a04:	4619      	mov	r1, r3
 8004a06:	ebb0 0008 	subs.w	r0, r0, r8
 8004a0a:	eb61 0109 	sbc.w	r1, r1, r9
 8004a0e:	f04f 0200 	mov.w	r2, #0
 8004a12:	f04f 0300 	mov.w	r3, #0
 8004a16:	018b      	lsls	r3, r1, #6
 8004a18:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a1c:	0182      	lsls	r2, r0, #6
 8004a1e:	1a12      	subs	r2, r2, r0
 8004a20:	eb63 0301 	sbc.w	r3, r3, r1
 8004a24:	f04f 0000 	mov.w	r0, #0
 8004a28:	f04f 0100 	mov.w	r1, #0
 8004a2c:	00d9      	lsls	r1, r3, #3
 8004a2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a32:	00d0      	lsls	r0, r2, #3
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	eb12 0208 	adds.w	r2, r2, r8
 8004a3c:	eb43 0309 	adc.w	r3, r3, r9
 8004a40:	f04f 0000 	mov.w	r0, #0
 8004a44:	f04f 0100 	mov.w	r1, #0
 8004a48:	0259      	lsls	r1, r3, #9
 8004a4a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004a4e:	0250      	lsls	r0, r2, #9
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	4610      	mov	r0, r2
 8004a56:	4619      	mov	r1, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	f04f 0300 	mov.w	r3, #0
 8004a60:	f7fb fc0e 	bl	8000280 <__aeabi_uldivmod>
 8004a64:	4602      	mov	r2, r0
 8004a66:	460b      	mov	r3, r1
 8004a68:	4613      	mov	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	e04a      	b.n	8004b04 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a6e:	4b31      	ldr	r3, [pc, #196]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	099b      	lsrs	r3, r3, #6
 8004a74:	461a      	mov	r2, r3
 8004a76:	f04f 0300 	mov.w	r3, #0
 8004a7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a7e:	f04f 0100 	mov.w	r1, #0
 8004a82:	ea02 0400 	and.w	r4, r2, r0
 8004a86:	ea03 0501 	and.w	r5, r3, r1
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	4629      	mov	r1, r5
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	f04f 0300 	mov.w	r3, #0
 8004a96:	014b      	lsls	r3, r1, #5
 8004a98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a9c:	0142      	lsls	r2, r0, #5
 8004a9e:	4610      	mov	r0, r2
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	1b00      	subs	r0, r0, r4
 8004aa4:	eb61 0105 	sbc.w	r1, r1, r5
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	018b      	lsls	r3, r1, #6
 8004ab2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ab6:	0182      	lsls	r2, r0, #6
 8004ab8:	1a12      	subs	r2, r2, r0
 8004aba:	eb63 0301 	sbc.w	r3, r3, r1
 8004abe:	f04f 0000 	mov.w	r0, #0
 8004ac2:	f04f 0100 	mov.w	r1, #0
 8004ac6:	00d9      	lsls	r1, r3, #3
 8004ac8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004acc:	00d0      	lsls	r0, r2, #3
 8004ace:	4602      	mov	r2, r0
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	1912      	adds	r2, r2, r4
 8004ad4:	eb45 0303 	adc.w	r3, r5, r3
 8004ad8:	f04f 0000 	mov.w	r0, #0
 8004adc:	f04f 0100 	mov.w	r1, #0
 8004ae0:	0299      	lsls	r1, r3, #10
 8004ae2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004ae6:	0290      	lsls	r0, r2, #10
 8004ae8:	4602      	mov	r2, r0
 8004aea:	460b      	mov	r3, r1
 8004aec:	4610      	mov	r0, r2
 8004aee:	4619      	mov	r1, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	461a      	mov	r2, r3
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	f7fb fbc2 	bl	8000280 <__aeabi_uldivmod>
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	4613      	mov	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b04:	4b0b      	ldr	r3, [pc, #44]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	0c1b      	lsrs	r3, r3, #16
 8004b0a:	f003 0303 	and.w	r3, r3, #3
 8004b0e:	3301      	adds	r3, #1
 8004b10:	005b      	lsls	r3, r3, #1
 8004b12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1c:	60bb      	str	r3, [r7, #8]
      break;
 8004b1e:	e002      	b.n	8004b26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b20:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004b22:	60bb      	str	r3, [r7, #8]
      break;
 8004b24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b26:	68bb      	ldr	r3, [r7, #8]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004b32:	bf00      	nop
 8004b34:	40023800 	.word	0x40023800
 8004b38:	00f42400 	.word	0x00f42400
 8004b3c:	007a1200 	.word	0x007a1200

08004b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b44:	4b03      	ldr	r3, [pc, #12]	; (8004b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b46:	681b      	ldr	r3, [r3, #0]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	20000000 	.word	0x20000000

08004b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b5c:	f7ff fff0 	bl	8004b40 <HAL_RCC_GetHCLKFreq>
 8004b60:	4602      	mov	r2, r0
 8004b62:	4b05      	ldr	r3, [pc, #20]	; (8004b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	0a9b      	lsrs	r3, r3, #10
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	4903      	ldr	r1, [pc, #12]	; (8004b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b6e:	5ccb      	ldrb	r3, [r1, r3]
 8004b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	080094ac 	.word	0x080094ac

08004b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b84:	f7ff ffdc 	bl	8004b40 <HAL_RCC_GetHCLKFreq>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	0b5b      	lsrs	r3, r3, #13
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	4903      	ldr	r1, [pc, #12]	; (8004ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b96:	5ccb      	ldrb	r3, [r1, r3]
 8004b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	40023800 	.word	0x40023800
 8004ba4:	080094ac 	.word	0x080094ac

08004ba8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d105      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d035      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004bd0:	4b62      	ldr	r3, [pc, #392]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bd6:	f7fc fd27 	bl	8001628 <HAL_GetTick>
 8004bda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bdc:	e008      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bde:	f7fc fd23 	bl	8001628 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e0b0      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bf0:	4b5b      	ldr	r3, [pc, #364]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1f0      	bne.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	019a      	lsls	r2, r3, #6
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	071b      	lsls	r3, r3, #28
 8004c08:	4955      	ldr	r1, [pc, #340]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c10:	4b52      	ldr	r3, [pc, #328]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c12:	2201      	movs	r2, #1
 8004c14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c16:	f7fc fd07 	bl	8001628 <HAL_GetTick>
 8004c1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c1c:	e008      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c1e:	f7fc fd03 	bl	8001628 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e090      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c30:	4b4b      	ldr	r3, [pc, #300]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d0f0      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 8083 	beq.w	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	4b44      	ldr	r3, [pc, #272]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	4a43      	ldr	r2, [pc, #268]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c58:	6413      	str	r3, [r2, #64]	; 0x40
 8004c5a:	4b41      	ldr	r3, [pc, #260]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c66:	4b3f      	ldr	r3, [pc, #252]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a3e      	ldr	r2, [pc, #248]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c70:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c72:	f7fc fcd9 	bl	8001628 <HAL_GetTick>
 8004c76:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c78:	e008      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c7a:	f7fc fcd5 	bl	8001628 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e062      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c8c:	4b35      	ldr	r3, [pc, #212]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0f0      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c98:	4b31      	ldr	r3, [pc, #196]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d02f      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d028      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cb6:	4b2a      	ldr	r3, [pc, #168]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cbe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cc0:	4b29      	ldr	r3, [pc, #164]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cc6:	4b28      	ldr	r3, [pc, #160]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ccc:	4a24      	ldr	r2, [pc, #144]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004cd2:	4b23      	ldr	r3, [pc, #140]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d114      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004cde:	f7fc fca3 	bl	8001628 <HAL_GetTick>
 8004ce2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce4:	e00a      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ce6:	f7fc fc9f 	bl	8001628 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e02a      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cfc:	4b18      	ldr	r3, [pc, #96]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0ee      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d14:	d10d      	bne.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d16:	4b12      	ldr	r3, [pc, #72]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d2a:	490d      	ldr	r1, [pc, #52]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	608b      	str	r3, [r1, #8]
 8004d30:	e005      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d32:	4b0b      	ldr	r3, [pc, #44]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	4a0a      	ldr	r2, [pc, #40]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d38:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d3c:	6093      	str	r3, [r2, #8]
 8004d3e:	4b08      	ldr	r3, [pc, #32]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d4a:	4905      	ldr	r1, [pc, #20]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3718      	adds	r7, #24
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	42470068 	.word	0x42470068
 8004d60:	40023800 	.word	0x40023800
 8004d64:	40007000 	.word	0x40007000
 8004d68:	42470e40 	.word	0x42470e40

08004d6c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004d80:	2300      	movs	r3, #0
 8004d82:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d13e      	bne.n	8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004d8a:	4b23      	ldr	r3, [pc, #140]	; (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d005      	beq.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d12f      	bne.n	8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004da0:	4b1e      	ldr	r3, [pc, #120]	; (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004da2:	617b      	str	r3, [r7, #20]
          break;
 8004da4:	e02f      	b.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004da6:	4b1c      	ldr	r3, [pc, #112]	; (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004db2:	d108      	bne.n	8004dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004db4:	4b18      	ldr	r3, [pc, #96]	; (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dbc:	4a18      	ldr	r2, [pc, #96]	; (8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc2:	613b      	str	r3, [r7, #16]
 8004dc4:	e007      	b.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004dc6:	4b14      	ldr	r3, [pc, #80]	; (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dce:	4a15      	ldr	r2, [pc, #84]	; (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004dd6:	4b10      	ldr	r3, [pc, #64]	; (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ddc:	099b      	lsrs	r3, r3, #6
 8004dde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	fb02 f303 	mul.w	r3, r2, r3
 8004de8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004dea:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004df0:	0f1b      	lsrs	r3, r3, #28
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfc:	617b      	str	r3, [r7, #20]
          break;
 8004dfe:	e002      	b.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004e00:	2300      	movs	r3, #0
 8004e02:	617b      	str	r3, [r7, #20]
          break;
 8004e04:	bf00      	nop
        }
      }
      break;
 8004e06:	bf00      	nop
    }
  }
  return frequency;
 8004e08:	697b      	ldr	r3, [r7, #20]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	371c      	adds	r7, #28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	40023800 	.word	0x40023800
 8004e1c:	00bb8000 	.word	0x00bb8000
 8004e20:	007a1200 	.word	0x007a1200
 8004e24:	00f42400 	.word	0x00f42400

08004e28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e07b      	b.n	8004f32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d108      	bne.n	8004e54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e4a:	d009      	beq.n	8004e60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	61da      	str	r2, [r3, #28]
 8004e52:	e005      	b.n	8004e60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d106      	bne.n	8004e80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7fb fef8 	bl	8000c70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee4:	ea42 0103 	orr.w	r1, r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	0c1b      	lsrs	r3, r3, #16
 8004efe:	f003 0104 	and.w	r1, r3, #4
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	f003 0210 	and.w	r2, r3, #16
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69da      	ldr	r2, [r3, #28]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b082      	sub	sp, #8
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e03f      	b.n	8004fcc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d106      	bne.n	8004f66 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f7fb fecd 	bl	8000d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2224      	movs	r2, #36	; 0x24
 8004f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f7c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f9ca 	bl	8005318 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691a      	ldr	r2, [r3, #16]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f92:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695a      	ldr	r2, [r3, #20]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fa2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fb2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b08a      	sub	sp, #40	; 0x28
 8004fd8:	af02      	add	r7, sp, #8
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	603b      	str	r3, [r7, #0]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b20      	cmp	r3, #32
 8004ff2:	d17c      	bne.n	80050ee <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d002      	beq.n	8005000 <HAL_UART_Transmit+0x2c>
 8004ffa:	88fb      	ldrh	r3, [r7, #6]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e075      	b.n	80050f0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800500a:	2b01      	cmp	r3, #1
 800500c:	d101      	bne.n	8005012 <HAL_UART_Transmit+0x3e>
 800500e:	2302      	movs	r3, #2
 8005010:	e06e      	b.n	80050f0 <HAL_UART_Transmit+0x11c>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2221      	movs	r2, #33	; 0x21
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005028:	f7fc fafe 	bl	8001628 <HAL_GetTick>
 800502c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	88fa      	ldrh	r2, [r7, #6]
 8005032:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	88fa      	ldrh	r2, [r7, #6]
 8005038:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005042:	d108      	bne.n	8005056 <HAL_UART_Transmit+0x82>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d104      	bne.n	8005056 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800504c:	2300      	movs	r3, #0
 800504e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	61bb      	str	r3, [r7, #24]
 8005054:	e003      	b.n	800505e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800505a:	2300      	movs	r3, #0
 800505c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005066:	e02a      	b.n	80050be <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	2200      	movs	r2, #0
 8005070:	2180      	movs	r1, #128	; 0x80
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 f8e2 	bl	800523c <UART_WaitOnFlagUntilTimeout>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e036      	b.n	80050f0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10b      	bne.n	80050a0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	881b      	ldrh	r3, [r3, #0]
 800508c:	461a      	mov	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005096:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	3302      	adds	r3, #2
 800509c:	61bb      	str	r3, [r7, #24]
 800509e:	e007      	b.n	80050b0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	781a      	ldrb	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	3301      	adds	r3, #1
 80050ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	3b01      	subs	r3, #1
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1cf      	bne.n	8005068 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	2200      	movs	r2, #0
 80050d0:	2140      	movs	r1, #64	; 0x40
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 f8b2 	bl	800523c <UART_WaitOnFlagUntilTimeout>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e006      	b.n	80050f0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2220      	movs	r2, #32
 80050e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80050ea:	2300      	movs	r3, #0
 80050ec:	e000      	b.n	80050f0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80050ee:	2302      	movs	r3, #2
  }
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3720      	adds	r7, #32
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b08a      	sub	sp, #40	; 0x28
 80050fc:	af02      	add	r7, sp, #8
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	603b      	str	r3, [r7, #0]
 8005104:	4613      	mov	r3, r2
 8005106:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b20      	cmp	r3, #32
 8005116:	f040 808c 	bne.w	8005232 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <HAL_UART_Receive+0x2e>
 8005120:	88fb      	ldrh	r3, [r7, #6]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e084      	b.n	8005234 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_UART_Receive+0x40>
 8005134:	2302      	movs	r3, #2
 8005136:	e07d      	b.n	8005234 <HAL_UART_Receive+0x13c>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2222      	movs	r2, #34	; 0x22
 800514a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005154:	f7fc fa68 	bl	8001628 <HAL_GetTick>
 8005158:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	88fa      	ldrh	r2, [r7, #6]
 800515e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	88fa      	ldrh	r2, [r7, #6]
 8005164:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800516e:	d108      	bne.n	8005182 <HAL_UART_Receive+0x8a>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d104      	bne.n	8005182 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005178:	2300      	movs	r3, #0
 800517a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	61bb      	str	r3, [r7, #24]
 8005180:	e003      	b.n	800518a <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005186:	2300      	movs	r3, #0
 8005188:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005192:	e043      	b.n	800521c <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	2200      	movs	r2, #0
 800519c:	2120      	movs	r1, #32
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 f84c 	bl	800523c <UART_WaitOnFlagUntilTimeout>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e042      	b.n	8005234 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10c      	bne.n	80051ce <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	3302      	adds	r3, #2
 80051ca:	61bb      	str	r3, [r7, #24]
 80051cc:	e01f      	b.n	800520e <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d6:	d007      	beq.n	80051e8 <HAL_UART_Receive+0xf0>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10a      	bne.n	80051f6 <HAL_UART_Receive+0xfe>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d106      	bne.n	80051f6 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	b2da      	uxtb	r2, r3
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	701a      	strb	r2, [r3, #0]
 80051f4:	e008      	b.n	8005208 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005202:	b2da      	uxtb	r2, r3
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	3301      	adds	r3, #1
 800520c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005212:	b29b      	uxth	r3, r3
 8005214:	3b01      	subs	r3, #1
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005220:	b29b      	uxth	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1b6      	bne.n	8005194 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2220      	movs	r2, #32
 800522a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800522e:	2300      	movs	r3, #0
 8005230:	e000      	b.n	8005234 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005232:	2302      	movs	r3, #2
  }
}
 8005234:	4618      	mov	r0, r3
 8005236:	3720      	adds	r7, #32
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b090      	sub	sp, #64	; 0x40
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	603b      	str	r3, [r7, #0]
 8005248:	4613      	mov	r3, r2
 800524a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800524c:	e050      	b.n	80052f0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800524e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005254:	d04c      	beq.n	80052f0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005258:	2b00      	cmp	r3, #0
 800525a:	d007      	beq.n	800526c <UART_WaitOnFlagUntilTimeout+0x30>
 800525c:	f7fc f9e4 	bl	8001628 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005268:	429a      	cmp	r2, r3
 800526a:	d241      	bcs.n	80052f0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	330c      	adds	r3, #12
 8005272:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005276:	e853 3f00 	ldrex	r3, [r3]
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	330c      	adds	r3, #12
 800528a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800528c:	637a      	str	r2, [r7, #52]	; 0x34
 800528e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005290:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005294:	e841 2300 	strex	r3, r2, [r1]
 8005298:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800529a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1e5      	bne.n	800526c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	3314      	adds	r3, #20
 80052a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	e853 3f00 	ldrex	r3, [r3]
 80052ae:	613b      	str	r3, [r7, #16]
   return(result);
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f023 0301 	bic.w	r3, r3, #1
 80052b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3314      	adds	r3, #20
 80052be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052c0:	623a      	str	r2, [r7, #32]
 80052c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c4:	69f9      	ldr	r1, [r7, #28]
 80052c6:	6a3a      	ldr	r2, [r7, #32]
 80052c8:	e841 2300 	strex	r3, r2, [r1]
 80052cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e5      	bne.n	80052a0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2220      	movs	r2, #32
 80052e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e00f      	b.n	8005310 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	4013      	ands	r3, r2
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	bf0c      	ite	eq
 8005300:	2301      	moveq	r3, #1
 8005302:	2300      	movne	r3, #0
 8005304:	b2db      	uxtb	r3, r3
 8005306:	461a      	mov	r2, r3
 8005308:	79fb      	ldrb	r3, [r7, #7]
 800530a:	429a      	cmp	r2, r3
 800530c:	d09f      	beq.n	800524e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3740      	adds	r7, #64	; 0x40
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800531c:	b09f      	sub	sp, #124	; 0x7c
 800531e:	af00      	add	r7, sp, #0
 8005320:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800532c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800532e:	68d9      	ldr	r1, [r3, #12]
 8005330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	ea40 0301 	orr.w	r3, r0, r1
 8005338:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800533a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800533c:	689a      	ldr	r2, [r3, #8]
 800533e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	431a      	orrs	r2, r3
 8005344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	431a      	orrs	r2, r3
 800534a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	4313      	orrs	r3, r2
 8005350:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800535c:	f021 010c 	bic.w	r1, r1, #12
 8005360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005366:	430b      	orrs	r3, r1
 8005368:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800536a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005376:	6999      	ldr	r1, [r3, #24]
 8005378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	ea40 0301 	orr.w	r3, r0, r1
 8005380:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	4bc5      	ldr	r3, [pc, #788]	; (800569c <UART_SetConfig+0x384>)
 8005388:	429a      	cmp	r2, r3
 800538a:	d004      	beq.n	8005396 <UART_SetConfig+0x7e>
 800538c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	4bc3      	ldr	r3, [pc, #780]	; (80056a0 <UART_SetConfig+0x388>)
 8005392:	429a      	cmp	r2, r3
 8005394:	d103      	bne.n	800539e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005396:	f7ff fbf3 	bl	8004b80 <HAL_RCC_GetPCLK2Freq>
 800539a:	6778      	str	r0, [r7, #116]	; 0x74
 800539c:	e002      	b.n	80053a4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800539e:	f7ff fbdb 	bl	8004b58 <HAL_RCC_GetPCLK1Freq>
 80053a2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a6:	69db      	ldr	r3, [r3, #28]
 80053a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ac:	f040 80b6 	bne.w	800551c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053b2:	461c      	mov	r4, r3
 80053b4:	f04f 0500 	mov.w	r5, #0
 80053b8:	4622      	mov	r2, r4
 80053ba:	462b      	mov	r3, r5
 80053bc:	1891      	adds	r1, r2, r2
 80053be:	6439      	str	r1, [r7, #64]	; 0x40
 80053c0:	415b      	adcs	r3, r3
 80053c2:	647b      	str	r3, [r7, #68]	; 0x44
 80053c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053c8:	1912      	adds	r2, r2, r4
 80053ca:	eb45 0303 	adc.w	r3, r5, r3
 80053ce:	f04f 0000 	mov.w	r0, #0
 80053d2:	f04f 0100 	mov.w	r1, #0
 80053d6:	00d9      	lsls	r1, r3, #3
 80053d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053dc:	00d0      	lsls	r0, r2, #3
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	1911      	adds	r1, r2, r4
 80053e4:	6639      	str	r1, [r7, #96]	; 0x60
 80053e6:	416b      	adcs	r3, r5
 80053e8:	667b      	str	r3, [r7, #100]	; 0x64
 80053ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	461a      	mov	r2, r3
 80053f0:	f04f 0300 	mov.w	r3, #0
 80053f4:	1891      	adds	r1, r2, r2
 80053f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80053f8:	415b      	adcs	r3, r3
 80053fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005400:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005404:	f7fa ff3c 	bl	8000280 <__aeabi_uldivmod>
 8005408:	4602      	mov	r2, r0
 800540a:	460b      	mov	r3, r1
 800540c:	4ba5      	ldr	r3, [pc, #660]	; (80056a4 <UART_SetConfig+0x38c>)
 800540e:	fba3 2302 	umull	r2, r3, r3, r2
 8005412:	095b      	lsrs	r3, r3, #5
 8005414:	011e      	lsls	r6, r3, #4
 8005416:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005418:	461c      	mov	r4, r3
 800541a:	f04f 0500 	mov.w	r5, #0
 800541e:	4622      	mov	r2, r4
 8005420:	462b      	mov	r3, r5
 8005422:	1891      	adds	r1, r2, r2
 8005424:	6339      	str	r1, [r7, #48]	; 0x30
 8005426:	415b      	adcs	r3, r3
 8005428:	637b      	str	r3, [r7, #52]	; 0x34
 800542a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800542e:	1912      	adds	r2, r2, r4
 8005430:	eb45 0303 	adc.w	r3, r5, r3
 8005434:	f04f 0000 	mov.w	r0, #0
 8005438:	f04f 0100 	mov.w	r1, #0
 800543c:	00d9      	lsls	r1, r3, #3
 800543e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005442:	00d0      	lsls	r0, r2, #3
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	1911      	adds	r1, r2, r4
 800544a:	65b9      	str	r1, [r7, #88]	; 0x58
 800544c:	416b      	adcs	r3, r5
 800544e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	461a      	mov	r2, r3
 8005456:	f04f 0300 	mov.w	r3, #0
 800545a:	1891      	adds	r1, r2, r2
 800545c:	62b9      	str	r1, [r7, #40]	; 0x28
 800545e:	415b      	adcs	r3, r3
 8005460:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005462:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005466:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800546a:	f7fa ff09 	bl	8000280 <__aeabi_uldivmod>
 800546e:	4602      	mov	r2, r0
 8005470:	460b      	mov	r3, r1
 8005472:	4b8c      	ldr	r3, [pc, #560]	; (80056a4 <UART_SetConfig+0x38c>)
 8005474:	fba3 1302 	umull	r1, r3, r3, r2
 8005478:	095b      	lsrs	r3, r3, #5
 800547a:	2164      	movs	r1, #100	; 0x64
 800547c:	fb01 f303 	mul.w	r3, r1, r3
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	3332      	adds	r3, #50	; 0x32
 8005486:	4a87      	ldr	r2, [pc, #540]	; (80056a4 <UART_SetConfig+0x38c>)
 8005488:	fba2 2303 	umull	r2, r3, r2, r3
 800548c:	095b      	lsrs	r3, r3, #5
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005494:	441e      	add	r6, r3
 8005496:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005498:	4618      	mov	r0, r3
 800549a:	f04f 0100 	mov.w	r1, #0
 800549e:	4602      	mov	r2, r0
 80054a0:	460b      	mov	r3, r1
 80054a2:	1894      	adds	r4, r2, r2
 80054a4:	623c      	str	r4, [r7, #32]
 80054a6:	415b      	adcs	r3, r3
 80054a8:	627b      	str	r3, [r7, #36]	; 0x24
 80054aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054ae:	1812      	adds	r2, r2, r0
 80054b0:	eb41 0303 	adc.w	r3, r1, r3
 80054b4:	f04f 0400 	mov.w	r4, #0
 80054b8:	f04f 0500 	mov.w	r5, #0
 80054bc:	00dd      	lsls	r5, r3, #3
 80054be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80054c2:	00d4      	lsls	r4, r2, #3
 80054c4:	4622      	mov	r2, r4
 80054c6:	462b      	mov	r3, r5
 80054c8:	1814      	adds	r4, r2, r0
 80054ca:	653c      	str	r4, [r7, #80]	; 0x50
 80054cc:	414b      	adcs	r3, r1
 80054ce:	657b      	str	r3, [r7, #84]	; 0x54
 80054d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	461a      	mov	r2, r3
 80054d6:	f04f 0300 	mov.w	r3, #0
 80054da:	1891      	adds	r1, r2, r2
 80054dc:	61b9      	str	r1, [r7, #24]
 80054de:	415b      	adcs	r3, r3
 80054e0:	61fb      	str	r3, [r7, #28]
 80054e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80054ea:	f7fa fec9 	bl	8000280 <__aeabi_uldivmod>
 80054ee:	4602      	mov	r2, r0
 80054f0:	460b      	mov	r3, r1
 80054f2:	4b6c      	ldr	r3, [pc, #432]	; (80056a4 <UART_SetConfig+0x38c>)
 80054f4:	fba3 1302 	umull	r1, r3, r3, r2
 80054f8:	095b      	lsrs	r3, r3, #5
 80054fa:	2164      	movs	r1, #100	; 0x64
 80054fc:	fb01 f303 	mul.w	r3, r1, r3
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	3332      	adds	r3, #50	; 0x32
 8005506:	4a67      	ldr	r2, [pc, #412]	; (80056a4 <UART_SetConfig+0x38c>)
 8005508:	fba2 2303 	umull	r2, r3, r2, r3
 800550c:	095b      	lsrs	r3, r3, #5
 800550e:	f003 0207 	and.w	r2, r3, #7
 8005512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4432      	add	r2, r6
 8005518:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800551a:	e0b9      	b.n	8005690 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800551c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800551e:	461c      	mov	r4, r3
 8005520:	f04f 0500 	mov.w	r5, #0
 8005524:	4622      	mov	r2, r4
 8005526:	462b      	mov	r3, r5
 8005528:	1891      	adds	r1, r2, r2
 800552a:	6139      	str	r1, [r7, #16]
 800552c:	415b      	adcs	r3, r3
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005534:	1912      	adds	r2, r2, r4
 8005536:	eb45 0303 	adc.w	r3, r5, r3
 800553a:	f04f 0000 	mov.w	r0, #0
 800553e:	f04f 0100 	mov.w	r1, #0
 8005542:	00d9      	lsls	r1, r3, #3
 8005544:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005548:	00d0      	lsls	r0, r2, #3
 800554a:	4602      	mov	r2, r0
 800554c:	460b      	mov	r3, r1
 800554e:	eb12 0804 	adds.w	r8, r2, r4
 8005552:	eb43 0905 	adc.w	r9, r3, r5
 8005556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	4618      	mov	r0, r3
 800555c:	f04f 0100 	mov.w	r1, #0
 8005560:	f04f 0200 	mov.w	r2, #0
 8005564:	f04f 0300 	mov.w	r3, #0
 8005568:	008b      	lsls	r3, r1, #2
 800556a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800556e:	0082      	lsls	r2, r0, #2
 8005570:	4640      	mov	r0, r8
 8005572:	4649      	mov	r1, r9
 8005574:	f7fa fe84 	bl	8000280 <__aeabi_uldivmod>
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	4b49      	ldr	r3, [pc, #292]	; (80056a4 <UART_SetConfig+0x38c>)
 800557e:	fba3 2302 	umull	r2, r3, r3, r2
 8005582:	095b      	lsrs	r3, r3, #5
 8005584:	011e      	lsls	r6, r3, #4
 8005586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005588:	4618      	mov	r0, r3
 800558a:	f04f 0100 	mov.w	r1, #0
 800558e:	4602      	mov	r2, r0
 8005590:	460b      	mov	r3, r1
 8005592:	1894      	adds	r4, r2, r2
 8005594:	60bc      	str	r4, [r7, #8]
 8005596:	415b      	adcs	r3, r3
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800559e:	1812      	adds	r2, r2, r0
 80055a0:	eb41 0303 	adc.w	r3, r1, r3
 80055a4:	f04f 0400 	mov.w	r4, #0
 80055a8:	f04f 0500 	mov.w	r5, #0
 80055ac:	00dd      	lsls	r5, r3, #3
 80055ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80055b2:	00d4      	lsls	r4, r2, #3
 80055b4:	4622      	mov	r2, r4
 80055b6:	462b      	mov	r3, r5
 80055b8:	1814      	adds	r4, r2, r0
 80055ba:	64bc      	str	r4, [r7, #72]	; 0x48
 80055bc:	414b      	adcs	r3, r1
 80055be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f04f 0100 	mov.w	r1, #0
 80055ca:	f04f 0200 	mov.w	r2, #0
 80055ce:	f04f 0300 	mov.w	r3, #0
 80055d2:	008b      	lsls	r3, r1, #2
 80055d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80055d8:	0082      	lsls	r2, r0, #2
 80055da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80055de:	f7fa fe4f 	bl	8000280 <__aeabi_uldivmod>
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	4b2f      	ldr	r3, [pc, #188]	; (80056a4 <UART_SetConfig+0x38c>)
 80055e8:	fba3 1302 	umull	r1, r3, r3, r2
 80055ec:	095b      	lsrs	r3, r3, #5
 80055ee:	2164      	movs	r1, #100	; 0x64
 80055f0:	fb01 f303 	mul.w	r3, r1, r3
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	011b      	lsls	r3, r3, #4
 80055f8:	3332      	adds	r3, #50	; 0x32
 80055fa:	4a2a      	ldr	r2, [pc, #168]	; (80056a4 <UART_SetConfig+0x38c>)
 80055fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005600:	095b      	lsrs	r3, r3, #5
 8005602:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005606:	441e      	add	r6, r3
 8005608:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800560a:	4618      	mov	r0, r3
 800560c:	f04f 0100 	mov.w	r1, #0
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	1894      	adds	r4, r2, r2
 8005616:	603c      	str	r4, [r7, #0]
 8005618:	415b      	adcs	r3, r3
 800561a:	607b      	str	r3, [r7, #4]
 800561c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005620:	1812      	adds	r2, r2, r0
 8005622:	eb41 0303 	adc.w	r3, r1, r3
 8005626:	f04f 0400 	mov.w	r4, #0
 800562a:	f04f 0500 	mov.w	r5, #0
 800562e:	00dd      	lsls	r5, r3, #3
 8005630:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005634:	00d4      	lsls	r4, r2, #3
 8005636:	4622      	mov	r2, r4
 8005638:	462b      	mov	r3, r5
 800563a:	eb12 0a00 	adds.w	sl, r2, r0
 800563e:	eb43 0b01 	adc.w	fp, r3, r1
 8005642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	4618      	mov	r0, r3
 8005648:	f04f 0100 	mov.w	r1, #0
 800564c:	f04f 0200 	mov.w	r2, #0
 8005650:	f04f 0300 	mov.w	r3, #0
 8005654:	008b      	lsls	r3, r1, #2
 8005656:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800565a:	0082      	lsls	r2, r0, #2
 800565c:	4650      	mov	r0, sl
 800565e:	4659      	mov	r1, fp
 8005660:	f7fa fe0e 	bl	8000280 <__aeabi_uldivmod>
 8005664:	4602      	mov	r2, r0
 8005666:	460b      	mov	r3, r1
 8005668:	4b0e      	ldr	r3, [pc, #56]	; (80056a4 <UART_SetConfig+0x38c>)
 800566a:	fba3 1302 	umull	r1, r3, r3, r2
 800566e:	095b      	lsrs	r3, r3, #5
 8005670:	2164      	movs	r1, #100	; 0x64
 8005672:	fb01 f303 	mul.w	r3, r1, r3
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	011b      	lsls	r3, r3, #4
 800567a:	3332      	adds	r3, #50	; 0x32
 800567c:	4a09      	ldr	r2, [pc, #36]	; (80056a4 <UART_SetConfig+0x38c>)
 800567e:	fba2 2303 	umull	r2, r3, r2, r3
 8005682:	095b      	lsrs	r3, r3, #5
 8005684:	f003 020f 	and.w	r2, r3, #15
 8005688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4432      	add	r2, r6
 800568e:	609a      	str	r2, [r3, #8]
}
 8005690:	bf00      	nop
 8005692:	377c      	adds	r7, #124	; 0x7c
 8005694:	46bd      	mov	sp, r7
 8005696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800569a:	bf00      	nop
 800569c:	40011000 	.word	0x40011000
 80056a0:	40011400 	.word	0x40011400
 80056a4:	51eb851f 	.word	0x51eb851f

080056a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056a8:	b084      	sub	sp, #16
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b084      	sub	sp, #16
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	f107 001c 	add.w	r0, r7, #28
 80056b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d122      	bne.n	8005706 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80056d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80056e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d105      	bne.n	80056fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f9a0 	bl	8005a40 <USB_CoreReset>
 8005700:	4603      	mov	r3, r0
 8005702:	73fb      	strb	r3, [r7, #15]
 8005704:	e01a      	b.n	800573c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f994 	bl	8005a40 <USB_CoreReset>
 8005718:	4603      	mov	r3, r0
 800571a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800571c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800571e:	2b00      	cmp	r3, #0
 8005720:	d106      	bne.n	8005730 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005726:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	639a      	str	r2, [r3, #56]	; 0x38
 800572e:	e005      	b.n	800573c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005734:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800573c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573e:	2b01      	cmp	r3, #1
 8005740:	d10b      	bne.n	800575a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f043 0206 	orr.w	r2, r3, #6
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f043 0220 	orr.w	r2, r3, #32
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800575a:	7bfb      	ldrb	r3, [r7, #15]
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005766:	b004      	add	sp, #16
 8005768:	4770      	bx	lr

0800576a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800576a:	b480      	push	{r7}
 800576c:	b083      	sub	sp, #12
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f043 0201 	orr.w	r2, r3, #1
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f023 0201 	bic.w	r2, r3, #1
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b084      	sub	sp, #16
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
 80057b6:	460b      	mov	r3, r1
 80057b8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80057ba:	2300      	movs	r3, #0
 80057bc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057ca:	78fb      	ldrb	r3, [r7, #3]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d115      	bne.n	80057fc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057dc:	2001      	movs	r0, #1
 80057de:	f7fb ff2f 	bl	8001640 <HAL_Delay>
      ms++;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3301      	adds	r3, #1
 80057e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f91a 	bl	8005a22 <USB_GetMode>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d01e      	beq.n	8005832 <USB_SetCurrentMode+0x84>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2b31      	cmp	r3, #49	; 0x31
 80057f8:	d9f0      	bls.n	80057dc <USB_SetCurrentMode+0x2e>
 80057fa:	e01a      	b.n	8005832 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80057fc:	78fb      	ldrb	r3, [r7, #3]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d115      	bne.n	800582e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800580e:	2001      	movs	r0, #1
 8005810:	f7fb ff16 	bl	8001640 <HAL_Delay>
      ms++;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	3301      	adds	r3, #1
 8005818:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f901 	bl	8005a22 <USB_GetMode>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d005      	beq.n	8005832 <USB_SetCurrentMode+0x84>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2b31      	cmp	r3, #49	; 0x31
 800582a:	d9f0      	bls.n	800580e <USB_SetCurrentMode+0x60>
 800582c:	e001      	b.n	8005832 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e005      	b.n	800583e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2b32      	cmp	r3, #50	; 0x32
 8005836:	d101      	bne.n	800583c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e000      	b.n	800583e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	019b      	lsls	r3, r3, #6
 800585a:	f043 0220 	orr.w	r2, r3, #32
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	3301      	adds	r3, #1
 8005866:	60fb      	str	r3, [r7, #12]
 8005868:	4a08      	ldr	r2, [pc, #32]	; (800588c <USB_FlushTxFifo+0x44>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d901      	bls.n	8005872 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e006      	b.n	8005880 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	f003 0320 	and.w	r3, r3, #32
 800587a:	2b20      	cmp	r3, #32
 800587c:	d0f1      	beq.n	8005862 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	00030d40 	.word	0x00030d40

08005890 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005898:	2300      	movs	r3, #0
 800589a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2210      	movs	r2, #16
 80058a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	3301      	adds	r3, #1
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	4a08      	ldr	r2, [pc, #32]	; (80058cc <USB_FlushRxFifo+0x3c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d901      	bls.n	80058b2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e006      	b.n	80058c0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f003 0310 	and.w	r3, r3, #16
 80058ba:	2b10      	cmp	r3, #16
 80058bc:	d0f1      	beq.n	80058a2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	00030d40 	.word	0x00030d40

080058d0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b089      	sub	sp, #36	; 0x24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	4611      	mov	r1, r2
 80058dc:	461a      	mov	r2, r3
 80058de:	460b      	mov	r3, r1
 80058e0:	71fb      	strb	r3, [r7, #7]
 80058e2:	4613      	mov	r3, r2
 80058e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80058ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d123      	bne.n	800593e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80058f6:	88bb      	ldrh	r3, [r7, #4]
 80058f8:	3303      	adds	r3, #3
 80058fa:	089b      	lsrs	r3, r3, #2
 80058fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80058fe:	2300      	movs	r3, #0
 8005900:	61bb      	str	r3, [r7, #24]
 8005902:	e018      	b.n	8005936 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005904:	79fb      	ldrb	r3, [r7, #7]
 8005906:	031a      	lsls	r2, r3, #12
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	4413      	add	r3, r2
 800590c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005910:	461a      	mov	r2, r3
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	3301      	adds	r3, #1
 800591c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	3301      	adds	r3, #1
 8005922:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	3301      	adds	r3, #1
 8005928:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	3301      	adds	r3, #1
 800592e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	3301      	adds	r3, #1
 8005934:	61bb      	str	r3, [r7, #24]
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	429a      	cmp	r2, r3
 800593c:	d3e2      	bcc.n	8005904 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3724      	adds	r7, #36	; 0x24
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800594c:	b480      	push	{r7}
 800594e:	b08b      	sub	sp, #44	; 0x2c
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	4613      	mov	r3, r2
 8005958:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005962:	88fb      	ldrh	r3, [r7, #6]
 8005964:	089b      	lsrs	r3, r3, #2
 8005966:	b29b      	uxth	r3, r3
 8005968:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800596a:	88fb      	ldrh	r3, [r7, #6]
 800596c:	f003 0303 	and.w	r3, r3, #3
 8005970:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005972:	2300      	movs	r3, #0
 8005974:	623b      	str	r3, [r7, #32]
 8005976:	e014      	b.n	80059a2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	601a      	str	r2, [r3, #0]
    pDest++;
 8005984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005986:	3301      	adds	r3, #1
 8005988:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	3301      	adds	r3, #1
 800598e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	3301      	adds	r3, #1
 8005994:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	3301      	adds	r3, #1
 800599a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	3301      	adds	r3, #1
 80059a0:	623b      	str	r3, [r7, #32]
 80059a2:	6a3a      	ldr	r2, [r7, #32]
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d3e6      	bcc.n	8005978 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80059aa:	8bfb      	ldrh	r3, [r7, #30]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d01e      	beq.n	80059ee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059ba:	461a      	mov	r2, r3
 80059bc:	f107 0310 	add.w	r3, r7, #16
 80059c0:	6812      	ldr	r2, [r2, #0]
 80059c2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	fa22 f303 	lsr.w	r3, r2, r3
 80059d0:	b2da      	uxtb	r2, r3
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	701a      	strb	r2, [r3, #0]
      i++;
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	3301      	adds	r3, #1
 80059da:	623b      	str	r3, [r7, #32]
      pDest++;
 80059dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059de:	3301      	adds	r3, #1
 80059e0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80059e2:	8bfb      	ldrh	r3, [r7, #30]
 80059e4:	3b01      	subs	r3, #1
 80059e6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80059e8:	8bfb      	ldrh	r3, [r7, #30]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1ea      	bne.n	80059c4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	372c      	adds	r7, #44	; 0x2c
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	4013      	ands	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a14:	68fb      	ldr	r3, [r7, #12]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
	...

08005a40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	60fb      	str	r3, [r7, #12]
 8005a52:	4a13      	ldr	r2, [pc, #76]	; (8005aa0 <USB_CoreReset+0x60>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d901      	bls.n	8005a5c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e01a      	b.n	8005a92 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	daf3      	bge.n	8005a4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	f043 0201 	orr.w	r2, r3, #1
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	3301      	adds	r3, #1
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	4a09      	ldr	r2, [pc, #36]	; (8005aa0 <USB_CoreReset+0x60>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d901      	bls.n	8005a84 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e006      	b.n	8005a92 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d0f1      	beq.n	8005a74 <USB_CoreReset+0x34>

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	00030d40 	.word	0x00030d40

08005aa4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005aa4:	b084      	sub	sp, #16
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b084      	sub	sp, #16
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
 8005aae:	f107 001c 	add.w	r0, r7, #28
 8005ab2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d018      	beq.n	8005b28 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d10a      	bne.n	8005b12 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b0a:	f043 0304 	orr.w	r3, r3, #4
 8005b0e:	6013      	str	r3, [r2, #0]
 8005b10:	e014      	b.n	8005b3c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b20:	f023 0304 	bic.w	r3, r3, #4
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	e009      	b.n	8005b3c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b36:	f023 0304 	bic.w	r3, r3, #4
 8005b3a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005b3c:	2110      	movs	r1, #16
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7ff fe82 	bl	8005848 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f7ff fea3 	bl	8005890 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60fb      	str	r3, [r7, #12]
 8005b4e:	e015      	b.n	8005b7c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b62:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b70:	461a      	mov	r2, r3
 8005b72:	2300      	movs	r3, #0
 8005b74:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	60fb      	str	r3, [r7, #12]
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d3e5      	bcc.n	8005b50 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b90:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00b      	beq.n	8005bb6 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ba4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a13      	ldr	r2, [pc, #76]	; (8005bf8 <USB_HostInit+0x154>)
 8005baa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a13      	ldr	r2, [pc, #76]	; (8005bfc <USB_HostInit+0x158>)
 8005bb0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005bb4:	e009      	b.n	8005bca <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2280      	movs	r2, #128	; 0x80
 8005bba:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a10      	ldr	r2, [pc, #64]	; (8005c00 <USB_HostInit+0x15c>)
 8005bc0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a0f      	ldr	r2, [pc, #60]	; (8005c04 <USB_HostInit+0x160>)
 8005bc6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d105      	bne.n	8005bdc <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	f043 0210 	orr.w	r2, r3, #16
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	699a      	ldr	r2, [r3, #24]
 8005be0:	4b09      	ldr	r3, [pc, #36]	; (8005c08 <USB_HostInit+0x164>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bf4:	b004      	add	sp, #16
 8005bf6:	4770      	bx	lr
 8005bf8:	01000200 	.word	0x01000200
 8005bfc:	00e00300 	.word	0x00e00300
 8005c00:	00600080 	.word	0x00600080
 8005c04:	004000e0 	.word	0x004000e0
 8005c08:	a3200008 	.word	0xa3200008

08005c0c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c2a:	f023 0303 	bic.w	r3, r3, #3
 8005c2e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	78fb      	ldrb	r3, [r7, #3]
 8005c3a:	f003 0303 	and.w	r3, r3, #3
 8005c3e:	68f9      	ldr	r1, [r7, #12]
 8005c40:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c44:	4313      	orrs	r3, r2
 8005c46:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005c48:	78fb      	ldrb	r3, [r7, #3]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d107      	bne.n	8005c5e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c54:	461a      	mov	r2, r3
 8005c56:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005c5a:	6053      	str	r3, [r2, #4]
 8005c5c:	e009      	b.n	8005c72 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005c5e:	78fb      	ldrb	r3, [r7, #3]
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d106      	bne.n	8005c72 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005c70:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005ca0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cae:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005cb0:	2064      	movs	r0, #100	; 0x64
 8005cb2:	f7fb fcc5 	bl	8001640 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005cbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cc2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005cc4:	200a      	movs	r0, #10
 8005cc6:	f7fb fcbb 	bl	8001640 <HAL_Delay>

  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3710      	adds	r7, #16
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	460b      	mov	r3, r1
 8005cde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005cf8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d109      	bne.n	8005d18 <USB_DriveVbus+0x44>
 8005d04:	78fb      	ldrb	r3, [r7, #3]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d106      	bne.n	8005d18 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d16:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d22:	d109      	bne.n	8005d38 <USB_DriveVbus+0x64>
 8005d24:	78fb      	ldrb	r3, [r7, #3]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d106      	bne.n	8005d38 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d36:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b085      	sub	sp, #20
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	0c5b      	lsrs	r3, r3, #17
 8005d64:	f003 0303 	and.w	r3, r3, #3
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	b29b      	uxth	r3, r3
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
	...

08005d98 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b088      	sub	sp, #32
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	4608      	mov	r0, r1
 8005da2:	4611      	mov	r1, r2
 8005da4:	461a      	mov	r2, r3
 8005da6:	4603      	mov	r3, r0
 8005da8:	70fb      	strb	r3, [r7, #3]
 8005daa:	460b      	mov	r3, r1
 8005dac:	70bb      	strb	r3, [r7, #2]
 8005dae:	4613      	mov	r3, r2
 8005db0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005db2:	2300      	movs	r3, #0
 8005db4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005dba:	78fb      	ldrb	r3, [r7, #3]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8005dcc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005dce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	d87e      	bhi.n	8005ed4 <USB_HC_Init+0x13c>
 8005dd6:	a201      	add	r2, pc, #4	; (adr r2, 8005ddc <USB_HC_Init+0x44>)
 8005dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ddc:	08005ded 	.word	0x08005ded
 8005de0:	08005e97 	.word	0x08005e97
 8005de4:	08005ded 	.word	0x08005ded
 8005de8:	08005e59 	.word	0x08005e59
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005dec:	78fb      	ldrb	r3, [r7, #3]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df8:	461a      	mov	r2, r3
 8005dfa:	f240 439d 	movw	r3, #1181	; 0x49d
 8005dfe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005e00:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	da10      	bge.n	8005e2a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005e08:	78fb      	ldrb	r3, [r7, #3]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	78fa      	ldrb	r2, [r7, #3]
 8005e18:	0151      	lsls	r1, r2, #5
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	440a      	add	r2, r1
 8005e1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e26:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005e28:	e057      	b.n	8005eda <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d051      	beq.n	8005eda <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005e36:	78fb      	ldrb	r3, [r7, #3]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	78fa      	ldrb	r2, [r7, #3]
 8005e46:	0151      	lsls	r1, r2, #5
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	440a      	add	r2, r1
 8005e4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e50:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005e54:	60d3      	str	r3, [r2, #12]
      break;
 8005e56:	e040      	b.n	8005eda <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e58:	78fb      	ldrb	r3, [r7, #3]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e64:	461a      	mov	r2, r3
 8005e66:	f240 639d 	movw	r3, #1693	; 0x69d
 8005e6a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e6c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	da34      	bge.n	8005ede <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005e74:	78fb      	ldrb	r3, [r7, #3]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	78fa      	ldrb	r2, [r7, #3]
 8005e84:	0151      	lsls	r1, r2, #5
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	440a      	add	r2, r1
 8005e8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e92:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005e94:	e023      	b.n	8005ede <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e96:	78fb      	ldrb	r3, [r7, #3]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	f240 2325 	movw	r3, #549	; 0x225
 8005ea8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005eaa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	da17      	bge.n	8005ee2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005eb2:	78fb      	ldrb	r3, [r7, #3]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	78fa      	ldrb	r2, [r7, #3]
 8005ec2:	0151      	lsls	r1, r2, #5
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	440a      	add	r2, r1
 8005ec8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ecc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005ed0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005ed2:	e006      	b.n	8005ee2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	77fb      	strb	r3, [r7, #31]
      break;
 8005ed8:	e004      	b.n	8005ee4 <USB_HC_Init+0x14c>
      break;
 8005eda:	bf00      	nop
 8005edc:	e002      	b.n	8005ee4 <USB_HC_Init+0x14c>
      break;
 8005ede:	bf00      	nop
 8005ee0:	e000      	b.n	8005ee4 <USB_HC_Init+0x14c>
      break;
 8005ee2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eea:	699a      	ldr	r2, [r3, #24]
 8005eec:	78fb      	ldrb	r3, [r7, #3]
 8005eee:	f003 030f 	and.w	r3, r3, #15
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef8:	6939      	ldr	r1, [r7, #16]
 8005efa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005efe:	4313      	orrs	r3, r2
 8005f00:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005f0e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	da03      	bge.n	8005f1e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f1a:	61bb      	str	r3, [r7, #24]
 8005f1c:	e001      	b.n	8005f22 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7ff ff0f 	bl	8005d46 <USB_GetHostSpeed>
 8005f28:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005f2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d106      	bne.n	8005f40 <USB_HC_Init+0x1a8>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d003      	beq.n	8005f40 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005f38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f3c:	617b      	str	r3, [r7, #20]
 8005f3e:	e001      	b.n	8005f44 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005f40:	2300      	movs	r3, #0
 8005f42:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f44:	787b      	ldrb	r3, [r7, #1]
 8005f46:	059b      	lsls	r3, r3, #22
 8005f48:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f4c:	78bb      	ldrb	r3, [r7, #2]
 8005f4e:	02db      	lsls	r3, r3, #11
 8005f50:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f54:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f56:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f5a:	049b      	lsls	r3, r3, #18
 8005f5c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f60:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f62:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005f64:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f68:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f6e:	78fb      	ldrb	r3, [r7, #3]
 8005f70:	0159      	lsls	r1, r3, #5
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	440b      	add	r3, r1
 8005f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f80:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005f82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f86:	2b03      	cmp	r3, #3
 8005f88:	d10f      	bne.n	8005faa <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005f8a:	78fb      	ldrb	r3, [r7, #3]
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	78fa      	ldrb	r2, [r7, #3]
 8005f9a:	0151      	lsls	r1, r2, #5
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	440a      	add	r2, r1
 8005fa0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fa4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fa8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005faa:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3720      	adds	r7, #32
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b08c      	sub	sp, #48	; 0x30
 8005fb8:	af02      	add	r7, sp, #8
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	785b      	ldrb	r3, [r3, #1]
 8005fca:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005fcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fd0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d02d      	beq.n	800603a <USB_HC_StartXfer+0x86>
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	791b      	ldrb	r3, [r3, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d129      	bne.n	800603a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005fe6:	79fb      	ldrb	r3, [r7, #7]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d117      	bne.n	800601c <USB_HC_StartXfer+0x68>
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	79db      	ldrb	r3, [r3, #7]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d003      	beq.n	8005ffc <USB_HC_StartXfer+0x48>
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	79db      	ldrb	r3, [r3, #7]
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d10f      	bne.n	800601c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	4413      	add	r3, r2
 8006004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	69fa      	ldr	r2, [r7, #28]
 800600c:	0151      	lsls	r1, r2, #5
 800600e:	6a3a      	ldr	r2, [r7, #32]
 8006010:	440a      	add	r2, r1
 8006012:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800601a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800601c:	79fb      	ldrb	r3, [r7, #7]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10b      	bne.n	800603a <USB_HC_StartXfer+0x86>
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	795b      	ldrb	r3, [r3, #5]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d107      	bne.n	800603a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	785b      	ldrb	r3, [r3, #1]
 800602e:	4619      	mov	r1, r3
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 fa2f 	bl	8006494 <USB_DoPing>
      return HAL_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	e0f8      	b.n	800622c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d018      	beq.n	8006074 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	8912      	ldrh	r2, [r2, #8]
 800604a:	4413      	add	r3, r2
 800604c:	3b01      	subs	r3, #1
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	8912      	ldrh	r2, [r2, #8]
 8006052:	fbb3 f3f2 	udiv	r3, r3, r2
 8006056:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006058:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800605a:	8b7b      	ldrh	r3, [r7, #26]
 800605c:	429a      	cmp	r2, r3
 800605e:	d90b      	bls.n	8006078 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006060:	8b7b      	ldrh	r3, [r7, #26]
 8006062:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006064:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	8912      	ldrh	r2, [r2, #8]
 800606a:	fb02 f203 	mul.w	r2, r2, r3
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	611a      	str	r2, [r3, #16]
 8006072:	e001      	b.n	8006078 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006074:	2301      	movs	r3, #1
 8006076:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	78db      	ldrb	r3, [r3, #3]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d007      	beq.n	8006090 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006080:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	8912      	ldrh	r2, [r2, #8]
 8006086:	fb02 f203 	mul.w	r2, r2, r3
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	611a      	str	r2, [r3, #16]
 800608e:	e003      	b.n	8006098 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	695a      	ldr	r2, [r3, #20]
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060a2:	04d9      	lsls	r1, r3, #19
 80060a4:	4b63      	ldr	r3, [pc, #396]	; (8006234 <USB_HC_StartXfer+0x280>)
 80060a6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060a8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	7a9b      	ldrb	r3, [r3, #10]
 80060ae:	075b      	lsls	r3, r3, #29
 80060b0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060b4:	69f9      	ldr	r1, [r7, #28]
 80060b6:	0148      	lsls	r0, r1, #5
 80060b8:	6a39      	ldr	r1, [r7, #32]
 80060ba:	4401      	add	r1, r0
 80060bc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060c0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060c2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80060c4:	79fb      	ldrb	r3, [r7, #7]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d009      	beq.n	80060de <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	68d9      	ldr	r1, [r3, #12]
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	015a      	lsls	r2, r3, #5
 80060d2:	6a3b      	ldr	r3, [r7, #32]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060da:	460a      	mov	r2, r1
 80060dc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	bf0c      	ite	eq
 80060ee:	2301      	moveq	r3, #1
 80060f0:	2300      	movne	r3, #0
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	69fa      	ldr	r2, [r7, #28]
 8006106:	0151      	lsls	r1, r2, #5
 8006108:	6a3a      	ldr	r2, [r7, #32]
 800610a:	440a      	add	r2, r1
 800610c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006110:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006114:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	015a      	lsls	r2, r3, #5
 800611a:	6a3b      	ldr	r3, [r7, #32]
 800611c:	4413      	add	r3, r2
 800611e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	7e7b      	ldrb	r3, [r7, #25]
 8006126:	075b      	lsls	r3, r3, #29
 8006128:	69f9      	ldr	r1, [r7, #28]
 800612a:	0148      	lsls	r0, r1, #5
 800612c:	6a39      	ldr	r1, [r7, #32]
 800612e:	4401      	add	r1, r0
 8006130:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006134:	4313      	orrs	r3, r2
 8006136:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	6a3b      	ldr	r3, [r7, #32]
 800613e:	4413      	add	r3, r2
 8006140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800614e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	78db      	ldrb	r3, [r3, #3]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d004      	beq.n	8006162 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800615e:	613b      	str	r3, [r7, #16]
 8006160:	e003      	b.n	800616a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006168:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006170:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	015a      	lsls	r2, r3, #5
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	4413      	add	r3, r2
 800617a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800617e:	461a      	mov	r2, r3
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006184:	79fb      	ldrb	r3, [r7, #7]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800618a:	2300      	movs	r3, #0
 800618c:	e04e      	b.n	800622c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	78db      	ldrb	r3, [r3, #3]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d149      	bne.n	800622a <USB_HC_StartXfer+0x276>
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d045      	beq.n	800622a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	79db      	ldrb	r3, [r3, #7]
 80061a2:	2b03      	cmp	r3, #3
 80061a4:	d830      	bhi.n	8006208 <USB_HC_StartXfer+0x254>
 80061a6:	a201      	add	r2, pc, #4	; (adr r2, 80061ac <USB_HC_StartXfer+0x1f8>)
 80061a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ac:	080061bd 	.word	0x080061bd
 80061b0:	080061e1 	.word	0x080061e1
 80061b4:	080061bd 	.word	0x080061bd
 80061b8:	080061e1 	.word	0x080061e1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	3303      	adds	r3, #3
 80061c2:	089b      	lsrs	r3, r3, #2
 80061c4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80061c6:	8afa      	ldrh	r2, [r7, #22]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d91c      	bls.n	800620c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	f043 0220 	orr.w	r2, r3, #32
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	619a      	str	r2, [r3, #24]
        }
        break;
 80061de:	e015      	b.n	800620c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	3303      	adds	r3, #3
 80061e6:	089b      	lsrs	r3, r3, #2
 80061e8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80061ea:	8afa      	ldrh	r2, [r7, #22]
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d90a      	bls.n	8006210 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	619a      	str	r2, [r3, #24]
        }
        break;
 8006206:	e003      	b.n	8006210 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006208:	bf00      	nop
 800620a:	e002      	b.n	8006212 <USB_HC_StartXfer+0x25e>
        break;
 800620c:	bf00      	nop
 800620e:	e000      	b.n	8006212 <USB_HC_StartXfer+0x25e>
        break;
 8006210:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	68d9      	ldr	r1, [r3, #12]
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	785a      	ldrb	r2, [r3, #1]
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	b29b      	uxth	r3, r3
 8006220:	2000      	movs	r0, #0
 8006222:	9000      	str	r0, [sp, #0]
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f7ff fb53 	bl	80058d0 <USB_WritePacket>
  }

  return HAL_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3728      	adds	r7, #40	; 0x28
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	1ff80000 	.word	0x1ff80000

08006238 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	b29b      	uxth	r3, r3
}
 800624e:	4618      	mov	r0, r3
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800625a:	b480      	push	{r7}
 800625c:	b089      	sub	sp, #36	; 0x24
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
 8006262:	460b      	mov	r3, r1
 8006264:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800626a:	78fb      	ldrb	r3, [r7, #3]
 800626c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800626e:	2300      	movs	r3, #0
 8006270:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	4413      	add	r3, r2
 800627a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	0c9b      	lsrs	r3, r3, #18
 8006282:	f003 0303 	and.w	r3, r3, #3
 8006286:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	4413      	add	r3, r2
 8006290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	0fdb      	lsrs	r3, r3, #31
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f003 0320 	and.w	r3, r3, #32
 80062a6:	2b20      	cmp	r3, #32
 80062a8:	d104      	bne.n	80062b4 <USB_HC_Halt+0x5a>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80062b0:	2300      	movs	r3, #0
 80062b2:	e0e8      	b.n	8006486 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d002      	beq.n	80062c0 <USB_HC_Halt+0x66>
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d173      	bne.n	80063a8 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	0151      	lsls	r1, r2, #5
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	440a      	add	r2, r1
 80062d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062de:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f003 0320 	and.w	r3, r3, #32
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f040 80cb 	bne.w	8006484 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d143      	bne.n	8006382 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	4413      	add	r3, r2
 8006302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	0151      	lsls	r1, r2, #5
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	440a      	add	r2, r1
 8006310:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006314:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006318:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	4413      	add	r3, r2
 8006322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	0151      	lsls	r1, r2, #5
 800632c:	69ba      	ldr	r2, [r7, #24]
 800632e:	440a      	add	r2, r1
 8006330:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006334:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006338:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	4413      	add	r3, r2
 8006342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	0151      	lsls	r1, r2, #5
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	440a      	add	r2, r1
 8006350:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006354:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006358:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	3301      	adds	r3, #1
 800635e:	61fb      	str	r3, [r7, #28]
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006366:	d81d      	bhi.n	80063a4 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	4413      	add	r3, r2
 8006370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800637a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800637e:	d0ec      	beq.n	800635a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006380:	e080      	b.n	8006484 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	4413      	add	r3, r2
 800638a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	0151      	lsls	r1, r2, #5
 8006394:	69ba      	ldr	r2, [r7, #24]
 8006396:	440a      	add	r2, r1
 8006398:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800639c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063a0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063a2:	e06f      	b.n	8006484 <USB_HC_Halt+0x22a>
            break;
 80063a4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063a6:	e06d      	b.n	8006484 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	0151      	lsls	r1, r2, #5
 80063ba:	69ba      	ldr	r2, [r7, #24]
 80063bc:	440a      	add	r2, r1
 80063be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063c6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d143      	bne.n	8006460 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	0151      	lsls	r1, r2, #5
 80063ea:	69ba      	ldr	r2, [r7, #24]
 80063ec:	440a      	add	r2, r1
 80063ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063f6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	0151      	lsls	r1, r2, #5
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	440a      	add	r2, r1
 800640e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006412:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006416:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	4413      	add	r3, r2
 8006420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	0151      	lsls	r1, r2, #5
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	440a      	add	r2, r1
 800642e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006432:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006436:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	3301      	adds	r3, #1
 800643c:	61fb      	str	r3, [r7, #28]
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006444:	d81d      	bhi.n	8006482 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	4413      	add	r3, r2
 800644e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006458:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800645c:	d0ec      	beq.n	8006438 <USB_HC_Halt+0x1de>
 800645e:	e011      	b.n	8006484 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	4413      	add	r3, r2
 8006468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	0151      	lsls	r1, r2, #5
 8006472:	69ba      	ldr	r2, [r7, #24]
 8006474:	440a      	add	r2, r1
 8006476:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800647a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800647e:	6013      	str	r3, [r2, #0]
 8006480:	e000      	b.n	8006484 <USB_HC_Halt+0x22a>
          break;
 8006482:	bf00      	nop
    }
  }

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3724      	adds	r7, #36	; 0x24
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
	...

08006494 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	460b      	mov	r3, r1
 800649e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80064a4:	78fb      	ldrb	r3, [r7, #3]
 80064a6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80064a8:	2301      	movs	r3, #1
 80064aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	04da      	lsls	r2, r3, #19
 80064b0:	4b15      	ldr	r3, [pc, #84]	; (8006508 <USB_DoPing+0x74>)
 80064b2:	4013      	ands	r3, r2
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	0151      	lsls	r1, r2, #5
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	440a      	add	r2, r1
 80064bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064c4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064dc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064e4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f2:	461a      	mov	r2, r3
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	371c      	adds	r7, #28
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	1ff80000 	.word	0x1ff80000

0800650c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006518:	2300      	movs	r3, #0
 800651a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7ff f935 	bl	800578c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006522:	2110      	movs	r1, #16
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7ff f98f 	bl	8005848 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7ff f9b0 	bl	8005890 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006530:	2300      	movs	r3, #0
 8006532:	613b      	str	r3, [r7, #16]
 8006534:	e01f      	b.n	8006576 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	4413      	add	r3, r2
 800653e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800654c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006554:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800655c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	015a      	lsls	r2, r3, #5
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	4413      	add	r3, r2
 8006566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800656a:	461a      	mov	r2, r3
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	3301      	adds	r3, #1
 8006574:	613b      	str	r3, [r7, #16]
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	2b0f      	cmp	r3, #15
 800657a:	d9dc      	bls.n	8006536 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800657c:	2300      	movs	r3, #0
 800657e:	613b      	str	r3, [r7, #16]
 8006580:	e034      	b.n	80065ec <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	4413      	add	r3, r2
 800658a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006598:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065a0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065a8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b6:	461a      	mov	r2, r3
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	3301      	adds	r3, #1
 80065c0:	617b      	str	r3, [r7, #20]
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065c8:	d80c      	bhi.n	80065e4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	015a      	lsls	r2, r3, #5
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4413      	add	r3, r2
 80065d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065e0:	d0ec      	beq.n	80065bc <USB_StopHost+0xb0>
 80065e2:	e000      	b.n	80065e6 <USB_StopHost+0xda>
        break;
 80065e4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	3301      	adds	r3, #1
 80065ea:	613b      	str	r3, [r7, #16]
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	2b0f      	cmp	r3, #15
 80065f0:	d9c7      	bls.n	8006582 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065f8:	461a      	mov	r2, r3
 80065fa:	f04f 33ff 	mov.w	r3, #4294967295
 80065fe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f04f 32ff 	mov.w	r2, #4294967295
 8006606:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f7ff f8ae 	bl	800576a <USB_EnableGlobalInt>

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3718      	adds	r7, #24
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006618:	b590      	push	{r4, r7, lr}
 800661a:	b089      	sub	sp, #36	; 0x24
 800661c:	af04      	add	r7, sp, #16
 800661e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006620:	2301      	movs	r3, #1
 8006622:	2202      	movs	r2, #2
 8006624:	2102      	movs	r1, #2
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fc66 	bl	8006ef8 <USBH_FindInterface>
 800662c:	4603      	mov	r3, r0
 800662e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006630:	7bfb      	ldrb	r3, [r7, #15]
 8006632:	2bff      	cmp	r3, #255	; 0xff
 8006634:	d002      	beq.n	800663c <USBH_CDC_InterfaceInit+0x24>
 8006636:	7bfb      	ldrb	r3, [r7, #15]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d901      	bls.n	8006640 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800663c:	2302      	movs	r3, #2
 800663e:	e13d      	b.n	80068bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006640:	7bfb      	ldrb	r3, [r7, #15]
 8006642:	4619      	mov	r1, r3
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fc3b 	bl	8006ec0 <USBH_SelectInterface>
 800664a:	4603      	mov	r3, r0
 800664c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800664e:	7bbb      	ldrb	r3, [r7, #14]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006654:	2302      	movs	r3, #2
 8006656:	e131      	b.n	80068bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800665e:	2050      	movs	r0, #80	; 0x50
 8006660:	f002 fa00 	bl	8008a64 <malloc>
 8006664:	4603      	mov	r3, r0
 8006666:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800666e:	69db      	ldr	r3, [r3, #28]
 8006670:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d101      	bne.n	800667c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006678:	2302      	movs	r3, #2
 800667a:	e11f      	b.n	80068bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800667c:	2250      	movs	r2, #80	; 0x50
 800667e:	2100      	movs	r1, #0
 8006680:	68b8      	ldr	r0, [r7, #8]
 8006682:	f002 f9ff 	bl	8008a84 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006686:	7bfb      	ldrb	r3, [r7, #15]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	211a      	movs	r1, #26
 800668c:	fb01 f303 	mul.w	r3, r1, r3
 8006690:	4413      	add	r3, r2
 8006692:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	b25b      	sxtb	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	da15      	bge.n	80066ca <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800669e:	7bfb      	ldrb	r3, [r7, #15]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	211a      	movs	r1, #26
 80066a4:	fb01 f303 	mul.w	r3, r1, r3
 80066a8:	4413      	add	r3, r2
 80066aa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80066ae:	781a      	ldrb	r2, [r3, #0]
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	211a      	movs	r1, #26
 80066ba:	fb01 f303 	mul.w	r3, r1, r3
 80066be:	4413      	add	r3, r2
 80066c0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80066c4:	881a      	ldrh	r2, [r3, #0]
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	785b      	ldrb	r3, [r3, #1]
 80066ce:	4619      	mov	r1, r3
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f001 fe32 	bl	800833a <USBH_AllocPipe>
 80066d6:	4603      	mov	r3, r0
 80066d8:	461a      	mov	r2, r3
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	7819      	ldrb	r1, [r3, #0]
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	7858      	ldrb	r0, [r3, #1]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	8952      	ldrh	r2, [r2, #10]
 80066f6:	9202      	str	r2, [sp, #8]
 80066f8:	2203      	movs	r2, #3
 80066fa:	9201      	str	r2, [sp, #4]
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	4623      	mov	r3, r4
 8006700:	4602      	mov	r2, r0
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f001 fdea 	bl	80082dc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	2200      	movs	r2, #0
 800670e:	4619      	mov	r1, r3
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f002 f8f9 	bl	8008908 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006716:	2300      	movs	r3, #0
 8006718:	2200      	movs	r2, #0
 800671a:	210a      	movs	r1, #10
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fbeb 	bl	8006ef8 <USBH_FindInterface>
 8006722:	4603      	mov	r3, r0
 8006724:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006726:	7bfb      	ldrb	r3, [r7, #15]
 8006728:	2bff      	cmp	r3, #255	; 0xff
 800672a:	d002      	beq.n	8006732 <USBH_CDC_InterfaceInit+0x11a>
 800672c:	7bfb      	ldrb	r3, [r7, #15]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d901      	bls.n	8006736 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006732:	2302      	movs	r3, #2
 8006734:	e0c2      	b.n	80068bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006736:	7bfb      	ldrb	r3, [r7, #15]
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	211a      	movs	r1, #26
 800673c:	fb01 f303 	mul.w	r3, r1, r3
 8006740:	4413      	add	r3, r2
 8006742:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	b25b      	sxtb	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	da16      	bge.n	800677c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800674e:	7bfb      	ldrb	r3, [r7, #15]
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	211a      	movs	r1, #26
 8006754:	fb01 f303 	mul.w	r3, r1, r3
 8006758:	4413      	add	r3, r2
 800675a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800675e:	781a      	ldrb	r2, [r3, #0]
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006764:	7bfb      	ldrb	r3, [r7, #15]
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	211a      	movs	r1, #26
 800676a:	fb01 f303 	mul.w	r3, r1, r3
 800676e:	4413      	add	r3, r2
 8006770:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006774:	881a      	ldrh	r2, [r3, #0]
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	835a      	strh	r2, [r3, #26]
 800677a:	e015      	b.n	80067a8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800677c:	7bfb      	ldrb	r3, [r7, #15]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	211a      	movs	r1, #26
 8006782:	fb01 f303 	mul.w	r3, r1, r3
 8006786:	4413      	add	r3, r2
 8006788:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800678c:	781a      	ldrb	r2, [r3, #0]
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006792:	7bfb      	ldrb	r3, [r7, #15]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	211a      	movs	r1, #26
 8006798:	fb01 f303 	mul.w	r3, r1, r3
 800679c:	4413      	add	r3, r2
 800679e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80067a2:	881a      	ldrh	r2, [r3, #0]
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	211a      	movs	r1, #26
 80067ae:	fb01 f303 	mul.w	r3, r1, r3
 80067b2:	4413      	add	r3, r2
 80067b4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	b25b      	sxtb	r3, r3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	da16      	bge.n	80067ee <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80067c0:	7bfb      	ldrb	r3, [r7, #15]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	211a      	movs	r1, #26
 80067c6:	fb01 f303 	mul.w	r3, r1, r3
 80067ca:	4413      	add	r3, r2
 80067cc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80067d0:	781a      	ldrb	r2, [r3, #0]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80067d6:	7bfb      	ldrb	r3, [r7, #15]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	211a      	movs	r1, #26
 80067dc:	fb01 f303 	mul.w	r3, r1, r3
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80067e6:	881a      	ldrh	r2, [r3, #0]
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	835a      	strh	r2, [r3, #26]
 80067ec:	e015      	b.n	800681a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80067ee:	7bfb      	ldrb	r3, [r7, #15]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	211a      	movs	r1, #26
 80067f4:	fb01 f303 	mul.w	r3, r1, r3
 80067f8:	4413      	add	r3, r2
 80067fa:	f203 3356 	addw	r3, r3, #854	; 0x356
 80067fe:	781a      	ldrb	r2, [r3, #0]
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006804:	7bfb      	ldrb	r3, [r7, #15]
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	211a      	movs	r1, #26
 800680a:	fb01 f303 	mul.w	r3, r1, r3
 800680e:	4413      	add	r3, r2
 8006810:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006814:	881a      	ldrh	r2, [r3, #0]
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	7b9b      	ldrb	r3, [r3, #14]
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f001 fd8a 	bl	800833a <USBH_AllocPipe>
 8006826:	4603      	mov	r3, r0
 8006828:	461a      	mov	r2, r3
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	7bdb      	ldrb	r3, [r3, #15]
 8006832:	4619      	mov	r1, r3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f001 fd80 	bl	800833a <USBH_AllocPipe>
 800683a:	4603      	mov	r3, r0
 800683c:	461a      	mov	r2, r3
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	7b59      	ldrb	r1, [r3, #13]
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	7b98      	ldrb	r0, [r3, #14]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	8b12      	ldrh	r2, [r2, #24]
 800685a:	9202      	str	r2, [sp, #8]
 800685c:	2202      	movs	r2, #2
 800685e:	9201      	str	r2, [sp, #4]
 8006860:	9300      	str	r3, [sp, #0]
 8006862:	4623      	mov	r3, r4
 8006864:	4602      	mov	r2, r0
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f001 fd38 	bl	80082dc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	7b19      	ldrb	r1, [r3, #12]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	7bd8      	ldrb	r0, [r3, #15]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	8b52      	ldrh	r2, [r2, #26]
 8006884:	9202      	str	r2, [sp, #8]
 8006886:	2202      	movs	r2, #2
 8006888:	9201      	str	r2, [sp, #4]
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	4623      	mov	r3, r4
 800688e:	4602      	mov	r2, r0
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f001 fd23 	bl	80082dc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	7b5b      	ldrb	r3, [r3, #13]
 80068a2:	2200      	movs	r2, #0
 80068a4:	4619      	mov	r1, r3
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f002 f82e 	bl	8008908 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	7b1b      	ldrb	r3, [r3, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	4619      	mov	r1, r3
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f002 f827 	bl	8008908 <USBH_LL_SetToggle>

  return USBH_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3714      	adds	r7, #20
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd90      	pop	{r4, r7, pc}

080068c4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068d2:	69db      	ldr	r3, [r3, #28]
 80068d4:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00e      	beq.n	80068fc <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	4619      	mov	r1, r3
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f001 fd18 	bl	800831a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f001 fd43 	bl	800837c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	7b1b      	ldrb	r3, [r3, #12]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00e      	beq.n	8006922 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	7b1b      	ldrb	r3, [r3, #12]
 8006908:	4619      	mov	r1, r3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f001 fd05 	bl	800831a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	7b1b      	ldrb	r3, [r3, #12]
 8006914:	4619      	mov	r1, r3
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f001 fd30 	bl	800837c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	7b5b      	ldrb	r3, [r3, #13]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00e      	beq.n	8006948 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	7b5b      	ldrb	r3, [r3, #13]
 800692e:	4619      	mov	r1, r3
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f001 fcf2 	bl	800831a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	7b5b      	ldrb	r3, [r3, #13]
 800693a:	4619      	mov	r1, r3
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f001 fd1d 	bl	800837c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800694e:	69db      	ldr	r3, [r3, #28]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00b      	beq.n	800696c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800695a:	69db      	ldr	r3, [r3, #28]
 800695c:	4618      	mov	r0, r3
 800695e:	f002 f889 	bl	8008a74 <free>
    phost->pActiveClass->pData = 0U;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006968:	2200      	movs	r2, #0
 800696a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b084      	sub	sp, #16
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	3340      	adds	r3, #64	; 0x40
 800698c:	4619      	mov	r1, r3
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f8b1 	bl	8006af6 <GetLineCoding>
 8006994:	4603      	mov	r3, r0
 8006996:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006998:	7afb      	ldrb	r3, [r7, #11]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d105      	bne.n	80069aa <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069a4:	2102      	movs	r1, #2
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80069aa:	7afb      	ldrb	r3, [r7, #11]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80069bc:	2301      	movs	r3, #1
 80069be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80069c0:	2300      	movs	r3, #0
 80069c2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069ca:	69db      	ldr	r3, [r3, #28]
 80069cc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80069d4:	2b04      	cmp	r3, #4
 80069d6:	d877      	bhi.n	8006ac8 <USBH_CDC_Process+0x114>
 80069d8:	a201      	add	r2, pc, #4	; (adr r2, 80069e0 <USBH_CDC_Process+0x2c>)
 80069da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069de:	bf00      	nop
 80069e0:	080069f5 	.word	0x080069f5
 80069e4:	080069fb 	.word	0x080069fb
 80069e8:	08006a2b 	.word	0x08006a2b
 80069ec:	08006a9f 	.word	0x08006a9f
 80069f0:	08006aad 	.word	0x08006aad
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	73fb      	strb	r3, [r7, #15]
      break;
 80069f8:	e06d      	b.n	8006ad6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069fe:	4619      	mov	r1, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 f897 	bl	8006b34 <SetLineCoding>
 8006a06:	4603      	mov	r3, r0
 8006a08:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a0a:	7bbb      	ldrb	r3, [r7, #14]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d104      	bne.n	8006a1a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2202      	movs	r2, #2
 8006a14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006a18:	e058      	b.n	8006acc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006a1a:	7bbb      	ldrb	r3, [r7, #14]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d055      	beq.n	8006acc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	2204      	movs	r2, #4
 8006a24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006a28:	e050      	b.n	8006acc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	3340      	adds	r3, #64	; 0x40
 8006a2e:	4619      	mov	r1, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f860 	bl	8006af6 <GetLineCoding>
 8006a36:	4603      	mov	r3, r0
 8006a38:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a3a:	7bbb      	ldrb	r3, [r7, #14]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d126      	bne.n	8006a8e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a52:	791b      	ldrb	r3, [r3, #4]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d13b      	bne.n	8006ad0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a62:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d133      	bne.n	8006ad0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a72:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d12b      	bne.n	8006ad0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a80:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d124      	bne.n	8006ad0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f958 	bl	8006d3c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006a8c:	e020      	b.n	8006ad0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006a8e:	7bbb      	ldrb	r3, [r7, #14]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d01d      	beq.n	8006ad0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	2204      	movs	r2, #4
 8006a98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006a9c:	e018      	b.n	8006ad0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f867 	bl	8006b72 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f8da 	bl	8006c5e <CDC_ProcessReception>
      break;
 8006aaa:	e014      	b.n	8006ad6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006aac:	2100      	movs	r1, #0
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 ffe3 	bl	8007a7a <USBH_ClrFeature>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ab8:	7bbb      	ldrb	r3, [r7, #14]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d10a      	bne.n	8006ad4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006ac6:	e005      	b.n	8006ad4 <USBH_CDC_Process+0x120>

    default:
      break;
 8006ac8:	bf00      	nop
 8006aca:	e004      	b.n	8006ad6 <USBH_CDC_Process+0x122>
      break;
 8006acc:	bf00      	nop
 8006ace:	e002      	b.n	8006ad6 <USBH_CDC_Process+0x122>
      break;
 8006ad0:	bf00      	nop
 8006ad2:	e000      	b.n	8006ad6 <USBH_CDC_Process+0x122>
      break;
 8006ad4:	bf00      	nop

  }

  return status;
 8006ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b082      	sub	sp, #8
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
 8006afe:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	22a1      	movs	r2, #161	; 0xa1
 8006b04:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2221      	movs	r2, #33	; 0x21
 8006b0a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2207      	movs	r2, #7
 8006b1c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	2207      	movs	r2, #7
 8006b22:	4619      	mov	r1, r3
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f001 f988 	bl	8007e3a <USBH_CtlReq>
 8006b2a:	4603      	mov	r3, r0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2221      	movs	r2, #33	; 0x21
 8006b42:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2220      	movs	r2, #32
 8006b48:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2207      	movs	r2, #7
 8006b5a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	2207      	movs	r2, #7
 8006b60:	4619      	mov	r1, r3
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f001 f969 	bl	8007e3a <USBH_CtlReq>
 8006b68:	4603      	mov	r3, r0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3708      	adds	r7, #8
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b086      	sub	sp, #24
 8006b76:	af02      	add	r7, sp, #8
 8006b78:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b80:	69db      	ldr	r3, [r3, #28]
 8006b82:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b84:	2300      	movs	r3, #0
 8006b86:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d002      	beq.n	8006b98 <CDC_ProcessTransmission+0x26>
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d023      	beq.n	8006bde <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006b96:	e05e      	b.n	8006c56 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	8b12      	ldrh	r2, [r2, #24]
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d90b      	bls.n	8006bbc <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	69d9      	ldr	r1, [r3, #28]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	8b1a      	ldrh	r2, [r3, #24]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	7b5b      	ldrb	r3, [r3, #13]
 8006bb0:	2001      	movs	r0, #1
 8006bb2:	9000      	str	r0, [sp, #0]
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f001 fb4e 	bl	8008256 <USBH_BulkSendData>
 8006bba:	e00b      	b.n	8006bd4 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	7b5b      	ldrb	r3, [r3, #13]
 8006bca:	2001      	movs	r0, #1
 8006bcc:	9000      	str	r0, [sp, #0]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f001 fb41 	bl	8008256 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006bdc:	e03b      	b.n	8006c56 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	7b5b      	ldrb	r3, [r3, #13]
 8006be2:	4619      	mov	r1, r3
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f001 fe65 	bl	80088b4 <USBH_LL_GetURBState>
 8006bea:	4603      	mov	r3, r0
 8006bec:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006bee:	7afb      	ldrb	r3, [r7, #11]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d128      	bne.n	8006c46 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	8b12      	ldrh	r2, [r2, #24]
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d90e      	bls.n	8006c1e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	8b12      	ldrh	r2, [r2, #24]
 8006c08:	1a9a      	subs	r2, r3, r2
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	69db      	ldr	r3, [r3, #28]
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	8b12      	ldrh	r2, [r2, #24]
 8006c16:	441a      	add	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	61da      	str	r2, [r3, #28]
 8006c1c:	e002      	b.n	8006c24 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d004      	beq.n	8006c36 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006c34:	e00e      	b.n	8006c54 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f868 	bl	8006d14 <USBH_CDC_TransmitCallback>
      break;
 8006c44:	e006      	b.n	8006c54 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006c46:	7afb      	ldrb	r3, [r7, #11]
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d103      	bne.n	8006c54 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006c54:	bf00      	nop
  }
}
 8006c56:	bf00      	nop
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b086      	sub	sp, #24
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c6c:	69db      	ldr	r3, [r3, #28]
 8006c6e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c70:	2300      	movs	r3, #0
 8006c72:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006c7a:	2b03      	cmp	r3, #3
 8006c7c:	d002      	beq.n	8006c84 <CDC_ProcessReception+0x26>
 8006c7e:	2b04      	cmp	r3, #4
 8006c80:	d00e      	beq.n	8006ca0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006c82:	e043      	b.n	8006d0c <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	6a19      	ldr	r1, [r3, #32]
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	8b5a      	ldrh	r2, [r3, #26]
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	7b1b      	ldrb	r3, [r3, #12]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f001 fb05 	bl	80082a0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	2204      	movs	r2, #4
 8006c9a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006c9e:	e035      	b.n	8006d0c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	7b1b      	ldrb	r3, [r3, #12]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f001 fe04 	bl	80088b4 <USBH_LL_GetURBState>
 8006cac:	4603      	mov	r3, r0
 8006cae:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006cb0:	7cfb      	ldrb	r3, [r7, #19]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d129      	bne.n	8006d0a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	7b1b      	ldrb	r3, [r3, #12]
 8006cba:	4619      	mov	r1, r3
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f001 fd67 	bl	8008790 <USBH_LL_GetLastXferSize>
 8006cc2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d016      	beq.n	8006cfc <CDC_ProcessReception+0x9e>
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	8b5b      	ldrh	r3, [r3, #26]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d910      	bls.n	8006cfc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	1ad2      	subs	r2, r2, r3
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	6a1a      	ldr	r2, [r3, #32]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	441a      	add	r2, r3
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2203      	movs	r2, #3
 8006cf6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006cfa:	e006      	b.n	8006d0a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f80f 	bl	8006d28 <USBH_CDC_ReceiveCallback>
      break;
 8006d0a:	bf00      	nop
  }
}
 8006d0c:	bf00      	nop
 8006d0e:	3718      	adds	r7, #24
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006d64:	2302      	movs	r3, #2
 8006d66:	e029      	b.n	8006dbc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	79fa      	ldrb	r2, [r7, #7]
 8006d6c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	f000 f81f 	bl	8006dc4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d003      	beq.n	8006db4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f001 fc37 	bl	8008628 <USBH_LL_Init>

  return USBH_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	60fb      	str	r3, [r7, #12]
 8006dd4:	e009      	b.n	8006dea <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	33e0      	adds	r3, #224	; 0xe0
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	4413      	add	r3, r2
 8006de0:	2200      	movs	r2, #0
 8006de2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	3301      	adds	r3, #1
 8006de8:	60fb      	str	r3, [r7, #12]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b0e      	cmp	r3, #14
 8006dee:	d9f2      	bls.n	8006dd6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006df0:	2300      	movs	r3, #0
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	e009      	b.n	8006e0a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006e00:	2200      	movs	r2, #0
 8006e02:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	3301      	adds	r3, #1
 8006e08:	60fb      	str	r3, [r7, #12]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e10:	d3f1      	bcc.n	8006df6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2240      	movs	r2, #64	; 0x40
 8006e36:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3714      	adds	r7, #20
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d016      	beq.n	8006eae <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10e      	bne.n	8006ea8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e90:	1c59      	adds	r1, r3, #1
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	33de      	adds	r3, #222	; 0xde
 8006e9c:	6839      	ldr	r1, [r7, #0]
 8006e9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	73fb      	strb	r3, [r7, #15]
 8006ea6:	e004      	b.n	8006eb2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	73fb      	strb	r3, [r7, #15]
 8006eac:	e001      	b.n	8006eb2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006eae:	2302      	movs	r3, #2
 8006eb0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3714      	adds	r7, #20
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	460b      	mov	r3, r1
 8006eca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006ed6:	78fa      	ldrb	r2, [r7, #3]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d204      	bcs.n	8006ee6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	78fa      	ldrb	r2, [r7, #3]
 8006ee0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006ee4:	e001      	b.n	8006eea <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006ee6:	2302      	movs	r3, #2
 8006ee8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3714      	adds	r7, #20
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b087      	sub	sp, #28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	4608      	mov	r0, r1
 8006f02:	4611      	mov	r1, r2
 8006f04:	461a      	mov	r2, r3
 8006f06:	4603      	mov	r3, r0
 8006f08:	70fb      	strb	r3, [r7, #3]
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	70bb      	strb	r3, [r7, #2]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006f12:	2300      	movs	r3, #0
 8006f14:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006f16:	2300      	movs	r3, #0
 8006f18:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006f20:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f22:	e025      	b.n	8006f70 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006f24:	7dfb      	ldrb	r3, [r7, #23]
 8006f26:	221a      	movs	r2, #26
 8006f28:	fb02 f303 	mul.w	r3, r2, r3
 8006f2c:	3308      	adds	r3, #8
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	4413      	add	r3, r2
 8006f32:	3302      	adds	r3, #2
 8006f34:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	795b      	ldrb	r3, [r3, #5]
 8006f3a:	78fa      	ldrb	r2, [r7, #3]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d002      	beq.n	8006f46 <USBH_FindInterface+0x4e>
 8006f40:	78fb      	ldrb	r3, [r7, #3]
 8006f42:	2bff      	cmp	r3, #255	; 0xff
 8006f44:	d111      	bne.n	8006f6a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006f4a:	78ba      	ldrb	r2, [r7, #2]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d002      	beq.n	8006f56 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f50:	78bb      	ldrb	r3, [r7, #2]
 8006f52:	2bff      	cmp	r3, #255	; 0xff
 8006f54:	d109      	bne.n	8006f6a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f5a:	787a      	ldrb	r2, [r7, #1]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d002      	beq.n	8006f66 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f60:	787b      	ldrb	r3, [r7, #1]
 8006f62:	2bff      	cmp	r3, #255	; 0xff
 8006f64:	d101      	bne.n	8006f6a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006f66:	7dfb      	ldrb	r3, [r7, #23]
 8006f68:	e006      	b.n	8006f78 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006f6a:	7dfb      	ldrb	r3, [r7, #23]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f70:	7dfb      	ldrb	r3, [r7, #23]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d9d6      	bls.n	8006f24 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006f76:	23ff      	movs	r3, #255	; 0xff
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	371c      	adds	r7, #28
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f001 fb87 	bl	80086a0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006f92:	2101      	movs	r1, #1
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f001 fca0 	bl	80088da <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b088      	sub	sp, #32
 8006fa8:	af04      	add	r7, sp, #16
 8006faa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006fac:	2302      	movs	r3, #2
 8006fae:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d102      	bne.n	8006fc6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2203      	movs	r2, #3
 8006fc4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b0b      	cmp	r3, #11
 8006fce:	f200 81b3 	bhi.w	8007338 <USBH_Process+0x394>
 8006fd2:	a201      	add	r2, pc, #4	; (adr r2, 8006fd8 <USBH_Process+0x34>)
 8006fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd8:	08007009 	.word	0x08007009
 8006fdc:	0800703b 	.word	0x0800703b
 8006fe0:	080070a3 	.word	0x080070a3
 8006fe4:	080072d3 	.word	0x080072d3
 8006fe8:	08007339 	.word	0x08007339
 8006fec:	08007147 	.word	0x08007147
 8006ff0:	08007279 	.word	0x08007279
 8006ff4:	0800717d 	.word	0x0800717d
 8006ff8:	0800719d 	.word	0x0800719d
 8006ffc:	080071bd 	.word	0x080071bd
 8007000:	080071eb 	.word	0x080071eb
 8007004:	080072bb 	.word	0x080072bb
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b00      	cmp	r3, #0
 8007012:	f000 8193 	beq.w	800733c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800701c:	20c8      	movs	r0, #200	; 0xc8
 800701e:	f001 fca3 	bl	8008968 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f001 fb99 	bl	800875a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007038:	e180      	b.n	800733c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007040:	2b01      	cmp	r3, #1
 8007042:	d107      	bne.n	8007054 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2202      	movs	r2, #2
 8007050:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007052:	e182      	b.n	800735a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800705a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800705e:	d914      	bls.n	800708a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007066:	3301      	adds	r3, #1
 8007068:	b2da      	uxtb	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007076:	2b03      	cmp	r3, #3
 8007078:	d903      	bls.n	8007082 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	220d      	movs	r2, #13
 800707e:	701a      	strb	r2, [r3, #0]
      break;
 8007080:	e16b      	b.n	800735a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	701a      	strb	r2, [r3, #0]
      break;
 8007088:	e167      	b.n	800735a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007090:	f103 020a 	add.w	r2, r3, #10
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800709a:	200a      	movs	r0, #10
 800709c:	f001 fc64 	bl	8008968 <USBH_Delay>
      break;
 80070a0:	e15b      	b.n	800735a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d005      	beq.n	80070b8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070b2:	2104      	movs	r1, #4
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80070b8:	2064      	movs	r0, #100	; 0x64
 80070ba:	f001 fc55 	bl	8008968 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f001 fb24 	bl	800870c <USBH_LL_GetSpeed>
 80070c4:	4603      	mov	r3, r0
 80070c6:	461a      	mov	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2205      	movs	r2, #5
 80070d2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80070d4:	2100      	movs	r1, #0
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f001 f92f 	bl	800833a <USBH_AllocPipe>
 80070dc:	4603      	mov	r3, r0
 80070de:	461a      	mov	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80070e4:	2180      	movs	r1, #128	; 0x80
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f001 f927 	bl	800833a <USBH_AllocPipe>
 80070ec:	4603      	mov	r3, r0
 80070ee:	461a      	mov	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	7919      	ldrb	r1, [r3, #4]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007108:	b292      	uxth	r2, r2
 800710a:	9202      	str	r2, [sp, #8]
 800710c:	2200      	movs	r2, #0
 800710e:	9201      	str	r2, [sp, #4]
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	4603      	mov	r3, r0
 8007114:	2280      	movs	r2, #128	; 0x80
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f001 f8e0 	bl	80082dc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	7959      	ldrb	r1, [r3, #5]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007130:	b292      	uxth	r2, r2
 8007132:	9202      	str	r2, [sp, #8]
 8007134:	2200      	movs	r2, #0
 8007136:	9201      	str	r2, [sp, #4]
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	4603      	mov	r3, r0
 800713c:	2200      	movs	r2, #0
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f001 f8cc 	bl	80082dc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007144:	e109      	b.n	800735a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f90c 	bl	8007364 <USBH_HandleEnum>
 800714c:	4603      	mov	r3, r0
 800714e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007150:	7bbb      	ldrb	r3, [r7, #14]
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b00      	cmp	r3, #0
 8007156:	f040 80f3 	bne.w	8007340 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007168:	2b01      	cmp	r3, #1
 800716a:	d103      	bne.n	8007174 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2208      	movs	r2, #8
 8007170:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007172:	e0e5      	b.n	8007340 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2207      	movs	r2, #7
 8007178:	701a      	strb	r2, [r3, #0]
      break;
 800717a:	e0e1      	b.n	8007340 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007182:	2b00      	cmp	r3, #0
 8007184:	f000 80de 	beq.w	8007344 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800718e:	2101      	movs	r1, #1
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2208      	movs	r2, #8
 8007198:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800719a:	e0d3      	b.n	8007344 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	4619      	mov	r1, r3
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fc20 	bl	80079ec <USBH_SetCfg>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f040 80ca 	bne.w	8007348 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2209      	movs	r2, #9
 80071b8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80071ba:	e0c5      	b.n	8007348 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80071c2:	f003 0320 	and.w	r3, r3, #32
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00b      	beq.n	80071e2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80071ca:	2101      	movs	r1, #1
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 fc30 	bl	8007a32 <USBH_SetFeature>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f040 80b9 	bne.w	800734c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	220a      	movs	r2, #10
 80071de:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80071e0:	e0b4      	b.n	800734c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	220a      	movs	r2, #10
 80071e6:	701a      	strb	r2, [r3, #0]
      break;
 80071e8:	e0b0      	b.n	800734c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f000 80ad 	beq.w	8007350 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80071fe:	2300      	movs	r3, #0
 8007200:	73fb      	strb	r3, [r7, #15]
 8007202:	e016      	b.n	8007232 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007204:	7bfa      	ldrb	r2, [r7, #15]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	32de      	adds	r2, #222	; 0xde
 800720a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800720e:	791a      	ldrb	r2, [r3, #4]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007216:	429a      	cmp	r2, r3
 8007218:	d108      	bne.n	800722c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800721a:	7bfa      	ldrb	r2, [r7, #15]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	32de      	adds	r2, #222	; 0xde
 8007220:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800722a:	e005      	b.n	8007238 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800722c:	7bfb      	ldrb	r3, [r7, #15]
 800722e:	3301      	adds	r3, #1
 8007230:	73fb      	strb	r3, [r7, #15]
 8007232:	7bfb      	ldrb	r3, [r7, #15]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d0e5      	beq.n	8007204 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800723e:	2b00      	cmp	r3, #0
 8007240:	d016      	beq.n	8007270 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	4798      	blx	r3
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d109      	bne.n	8007268 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2206      	movs	r2, #6
 8007258:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007260:	2103      	movs	r1, #3
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007266:	e073      	b.n	8007350 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	220d      	movs	r2, #13
 800726c:	701a      	strb	r2, [r3, #0]
      break;
 800726e:	e06f      	b.n	8007350 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	220d      	movs	r2, #13
 8007274:	701a      	strb	r2, [r3, #0]
      break;
 8007276:	e06b      	b.n	8007350 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800727e:	2b00      	cmp	r3, #0
 8007280:	d017      	beq.n	80072b2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	4798      	blx	r3
 800728e:	4603      	mov	r3, r0
 8007290:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007292:	7bbb      	ldrb	r3, [r7, #14]
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d103      	bne.n	80072a2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	220b      	movs	r2, #11
 800729e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80072a0:	e058      	b.n	8007354 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80072a2:	7bbb      	ldrb	r3, [r7, #14]
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d154      	bne.n	8007354 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	220d      	movs	r2, #13
 80072ae:	701a      	strb	r2, [r3, #0]
      break;
 80072b0:	e050      	b.n	8007354 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	220d      	movs	r2, #13
 80072b6:	701a      	strb	r2, [r3, #0]
      break;
 80072b8:	e04c      	b.n	8007354 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d049      	beq.n	8007358 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	4798      	blx	r3
      }
      break;
 80072d0:	e042      	b.n	8007358 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7ff fd72 	bl	8006dc4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d009      	beq.n	80072fe <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007304:	2b00      	cmp	r3, #0
 8007306:	d005      	beq.n	8007314 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800730e:	2105      	movs	r1, #5
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800731a:	b2db      	uxtb	r3, r3
 800731c:	2b01      	cmp	r3, #1
 800731e:	d107      	bne.n	8007330 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f7ff fe2b 	bl	8006f84 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800732e:	e014      	b.n	800735a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f001 f9b5 	bl	80086a0 <USBH_LL_Start>
      break;
 8007336:	e010      	b.n	800735a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007338:	bf00      	nop
 800733a:	e00e      	b.n	800735a <USBH_Process+0x3b6>
      break;
 800733c:	bf00      	nop
 800733e:	e00c      	b.n	800735a <USBH_Process+0x3b6>
      break;
 8007340:	bf00      	nop
 8007342:	e00a      	b.n	800735a <USBH_Process+0x3b6>
    break;
 8007344:	bf00      	nop
 8007346:	e008      	b.n	800735a <USBH_Process+0x3b6>
      break;
 8007348:	bf00      	nop
 800734a:	e006      	b.n	800735a <USBH_Process+0x3b6>
      break;
 800734c:	bf00      	nop
 800734e:	e004      	b.n	800735a <USBH_Process+0x3b6>
      break;
 8007350:	bf00      	nop
 8007352:	e002      	b.n	800735a <USBH_Process+0x3b6>
      break;
 8007354:	bf00      	nop
 8007356:	e000      	b.n	800735a <USBH_Process+0x3b6>
      break;
 8007358:	bf00      	nop
  }
  return USBH_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3710      	adds	r7, #16
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b088      	sub	sp, #32
 8007368:	af04      	add	r7, sp, #16
 800736a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800736c:	2301      	movs	r3, #1
 800736e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007370:	2301      	movs	r3, #1
 8007372:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	785b      	ldrb	r3, [r3, #1]
 8007378:	2b07      	cmp	r3, #7
 800737a:	f200 81c1 	bhi.w	8007700 <USBH_HandleEnum+0x39c>
 800737e:	a201      	add	r2, pc, #4	; (adr r2, 8007384 <USBH_HandleEnum+0x20>)
 8007380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007384:	080073a5 	.word	0x080073a5
 8007388:	08007463 	.word	0x08007463
 800738c:	080074cd 	.word	0x080074cd
 8007390:	0800755b 	.word	0x0800755b
 8007394:	080075c5 	.word	0x080075c5
 8007398:	08007635 	.word	0x08007635
 800739c:	0800767b 	.word	0x0800767b
 80073a0:	080076c1 	.word	0x080076c1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80073a4:	2108      	movs	r1, #8
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fa50 	bl	800784c <USBH_Get_DevDesc>
 80073ac:	4603      	mov	r3, r0
 80073ae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80073b0:	7bbb      	ldrb	r3, [r7, #14]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d130      	bne.n	8007418 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	7919      	ldrb	r1, [r3, #4]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80073da:	b292      	uxth	r2, r2
 80073dc:	9202      	str	r2, [sp, #8]
 80073de:	2200      	movs	r2, #0
 80073e0:	9201      	str	r2, [sp, #4]
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	4603      	mov	r3, r0
 80073e6:	2280      	movs	r2, #128	; 0x80
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 ff77 	bl	80082dc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	7959      	ldrb	r1, [r3, #5]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007402:	b292      	uxth	r2, r2
 8007404:	9202      	str	r2, [sp, #8]
 8007406:	2200      	movs	r2, #0
 8007408:	9201      	str	r2, [sp, #4]
 800740a:	9300      	str	r3, [sp, #0]
 800740c:	4603      	mov	r3, r0
 800740e:	2200      	movs	r2, #0
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 ff63 	bl	80082dc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007416:	e175      	b.n	8007704 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007418:	7bbb      	ldrb	r3, [r7, #14]
 800741a:	2b03      	cmp	r3, #3
 800741c:	f040 8172 	bne.w	8007704 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007426:	3301      	adds	r3, #1
 8007428:	b2da      	uxtb	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007436:	2b03      	cmp	r3, #3
 8007438:	d903      	bls.n	8007442 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	220d      	movs	r2, #13
 800743e:	701a      	strb	r2, [r3, #0]
      break;
 8007440:	e160      	b.n	8007704 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	795b      	ldrb	r3, [r3, #5]
 8007446:	4619      	mov	r1, r3
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 ff97 	bl	800837c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	791b      	ldrb	r3, [r3, #4]
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 ff91 	bl	800837c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	701a      	strb	r2, [r3, #0]
      break;
 8007460:	e150      	b.n	8007704 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007462:	2112      	movs	r1, #18
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f9f1 	bl	800784c <USBH_Get_DevDesc>
 800746a:	4603      	mov	r3, r0
 800746c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800746e:	7bbb      	ldrb	r3, [r7, #14]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d103      	bne.n	800747c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2202      	movs	r2, #2
 8007478:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800747a:	e145      	b.n	8007708 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800747c:	7bbb      	ldrb	r3, [r7, #14]
 800747e:	2b03      	cmp	r3, #3
 8007480:	f040 8142 	bne.w	8007708 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800748a:	3301      	adds	r3, #1
 800748c:	b2da      	uxtb	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800749a:	2b03      	cmp	r3, #3
 800749c:	d903      	bls.n	80074a6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	220d      	movs	r2, #13
 80074a2:	701a      	strb	r2, [r3, #0]
      break;
 80074a4:	e130      	b.n	8007708 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	795b      	ldrb	r3, [r3, #5]
 80074aa:	4619      	mov	r1, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 ff65 	bl	800837c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	791b      	ldrb	r3, [r3, #4]
 80074b6:	4619      	mov	r1, r3
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 ff5f 	bl	800837c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	701a      	strb	r2, [r3, #0]
      break;
 80074ca:	e11d      	b.n	8007708 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80074cc:	2101      	movs	r1, #1
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 fa68 	bl	80079a4 <USBH_SetAddress>
 80074d4:	4603      	mov	r3, r0
 80074d6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074d8:	7bbb      	ldrb	r3, [r7, #14]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d132      	bne.n	8007544 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80074de:	2002      	movs	r0, #2
 80074e0:	f001 fa42 	bl	8008968 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2203      	movs	r2, #3
 80074f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	7919      	ldrb	r1, [r3, #4]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007506:	b292      	uxth	r2, r2
 8007508:	9202      	str	r2, [sp, #8]
 800750a:	2200      	movs	r2, #0
 800750c:	9201      	str	r2, [sp, #4]
 800750e:	9300      	str	r3, [sp, #0]
 8007510:	4603      	mov	r3, r0
 8007512:	2280      	movs	r2, #128	; 0x80
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 fee1 	bl	80082dc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	7959      	ldrb	r1, [r3, #5]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800752e:	b292      	uxth	r2, r2
 8007530:	9202      	str	r2, [sp, #8]
 8007532:	2200      	movs	r2, #0
 8007534:	9201      	str	r2, [sp, #4]
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	4603      	mov	r3, r0
 800753a:	2200      	movs	r2, #0
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fecd 	bl	80082dc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007542:	e0e3      	b.n	800770c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007544:	7bbb      	ldrb	r3, [r7, #14]
 8007546:	2b03      	cmp	r3, #3
 8007548:	f040 80e0 	bne.w	800770c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	220d      	movs	r2, #13
 8007550:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	705a      	strb	r2, [r3, #1]
      break;
 8007558:	e0d8      	b.n	800770c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800755a:	2109      	movs	r1, #9
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 f99d 	bl	800789c <USBH_Get_CfgDesc>
 8007562:	4603      	mov	r3, r0
 8007564:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007566:	7bbb      	ldrb	r3, [r7, #14]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d103      	bne.n	8007574 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2204      	movs	r2, #4
 8007570:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007572:	e0cd      	b.n	8007710 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007574:	7bbb      	ldrb	r3, [r7, #14]
 8007576:	2b03      	cmp	r3, #3
 8007578:	f040 80ca 	bne.w	8007710 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007582:	3301      	adds	r3, #1
 8007584:	b2da      	uxtb	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007592:	2b03      	cmp	r3, #3
 8007594:	d903      	bls.n	800759e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	220d      	movs	r2, #13
 800759a:	701a      	strb	r2, [r3, #0]
      break;
 800759c:	e0b8      	b.n	8007710 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	795b      	ldrb	r3, [r3, #5]
 80075a2:	4619      	mov	r1, r3
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 fee9 	bl	800837c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	791b      	ldrb	r3, [r3, #4]
 80075ae:	4619      	mov	r1, r3
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 fee3 	bl	800837c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	701a      	strb	r2, [r3, #0]
      break;
 80075c2:	e0a5      	b.n	8007710 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80075ca:	4619      	mov	r1, r3
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f965 	bl	800789c <USBH_Get_CfgDesc>
 80075d2:	4603      	mov	r3, r0
 80075d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075d6:	7bbb      	ldrb	r3, [r7, #14]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d103      	bne.n	80075e4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2205      	movs	r2, #5
 80075e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80075e2:	e097      	b.n	8007714 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075e4:	7bbb      	ldrb	r3, [r7, #14]
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	f040 8094 	bne.w	8007714 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075f2:	3301      	adds	r3, #1
 80075f4:	b2da      	uxtb	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007602:	2b03      	cmp	r3, #3
 8007604:	d903      	bls.n	800760e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	220d      	movs	r2, #13
 800760a:	701a      	strb	r2, [r3, #0]
      break;
 800760c:	e082      	b.n	8007714 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	795b      	ldrb	r3, [r3, #5]
 8007612:	4619      	mov	r1, r3
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 feb1 	bl	800837c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	791b      	ldrb	r3, [r3, #4]
 800761e:	4619      	mov	r1, r3
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 feab 	bl	800837c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	701a      	strb	r2, [r3, #0]
      break;
 8007632:	e06f      	b.n	8007714 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800763a:	2b00      	cmp	r3, #0
 800763c:	d019      	beq.n	8007672 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800764a:	23ff      	movs	r3, #255	; 0xff
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 f949 	bl	80078e4 <USBH_Get_StringDesc>
 8007652:	4603      	mov	r3, r0
 8007654:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007656:	7bbb      	ldrb	r3, [r7, #14]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d103      	bne.n	8007664 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2206      	movs	r2, #6
 8007660:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007662:	e059      	b.n	8007718 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007664:	7bbb      	ldrb	r3, [r7, #14]
 8007666:	2b03      	cmp	r3, #3
 8007668:	d156      	bne.n	8007718 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2206      	movs	r2, #6
 800766e:	705a      	strb	r2, [r3, #1]
      break;
 8007670:	e052      	b.n	8007718 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2206      	movs	r2, #6
 8007676:	705a      	strb	r2, [r3, #1]
      break;
 8007678:	e04e      	b.n	8007718 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007680:	2b00      	cmp	r3, #0
 8007682:	d019      	beq.n	80076b8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007690:	23ff      	movs	r3, #255	; 0xff
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f926 	bl	80078e4 <USBH_Get_StringDesc>
 8007698:	4603      	mov	r3, r0
 800769a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800769c:	7bbb      	ldrb	r3, [r7, #14]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d103      	bne.n	80076aa <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2207      	movs	r2, #7
 80076a6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80076a8:	e038      	b.n	800771c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076aa:	7bbb      	ldrb	r3, [r7, #14]
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	d135      	bne.n	800771c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2207      	movs	r2, #7
 80076b4:	705a      	strb	r2, [r3, #1]
      break;
 80076b6:	e031      	b.n	800771c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2207      	movs	r2, #7
 80076bc:	705a      	strb	r2, [r3, #1]
      break;
 80076be:	e02d      	b.n	800771c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d017      	beq.n	80076fa <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80076d6:	23ff      	movs	r3, #255	; 0xff
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 f903 	bl	80078e4 <USBH_Get_StringDesc>
 80076de:	4603      	mov	r3, r0
 80076e0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80076e2:	7bbb      	ldrb	r3, [r7, #14]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d102      	bne.n	80076ee <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80076e8:	2300      	movs	r3, #0
 80076ea:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80076ec:	e018      	b.n	8007720 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076ee:	7bbb      	ldrb	r3, [r7, #14]
 80076f0:	2b03      	cmp	r3, #3
 80076f2:	d115      	bne.n	8007720 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80076f4:	2300      	movs	r3, #0
 80076f6:	73fb      	strb	r3, [r7, #15]
      break;
 80076f8:	e012      	b.n	8007720 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80076fa:	2300      	movs	r3, #0
 80076fc:	73fb      	strb	r3, [r7, #15]
      break;
 80076fe:	e00f      	b.n	8007720 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007700:	bf00      	nop
 8007702:	e00e      	b.n	8007722 <USBH_HandleEnum+0x3be>
      break;
 8007704:	bf00      	nop
 8007706:	e00c      	b.n	8007722 <USBH_HandleEnum+0x3be>
      break;
 8007708:	bf00      	nop
 800770a:	e00a      	b.n	8007722 <USBH_HandleEnum+0x3be>
      break;
 800770c:	bf00      	nop
 800770e:	e008      	b.n	8007722 <USBH_HandleEnum+0x3be>
      break;
 8007710:	bf00      	nop
 8007712:	e006      	b.n	8007722 <USBH_HandleEnum+0x3be>
      break;
 8007714:	bf00      	nop
 8007716:	e004      	b.n	8007722 <USBH_HandleEnum+0x3be>
      break;
 8007718:	bf00      	nop
 800771a:	e002      	b.n	8007722 <USBH_HandleEnum+0x3be>
      break;
 800771c:	bf00      	nop
 800771e:	e000      	b.n	8007722 <USBH_HandleEnum+0x3be>
      break;
 8007720:	bf00      	nop
  }
  return Status;
 8007722:	7bfb      	ldrb	r3, [r7, #15]
}
 8007724:	4618      	mov	r0, r3
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	683a      	ldr	r2, [r7, #0]
 800773a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800773e:	bf00      	nop
 8007740:	370c      	adds	r7, #12
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b082      	sub	sp, #8
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007758:	1c5a      	adds	r2, r3, #1
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f804 	bl	800776e <USBH_HandleSof>
}
 8007766:	bf00      	nop
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b082      	sub	sp, #8
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b0b      	cmp	r3, #11
 800777e:	d10a      	bne.n	8007796 <USBH_HandleSof+0x28>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007786:	2b00      	cmp	r3, #0
 8007788:	d005      	beq.n	8007796 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007790:	699b      	ldr	r3, [r3, #24]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	4798      	blx	r3
  }
}
 8007796:	bf00      	nop
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800779e:	b480      	push	{r7}
 80077a0:	b083      	sub	sp, #12
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80077ae:	bf00      	nop
}
 80077b0:	370c      	adds	r7, #12
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr

080077ba <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80077ba:	b480      	push	{r7}
 80077bc:	b083      	sub	sp, #12
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80077ca:	bf00      	nop
}
 80077cc:	370c      	adds	r7, #12
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80077d6:	b480      	push	{r7}
 80077d8:	b083      	sub	sp, #12
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 ff56 	bl	80086d6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	791b      	ldrb	r3, [r3, #4]
 800782e:	4619      	mov	r1, r3
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fda3 	bl	800837c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	795b      	ldrb	r3, [r3, #5]
 800783a:	4619      	mov	r1, r3
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fd9d 	bl	800837c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af02      	add	r7, sp, #8
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	460b      	mov	r3, r1
 8007856:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800785e:	78fb      	ldrb	r3, [r7, #3]
 8007860:	b29b      	uxth	r3, r3
 8007862:	9300      	str	r3, [sp, #0]
 8007864:	4613      	mov	r3, r2
 8007866:	f44f 7280 	mov.w	r2, #256	; 0x100
 800786a:	2100      	movs	r1, #0
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f864 	bl	800793a <USBH_GetDescriptor>
 8007872:	4603      	mov	r3, r0
 8007874:	73fb      	strb	r3, [r7, #15]
 8007876:	7bfb      	ldrb	r3, [r7, #15]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10a      	bne.n	8007892 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007888:	78fa      	ldrb	r2, [r7, #3]
 800788a:	b292      	uxth	r2, r2
 800788c:	4619      	mov	r1, r3
 800788e:	f000 f918 	bl	8007ac2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007892:	7bfb      	ldrb	r3, [r7, #15]
}
 8007894:	4618      	mov	r0, r3
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800789c:	b580      	push	{r7, lr}
 800789e:	b086      	sub	sp, #24
 80078a0:	af02      	add	r7, sp, #8
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	460b      	mov	r3, r1
 80078a6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	331c      	adds	r3, #28
 80078ac:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80078ae:	887b      	ldrh	r3, [r7, #2]
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078b8:	2100      	movs	r1, #0
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f83d 	bl	800793a <USBH_GetDescriptor>
 80078c0:	4603      	mov	r3, r0
 80078c2:	72fb      	strb	r3, [r7, #11]
 80078c4:	7afb      	ldrb	r3, [r7, #11]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d107      	bne.n	80078da <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80078d0:	887a      	ldrh	r2, [r7, #2]
 80078d2:	68f9      	ldr	r1, [r7, #12]
 80078d4:	4618      	mov	r0, r3
 80078d6:	f000 f964 	bl	8007ba2 <USBH_ParseCfgDesc>
  }

  return status;
 80078da:	7afb      	ldrb	r3, [r7, #11]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3710      	adds	r7, #16
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b088      	sub	sp, #32
 80078e8:	af02      	add	r7, sp, #8
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	607a      	str	r2, [r7, #4]
 80078ee:	461a      	mov	r2, r3
 80078f0:	460b      	mov	r3, r1
 80078f2:	72fb      	strb	r3, [r7, #11]
 80078f4:	4613      	mov	r3, r2
 80078f6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80078f8:	7afb      	ldrb	r3, [r7, #11]
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007900:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007908:	893b      	ldrh	r3, [r7, #8]
 800790a:	9300      	str	r3, [sp, #0]
 800790c:	460b      	mov	r3, r1
 800790e:	2100      	movs	r1, #0
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 f812 	bl	800793a <USBH_GetDescriptor>
 8007916:	4603      	mov	r3, r0
 8007918:	75fb      	strb	r3, [r7, #23]
 800791a:	7dfb      	ldrb	r3, [r7, #23]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d107      	bne.n	8007930 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007926:	893a      	ldrh	r2, [r7, #8]
 8007928:	6879      	ldr	r1, [r7, #4]
 800792a:	4618      	mov	r0, r3
 800792c:	f000 fa37 	bl	8007d9e <USBH_ParseStringDesc>
  }

  return status;
 8007930:	7dfb      	ldrb	r3, [r7, #23]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3718      	adds	r7, #24
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b084      	sub	sp, #16
 800793e:	af00      	add	r7, sp, #0
 8007940:	60f8      	str	r0, [r7, #12]
 8007942:	607b      	str	r3, [r7, #4]
 8007944:	460b      	mov	r3, r1
 8007946:	72fb      	strb	r3, [r7, #11]
 8007948:	4613      	mov	r3, r2
 800794a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	789b      	ldrb	r3, [r3, #2]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d11c      	bne.n	800798e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007954:	7afb      	ldrb	r3, [r7, #11]
 8007956:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800795a:	b2da      	uxtb	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2206      	movs	r2, #6
 8007964:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	893a      	ldrh	r2, [r7, #8]
 800796a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800796c:	893b      	ldrh	r3, [r7, #8]
 800796e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007972:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007976:	d104      	bne.n	8007982 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f240 4209 	movw	r2, #1033	; 0x409
 800797e:	829a      	strh	r2, [r3, #20]
 8007980:	e002      	b.n	8007988 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	8b3a      	ldrh	r2, [r7, #24]
 800798c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800798e:	8b3b      	ldrh	r3, [r7, #24]
 8007990:	461a      	mov	r2, r3
 8007992:	6879      	ldr	r1, [r7, #4]
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f000 fa50 	bl	8007e3a <USBH_CtlReq>
 800799a:	4603      	mov	r3, r0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	460b      	mov	r3, r1
 80079ae:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	789b      	ldrb	r3, [r3, #2]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d10f      	bne.n	80079d8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2205      	movs	r2, #5
 80079c2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80079c4:	78fb      	ldrb	r3, [r7, #3]
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80079d8:	2200      	movs	r2, #0
 80079da:	2100      	movs	r1, #0
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 fa2c 	bl	8007e3a <USBH_CtlReq>
 80079e2:	4603      	mov	r3, r0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	460b      	mov	r3, r1
 80079f6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	789b      	ldrb	r3, [r3, #2]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d10e      	bne.n	8007a1e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2209      	movs	r2, #9
 8007a0a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	887a      	ldrh	r2, [r7, #2]
 8007a10:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007a1e:	2200      	movs	r2, #0
 8007a20:	2100      	movs	r1, #0
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fa09 	bl	8007e3a <USBH_CtlReq>
 8007a28:	4603      	mov	r3, r0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3708      	adds	r7, #8
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b082      	sub	sp, #8
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	789b      	ldrb	r3, [r3, #2]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d10f      	bne.n	8007a66 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2203      	movs	r2, #3
 8007a50:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007a52:	78fb      	ldrb	r3, [r7, #3]
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007a66:	2200      	movs	r2, #0
 8007a68:	2100      	movs	r1, #0
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f9e5 	bl	8007e3a <USBH_CtlReq>
 8007a70:	4603      	mov	r3, r0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b082      	sub	sp, #8
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
 8007a82:	460b      	mov	r3, r1
 8007a84:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	789b      	ldrb	r3, [r3, #2]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d10f      	bne.n	8007aae <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2202      	movs	r2, #2
 8007a92:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007aa0:	78fb      	ldrb	r3, [r7, #3]
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007aae:	2200      	movs	r2, #0
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f9c1 	bl	8007e3a <USBH_CtlReq>
 8007ab8:	4603      	mov	r3, r0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3708      	adds	r7, #8
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b085      	sub	sp, #20
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	60f8      	str	r0, [r7, #12]
 8007aca:	60b9      	str	r1, [r7, #8]
 8007acc:	4613      	mov	r3, r2
 8007ace:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	781a      	ldrb	r2, [r3, #0]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	785a      	ldrb	r2, [r3, #1]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	3302      	adds	r3, #2
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	b29a      	uxth	r2, r3
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	3303      	adds	r3, #3
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	021b      	lsls	r3, r3, #8
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	4313      	orrs	r3, r2
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	791a      	ldrb	r2, [r3, #4]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	795a      	ldrb	r2, [r3, #5]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	799a      	ldrb	r2, [r3, #6]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	79da      	ldrb	r2, [r3, #7]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007b1c:	88fb      	ldrh	r3, [r7, #6]
 8007b1e:	2b08      	cmp	r3, #8
 8007b20:	d939      	bls.n	8007b96 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	3308      	adds	r3, #8
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	3309      	adds	r3, #9
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	021b      	lsls	r3, r3, #8
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	4313      	orrs	r3, r2
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	330a      	adds	r3, #10
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	b29a      	uxth	r2, r3
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	330b      	adds	r3, #11
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	021b      	lsls	r3, r3, #8
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	4313      	orrs	r3, r2
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	330c      	adds	r3, #12
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	330d      	adds	r3, #13
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	021b      	lsls	r3, r3, #8
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	7b9a      	ldrb	r2, [r3, #14]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	7bda      	ldrb	r2, [r3, #15]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	7c1a      	ldrb	r2, [r3, #16]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	7c5a      	ldrb	r2, [r3, #17]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	745a      	strb	r2, [r3, #17]
  }
}
 8007b96:	bf00      	nop
 8007b98:	3714      	adds	r7, #20
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr

08007ba2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b08a      	sub	sp, #40	; 0x28
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	60f8      	str	r0, [r7, #12]
 8007baa:	60b9      	str	r1, [r7, #8]
 8007bac:	4613      	mov	r3, r2
 8007bae:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	781a      	ldrb	r2, [r3, #0]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	785a      	ldrb	r2, [r3, #1]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	3302      	adds	r3, #2
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	b29a      	uxth	r2, r3
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	3303      	adds	r3, #3
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	021b      	lsls	r3, r3, #8
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	4313      	orrs	r3, r2
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	791a      	ldrb	r2, [r3, #4]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	795a      	ldrb	r2, [r3, #5]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	799a      	ldrb	r2, [r3, #6]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	79da      	ldrb	r2, [r3, #7]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	7a1a      	ldrb	r2, [r3, #8]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007c18:	88fb      	ldrh	r3, [r7, #6]
 8007c1a:	2b09      	cmp	r3, #9
 8007c1c:	d95f      	bls.n	8007cde <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007c1e:	2309      	movs	r3, #9
 8007c20:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007c22:	2300      	movs	r3, #0
 8007c24:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007c26:	e051      	b.n	8007ccc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007c28:	f107 0316 	add.w	r3, r7, #22
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c30:	f000 f8e8 	bl	8007e04 <USBH_GetNextDesc>
 8007c34:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c38:	785b      	ldrb	r3, [r3, #1]
 8007c3a:	2b04      	cmp	r3, #4
 8007c3c:	d146      	bne.n	8007ccc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007c3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c42:	221a      	movs	r2, #26
 8007c44:	fb02 f303 	mul.w	r3, r2, r3
 8007c48:	3308      	adds	r3, #8
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	3302      	adds	r3, #2
 8007c50:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007c52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c54:	69f8      	ldr	r0, [r7, #28]
 8007c56:	f000 f846 	bl	8007ce6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007c60:	2300      	movs	r3, #0
 8007c62:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007c64:	e022      	b.n	8007cac <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007c66:	f107 0316 	add.w	r3, r7, #22
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c6e:	f000 f8c9 	bl	8007e04 <USBH_GetNextDesc>
 8007c72:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c76:	785b      	ldrb	r3, [r3, #1]
 8007c78:	2b05      	cmp	r3, #5
 8007c7a:	d117      	bne.n	8007cac <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007c7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c80:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007c84:	3201      	adds	r2, #1
 8007c86:	00d2      	lsls	r2, r2, #3
 8007c88:	211a      	movs	r1, #26
 8007c8a:	fb01 f303 	mul.w	r3, r1, r3
 8007c8e:	4413      	add	r3, r2
 8007c90:	3308      	adds	r3, #8
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	4413      	add	r3, r2
 8007c96:	3304      	adds	r3, #4
 8007c98:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007c9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c9c:	69b8      	ldr	r0, [r7, #24]
 8007c9e:	f000 f851 	bl	8007d44 <USBH_ParseEPDesc>
            ep_ix++;
 8007ca2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	791b      	ldrb	r3, [r3, #4]
 8007cb0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d204      	bcs.n	8007cc2 <USBH_ParseCfgDesc+0x120>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	885a      	ldrh	r2, [r3, #2]
 8007cbc:	8afb      	ldrh	r3, [r7, #22]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d8d1      	bhi.n	8007c66 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007cc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007ccc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d804      	bhi.n	8007cde <USBH_ParseCfgDesc+0x13c>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	885a      	ldrh	r2, [r3, #2]
 8007cd8:	8afb      	ldrh	r3, [r7, #22]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d8a4      	bhi.n	8007c28 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007cde:	bf00      	nop
 8007ce0:	3728      	adds	r7, #40	; 0x28
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b083      	sub	sp, #12
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
 8007cee:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	781a      	ldrb	r2, [r3, #0]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	785a      	ldrb	r2, [r3, #1]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	789a      	ldrb	r2, [r3, #2]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	78da      	ldrb	r2, [r3, #3]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	791a      	ldrb	r2, [r3, #4]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	795a      	ldrb	r2, [r3, #5]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	799a      	ldrb	r2, [r3, #6]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	79da      	ldrb	r2, [r3, #7]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	7a1a      	ldrb	r2, [r3, #8]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	721a      	strb	r2, [r3, #8]
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	781a      	ldrb	r2, [r3, #0]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	785a      	ldrb	r2, [r3, #1]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	789a      	ldrb	r2, [r3, #2]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	78da      	ldrb	r2, [r3, #3]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	3304      	adds	r3, #4
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	3305      	adds	r3, #5
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	021b      	lsls	r3, r3, #8
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	4313      	orrs	r3, r2
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	799a      	ldrb	r2, [r3, #6]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	719a      	strb	r2, [r3, #6]
}
 8007d92:	bf00      	nop
 8007d94:	370c      	adds	r7, #12
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007d9e:	b480      	push	{r7}
 8007da0:	b087      	sub	sp, #28
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	60f8      	str	r0, [r7, #12]
 8007da6:	60b9      	str	r1, [r7, #8]
 8007da8:	4613      	mov	r3, r2
 8007daa:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	3301      	adds	r3, #1
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	2b03      	cmp	r3, #3
 8007db4:	d120      	bne.n	8007df8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	1e9a      	subs	r2, r3, #2
 8007dbc:	88fb      	ldrh	r3, [r7, #6]
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	bf28      	it	cs
 8007dc2:	4613      	movcs	r3, r2
 8007dc4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	3302      	adds	r3, #2
 8007dca:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007dcc:	2300      	movs	r3, #0
 8007dce:	82fb      	strh	r3, [r7, #22]
 8007dd0:	e00b      	b.n	8007dea <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007dd2:	8afb      	ldrh	r3, [r7, #22]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	781a      	ldrb	r2, [r3, #0]
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	3301      	adds	r3, #1
 8007de2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007de4:	8afb      	ldrh	r3, [r7, #22]
 8007de6:	3302      	adds	r3, #2
 8007de8:	82fb      	strh	r3, [r7, #22]
 8007dea:	8afa      	ldrh	r2, [r7, #22]
 8007dec:	8abb      	ldrh	r3, [r7, #20]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d3ef      	bcc.n	8007dd2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	2200      	movs	r2, #0
 8007df6:	701a      	strb	r2, [r3, #0]
  }
}
 8007df8:	bf00      	nop
 8007dfa:	371c      	adds	r7, #28
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	881a      	ldrh	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	4413      	add	r3, r2
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4413      	add	r3, r2
 8007e2a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b086      	sub	sp, #24
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	60f8      	str	r0, [r7, #12]
 8007e42:	60b9      	str	r1, [r7, #8]
 8007e44:	4613      	mov	r3, r2
 8007e46:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	789b      	ldrb	r3, [r3, #2]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d002      	beq.n	8007e5a <USBH_CtlReq+0x20>
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d00f      	beq.n	8007e78 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007e58:	e027      	b.n	8007eaa <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	68ba      	ldr	r2, [r7, #8]
 8007e5e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	88fa      	ldrh	r2, [r7, #6]
 8007e64:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2202      	movs	r2, #2
 8007e70:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007e72:	2301      	movs	r3, #1
 8007e74:	75fb      	strb	r3, [r7, #23]
      break;
 8007e76:	e018      	b.n	8007eaa <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f000 f81b 	bl	8007eb4 <USBH_HandleControl>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007e82:	7dfb      	ldrb	r3, [r7, #23]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d002      	beq.n	8007e8e <USBH_CtlReq+0x54>
 8007e88:	7dfb      	ldrb	r3, [r7, #23]
 8007e8a:	2b03      	cmp	r3, #3
 8007e8c:	d106      	bne.n	8007e9c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2201      	movs	r2, #1
 8007e92:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	761a      	strb	r2, [r3, #24]
      break;
 8007e9a:	e005      	b.n	8007ea8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007e9c:	7dfb      	ldrb	r3, [r7, #23]
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d102      	bne.n	8007ea8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	709a      	strb	r2, [r3, #2]
      break;
 8007ea8:	bf00      	nop
  }
  return status;
 8007eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3718      	adds	r7, #24
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b086      	sub	sp, #24
 8007eb8:	af02      	add	r7, sp, #8
 8007eba:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	7e1b      	ldrb	r3, [r3, #24]
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	2b0a      	cmp	r3, #10
 8007ecc:	f200 8156 	bhi.w	800817c <USBH_HandleControl+0x2c8>
 8007ed0:	a201      	add	r2, pc, #4	; (adr r2, 8007ed8 <USBH_HandleControl+0x24>)
 8007ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed6:	bf00      	nop
 8007ed8:	08007f05 	.word	0x08007f05
 8007edc:	08007f1f 	.word	0x08007f1f
 8007ee0:	08007f89 	.word	0x08007f89
 8007ee4:	08007faf 	.word	0x08007faf
 8007ee8:	08007fe7 	.word	0x08007fe7
 8007eec:	08008011 	.word	0x08008011
 8007ef0:	08008063 	.word	0x08008063
 8007ef4:	08008085 	.word	0x08008085
 8007ef8:	080080c1 	.word	0x080080c1
 8007efc:	080080e7 	.word	0x080080e7
 8007f00:	08008125 	.word	0x08008125
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f103 0110 	add.w	r1, r3, #16
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	795b      	ldrb	r3, [r3, #5]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 f943 	bl	800819c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2202      	movs	r2, #2
 8007f1a:	761a      	strb	r2, [r3, #24]
      break;
 8007f1c:	e139      	b.n	8008192 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	795b      	ldrb	r3, [r3, #5]
 8007f22:	4619      	mov	r1, r3
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fcc5 	bl	80088b4 <USBH_LL_GetURBState>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007f2e:	7bbb      	ldrb	r3, [r7, #14]
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d11e      	bne.n	8007f72 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	7c1b      	ldrb	r3, [r3, #16]
 8007f38:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f3c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	8adb      	ldrh	r3, [r3, #22]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00a      	beq.n	8007f5c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007f46:	7b7b      	ldrb	r3, [r7, #13]
 8007f48:	2b80      	cmp	r3, #128	; 0x80
 8007f4a:	d103      	bne.n	8007f54 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2203      	movs	r2, #3
 8007f50:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007f52:	e115      	b.n	8008180 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2205      	movs	r2, #5
 8007f58:	761a      	strb	r2, [r3, #24]
      break;
 8007f5a:	e111      	b.n	8008180 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007f5c:	7b7b      	ldrb	r3, [r7, #13]
 8007f5e:	2b80      	cmp	r3, #128	; 0x80
 8007f60:	d103      	bne.n	8007f6a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2209      	movs	r2, #9
 8007f66:	761a      	strb	r2, [r3, #24]
      break;
 8007f68:	e10a      	b.n	8008180 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2207      	movs	r2, #7
 8007f6e:	761a      	strb	r2, [r3, #24]
      break;
 8007f70:	e106      	b.n	8008180 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007f72:	7bbb      	ldrb	r3, [r7, #14]
 8007f74:	2b04      	cmp	r3, #4
 8007f76:	d003      	beq.n	8007f80 <USBH_HandleControl+0xcc>
 8007f78:	7bbb      	ldrb	r3, [r7, #14]
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	f040 8100 	bne.w	8008180 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	220b      	movs	r2, #11
 8007f84:	761a      	strb	r2, [r3, #24]
      break;
 8007f86:	e0fb      	b.n	8008180 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6899      	ldr	r1, [r3, #8]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	899a      	ldrh	r2, [r3, #12]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	791b      	ldrb	r3, [r3, #4]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f93a 	bl	800821a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2204      	movs	r2, #4
 8007faa:	761a      	strb	r2, [r3, #24]
      break;
 8007fac:	e0f1      	b.n	8008192 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	791b      	ldrb	r3, [r3, #4]
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fc7d 	bl	80088b4 <USBH_LL_GetURBState>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007fbe:	7bbb      	ldrb	r3, [r7, #14]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d102      	bne.n	8007fca <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2209      	movs	r2, #9
 8007fc8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007fca:	7bbb      	ldrb	r3, [r7, #14]
 8007fcc:	2b05      	cmp	r3, #5
 8007fce:	d102      	bne.n	8007fd6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007fd4:	e0d6      	b.n	8008184 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007fd6:	7bbb      	ldrb	r3, [r7, #14]
 8007fd8:	2b04      	cmp	r3, #4
 8007fda:	f040 80d3 	bne.w	8008184 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	220b      	movs	r2, #11
 8007fe2:	761a      	strb	r2, [r3, #24]
      break;
 8007fe4:	e0ce      	b.n	8008184 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6899      	ldr	r1, [r3, #8]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	899a      	ldrh	r2, [r3, #12]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	795b      	ldrb	r3, [r3, #5]
 8007ff2:	2001      	movs	r0, #1
 8007ff4:	9000      	str	r0, [sp, #0]
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f8ea 	bl	80081d0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008002:	b29a      	uxth	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2206      	movs	r2, #6
 800800c:	761a      	strb	r2, [r3, #24]
      break;
 800800e:	e0c0      	b.n	8008192 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	795b      	ldrb	r3, [r3, #5]
 8008014:	4619      	mov	r1, r3
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fc4c 	bl	80088b4 <USBH_LL_GetURBState>
 800801c:	4603      	mov	r3, r0
 800801e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008020:	7bbb      	ldrb	r3, [r7, #14]
 8008022:	2b01      	cmp	r3, #1
 8008024:	d103      	bne.n	800802e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2207      	movs	r2, #7
 800802a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800802c:	e0ac      	b.n	8008188 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800802e:	7bbb      	ldrb	r3, [r7, #14]
 8008030:	2b05      	cmp	r3, #5
 8008032:	d105      	bne.n	8008040 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	220c      	movs	r2, #12
 8008038:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800803a:	2303      	movs	r3, #3
 800803c:	73fb      	strb	r3, [r7, #15]
      break;
 800803e:	e0a3      	b.n	8008188 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008040:	7bbb      	ldrb	r3, [r7, #14]
 8008042:	2b02      	cmp	r3, #2
 8008044:	d103      	bne.n	800804e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2205      	movs	r2, #5
 800804a:	761a      	strb	r2, [r3, #24]
      break;
 800804c:	e09c      	b.n	8008188 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800804e:	7bbb      	ldrb	r3, [r7, #14]
 8008050:	2b04      	cmp	r3, #4
 8008052:	f040 8099 	bne.w	8008188 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	220b      	movs	r2, #11
 800805a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800805c:	2302      	movs	r3, #2
 800805e:	73fb      	strb	r3, [r7, #15]
      break;
 8008060:	e092      	b.n	8008188 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	791b      	ldrb	r3, [r3, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	2100      	movs	r1, #0
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f8d5 	bl	800821a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008076:	b29a      	uxth	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2208      	movs	r2, #8
 8008080:	761a      	strb	r2, [r3, #24]

      break;
 8008082:	e086      	b.n	8008192 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	791b      	ldrb	r3, [r3, #4]
 8008088:	4619      	mov	r1, r3
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fc12 	bl	80088b4 <USBH_LL_GetURBState>
 8008090:	4603      	mov	r3, r0
 8008092:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008094:	7bbb      	ldrb	r3, [r7, #14]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d105      	bne.n	80080a6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	220d      	movs	r2, #13
 800809e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80080a0:	2300      	movs	r3, #0
 80080a2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80080a4:	e072      	b.n	800818c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80080a6:	7bbb      	ldrb	r3, [r7, #14]
 80080a8:	2b04      	cmp	r3, #4
 80080aa:	d103      	bne.n	80080b4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	220b      	movs	r2, #11
 80080b0:	761a      	strb	r2, [r3, #24]
      break;
 80080b2:	e06b      	b.n	800818c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80080b4:	7bbb      	ldrb	r3, [r7, #14]
 80080b6:	2b05      	cmp	r3, #5
 80080b8:	d168      	bne.n	800818c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80080ba:	2303      	movs	r3, #3
 80080bc:	73fb      	strb	r3, [r7, #15]
      break;
 80080be:	e065      	b.n	800818c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	795b      	ldrb	r3, [r3, #5]
 80080c4:	2201      	movs	r2, #1
 80080c6:	9200      	str	r2, [sp, #0]
 80080c8:	2200      	movs	r2, #0
 80080ca:	2100      	movs	r1, #0
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f87f 	bl	80081d0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080d8:	b29a      	uxth	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	220a      	movs	r2, #10
 80080e2:	761a      	strb	r2, [r3, #24]
      break;
 80080e4:	e055      	b.n	8008192 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	795b      	ldrb	r3, [r3, #5]
 80080ea:	4619      	mov	r1, r3
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 fbe1 	bl	80088b4 <USBH_LL_GetURBState>
 80080f2:	4603      	mov	r3, r0
 80080f4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80080f6:	7bbb      	ldrb	r3, [r7, #14]
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d105      	bne.n	8008108 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	220d      	movs	r2, #13
 8008104:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008106:	e043      	b.n	8008190 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008108:	7bbb      	ldrb	r3, [r7, #14]
 800810a:	2b02      	cmp	r3, #2
 800810c:	d103      	bne.n	8008116 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2209      	movs	r2, #9
 8008112:	761a      	strb	r2, [r3, #24]
      break;
 8008114:	e03c      	b.n	8008190 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008116:	7bbb      	ldrb	r3, [r7, #14]
 8008118:	2b04      	cmp	r3, #4
 800811a:	d139      	bne.n	8008190 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	220b      	movs	r2, #11
 8008120:	761a      	strb	r2, [r3, #24]
      break;
 8008122:	e035      	b.n	8008190 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	7e5b      	ldrb	r3, [r3, #25]
 8008128:	3301      	adds	r3, #1
 800812a:	b2da      	uxtb	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	765a      	strb	r2, [r3, #25]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	7e5b      	ldrb	r3, [r3, #25]
 8008134:	2b02      	cmp	r3, #2
 8008136:	d806      	bhi.n	8008146 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008144:	e025      	b.n	8008192 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800814c:	2106      	movs	r1, #6
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	795b      	ldrb	r3, [r3, #5]
 800815c:	4619      	mov	r1, r3
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f90c 	bl	800837c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	791b      	ldrb	r3, [r3, #4]
 8008168:	4619      	mov	r1, r3
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f906 	bl	800837c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008176:	2302      	movs	r3, #2
 8008178:	73fb      	strb	r3, [r7, #15]
      break;
 800817a:	e00a      	b.n	8008192 <USBH_HandleControl+0x2de>

    default:
      break;
 800817c:	bf00      	nop
 800817e:	e008      	b.n	8008192 <USBH_HandleControl+0x2de>
      break;
 8008180:	bf00      	nop
 8008182:	e006      	b.n	8008192 <USBH_HandleControl+0x2de>
      break;
 8008184:	bf00      	nop
 8008186:	e004      	b.n	8008192 <USBH_HandleControl+0x2de>
      break;
 8008188:	bf00      	nop
 800818a:	e002      	b.n	8008192 <USBH_HandleControl+0x2de>
      break;
 800818c:	bf00      	nop
 800818e:	e000      	b.n	8008192 <USBH_HandleControl+0x2de>
      break;
 8008190:	bf00      	nop
  }

  return status;
 8008192:	7bfb      	ldrb	r3, [r7, #15]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3710      	adds	r7, #16
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b088      	sub	sp, #32
 80081a0:	af04      	add	r7, sp, #16
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	4613      	mov	r3, r2
 80081a8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80081aa:	79f9      	ldrb	r1, [r7, #7]
 80081ac:	2300      	movs	r3, #0
 80081ae:	9303      	str	r3, [sp, #12]
 80081b0:	2308      	movs	r3, #8
 80081b2:	9302      	str	r3, [sp, #8]
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	9301      	str	r3, [sp, #4]
 80081b8:	2300      	movs	r3, #0
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	2300      	movs	r3, #0
 80081be:	2200      	movs	r2, #0
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f000 fb46 	bl	8008852 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b088      	sub	sp, #32
 80081d4:	af04      	add	r7, sp, #16
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	4611      	mov	r1, r2
 80081dc:	461a      	mov	r2, r3
 80081de:	460b      	mov	r3, r1
 80081e0:	80fb      	strh	r3, [r7, #6]
 80081e2:	4613      	mov	r3, r2
 80081e4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d001      	beq.n	80081f4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80081f0:	2300      	movs	r3, #0
 80081f2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80081f4:	7979      	ldrb	r1, [r7, #5]
 80081f6:	7e3b      	ldrb	r3, [r7, #24]
 80081f8:	9303      	str	r3, [sp, #12]
 80081fa:	88fb      	ldrh	r3, [r7, #6]
 80081fc:	9302      	str	r3, [sp, #8]
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	9301      	str	r3, [sp, #4]
 8008202:	2301      	movs	r3, #1
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	2300      	movs	r3, #0
 8008208:	2200      	movs	r2, #0
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f000 fb21 	bl	8008852 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3710      	adds	r7, #16
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b088      	sub	sp, #32
 800821e:	af04      	add	r7, sp, #16
 8008220:	60f8      	str	r0, [r7, #12]
 8008222:	60b9      	str	r1, [r7, #8]
 8008224:	4611      	mov	r1, r2
 8008226:	461a      	mov	r2, r3
 8008228:	460b      	mov	r3, r1
 800822a:	80fb      	strh	r3, [r7, #6]
 800822c:	4613      	mov	r3, r2
 800822e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008230:	7979      	ldrb	r1, [r7, #5]
 8008232:	2300      	movs	r3, #0
 8008234:	9303      	str	r3, [sp, #12]
 8008236:	88fb      	ldrh	r3, [r7, #6]
 8008238:	9302      	str	r3, [sp, #8]
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	9301      	str	r3, [sp, #4]
 800823e:	2301      	movs	r3, #1
 8008240:	9300      	str	r3, [sp, #0]
 8008242:	2300      	movs	r3, #0
 8008244:	2201      	movs	r2, #1
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f000 fb03 	bl	8008852 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800824c:	2300      	movs	r3, #0

}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b088      	sub	sp, #32
 800825a:	af04      	add	r7, sp, #16
 800825c:	60f8      	str	r0, [r7, #12]
 800825e:	60b9      	str	r1, [r7, #8]
 8008260:	4611      	mov	r1, r2
 8008262:	461a      	mov	r2, r3
 8008264:	460b      	mov	r3, r1
 8008266:	80fb      	strh	r3, [r7, #6]
 8008268:	4613      	mov	r3, r2
 800826a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008276:	2300      	movs	r3, #0
 8008278:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800827a:	7979      	ldrb	r1, [r7, #5]
 800827c:	7e3b      	ldrb	r3, [r7, #24]
 800827e:	9303      	str	r3, [sp, #12]
 8008280:	88fb      	ldrh	r3, [r7, #6]
 8008282:	9302      	str	r3, [sp, #8]
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	9301      	str	r3, [sp, #4]
 8008288:	2301      	movs	r3, #1
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	2302      	movs	r3, #2
 800828e:	2200      	movs	r2, #0
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f000 fade 	bl	8008852 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3710      	adds	r7, #16
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b088      	sub	sp, #32
 80082a4:	af04      	add	r7, sp, #16
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	4611      	mov	r1, r2
 80082ac:	461a      	mov	r2, r3
 80082ae:	460b      	mov	r3, r1
 80082b0:	80fb      	strh	r3, [r7, #6]
 80082b2:	4613      	mov	r3, r2
 80082b4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80082b6:	7979      	ldrb	r1, [r7, #5]
 80082b8:	2300      	movs	r3, #0
 80082ba:	9303      	str	r3, [sp, #12]
 80082bc:	88fb      	ldrh	r3, [r7, #6]
 80082be:	9302      	str	r3, [sp, #8]
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	9301      	str	r3, [sp, #4]
 80082c4:	2301      	movs	r3, #1
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	2302      	movs	r3, #2
 80082ca:	2201      	movs	r2, #1
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f000 fac0 	bl	8008852 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af04      	add	r7, sp, #16
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	4608      	mov	r0, r1
 80082e6:	4611      	mov	r1, r2
 80082e8:	461a      	mov	r2, r3
 80082ea:	4603      	mov	r3, r0
 80082ec:	70fb      	strb	r3, [r7, #3]
 80082ee:	460b      	mov	r3, r1
 80082f0:	70bb      	strb	r3, [r7, #2]
 80082f2:	4613      	mov	r3, r2
 80082f4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80082f6:	7878      	ldrb	r0, [r7, #1]
 80082f8:	78ba      	ldrb	r2, [r7, #2]
 80082fa:	78f9      	ldrb	r1, [r7, #3]
 80082fc:	8b3b      	ldrh	r3, [r7, #24]
 80082fe:	9302      	str	r3, [sp, #8]
 8008300:	7d3b      	ldrb	r3, [r7, #20]
 8008302:	9301      	str	r3, [sp, #4]
 8008304:	7c3b      	ldrb	r3, [r7, #16]
 8008306:	9300      	str	r3, [sp, #0]
 8008308:	4603      	mov	r3, r0
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fa53 	bl	80087b6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b082      	sub	sp, #8
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	460b      	mov	r3, r1
 8008324:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008326:	78fb      	ldrb	r3, [r7, #3]
 8008328:	4619      	mov	r1, r3
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fa72 	bl	8008814 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3708      	adds	r7, #8
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b084      	sub	sp, #16
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
 8008342:	460b      	mov	r3, r1
 8008344:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f836 	bl	80083b8 <USBH_GetFreePipe>
 800834c:	4603      	mov	r3, r0
 800834e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008350:	89fb      	ldrh	r3, [r7, #14]
 8008352:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008356:	4293      	cmp	r3, r2
 8008358:	d00a      	beq.n	8008370 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800835a:	78fa      	ldrb	r2, [r7, #3]
 800835c:	89fb      	ldrh	r3, [r7, #14]
 800835e:	f003 030f 	and.w	r3, r3, #15
 8008362:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008366:	6879      	ldr	r1, [r7, #4]
 8008368:	33e0      	adds	r3, #224	; 0xe0
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	440b      	add	r3, r1
 800836e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008370:	89fb      	ldrh	r3, [r7, #14]
 8008372:	b2db      	uxtb	r3, r3
}
 8008374:	4618      	mov	r0, r3
 8008376:	3710      	adds	r7, #16
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	460b      	mov	r3, r1
 8008386:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008388:	78fb      	ldrb	r3, [r7, #3]
 800838a:	2b0a      	cmp	r3, #10
 800838c:	d80d      	bhi.n	80083aa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800838e:	78fb      	ldrb	r3, [r7, #3]
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	33e0      	adds	r3, #224	; 0xe0
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	4413      	add	r3, r2
 8008398:	685a      	ldr	r2, [r3, #4]
 800839a:	78fb      	ldrb	r3, [r7, #3]
 800839c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80083a0:	6879      	ldr	r1, [r7, #4]
 80083a2:	33e0      	adds	r3, #224	; 0xe0
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	440b      	add	r3, r1
 80083a8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80083c0:	2300      	movs	r3, #0
 80083c2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80083c4:	2300      	movs	r3, #0
 80083c6:	73fb      	strb	r3, [r7, #15]
 80083c8:	e00f      	b.n	80083ea <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80083ca:	7bfb      	ldrb	r3, [r7, #15]
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	33e0      	adds	r3, #224	; 0xe0
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4413      	add	r3, r2
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d102      	bne.n	80083e4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80083de:	7bfb      	ldrb	r3, [r7, #15]
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	e007      	b.n	80083f4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80083e4:	7bfb      	ldrb	r3, [r7, #15]
 80083e6:	3301      	adds	r3, #1
 80083e8:	73fb      	strb	r3, [r7, #15]
 80083ea:	7bfb      	ldrb	r3, [r7, #15]
 80083ec:	2b0a      	cmp	r3, #10
 80083ee:	d9ec      	bls.n	80083ca <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80083f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3714      	adds	r7, #20
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008404:	2201      	movs	r2, #1
 8008406:	490e      	ldr	r1, [pc, #56]	; (8008440 <MX_USB_HOST_Init+0x40>)
 8008408:	480e      	ldr	r0, [pc, #56]	; (8008444 <MX_USB_HOST_Init+0x44>)
 800840a:	f7fe fca1 	bl	8006d50 <USBH_Init>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d001      	beq.n	8008418 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008414:	f7f8 fb4e 	bl	8000ab4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008418:	490b      	ldr	r1, [pc, #44]	; (8008448 <MX_USB_HOST_Init+0x48>)
 800841a:	480a      	ldr	r0, [pc, #40]	; (8008444 <MX_USB_HOST_Init+0x44>)
 800841c:	f7fe fd26 	bl	8006e6c <USBH_RegisterClass>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d001      	beq.n	800842a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008426:	f7f8 fb45 	bl	8000ab4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800842a:	4806      	ldr	r0, [pc, #24]	; (8008444 <MX_USB_HOST_Init+0x44>)
 800842c:	f7fe fdaa 	bl	8006f84 <USBH_Start>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d001      	beq.n	800843a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008436:	f7f8 fb3d 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800843a:	bf00      	nop
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	08008461 	.word	0x08008461
 8008444:	2000023c 	.word	0x2000023c
 8008448:	2000000c 	.word	0x2000000c

0800844c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008450:	4802      	ldr	r0, [pc, #8]	; (800845c <MX_USB_HOST_Process+0x10>)
 8008452:	f7fe fda7 	bl	8006fa4 <USBH_Process>
}
 8008456:	bf00      	nop
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	2000023c 	.word	0x2000023c

08008460 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	460b      	mov	r3, r1
 800846a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800846c:	78fb      	ldrb	r3, [r7, #3]
 800846e:	3b01      	subs	r3, #1
 8008470:	2b04      	cmp	r3, #4
 8008472:	d819      	bhi.n	80084a8 <USBH_UserProcess+0x48>
 8008474:	a201      	add	r2, pc, #4	; (adr r2, 800847c <USBH_UserProcess+0x1c>)
 8008476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847a:	bf00      	nop
 800847c:	080084a9 	.word	0x080084a9
 8008480:	08008499 	.word	0x08008499
 8008484:	080084a9 	.word	0x080084a9
 8008488:	080084a1 	.word	0x080084a1
 800848c:	08008491 	.word	0x08008491
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008490:	4b09      	ldr	r3, [pc, #36]	; (80084b8 <USBH_UserProcess+0x58>)
 8008492:	2203      	movs	r2, #3
 8008494:	701a      	strb	r2, [r3, #0]
  break;
 8008496:	e008      	b.n	80084aa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008498:	4b07      	ldr	r3, [pc, #28]	; (80084b8 <USBH_UserProcess+0x58>)
 800849a:	2202      	movs	r2, #2
 800849c:	701a      	strb	r2, [r3, #0]
  break;
 800849e:	e004      	b.n	80084aa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80084a0:	4b05      	ldr	r3, [pc, #20]	; (80084b8 <USBH_UserProcess+0x58>)
 80084a2:	2201      	movs	r2, #1
 80084a4:	701a      	strb	r2, [r3, #0]
  break;
 80084a6:	e000      	b.n	80084aa <USBH_UserProcess+0x4a>

  default:
  break;
 80084a8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80084aa:	bf00      	nop
 80084ac:	370c      	adds	r7, #12
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	200000b0 	.word	0x200000b0

080084bc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b08a      	sub	sp, #40	; 0x28
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084c4:	f107 0314 	add.w	r3, r7, #20
 80084c8:	2200      	movs	r2, #0
 80084ca:	601a      	str	r2, [r3, #0]
 80084cc:	605a      	str	r2, [r3, #4]
 80084ce:	609a      	str	r2, [r3, #8]
 80084d0:	60da      	str	r2, [r3, #12]
 80084d2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084dc:	d147      	bne.n	800856e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084de:	2300      	movs	r3, #0
 80084e0:	613b      	str	r3, [r7, #16]
 80084e2:	4b25      	ldr	r3, [pc, #148]	; (8008578 <HAL_HCD_MspInit+0xbc>)
 80084e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e6:	4a24      	ldr	r2, [pc, #144]	; (8008578 <HAL_HCD_MspInit+0xbc>)
 80084e8:	f043 0301 	orr.w	r3, r3, #1
 80084ec:	6313      	str	r3, [r2, #48]	; 0x30
 80084ee:	4b22      	ldr	r3, [pc, #136]	; (8008578 <HAL_HCD_MspInit+0xbc>)
 80084f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f2:	f003 0301 	and.w	r3, r3, #1
 80084f6:	613b      	str	r3, [r7, #16]
 80084f8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80084fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008500:	2300      	movs	r3, #0
 8008502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008504:	2300      	movs	r3, #0
 8008506:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008508:	f107 0314 	add.w	r3, r7, #20
 800850c:	4619      	mov	r1, r3
 800850e:	481b      	ldr	r0, [pc, #108]	; (800857c <HAL_HCD_MspInit+0xc0>)
 8008510:	f7f9 f9cc 	bl	80018ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008514:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800851a:	2302      	movs	r3, #2
 800851c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800851e:	2300      	movs	r3, #0
 8008520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008522:	2300      	movs	r3, #0
 8008524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008526:	230a      	movs	r3, #10
 8008528:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800852a:	f107 0314 	add.w	r3, r7, #20
 800852e:	4619      	mov	r1, r3
 8008530:	4812      	ldr	r0, [pc, #72]	; (800857c <HAL_HCD_MspInit+0xc0>)
 8008532:	f7f9 f9bb 	bl	80018ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008536:	4b10      	ldr	r3, [pc, #64]	; (8008578 <HAL_HCD_MspInit+0xbc>)
 8008538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800853a:	4a0f      	ldr	r2, [pc, #60]	; (8008578 <HAL_HCD_MspInit+0xbc>)
 800853c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008540:	6353      	str	r3, [r2, #52]	; 0x34
 8008542:	2300      	movs	r3, #0
 8008544:	60fb      	str	r3, [r7, #12]
 8008546:	4b0c      	ldr	r3, [pc, #48]	; (8008578 <HAL_HCD_MspInit+0xbc>)
 8008548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800854a:	4a0b      	ldr	r2, [pc, #44]	; (8008578 <HAL_HCD_MspInit+0xbc>)
 800854c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008550:	6453      	str	r3, [r2, #68]	; 0x44
 8008552:	4b09      	ldr	r3, [pc, #36]	; (8008578 <HAL_HCD_MspInit+0xbc>)
 8008554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800855a:	60fb      	str	r3, [r7, #12]
 800855c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800855e:	2200      	movs	r2, #0
 8008560:	2100      	movs	r1, #0
 8008562:	2043      	movs	r0, #67	; 0x43
 8008564:	f7f9 f96b 	bl	800183e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008568:	2043      	movs	r0, #67	; 0x43
 800856a:	f7f9 f984 	bl	8001876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800856e:	bf00      	nop
 8008570:	3728      	adds	r7, #40	; 0x28
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	40023800 	.word	0x40023800
 800857c:	40020000 	.word	0x40020000

08008580 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800858e:	4618      	mov	r0, r3
 8008590:	f7ff f8db 	bl	800774a <USBH_LL_IncTimer>
}
 8008594:	bf00      	nop
 8008596:	3708      	adds	r7, #8
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7ff f913 	bl	80077d6 <USBH_LL_Connect>
}
 80085b0:	bf00      	nop
 80085b2:	3708      	adds	r7, #8
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7ff f91c 	bl	8007804 <USBH_LL_Disconnect>
}
 80085cc:	bf00      	nop
 80085ce:	3708      	adds	r7, #8
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	460b      	mov	r3, r1
 80085de:	70fb      	strb	r3, [r7, #3]
 80085e0:	4613      	mov	r3, r2
 80085e2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80085fe:	4618      	mov	r0, r3
 8008600:	f7ff f8cd 	bl	800779e <USBH_LL_PortEnabled>
}
 8008604:	bf00      	nop
 8008606:	3708      	adds	r7, #8
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800861a:	4618      	mov	r0, r3
 800861c:	f7ff f8cd 	bl	80077ba <USBH_LL_PortDisabled>
}
 8008620:	bf00      	nop
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008636:	2b01      	cmp	r3, #1
 8008638:	d12a      	bne.n	8008690 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800863a:	4a18      	ldr	r2, [pc, #96]	; (800869c <USBH_LL_Init+0x74>)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a15      	ldr	r2, [pc, #84]	; (800869c <USBH_LL_Init+0x74>)
 8008646:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800864a:	4b14      	ldr	r3, [pc, #80]	; (800869c <USBH_LL_Init+0x74>)
 800864c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008650:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008652:	4b12      	ldr	r3, [pc, #72]	; (800869c <USBH_LL_Init+0x74>)
 8008654:	2208      	movs	r2, #8
 8008656:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008658:	4b10      	ldr	r3, [pc, #64]	; (800869c <USBH_LL_Init+0x74>)
 800865a:	2201      	movs	r2, #1
 800865c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800865e:	4b0f      	ldr	r3, [pc, #60]	; (800869c <USBH_LL_Init+0x74>)
 8008660:	2200      	movs	r2, #0
 8008662:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008664:	4b0d      	ldr	r3, [pc, #52]	; (800869c <USBH_LL_Init+0x74>)
 8008666:	2202      	movs	r2, #2
 8008668:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800866a:	4b0c      	ldr	r3, [pc, #48]	; (800869c <USBH_LL_Init+0x74>)
 800866c:	2200      	movs	r2, #0
 800866e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008670:	480a      	ldr	r0, [pc, #40]	; (800869c <USBH_LL_Init+0x74>)
 8008672:	f7f9 fad0 	bl	8001c16 <HAL_HCD_Init>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d001      	beq.n	8008680 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800867c:	f7f8 fa1a 	bl	8000ab4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008680:	4806      	ldr	r0, [pc, #24]	; (800869c <USBH_LL_Init+0x74>)
 8008682:	f7f9 feb4 	bl	80023ee <HAL_HCD_GetCurrentFrame>
 8008686:	4603      	mov	r3, r0
 8008688:	4619      	mov	r1, r3
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f7ff f84e 	bl	800772c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3708      	adds	r7, #8
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	20000614 	.word	0x20000614

080086a0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086a8:	2300      	movs	r3, #0
 80086aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086ac:	2300      	movs	r3, #0
 80086ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7f9 fe23 	bl	8002302 <HAL_HCD_Start>
 80086bc:	4603      	mov	r3, r0
 80086be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80086c0:	7bfb      	ldrb	r3, [r7, #15]
 80086c2:	4618      	mov	r0, r3
 80086c4:	f000 f95c 	bl	8008980 <USBH_Get_USB_Status>
 80086c8:	4603      	mov	r3, r0
 80086ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b084      	sub	sp, #16
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086de:	2300      	movs	r3, #0
 80086e0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086e2:	2300      	movs	r3, #0
 80086e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7f9 fe2b 	bl	8002348 <HAL_HCD_Stop>
 80086f2:	4603      	mov	r3, r0
 80086f4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80086f6:	7bfb      	ldrb	r3, [r7, #15]
 80086f8:	4618      	mov	r0, r3
 80086fa:	f000 f941 	bl	8008980 <USBH_Get_USB_Status>
 80086fe:	4603      	mov	r3, r0
 8008700:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008702:	7bbb      	ldrb	r3, [r7, #14]
}
 8008704:	4618      	mov	r0, r3
 8008706:	3710      	adds	r7, #16
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008714:	2301      	movs	r3, #1
 8008716:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800871e:	4618      	mov	r0, r3
 8008720:	f7f9 fe73 	bl	800240a <HAL_HCD_GetCurrentSpeed>
 8008724:	4603      	mov	r3, r0
 8008726:	2b02      	cmp	r3, #2
 8008728:	d00c      	beq.n	8008744 <USBH_LL_GetSpeed+0x38>
 800872a:	2b02      	cmp	r3, #2
 800872c:	d80d      	bhi.n	800874a <USBH_LL_GetSpeed+0x3e>
 800872e:	2b00      	cmp	r3, #0
 8008730:	d002      	beq.n	8008738 <USBH_LL_GetSpeed+0x2c>
 8008732:	2b01      	cmp	r3, #1
 8008734:	d003      	beq.n	800873e <USBH_LL_GetSpeed+0x32>
 8008736:	e008      	b.n	800874a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008738:	2300      	movs	r3, #0
 800873a:	73fb      	strb	r3, [r7, #15]
    break;
 800873c:	e008      	b.n	8008750 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800873e:	2301      	movs	r3, #1
 8008740:	73fb      	strb	r3, [r7, #15]
    break;
 8008742:	e005      	b.n	8008750 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008744:	2302      	movs	r3, #2
 8008746:	73fb      	strb	r3, [r7, #15]
    break;
 8008748:	e002      	b.n	8008750 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800874a:	2301      	movs	r3, #1
 800874c:	73fb      	strb	r3, [r7, #15]
    break;
 800874e:	bf00      	nop
  }
  return  speed;
 8008750:	7bfb      	ldrb	r3, [r7, #15]
}
 8008752:	4618      	mov	r0, r3
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b084      	sub	sp, #16
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008762:	2300      	movs	r3, #0
 8008764:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008766:	2300      	movs	r3, #0
 8008768:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008770:	4618      	mov	r0, r3
 8008772:	f7f9 fe06 	bl	8002382 <HAL_HCD_ResetPort>
 8008776:	4603      	mov	r3, r0
 8008778:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800877a:	7bfb      	ldrb	r3, [r7, #15]
 800877c:	4618      	mov	r0, r3
 800877e:	f000 f8ff 	bl	8008980 <USBH_Get_USB_Status>
 8008782:	4603      	mov	r3, r0
 8008784:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008786:	7bbb      	ldrb	r3, [r7, #14]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	460b      	mov	r3, r1
 800879a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80087a2:	78fa      	ldrb	r2, [r7, #3]
 80087a4:	4611      	mov	r1, r2
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7f9 fe0d 	bl	80023c6 <HAL_HCD_HC_GetXferCount>
 80087ac:	4603      	mov	r3, r0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3708      	adds	r7, #8
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80087b6:	b590      	push	{r4, r7, lr}
 80087b8:	b089      	sub	sp, #36	; 0x24
 80087ba:	af04      	add	r7, sp, #16
 80087bc:	6078      	str	r0, [r7, #4]
 80087be:	4608      	mov	r0, r1
 80087c0:	4611      	mov	r1, r2
 80087c2:	461a      	mov	r2, r3
 80087c4:	4603      	mov	r3, r0
 80087c6:	70fb      	strb	r3, [r7, #3]
 80087c8:	460b      	mov	r3, r1
 80087ca:	70bb      	strb	r3, [r7, #2]
 80087cc:	4613      	mov	r3, r2
 80087ce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087d0:	2300      	movs	r3, #0
 80087d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087d4:	2300      	movs	r3, #0
 80087d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80087de:	787c      	ldrb	r4, [r7, #1]
 80087e0:	78ba      	ldrb	r2, [r7, #2]
 80087e2:	78f9      	ldrb	r1, [r7, #3]
 80087e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087e6:	9302      	str	r3, [sp, #8]
 80087e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80087ec:	9301      	str	r3, [sp, #4]
 80087ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	4623      	mov	r3, r4
 80087f6:	f7f9 fa70 	bl	8001cda <HAL_HCD_HC_Init>
 80087fa:	4603      	mov	r3, r0
 80087fc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80087fe:	7bfb      	ldrb	r3, [r7, #15]
 8008800:	4618      	mov	r0, r3
 8008802:	f000 f8bd 	bl	8008980 <USBH_Get_USB_Status>
 8008806:	4603      	mov	r3, r0
 8008808:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800880a:	7bbb      	ldrb	r3, [r7, #14]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3714      	adds	r7, #20
 8008810:	46bd      	mov	sp, r7
 8008812:	bd90      	pop	{r4, r7, pc}

08008814 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	460b      	mov	r3, r1
 800881e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008820:	2300      	movs	r3, #0
 8008822:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008824:	2300      	movs	r3, #0
 8008826:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800882e:	78fa      	ldrb	r2, [r7, #3]
 8008830:	4611      	mov	r1, r2
 8008832:	4618      	mov	r0, r3
 8008834:	f7f9 fae0 	bl	8001df8 <HAL_HCD_HC_Halt>
 8008838:	4603      	mov	r3, r0
 800883a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800883c:	7bfb      	ldrb	r3, [r7, #15]
 800883e:	4618      	mov	r0, r3
 8008840:	f000 f89e 	bl	8008980 <USBH_Get_USB_Status>
 8008844:	4603      	mov	r3, r0
 8008846:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008848:	7bbb      	ldrb	r3, [r7, #14]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008852:	b590      	push	{r4, r7, lr}
 8008854:	b089      	sub	sp, #36	; 0x24
 8008856:	af04      	add	r7, sp, #16
 8008858:	6078      	str	r0, [r7, #4]
 800885a:	4608      	mov	r0, r1
 800885c:	4611      	mov	r1, r2
 800885e:	461a      	mov	r2, r3
 8008860:	4603      	mov	r3, r0
 8008862:	70fb      	strb	r3, [r7, #3]
 8008864:	460b      	mov	r3, r1
 8008866:	70bb      	strb	r3, [r7, #2]
 8008868:	4613      	mov	r3, r2
 800886a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800886c:	2300      	movs	r3, #0
 800886e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008870:	2300      	movs	r3, #0
 8008872:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800887a:	787c      	ldrb	r4, [r7, #1]
 800887c:	78ba      	ldrb	r2, [r7, #2]
 800887e:	78f9      	ldrb	r1, [r7, #3]
 8008880:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008884:	9303      	str	r3, [sp, #12]
 8008886:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008888:	9302      	str	r3, [sp, #8]
 800888a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888c:	9301      	str	r3, [sp, #4]
 800888e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008892:	9300      	str	r3, [sp, #0]
 8008894:	4623      	mov	r3, r4
 8008896:	f7f9 fad3 	bl	8001e40 <HAL_HCD_HC_SubmitRequest>
 800889a:	4603      	mov	r3, r0
 800889c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800889e:	7bfb      	ldrb	r3, [r7, #15]
 80088a0:	4618      	mov	r0, r3
 80088a2:	f000 f86d 	bl	8008980 <USBH_Get_USB_Status>
 80088a6:	4603      	mov	r3, r0
 80088a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3714      	adds	r7, #20
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd90      	pop	{r4, r7, pc}

080088b4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	460b      	mov	r3, r1
 80088be:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088c6:	78fa      	ldrb	r2, [r7, #3]
 80088c8:	4611      	mov	r1, r2
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7f9 fd67 	bl	800239e <HAL_HCD_HC_GetURBState>
 80088d0:	4603      	mov	r3, r0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b082      	sub	sp, #8
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	460b      	mov	r3, r1
 80088e4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d103      	bne.n	80088f8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80088f0:	78fb      	ldrb	r3, [r7, #3]
 80088f2:	4618      	mov	r0, r3
 80088f4:	f000 f870 	bl	80089d8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80088f8:	20c8      	movs	r0, #200	; 0xc8
 80088fa:	f7f8 fea1 	bl	8001640 <HAL_Delay>
  return USBH_OK;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008908:	b480      	push	{r7}
 800890a:	b085      	sub	sp, #20
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	460b      	mov	r3, r1
 8008912:	70fb      	strb	r3, [r7, #3]
 8008914:	4613      	mov	r3, r2
 8008916:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800891e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008920:	78fb      	ldrb	r3, [r7, #3]
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	212c      	movs	r1, #44	; 0x2c
 8008926:	fb01 f303 	mul.w	r3, r1, r3
 800892a:	4413      	add	r3, r2
 800892c:	333b      	adds	r3, #59	; 0x3b
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d009      	beq.n	8008948 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008934:	78fb      	ldrb	r3, [r7, #3]
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	212c      	movs	r1, #44	; 0x2c
 800893a:	fb01 f303 	mul.w	r3, r1, r3
 800893e:	4413      	add	r3, r2
 8008940:	3354      	adds	r3, #84	; 0x54
 8008942:	78ba      	ldrb	r2, [r7, #2]
 8008944:	701a      	strb	r2, [r3, #0]
 8008946:	e008      	b.n	800895a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008948:	78fb      	ldrb	r3, [r7, #3]
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	212c      	movs	r1, #44	; 0x2c
 800894e:	fb01 f303 	mul.w	r3, r1, r3
 8008952:	4413      	add	r3, r2
 8008954:	3355      	adds	r3, #85	; 0x55
 8008956:	78ba      	ldrb	r2, [r7, #2]
 8008958:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f7f8 fe65 	bl	8001640 <HAL_Delay>
}
 8008976:	bf00      	nop
 8008978:	3708      	adds	r7, #8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
	...

08008980 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008980:	b480      	push	{r7}
 8008982:	b085      	sub	sp, #20
 8008984:	af00      	add	r7, sp, #0
 8008986:	4603      	mov	r3, r0
 8008988:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800898a:	2300      	movs	r3, #0
 800898c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800898e:	79fb      	ldrb	r3, [r7, #7]
 8008990:	2b03      	cmp	r3, #3
 8008992:	d817      	bhi.n	80089c4 <USBH_Get_USB_Status+0x44>
 8008994:	a201      	add	r2, pc, #4	; (adr r2, 800899c <USBH_Get_USB_Status+0x1c>)
 8008996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899a:	bf00      	nop
 800899c:	080089ad 	.word	0x080089ad
 80089a0:	080089b3 	.word	0x080089b3
 80089a4:	080089b9 	.word	0x080089b9
 80089a8:	080089bf 	.word	0x080089bf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80089ac:	2300      	movs	r3, #0
 80089ae:	73fb      	strb	r3, [r7, #15]
    break;
 80089b0:	e00b      	b.n	80089ca <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80089b2:	2302      	movs	r3, #2
 80089b4:	73fb      	strb	r3, [r7, #15]
    break;
 80089b6:	e008      	b.n	80089ca <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80089b8:	2301      	movs	r3, #1
 80089ba:	73fb      	strb	r3, [r7, #15]
    break;
 80089bc:	e005      	b.n	80089ca <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80089be:	2302      	movs	r3, #2
 80089c0:	73fb      	strb	r3, [r7, #15]
    break;
 80089c2:	e002      	b.n	80089ca <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80089c4:	2302      	movs	r3, #2
 80089c6:	73fb      	strb	r3, [r7, #15]
    break;
 80089c8:	bf00      	nop
  }
  return usb_status;
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3714      	adds	r7, #20
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	4603      	mov	r3, r0
 80089e0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80089e2:	79fb      	ldrb	r3, [r7, #7]
 80089e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80089e6:	79fb      	ldrb	r3, [r7, #7]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d102      	bne.n	80089f2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80089ec:	2301      	movs	r3, #1
 80089ee:	73fb      	strb	r3, [r7, #15]
 80089f0:	e001      	b.n	80089f6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80089f2:	2300      	movs	r3, #0
 80089f4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80089f6:	7bfb      	ldrb	r3, [r7, #15]
 80089f8:	461a      	mov	r2, r3
 80089fa:	2101      	movs	r1, #1
 80089fc:	4803      	ldr	r0, [pc, #12]	; (8008a0c <MX_DriverVbusFS+0x34>)
 80089fe:	f7f9 f8f1 	bl	8001be4 <HAL_GPIO_WritePin>
}
 8008a02:	bf00      	nop
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	40020800 	.word	0x40020800

08008a10 <__errno>:
 8008a10:	4b01      	ldr	r3, [pc, #4]	; (8008a18 <__errno+0x8>)
 8008a12:	6818      	ldr	r0, [r3, #0]
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	2000002c 	.word	0x2000002c

08008a1c <__libc_init_array>:
 8008a1c:	b570      	push	{r4, r5, r6, lr}
 8008a1e:	4d0d      	ldr	r5, [pc, #52]	; (8008a54 <__libc_init_array+0x38>)
 8008a20:	4c0d      	ldr	r4, [pc, #52]	; (8008a58 <__libc_init_array+0x3c>)
 8008a22:	1b64      	subs	r4, r4, r5
 8008a24:	10a4      	asrs	r4, r4, #2
 8008a26:	2600      	movs	r6, #0
 8008a28:	42a6      	cmp	r6, r4
 8008a2a:	d109      	bne.n	8008a40 <__libc_init_array+0x24>
 8008a2c:	4d0b      	ldr	r5, [pc, #44]	; (8008a5c <__libc_init_array+0x40>)
 8008a2e:	4c0c      	ldr	r4, [pc, #48]	; (8008a60 <__libc_init_array+0x44>)
 8008a30:	f000 fc76 	bl	8009320 <_init>
 8008a34:	1b64      	subs	r4, r4, r5
 8008a36:	10a4      	asrs	r4, r4, #2
 8008a38:	2600      	movs	r6, #0
 8008a3a:	42a6      	cmp	r6, r4
 8008a3c:	d105      	bne.n	8008a4a <__libc_init_array+0x2e>
 8008a3e:	bd70      	pop	{r4, r5, r6, pc}
 8008a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a44:	4798      	blx	r3
 8008a46:	3601      	adds	r6, #1
 8008a48:	e7ee      	b.n	8008a28 <__libc_init_array+0xc>
 8008a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a4e:	4798      	blx	r3
 8008a50:	3601      	adds	r6, #1
 8008a52:	e7f2      	b.n	8008a3a <__libc_init_array+0x1e>
 8008a54:	080094f0 	.word	0x080094f0
 8008a58:	080094f0 	.word	0x080094f0
 8008a5c:	080094f0 	.word	0x080094f0
 8008a60:	080094f4 	.word	0x080094f4

08008a64 <malloc>:
 8008a64:	4b02      	ldr	r3, [pc, #8]	; (8008a70 <malloc+0xc>)
 8008a66:	4601      	mov	r1, r0
 8008a68:	6818      	ldr	r0, [r3, #0]
 8008a6a:	f000 b863 	b.w	8008b34 <_malloc_r>
 8008a6e:	bf00      	nop
 8008a70:	2000002c 	.word	0x2000002c

08008a74 <free>:
 8008a74:	4b02      	ldr	r3, [pc, #8]	; (8008a80 <free+0xc>)
 8008a76:	4601      	mov	r1, r0
 8008a78:	6818      	ldr	r0, [r3, #0]
 8008a7a:	f000 b80b 	b.w	8008a94 <_free_r>
 8008a7e:	bf00      	nop
 8008a80:	2000002c 	.word	0x2000002c

08008a84 <memset>:
 8008a84:	4402      	add	r2, r0
 8008a86:	4603      	mov	r3, r0
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d100      	bne.n	8008a8e <memset+0xa>
 8008a8c:	4770      	bx	lr
 8008a8e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a92:	e7f9      	b.n	8008a88 <memset+0x4>

08008a94 <_free_r>:
 8008a94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a96:	2900      	cmp	r1, #0
 8008a98:	d048      	beq.n	8008b2c <_free_r+0x98>
 8008a9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a9e:	9001      	str	r0, [sp, #4]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f1a1 0404 	sub.w	r4, r1, #4
 8008aa6:	bfb8      	it	lt
 8008aa8:	18e4      	addlt	r4, r4, r3
 8008aaa:	f000 f8e5 	bl	8008c78 <__malloc_lock>
 8008aae:	4a20      	ldr	r2, [pc, #128]	; (8008b30 <_free_r+0x9c>)
 8008ab0:	9801      	ldr	r0, [sp, #4]
 8008ab2:	6813      	ldr	r3, [r2, #0]
 8008ab4:	4615      	mov	r5, r2
 8008ab6:	b933      	cbnz	r3, 8008ac6 <_free_r+0x32>
 8008ab8:	6063      	str	r3, [r4, #4]
 8008aba:	6014      	str	r4, [r2, #0]
 8008abc:	b003      	add	sp, #12
 8008abe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ac2:	f000 b8df 	b.w	8008c84 <__malloc_unlock>
 8008ac6:	42a3      	cmp	r3, r4
 8008ac8:	d90b      	bls.n	8008ae2 <_free_r+0x4e>
 8008aca:	6821      	ldr	r1, [r4, #0]
 8008acc:	1862      	adds	r2, r4, r1
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	bf04      	itt	eq
 8008ad2:	681a      	ldreq	r2, [r3, #0]
 8008ad4:	685b      	ldreq	r3, [r3, #4]
 8008ad6:	6063      	str	r3, [r4, #4]
 8008ad8:	bf04      	itt	eq
 8008ada:	1852      	addeq	r2, r2, r1
 8008adc:	6022      	streq	r2, [r4, #0]
 8008ade:	602c      	str	r4, [r5, #0]
 8008ae0:	e7ec      	b.n	8008abc <_free_r+0x28>
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	b10b      	cbz	r3, 8008aec <_free_r+0x58>
 8008ae8:	42a3      	cmp	r3, r4
 8008aea:	d9fa      	bls.n	8008ae2 <_free_r+0x4e>
 8008aec:	6811      	ldr	r1, [r2, #0]
 8008aee:	1855      	adds	r5, r2, r1
 8008af0:	42a5      	cmp	r5, r4
 8008af2:	d10b      	bne.n	8008b0c <_free_r+0x78>
 8008af4:	6824      	ldr	r4, [r4, #0]
 8008af6:	4421      	add	r1, r4
 8008af8:	1854      	adds	r4, r2, r1
 8008afa:	42a3      	cmp	r3, r4
 8008afc:	6011      	str	r1, [r2, #0]
 8008afe:	d1dd      	bne.n	8008abc <_free_r+0x28>
 8008b00:	681c      	ldr	r4, [r3, #0]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	6053      	str	r3, [r2, #4]
 8008b06:	4421      	add	r1, r4
 8008b08:	6011      	str	r1, [r2, #0]
 8008b0a:	e7d7      	b.n	8008abc <_free_r+0x28>
 8008b0c:	d902      	bls.n	8008b14 <_free_r+0x80>
 8008b0e:	230c      	movs	r3, #12
 8008b10:	6003      	str	r3, [r0, #0]
 8008b12:	e7d3      	b.n	8008abc <_free_r+0x28>
 8008b14:	6825      	ldr	r5, [r4, #0]
 8008b16:	1961      	adds	r1, r4, r5
 8008b18:	428b      	cmp	r3, r1
 8008b1a:	bf04      	itt	eq
 8008b1c:	6819      	ldreq	r1, [r3, #0]
 8008b1e:	685b      	ldreq	r3, [r3, #4]
 8008b20:	6063      	str	r3, [r4, #4]
 8008b22:	bf04      	itt	eq
 8008b24:	1949      	addeq	r1, r1, r5
 8008b26:	6021      	streq	r1, [r4, #0]
 8008b28:	6054      	str	r4, [r2, #4]
 8008b2a:	e7c7      	b.n	8008abc <_free_r+0x28>
 8008b2c:	b003      	add	sp, #12
 8008b2e:	bd30      	pop	{r4, r5, pc}
 8008b30:	200000b4 	.word	0x200000b4

08008b34 <_malloc_r>:
 8008b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b36:	1ccd      	adds	r5, r1, #3
 8008b38:	f025 0503 	bic.w	r5, r5, #3
 8008b3c:	3508      	adds	r5, #8
 8008b3e:	2d0c      	cmp	r5, #12
 8008b40:	bf38      	it	cc
 8008b42:	250c      	movcc	r5, #12
 8008b44:	2d00      	cmp	r5, #0
 8008b46:	4606      	mov	r6, r0
 8008b48:	db01      	blt.n	8008b4e <_malloc_r+0x1a>
 8008b4a:	42a9      	cmp	r1, r5
 8008b4c:	d903      	bls.n	8008b56 <_malloc_r+0x22>
 8008b4e:	230c      	movs	r3, #12
 8008b50:	6033      	str	r3, [r6, #0]
 8008b52:	2000      	movs	r0, #0
 8008b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b56:	f000 f88f 	bl	8008c78 <__malloc_lock>
 8008b5a:	4921      	ldr	r1, [pc, #132]	; (8008be0 <_malloc_r+0xac>)
 8008b5c:	680a      	ldr	r2, [r1, #0]
 8008b5e:	4614      	mov	r4, r2
 8008b60:	b99c      	cbnz	r4, 8008b8a <_malloc_r+0x56>
 8008b62:	4f20      	ldr	r7, [pc, #128]	; (8008be4 <_malloc_r+0xb0>)
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	b923      	cbnz	r3, 8008b72 <_malloc_r+0x3e>
 8008b68:	4621      	mov	r1, r4
 8008b6a:	4630      	mov	r0, r6
 8008b6c:	f000 f83c 	bl	8008be8 <_sbrk_r>
 8008b70:	6038      	str	r0, [r7, #0]
 8008b72:	4629      	mov	r1, r5
 8008b74:	4630      	mov	r0, r6
 8008b76:	f000 f837 	bl	8008be8 <_sbrk_r>
 8008b7a:	1c43      	adds	r3, r0, #1
 8008b7c:	d123      	bne.n	8008bc6 <_malloc_r+0x92>
 8008b7e:	230c      	movs	r3, #12
 8008b80:	6033      	str	r3, [r6, #0]
 8008b82:	4630      	mov	r0, r6
 8008b84:	f000 f87e 	bl	8008c84 <__malloc_unlock>
 8008b88:	e7e3      	b.n	8008b52 <_malloc_r+0x1e>
 8008b8a:	6823      	ldr	r3, [r4, #0]
 8008b8c:	1b5b      	subs	r3, r3, r5
 8008b8e:	d417      	bmi.n	8008bc0 <_malloc_r+0x8c>
 8008b90:	2b0b      	cmp	r3, #11
 8008b92:	d903      	bls.n	8008b9c <_malloc_r+0x68>
 8008b94:	6023      	str	r3, [r4, #0]
 8008b96:	441c      	add	r4, r3
 8008b98:	6025      	str	r5, [r4, #0]
 8008b9a:	e004      	b.n	8008ba6 <_malloc_r+0x72>
 8008b9c:	6863      	ldr	r3, [r4, #4]
 8008b9e:	42a2      	cmp	r2, r4
 8008ba0:	bf0c      	ite	eq
 8008ba2:	600b      	streq	r3, [r1, #0]
 8008ba4:	6053      	strne	r3, [r2, #4]
 8008ba6:	4630      	mov	r0, r6
 8008ba8:	f000 f86c 	bl	8008c84 <__malloc_unlock>
 8008bac:	f104 000b 	add.w	r0, r4, #11
 8008bb0:	1d23      	adds	r3, r4, #4
 8008bb2:	f020 0007 	bic.w	r0, r0, #7
 8008bb6:	1ac2      	subs	r2, r0, r3
 8008bb8:	d0cc      	beq.n	8008b54 <_malloc_r+0x20>
 8008bba:	1a1b      	subs	r3, r3, r0
 8008bbc:	50a3      	str	r3, [r4, r2]
 8008bbe:	e7c9      	b.n	8008b54 <_malloc_r+0x20>
 8008bc0:	4622      	mov	r2, r4
 8008bc2:	6864      	ldr	r4, [r4, #4]
 8008bc4:	e7cc      	b.n	8008b60 <_malloc_r+0x2c>
 8008bc6:	1cc4      	adds	r4, r0, #3
 8008bc8:	f024 0403 	bic.w	r4, r4, #3
 8008bcc:	42a0      	cmp	r0, r4
 8008bce:	d0e3      	beq.n	8008b98 <_malloc_r+0x64>
 8008bd0:	1a21      	subs	r1, r4, r0
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	f000 f808 	bl	8008be8 <_sbrk_r>
 8008bd8:	3001      	adds	r0, #1
 8008bda:	d1dd      	bne.n	8008b98 <_malloc_r+0x64>
 8008bdc:	e7cf      	b.n	8008b7e <_malloc_r+0x4a>
 8008bde:	bf00      	nop
 8008be0:	200000b4 	.word	0x200000b4
 8008be4:	200000b8 	.word	0x200000b8

08008be8 <_sbrk_r>:
 8008be8:	b538      	push	{r3, r4, r5, lr}
 8008bea:	4d06      	ldr	r5, [pc, #24]	; (8008c04 <_sbrk_r+0x1c>)
 8008bec:	2300      	movs	r3, #0
 8008bee:	4604      	mov	r4, r0
 8008bf0:	4608      	mov	r0, r1
 8008bf2:	602b      	str	r3, [r5, #0]
 8008bf4:	f7f8 f958 	bl	8000ea8 <_sbrk>
 8008bf8:	1c43      	adds	r3, r0, #1
 8008bfa:	d102      	bne.n	8008c02 <_sbrk_r+0x1a>
 8008bfc:	682b      	ldr	r3, [r5, #0]
 8008bfe:	b103      	cbz	r3, 8008c02 <_sbrk_r+0x1a>
 8008c00:	6023      	str	r3, [r4, #0]
 8008c02:	bd38      	pop	{r3, r4, r5, pc}
 8008c04:	20000918 	.word	0x20000918

08008c08 <siprintf>:
 8008c08:	b40e      	push	{r1, r2, r3}
 8008c0a:	b500      	push	{lr}
 8008c0c:	b09c      	sub	sp, #112	; 0x70
 8008c0e:	ab1d      	add	r3, sp, #116	; 0x74
 8008c10:	9002      	str	r0, [sp, #8]
 8008c12:	9006      	str	r0, [sp, #24]
 8008c14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c18:	4809      	ldr	r0, [pc, #36]	; (8008c40 <siprintf+0x38>)
 8008c1a:	9107      	str	r1, [sp, #28]
 8008c1c:	9104      	str	r1, [sp, #16]
 8008c1e:	4909      	ldr	r1, [pc, #36]	; (8008c44 <siprintf+0x3c>)
 8008c20:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c24:	9105      	str	r1, [sp, #20]
 8008c26:	6800      	ldr	r0, [r0, #0]
 8008c28:	9301      	str	r3, [sp, #4]
 8008c2a:	a902      	add	r1, sp, #8
 8008c2c:	f000 f88c 	bl	8008d48 <_svfiprintf_r>
 8008c30:	9b02      	ldr	r3, [sp, #8]
 8008c32:	2200      	movs	r2, #0
 8008c34:	701a      	strb	r2, [r3, #0]
 8008c36:	b01c      	add	sp, #112	; 0x70
 8008c38:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c3c:	b003      	add	sp, #12
 8008c3e:	4770      	bx	lr
 8008c40:	2000002c 	.word	0x2000002c
 8008c44:	ffff0208 	.word	0xffff0208

08008c48 <strstr>:
 8008c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c4a:	780c      	ldrb	r4, [r1, #0]
 8008c4c:	b164      	cbz	r4, 8008c68 <strstr+0x20>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	781a      	ldrb	r2, [r3, #0]
 8008c52:	4618      	mov	r0, r3
 8008c54:	1c5e      	adds	r6, r3, #1
 8008c56:	b90a      	cbnz	r2, 8008c5c <strstr+0x14>
 8008c58:	4610      	mov	r0, r2
 8008c5a:	e005      	b.n	8008c68 <strstr+0x20>
 8008c5c:	4294      	cmp	r4, r2
 8008c5e:	d108      	bne.n	8008c72 <strstr+0x2a>
 8008c60:	460d      	mov	r5, r1
 8008c62:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8008c66:	b902      	cbnz	r2, 8008c6a <strstr+0x22>
 8008c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c6a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8008c6e:	4297      	cmp	r7, r2
 8008c70:	d0f7      	beq.n	8008c62 <strstr+0x1a>
 8008c72:	4633      	mov	r3, r6
 8008c74:	e7ec      	b.n	8008c50 <strstr+0x8>
	...

08008c78 <__malloc_lock>:
 8008c78:	4801      	ldr	r0, [pc, #4]	; (8008c80 <__malloc_lock+0x8>)
 8008c7a:	f000 baf9 	b.w	8009270 <__retarget_lock_acquire_recursive>
 8008c7e:	bf00      	nop
 8008c80:	20000920 	.word	0x20000920

08008c84 <__malloc_unlock>:
 8008c84:	4801      	ldr	r0, [pc, #4]	; (8008c8c <__malloc_unlock+0x8>)
 8008c86:	f000 baf4 	b.w	8009272 <__retarget_lock_release_recursive>
 8008c8a:	bf00      	nop
 8008c8c:	20000920 	.word	0x20000920

08008c90 <__ssputs_r>:
 8008c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c94:	688e      	ldr	r6, [r1, #8]
 8008c96:	429e      	cmp	r6, r3
 8008c98:	4682      	mov	sl, r0
 8008c9a:	460c      	mov	r4, r1
 8008c9c:	4690      	mov	r8, r2
 8008c9e:	461f      	mov	r7, r3
 8008ca0:	d838      	bhi.n	8008d14 <__ssputs_r+0x84>
 8008ca2:	898a      	ldrh	r2, [r1, #12]
 8008ca4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ca8:	d032      	beq.n	8008d10 <__ssputs_r+0x80>
 8008caa:	6825      	ldr	r5, [r4, #0]
 8008cac:	6909      	ldr	r1, [r1, #16]
 8008cae:	eba5 0901 	sub.w	r9, r5, r1
 8008cb2:	6965      	ldr	r5, [r4, #20]
 8008cb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	444b      	add	r3, r9
 8008cc0:	106d      	asrs	r5, r5, #1
 8008cc2:	429d      	cmp	r5, r3
 8008cc4:	bf38      	it	cc
 8008cc6:	461d      	movcc	r5, r3
 8008cc8:	0553      	lsls	r3, r2, #21
 8008cca:	d531      	bpl.n	8008d30 <__ssputs_r+0xa0>
 8008ccc:	4629      	mov	r1, r5
 8008cce:	f7ff ff31 	bl	8008b34 <_malloc_r>
 8008cd2:	4606      	mov	r6, r0
 8008cd4:	b950      	cbnz	r0, 8008cec <__ssputs_r+0x5c>
 8008cd6:	230c      	movs	r3, #12
 8008cd8:	f8ca 3000 	str.w	r3, [sl]
 8008cdc:	89a3      	ldrh	r3, [r4, #12]
 8008cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ce2:	81a3      	strh	r3, [r4, #12]
 8008ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cec:	6921      	ldr	r1, [r4, #16]
 8008cee:	464a      	mov	r2, r9
 8008cf0:	f000 fac0 	bl	8009274 <memcpy>
 8008cf4:	89a3      	ldrh	r3, [r4, #12]
 8008cf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cfe:	81a3      	strh	r3, [r4, #12]
 8008d00:	6126      	str	r6, [r4, #16]
 8008d02:	6165      	str	r5, [r4, #20]
 8008d04:	444e      	add	r6, r9
 8008d06:	eba5 0509 	sub.w	r5, r5, r9
 8008d0a:	6026      	str	r6, [r4, #0]
 8008d0c:	60a5      	str	r5, [r4, #8]
 8008d0e:	463e      	mov	r6, r7
 8008d10:	42be      	cmp	r6, r7
 8008d12:	d900      	bls.n	8008d16 <__ssputs_r+0x86>
 8008d14:	463e      	mov	r6, r7
 8008d16:	4632      	mov	r2, r6
 8008d18:	6820      	ldr	r0, [r4, #0]
 8008d1a:	4641      	mov	r1, r8
 8008d1c:	f000 fab8 	bl	8009290 <memmove>
 8008d20:	68a3      	ldr	r3, [r4, #8]
 8008d22:	6822      	ldr	r2, [r4, #0]
 8008d24:	1b9b      	subs	r3, r3, r6
 8008d26:	4432      	add	r2, r6
 8008d28:	60a3      	str	r3, [r4, #8]
 8008d2a:	6022      	str	r2, [r4, #0]
 8008d2c:	2000      	movs	r0, #0
 8008d2e:	e7db      	b.n	8008ce8 <__ssputs_r+0x58>
 8008d30:	462a      	mov	r2, r5
 8008d32:	f000 fac7 	bl	80092c4 <_realloc_r>
 8008d36:	4606      	mov	r6, r0
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	d1e1      	bne.n	8008d00 <__ssputs_r+0x70>
 8008d3c:	6921      	ldr	r1, [r4, #16]
 8008d3e:	4650      	mov	r0, sl
 8008d40:	f7ff fea8 	bl	8008a94 <_free_r>
 8008d44:	e7c7      	b.n	8008cd6 <__ssputs_r+0x46>
	...

08008d48 <_svfiprintf_r>:
 8008d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d4c:	4698      	mov	r8, r3
 8008d4e:	898b      	ldrh	r3, [r1, #12]
 8008d50:	061b      	lsls	r3, r3, #24
 8008d52:	b09d      	sub	sp, #116	; 0x74
 8008d54:	4607      	mov	r7, r0
 8008d56:	460d      	mov	r5, r1
 8008d58:	4614      	mov	r4, r2
 8008d5a:	d50e      	bpl.n	8008d7a <_svfiprintf_r+0x32>
 8008d5c:	690b      	ldr	r3, [r1, #16]
 8008d5e:	b963      	cbnz	r3, 8008d7a <_svfiprintf_r+0x32>
 8008d60:	2140      	movs	r1, #64	; 0x40
 8008d62:	f7ff fee7 	bl	8008b34 <_malloc_r>
 8008d66:	6028      	str	r0, [r5, #0]
 8008d68:	6128      	str	r0, [r5, #16]
 8008d6a:	b920      	cbnz	r0, 8008d76 <_svfiprintf_r+0x2e>
 8008d6c:	230c      	movs	r3, #12
 8008d6e:	603b      	str	r3, [r7, #0]
 8008d70:	f04f 30ff 	mov.w	r0, #4294967295
 8008d74:	e0d1      	b.n	8008f1a <_svfiprintf_r+0x1d2>
 8008d76:	2340      	movs	r3, #64	; 0x40
 8008d78:	616b      	str	r3, [r5, #20]
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d7e:	2320      	movs	r3, #32
 8008d80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d84:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d88:	2330      	movs	r3, #48	; 0x30
 8008d8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008f34 <_svfiprintf_r+0x1ec>
 8008d8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d92:	f04f 0901 	mov.w	r9, #1
 8008d96:	4623      	mov	r3, r4
 8008d98:	469a      	mov	sl, r3
 8008d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d9e:	b10a      	cbz	r2, 8008da4 <_svfiprintf_r+0x5c>
 8008da0:	2a25      	cmp	r2, #37	; 0x25
 8008da2:	d1f9      	bne.n	8008d98 <_svfiprintf_r+0x50>
 8008da4:	ebba 0b04 	subs.w	fp, sl, r4
 8008da8:	d00b      	beq.n	8008dc2 <_svfiprintf_r+0x7a>
 8008daa:	465b      	mov	r3, fp
 8008dac:	4622      	mov	r2, r4
 8008dae:	4629      	mov	r1, r5
 8008db0:	4638      	mov	r0, r7
 8008db2:	f7ff ff6d 	bl	8008c90 <__ssputs_r>
 8008db6:	3001      	adds	r0, #1
 8008db8:	f000 80aa 	beq.w	8008f10 <_svfiprintf_r+0x1c8>
 8008dbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dbe:	445a      	add	r2, fp
 8008dc0:	9209      	str	r2, [sp, #36]	; 0x24
 8008dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	f000 80a2 	beq.w	8008f10 <_svfiprintf_r+0x1c8>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	f04f 32ff 	mov.w	r2, #4294967295
 8008dd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dd6:	f10a 0a01 	add.w	sl, sl, #1
 8008dda:	9304      	str	r3, [sp, #16]
 8008ddc:	9307      	str	r3, [sp, #28]
 8008dde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008de2:	931a      	str	r3, [sp, #104]	; 0x68
 8008de4:	4654      	mov	r4, sl
 8008de6:	2205      	movs	r2, #5
 8008de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dec:	4851      	ldr	r0, [pc, #324]	; (8008f34 <_svfiprintf_r+0x1ec>)
 8008dee:	f7f7 f9f7 	bl	80001e0 <memchr>
 8008df2:	9a04      	ldr	r2, [sp, #16]
 8008df4:	b9d8      	cbnz	r0, 8008e2e <_svfiprintf_r+0xe6>
 8008df6:	06d0      	lsls	r0, r2, #27
 8008df8:	bf44      	itt	mi
 8008dfa:	2320      	movmi	r3, #32
 8008dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e00:	0711      	lsls	r1, r2, #28
 8008e02:	bf44      	itt	mi
 8008e04:	232b      	movmi	r3, #43	; 0x2b
 8008e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8008e0e:	2b2a      	cmp	r3, #42	; 0x2a
 8008e10:	d015      	beq.n	8008e3e <_svfiprintf_r+0xf6>
 8008e12:	9a07      	ldr	r2, [sp, #28]
 8008e14:	4654      	mov	r4, sl
 8008e16:	2000      	movs	r0, #0
 8008e18:	f04f 0c0a 	mov.w	ip, #10
 8008e1c:	4621      	mov	r1, r4
 8008e1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e22:	3b30      	subs	r3, #48	; 0x30
 8008e24:	2b09      	cmp	r3, #9
 8008e26:	d94e      	bls.n	8008ec6 <_svfiprintf_r+0x17e>
 8008e28:	b1b0      	cbz	r0, 8008e58 <_svfiprintf_r+0x110>
 8008e2a:	9207      	str	r2, [sp, #28]
 8008e2c:	e014      	b.n	8008e58 <_svfiprintf_r+0x110>
 8008e2e:	eba0 0308 	sub.w	r3, r0, r8
 8008e32:	fa09 f303 	lsl.w	r3, r9, r3
 8008e36:	4313      	orrs	r3, r2
 8008e38:	9304      	str	r3, [sp, #16]
 8008e3a:	46a2      	mov	sl, r4
 8008e3c:	e7d2      	b.n	8008de4 <_svfiprintf_r+0x9c>
 8008e3e:	9b03      	ldr	r3, [sp, #12]
 8008e40:	1d19      	adds	r1, r3, #4
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	9103      	str	r1, [sp, #12]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	bfbb      	ittet	lt
 8008e4a:	425b      	neglt	r3, r3
 8008e4c:	f042 0202 	orrlt.w	r2, r2, #2
 8008e50:	9307      	strge	r3, [sp, #28]
 8008e52:	9307      	strlt	r3, [sp, #28]
 8008e54:	bfb8      	it	lt
 8008e56:	9204      	strlt	r2, [sp, #16]
 8008e58:	7823      	ldrb	r3, [r4, #0]
 8008e5a:	2b2e      	cmp	r3, #46	; 0x2e
 8008e5c:	d10c      	bne.n	8008e78 <_svfiprintf_r+0x130>
 8008e5e:	7863      	ldrb	r3, [r4, #1]
 8008e60:	2b2a      	cmp	r3, #42	; 0x2a
 8008e62:	d135      	bne.n	8008ed0 <_svfiprintf_r+0x188>
 8008e64:	9b03      	ldr	r3, [sp, #12]
 8008e66:	1d1a      	adds	r2, r3, #4
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	9203      	str	r2, [sp, #12]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	bfb8      	it	lt
 8008e70:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e74:	3402      	adds	r4, #2
 8008e76:	9305      	str	r3, [sp, #20]
 8008e78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008f44 <_svfiprintf_r+0x1fc>
 8008e7c:	7821      	ldrb	r1, [r4, #0]
 8008e7e:	2203      	movs	r2, #3
 8008e80:	4650      	mov	r0, sl
 8008e82:	f7f7 f9ad 	bl	80001e0 <memchr>
 8008e86:	b140      	cbz	r0, 8008e9a <_svfiprintf_r+0x152>
 8008e88:	2340      	movs	r3, #64	; 0x40
 8008e8a:	eba0 000a 	sub.w	r0, r0, sl
 8008e8e:	fa03 f000 	lsl.w	r0, r3, r0
 8008e92:	9b04      	ldr	r3, [sp, #16]
 8008e94:	4303      	orrs	r3, r0
 8008e96:	3401      	adds	r4, #1
 8008e98:	9304      	str	r3, [sp, #16]
 8008e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e9e:	4826      	ldr	r0, [pc, #152]	; (8008f38 <_svfiprintf_r+0x1f0>)
 8008ea0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ea4:	2206      	movs	r2, #6
 8008ea6:	f7f7 f99b 	bl	80001e0 <memchr>
 8008eaa:	2800      	cmp	r0, #0
 8008eac:	d038      	beq.n	8008f20 <_svfiprintf_r+0x1d8>
 8008eae:	4b23      	ldr	r3, [pc, #140]	; (8008f3c <_svfiprintf_r+0x1f4>)
 8008eb0:	bb1b      	cbnz	r3, 8008efa <_svfiprintf_r+0x1b2>
 8008eb2:	9b03      	ldr	r3, [sp, #12]
 8008eb4:	3307      	adds	r3, #7
 8008eb6:	f023 0307 	bic.w	r3, r3, #7
 8008eba:	3308      	adds	r3, #8
 8008ebc:	9303      	str	r3, [sp, #12]
 8008ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ec0:	4433      	add	r3, r6
 8008ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ec4:	e767      	b.n	8008d96 <_svfiprintf_r+0x4e>
 8008ec6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008eca:	460c      	mov	r4, r1
 8008ecc:	2001      	movs	r0, #1
 8008ece:	e7a5      	b.n	8008e1c <_svfiprintf_r+0xd4>
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	3401      	adds	r4, #1
 8008ed4:	9305      	str	r3, [sp, #20]
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	f04f 0c0a 	mov.w	ip, #10
 8008edc:	4620      	mov	r0, r4
 8008ede:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ee2:	3a30      	subs	r2, #48	; 0x30
 8008ee4:	2a09      	cmp	r2, #9
 8008ee6:	d903      	bls.n	8008ef0 <_svfiprintf_r+0x1a8>
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d0c5      	beq.n	8008e78 <_svfiprintf_r+0x130>
 8008eec:	9105      	str	r1, [sp, #20]
 8008eee:	e7c3      	b.n	8008e78 <_svfiprintf_r+0x130>
 8008ef0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ef4:	4604      	mov	r4, r0
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e7f0      	b.n	8008edc <_svfiprintf_r+0x194>
 8008efa:	ab03      	add	r3, sp, #12
 8008efc:	9300      	str	r3, [sp, #0]
 8008efe:	462a      	mov	r2, r5
 8008f00:	4b0f      	ldr	r3, [pc, #60]	; (8008f40 <_svfiprintf_r+0x1f8>)
 8008f02:	a904      	add	r1, sp, #16
 8008f04:	4638      	mov	r0, r7
 8008f06:	f3af 8000 	nop.w
 8008f0a:	1c42      	adds	r2, r0, #1
 8008f0c:	4606      	mov	r6, r0
 8008f0e:	d1d6      	bne.n	8008ebe <_svfiprintf_r+0x176>
 8008f10:	89ab      	ldrh	r3, [r5, #12]
 8008f12:	065b      	lsls	r3, r3, #25
 8008f14:	f53f af2c 	bmi.w	8008d70 <_svfiprintf_r+0x28>
 8008f18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f1a:	b01d      	add	sp, #116	; 0x74
 8008f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f20:	ab03      	add	r3, sp, #12
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	462a      	mov	r2, r5
 8008f26:	4b06      	ldr	r3, [pc, #24]	; (8008f40 <_svfiprintf_r+0x1f8>)
 8008f28:	a904      	add	r1, sp, #16
 8008f2a:	4638      	mov	r0, r7
 8008f2c:	f000 f87a 	bl	8009024 <_printf_i>
 8008f30:	e7eb      	b.n	8008f0a <_svfiprintf_r+0x1c2>
 8008f32:	bf00      	nop
 8008f34:	080094b4 	.word	0x080094b4
 8008f38:	080094be 	.word	0x080094be
 8008f3c:	00000000 	.word	0x00000000
 8008f40:	08008c91 	.word	0x08008c91
 8008f44:	080094ba 	.word	0x080094ba

08008f48 <_printf_common>:
 8008f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f4c:	4616      	mov	r6, r2
 8008f4e:	4699      	mov	r9, r3
 8008f50:	688a      	ldr	r2, [r1, #8]
 8008f52:	690b      	ldr	r3, [r1, #16]
 8008f54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	bfb8      	it	lt
 8008f5c:	4613      	movlt	r3, r2
 8008f5e:	6033      	str	r3, [r6, #0]
 8008f60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f64:	4607      	mov	r7, r0
 8008f66:	460c      	mov	r4, r1
 8008f68:	b10a      	cbz	r2, 8008f6e <_printf_common+0x26>
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	6033      	str	r3, [r6, #0]
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	0699      	lsls	r1, r3, #26
 8008f72:	bf42      	ittt	mi
 8008f74:	6833      	ldrmi	r3, [r6, #0]
 8008f76:	3302      	addmi	r3, #2
 8008f78:	6033      	strmi	r3, [r6, #0]
 8008f7a:	6825      	ldr	r5, [r4, #0]
 8008f7c:	f015 0506 	ands.w	r5, r5, #6
 8008f80:	d106      	bne.n	8008f90 <_printf_common+0x48>
 8008f82:	f104 0a19 	add.w	sl, r4, #25
 8008f86:	68e3      	ldr	r3, [r4, #12]
 8008f88:	6832      	ldr	r2, [r6, #0]
 8008f8a:	1a9b      	subs	r3, r3, r2
 8008f8c:	42ab      	cmp	r3, r5
 8008f8e:	dc26      	bgt.n	8008fde <_printf_common+0x96>
 8008f90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f94:	1e13      	subs	r3, r2, #0
 8008f96:	6822      	ldr	r2, [r4, #0]
 8008f98:	bf18      	it	ne
 8008f9a:	2301      	movne	r3, #1
 8008f9c:	0692      	lsls	r2, r2, #26
 8008f9e:	d42b      	bmi.n	8008ff8 <_printf_common+0xb0>
 8008fa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008fa4:	4649      	mov	r1, r9
 8008fa6:	4638      	mov	r0, r7
 8008fa8:	47c0      	blx	r8
 8008faa:	3001      	adds	r0, #1
 8008fac:	d01e      	beq.n	8008fec <_printf_common+0xa4>
 8008fae:	6823      	ldr	r3, [r4, #0]
 8008fb0:	68e5      	ldr	r5, [r4, #12]
 8008fb2:	6832      	ldr	r2, [r6, #0]
 8008fb4:	f003 0306 	and.w	r3, r3, #6
 8008fb8:	2b04      	cmp	r3, #4
 8008fba:	bf08      	it	eq
 8008fbc:	1aad      	subeq	r5, r5, r2
 8008fbe:	68a3      	ldr	r3, [r4, #8]
 8008fc0:	6922      	ldr	r2, [r4, #16]
 8008fc2:	bf0c      	ite	eq
 8008fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fc8:	2500      	movne	r5, #0
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	bfc4      	itt	gt
 8008fce:	1a9b      	subgt	r3, r3, r2
 8008fd0:	18ed      	addgt	r5, r5, r3
 8008fd2:	2600      	movs	r6, #0
 8008fd4:	341a      	adds	r4, #26
 8008fd6:	42b5      	cmp	r5, r6
 8008fd8:	d11a      	bne.n	8009010 <_printf_common+0xc8>
 8008fda:	2000      	movs	r0, #0
 8008fdc:	e008      	b.n	8008ff0 <_printf_common+0xa8>
 8008fde:	2301      	movs	r3, #1
 8008fe0:	4652      	mov	r2, sl
 8008fe2:	4649      	mov	r1, r9
 8008fe4:	4638      	mov	r0, r7
 8008fe6:	47c0      	blx	r8
 8008fe8:	3001      	adds	r0, #1
 8008fea:	d103      	bne.n	8008ff4 <_printf_common+0xac>
 8008fec:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ff4:	3501      	adds	r5, #1
 8008ff6:	e7c6      	b.n	8008f86 <_printf_common+0x3e>
 8008ff8:	18e1      	adds	r1, r4, r3
 8008ffa:	1c5a      	adds	r2, r3, #1
 8008ffc:	2030      	movs	r0, #48	; 0x30
 8008ffe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009002:	4422      	add	r2, r4
 8009004:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009008:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800900c:	3302      	adds	r3, #2
 800900e:	e7c7      	b.n	8008fa0 <_printf_common+0x58>
 8009010:	2301      	movs	r3, #1
 8009012:	4622      	mov	r2, r4
 8009014:	4649      	mov	r1, r9
 8009016:	4638      	mov	r0, r7
 8009018:	47c0      	blx	r8
 800901a:	3001      	adds	r0, #1
 800901c:	d0e6      	beq.n	8008fec <_printf_common+0xa4>
 800901e:	3601      	adds	r6, #1
 8009020:	e7d9      	b.n	8008fd6 <_printf_common+0x8e>
	...

08009024 <_printf_i>:
 8009024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009028:	460c      	mov	r4, r1
 800902a:	4691      	mov	r9, r2
 800902c:	7e27      	ldrb	r7, [r4, #24]
 800902e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009030:	2f78      	cmp	r7, #120	; 0x78
 8009032:	4680      	mov	r8, r0
 8009034:	469a      	mov	sl, r3
 8009036:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800903a:	d807      	bhi.n	800904c <_printf_i+0x28>
 800903c:	2f62      	cmp	r7, #98	; 0x62
 800903e:	d80a      	bhi.n	8009056 <_printf_i+0x32>
 8009040:	2f00      	cmp	r7, #0
 8009042:	f000 80d8 	beq.w	80091f6 <_printf_i+0x1d2>
 8009046:	2f58      	cmp	r7, #88	; 0x58
 8009048:	f000 80a3 	beq.w	8009192 <_printf_i+0x16e>
 800904c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009050:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009054:	e03a      	b.n	80090cc <_printf_i+0xa8>
 8009056:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800905a:	2b15      	cmp	r3, #21
 800905c:	d8f6      	bhi.n	800904c <_printf_i+0x28>
 800905e:	a001      	add	r0, pc, #4	; (adr r0, 8009064 <_printf_i+0x40>)
 8009060:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009064:	080090bd 	.word	0x080090bd
 8009068:	080090d1 	.word	0x080090d1
 800906c:	0800904d 	.word	0x0800904d
 8009070:	0800904d 	.word	0x0800904d
 8009074:	0800904d 	.word	0x0800904d
 8009078:	0800904d 	.word	0x0800904d
 800907c:	080090d1 	.word	0x080090d1
 8009080:	0800904d 	.word	0x0800904d
 8009084:	0800904d 	.word	0x0800904d
 8009088:	0800904d 	.word	0x0800904d
 800908c:	0800904d 	.word	0x0800904d
 8009090:	080091dd 	.word	0x080091dd
 8009094:	08009101 	.word	0x08009101
 8009098:	080091bf 	.word	0x080091bf
 800909c:	0800904d 	.word	0x0800904d
 80090a0:	0800904d 	.word	0x0800904d
 80090a4:	080091ff 	.word	0x080091ff
 80090a8:	0800904d 	.word	0x0800904d
 80090ac:	08009101 	.word	0x08009101
 80090b0:	0800904d 	.word	0x0800904d
 80090b4:	0800904d 	.word	0x0800904d
 80090b8:	080091c7 	.word	0x080091c7
 80090bc:	680b      	ldr	r3, [r1, #0]
 80090be:	1d1a      	adds	r2, r3, #4
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	600a      	str	r2, [r1, #0]
 80090c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80090c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090cc:	2301      	movs	r3, #1
 80090ce:	e0a3      	b.n	8009218 <_printf_i+0x1f4>
 80090d0:	6825      	ldr	r5, [r4, #0]
 80090d2:	6808      	ldr	r0, [r1, #0]
 80090d4:	062e      	lsls	r6, r5, #24
 80090d6:	f100 0304 	add.w	r3, r0, #4
 80090da:	d50a      	bpl.n	80090f2 <_printf_i+0xce>
 80090dc:	6805      	ldr	r5, [r0, #0]
 80090de:	600b      	str	r3, [r1, #0]
 80090e0:	2d00      	cmp	r5, #0
 80090e2:	da03      	bge.n	80090ec <_printf_i+0xc8>
 80090e4:	232d      	movs	r3, #45	; 0x2d
 80090e6:	426d      	negs	r5, r5
 80090e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090ec:	485e      	ldr	r0, [pc, #376]	; (8009268 <_printf_i+0x244>)
 80090ee:	230a      	movs	r3, #10
 80090f0:	e019      	b.n	8009126 <_printf_i+0x102>
 80090f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80090f6:	6805      	ldr	r5, [r0, #0]
 80090f8:	600b      	str	r3, [r1, #0]
 80090fa:	bf18      	it	ne
 80090fc:	b22d      	sxthne	r5, r5
 80090fe:	e7ef      	b.n	80090e0 <_printf_i+0xbc>
 8009100:	680b      	ldr	r3, [r1, #0]
 8009102:	6825      	ldr	r5, [r4, #0]
 8009104:	1d18      	adds	r0, r3, #4
 8009106:	6008      	str	r0, [r1, #0]
 8009108:	0628      	lsls	r0, r5, #24
 800910a:	d501      	bpl.n	8009110 <_printf_i+0xec>
 800910c:	681d      	ldr	r5, [r3, #0]
 800910e:	e002      	b.n	8009116 <_printf_i+0xf2>
 8009110:	0669      	lsls	r1, r5, #25
 8009112:	d5fb      	bpl.n	800910c <_printf_i+0xe8>
 8009114:	881d      	ldrh	r5, [r3, #0]
 8009116:	4854      	ldr	r0, [pc, #336]	; (8009268 <_printf_i+0x244>)
 8009118:	2f6f      	cmp	r7, #111	; 0x6f
 800911a:	bf0c      	ite	eq
 800911c:	2308      	moveq	r3, #8
 800911e:	230a      	movne	r3, #10
 8009120:	2100      	movs	r1, #0
 8009122:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009126:	6866      	ldr	r6, [r4, #4]
 8009128:	60a6      	str	r6, [r4, #8]
 800912a:	2e00      	cmp	r6, #0
 800912c:	bfa2      	ittt	ge
 800912e:	6821      	ldrge	r1, [r4, #0]
 8009130:	f021 0104 	bicge.w	r1, r1, #4
 8009134:	6021      	strge	r1, [r4, #0]
 8009136:	b90d      	cbnz	r5, 800913c <_printf_i+0x118>
 8009138:	2e00      	cmp	r6, #0
 800913a:	d04d      	beq.n	80091d8 <_printf_i+0x1b4>
 800913c:	4616      	mov	r6, r2
 800913e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009142:	fb03 5711 	mls	r7, r3, r1, r5
 8009146:	5dc7      	ldrb	r7, [r0, r7]
 8009148:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800914c:	462f      	mov	r7, r5
 800914e:	42bb      	cmp	r3, r7
 8009150:	460d      	mov	r5, r1
 8009152:	d9f4      	bls.n	800913e <_printf_i+0x11a>
 8009154:	2b08      	cmp	r3, #8
 8009156:	d10b      	bne.n	8009170 <_printf_i+0x14c>
 8009158:	6823      	ldr	r3, [r4, #0]
 800915a:	07df      	lsls	r7, r3, #31
 800915c:	d508      	bpl.n	8009170 <_printf_i+0x14c>
 800915e:	6923      	ldr	r3, [r4, #16]
 8009160:	6861      	ldr	r1, [r4, #4]
 8009162:	4299      	cmp	r1, r3
 8009164:	bfde      	ittt	le
 8009166:	2330      	movle	r3, #48	; 0x30
 8009168:	f806 3c01 	strble.w	r3, [r6, #-1]
 800916c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009170:	1b92      	subs	r2, r2, r6
 8009172:	6122      	str	r2, [r4, #16]
 8009174:	f8cd a000 	str.w	sl, [sp]
 8009178:	464b      	mov	r3, r9
 800917a:	aa03      	add	r2, sp, #12
 800917c:	4621      	mov	r1, r4
 800917e:	4640      	mov	r0, r8
 8009180:	f7ff fee2 	bl	8008f48 <_printf_common>
 8009184:	3001      	adds	r0, #1
 8009186:	d14c      	bne.n	8009222 <_printf_i+0x1fe>
 8009188:	f04f 30ff 	mov.w	r0, #4294967295
 800918c:	b004      	add	sp, #16
 800918e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009192:	4835      	ldr	r0, [pc, #212]	; (8009268 <_printf_i+0x244>)
 8009194:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009198:	6823      	ldr	r3, [r4, #0]
 800919a:	680e      	ldr	r6, [r1, #0]
 800919c:	061f      	lsls	r7, r3, #24
 800919e:	f856 5b04 	ldr.w	r5, [r6], #4
 80091a2:	600e      	str	r6, [r1, #0]
 80091a4:	d514      	bpl.n	80091d0 <_printf_i+0x1ac>
 80091a6:	07d9      	lsls	r1, r3, #31
 80091a8:	bf44      	itt	mi
 80091aa:	f043 0320 	orrmi.w	r3, r3, #32
 80091ae:	6023      	strmi	r3, [r4, #0]
 80091b0:	b91d      	cbnz	r5, 80091ba <_printf_i+0x196>
 80091b2:	6823      	ldr	r3, [r4, #0]
 80091b4:	f023 0320 	bic.w	r3, r3, #32
 80091b8:	6023      	str	r3, [r4, #0]
 80091ba:	2310      	movs	r3, #16
 80091bc:	e7b0      	b.n	8009120 <_printf_i+0xfc>
 80091be:	6823      	ldr	r3, [r4, #0]
 80091c0:	f043 0320 	orr.w	r3, r3, #32
 80091c4:	6023      	str	r3, [r4, #0]
 80091c6:	2378      	movs	r3, #120	; 0x78
 80091c8:	4828      	ldr	r0, [pc, #160]	; (800926c <_printf_i+0x248>)
 80091ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80091ce:	e7e3      	b.n	8009198 <_printf_i+0x174>
 80091d0:	065e      	lsls	r6, r3, #25
 80091d2:	bf48      	it	mi
 80091d4:	b2ad      	uxthmi	r5, r5
 80091d6:	e7e6      	b.n	80091a6 <_printf_i+0x182>
 80091d8:	4616      	mov	r6, r2
 80091da:	e7bb      	b.n	8009154 <_printf_i+0x130>
 80091dc:	680b      	ldr	r3, [r1, #0]
 80091de:	6826      	ldr	r6, [r4, #0]
 80091e0:	6960      	ldr	r0, [r4, #20]
 80091e2:	1d1d      	adds	r5, r3, #4
 80091e4:	600d      	str	r5, [r1, #0]
 80091e6:	0635      	lsls	r5, r6, #24
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	d501      	bpl.n	80091f0 <_printf_i+0x1cc>
 80091ec:	6018      	str	r0, [r3, #0]
 80091ee:	e002      	b.n	80091f6 <_printf_i+0x1d2>
 80091f0:	0671      	lsls	r1, r6, #25
 80091f2:	d5fb      	bpl.n	80091ec <_printf_i+0x1c8>
 80091f4:	8018      	strh	r0, [r3, #0]
 80091f6:	2300      	movs	r3, #0
 80091f8:	6123      	str	r3, [r4, #16]
 80091fa:	4616      	mov	r6, r2
 80091fc:	e7ba      	b.n	8009174 <_printf_i+0x150>
 80091fe:	680b      	ldr	r3, [r1, #0]
 8009200:	1d1a      	adds	r2, r3, #4
 8009202:	600a      	str	r2, [r1, #0]
 8009204:	681e      	ldr	r6, [r3, #0]
 8009206:	6862      	ldr	r2, [r4, #4]
 8009208:	2100      	movs	r1, #0
 800920a:	4630      	mov	r0, r6
 800920c:	f7f6 ffe8 	bl	80001e0 <memchr>
 8009210:	b108      	cbz	r0, 8009216 <_printf_i+0x1f2>
 8009212:	1b80      	subs	r0, r0, r6
 8009214:	6060      	str	r0, [r4, #4]
 8009216:	6863      	ldr	r3, [r4, #4]
 8009218:	6123      	str	r3, [r4, #16]
 800921a:	2300      	movs	r3, #0
 800921c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009220:	e7a8      	b.n	8009174 <_printf_i+0x150>
 8009222:	6923      	ldr	r3, [r4, #16]
 8009224:	4632      	mov	r2, r6
 8009226:	4649      	mov	r1, r9
 8009228:	4640      	mov	r0, r8
 800922a:	47d0      	blx	sl
 800922c:	3001      	adds	r0, #1
 800922e:	d0ab      	beq.n	8009188 <_printf_i+0x164>
 8009230:	6823      	ldr	r3, [r4, #0]
 8009232:	079b      	lsls	r3, r3, #30
 8009234:	d413      	bmi.n	800925e <_printf_i+0x23a>
 8009236:	68e0      	ldr	r0, [r4, #12]
 8009238:	9b03      	ldr	r3, [sp, #12]
 800923a:	4298      	cmp	r0, r3
 800923c:	bfb8      	it	lt
 800923e:	4618      	movlt	r0, r3
 8009240:	e7a4      	b.n	800918c <_printf_i+0x168>
 8009242:	2301      	movs	r3, #1
 8009244:	4632      	mov	r2, r6
 8009246:	4649      	mov	r1, r9
 8009248:	4640      	mov	r0, r8
 800924a:	47d0      	blx	sl
 800924c:	3001      	adds	r0, #1
 800924e:	d09b      	beq.n	8009188 <_printf_i+0x164>
 8009250:	3501      	adds	r5, #1
 8009252:	68e3      	ldr	r3, [r4, #12]
 8009254:	9903      	ldr	r1, [sp, #12]
 8009256:	1a5b      	subs	r3, r3, r1
 8009258:	42ab      	cmp	r3, r5
 800925a:	dcf2      	bgt.n	8009242 <_printf_i+0x21e>
 800925c:	e7eb      	b.n	8009236 <_printf_i+0x212>
 800925e:	2500      	movs	r5, #0
 8009260:	f104 0619 	add.w	r6, r4, #25
 8009264:	e7f5      	b.n	8009252 <_printf_i+0x22e>
 8009266:	bf00      	nop
 8009268:	080094c5 	.word	0x080094c5
 800926c:	080094d6 	.word	0x080094d6

08009270 <__retarget_lock_acquire_recursive>:
 8009270:	4770      	bx	lr

08009272 <__retarget_lock_release_recursive>:
 8009272:	4770      	bx	lr

08009274 <memcpy>:
 8009274:	440a      	add	r2, r1
 8009276:	4291      	cmp	r1, r2
 8009278:	f100 33ff 	add.w	r3, r0, #4294967295
 800927c:	d100      	bne.n	8009280 <memcpy+0xc>
 800927e:	4770      	bx	lr
 8009280:	b510      	push	{r4, lr}
 8009282:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009286:	f803 4f01 	strb.w	r4, [r3, #1]!
 800928a:	4291      	cmp	r1, r2
 800928c:	d1f9      	bne.n	8009282 <memcpy+0xe>
 800928e:	bd10      	pop	{r4, pc}

08009290 <memmove>:
 8009290:	4288      	cmp	r0, r1
 8009292:	b510      	push	{r4, lr}
 8009294:	eb01 0402 	add.w	r4, r1, r2
 8009298:	d902      	bls.n	80092a0 <memmove+0x10>
 800929a:	4284      	cmp	r4, r0
 800929c:	4623      	mov	r3, r4
 800929e:	d807      	bhi.n	80092b0 <memmove+0x20>
 80092a0:	1e43      	subs	r3, r0, #1
 80092a2:	42a1      	cmp	r1, r4
 80092a4:	d008      	beq.n	80092b8 <memmove+0x28>
 80092a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092ae:	e7f8      	b.n	80092a2 <memmove+0x12>
 80092b0:	4402      	add	r2, r0
 80092b2:	4601      	mov	r1, r0
 80092b4:	428a      	cmp	r2, r1
 80092b6:	d100      	bne.n	80092ba <memmove+0x2a>
 80092b8:	bd10      	pop	{r4, pc}
 80092ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092c2:	e7f7      	b.n	80092b4 <memmove+0x24>

080092c4 <_realloc_r>:
 80092c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c6:	4607      	mov	r7, r0
 80092c8:	4614      	mov	r4, r2
 80092ca:	460e      	mov	r6, r1
 80092cc:	b921      	cbnz	r1, 80092d8 <_realloc_r+0x14>
 80092ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80092d2:	4611      	mov	r1, r2
 80092d4:	f7ff bc2e 	b.w	8008b34 <_malloc_r>
 80092d8:	b922      	cbnz	r2, 80092e4 <_realloc_r+0x20>
 80092da:	f7ff fbdb 	bl	8008a94 <_free_r>
 80092de:	4625      	mov	r5, r4
 80092e0:	4628      	mov	r0, r5
 80092e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092e4:	f000 f814 	bl	8009310 <_malloc_usable_size_r>
 80092e8:	42a0      	cmp	r0, r4
 80092ea:	d20f      	bcs.n	800930c <_realloc_r+0x48>
 80092ec:	4621      	mov	r1, r4
 80092ee:	4638      	mov	r0, r7
 80092f0:	f7ff fc20 	bl	8008b34 <_malloc_r>
 80092f4:	4605      	mov	r5, r0
 80092f6:	2800      	cmp	r0, #0
 80092f8:	d0f2      	beq.n	80092e0 <_realloc_r+0x1c>
 80092fa:	4631      	mov	r1, r6
 80092fc:	4622      	mov	r2, r4
 80092fe:	f7ff ffb9 	bl	8009274 <memcpy>
 8009302:	4631      	mov	r1, r6
 8009304:	4638      	mov	r0, r7
 8009306:	f7ff fbc5 	bl	8008a94 <_free_r>
 800930a:	e7e9      	b.n	80092e0 <_realloc_r+0x1c>
 800930c:	4635      	mov	r5, r6
 800930e:	e7e7      	b.n	80092e0 <_realloc_r+0x1c>

08009310 <_malloc_usable_size_r>:
 8009310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009314:	1f18      	subs	r0, r3, #4
 8009316:	2b00      	cmp	r3, #0
 8009318:	bfbc      	itt	lt
 800931a:	580b      	ldrlt	r3, [r1, r0]
 800931c:	18c0      	addlt	r0, r0, r3
 800931e:	4770      	bx	lr

08009320 <_init>:
 8009320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009322:	bf00      	nop
 8009324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009326:	bc08      	pop	{r3}
 8009328:	469e      	mov	lr, r3
 800932a:	4770      	bx	lr

0800932c <_fini>:
 800932c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800932e:	bf00      	nop
 8009330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009332:	bc08      	pop	{r3}
 8009334:	469e      	mov	lr, r3
 8009336:	4770      	bx	lr
